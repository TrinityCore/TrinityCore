/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Hw2TWorld_H
#define Hw2TWorld_H

#include <thrift/TDispatchProcessor.h>
#include "trinity_types.h"



class Hw2TWorldIf {
 public:
  virtual ~Hw2TWorldIf() {}
  virtual void SendWorldText(const int32_t string_id) = 0;
};

class Hw2TWorldIfFactory {
 public:
  typedef Hw2TWorldIf Handler;

  virtual ~Hw2TWorldIfFactory() {}

  virtual Hw2TWorldIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(Hw2TWorldIf* /* handler */) = 0;
};

class Hw2TWorldIfSingletonFactory : virtual public Hw2TWorldIfFactory {
 public:
  Hw2TWorldIfSingletonFactory(const boost::shared_ptr<Hw2TWorldIf>& iface) : iface_(iface) {}
  virtual ~Hw2TWorldIfSingletonFactory() {}

  virtual Hw2TWorldIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(Hw2TWorldIf* /* handler */) {}

 protected:
  boost::shared_ptr<Hw2TWorldIf> iface_;
};

class Hw2TWorldNull : virtual public Hw2TWorldIf {
 public:
  virtual ~Hw2TWorldNull() {}
  void SendWorldText(const int32_t /* string_id */) {
    return;
  }
};

typedef struct _Hw2TWorld_SendWorldText_args__isset {
  _Hw2TWorld_SendWorldText_args__isset() : string_id(false) {}
  bool string_id;
} _Hw2TWorld_SendWorldText_args__isset;

class Hw2TWorld_SendWorldText_args {
 public:

  Hw2TWorld_SendWorldText_args() : string_id(0) {
  }

  virtual ~Hw2TWorld_SendWorldText_args() throw() {}

  int32_t string_id;

  _Hw2TWorld_SendWorldText_args__isset __isset;

  void __set_string_id(const int32_t val) {
    string_id = val;
  }

  bool operator == (const Hw2TWorld_SendWorldText_args & rhs) const
  {
    if (!(string_id == rhs.string_id))
      return false;
    return true;
  }
  bool operator != (const Hw2TWorld_SendWorldText_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Hw2TWorld_SendWorldText_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Hw2TWorld_SendWorldText_pargs {
 public:


  virtual ~Hw2TWorld_SendWorldText_pargs() throw() {}

  const int32_t* string_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Hw2TWorld_SendWorldText_result {
 public:

  Hw2TWorld_SendWorldText_result() {
  }

  virtual ~Hw2TWorld_SendWorldText_result() throw() {}


  bool operator == (const Hw2TWorld_SendWorldText_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Hw2TWorld_SendWorldText_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Hw2TWorld_SendWorldText_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Hw2TWorld_SendWorldText_presult {
 public:


  virtual ~Hw2TWorld_SendWorldText_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class Hw2TWorldClient : virtual public Hw2TWorldIf {
 public:
  Hw2TWorldClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  Hw2TWorldClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void SendWorldText(const int32_t string_id);
  void send_SendWorldText(const int32_t string_id);
  void recv_SendWorldText();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class Hw2TWorldProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<Hw2TWorldIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (Hw2TWorldProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_SendWorldText(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  Hw2TWorldProcessor(boost::shared_ptr<Hw2TWorldIf> iface) :
    iface_(iface) {
    processMap_["SendWorldText"] = &Hw2TWorldProcessor::process_SendWorldText;
  }

  virtual ~Hw2TWorldProcessor() {}
};

class Hw2TWorldProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  Hw2TWorldProcessorFactory(const ::boost::shared_ptr< Hw2TWorldIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< Hw2TWorldIfFactory > handlerFactory_;
};

class Hw2TWorldMultiface : virtual public Hw2TWorldIf {
 public:
  Hw2TWorldMultiface(std::vector<boost::shared_ptr<Hw2TWorldIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~Hw2TWorldMultiface() {}
 protected:
  std::vector<boost::shared_ptr<Hw2TWorldIf> > ifaces_;
  Hw2TWorldMultiface() {}
  void add(boost::shared_ptr<Hw2TWorldIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void SendWorldText(const int32_t string_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SendWorldText(string_id);
    }
    ifaces_[i]->SendWorldText(string_id);
  }

};



#endif
