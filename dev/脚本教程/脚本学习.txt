From:https://uiwow.com/thread-8667-1-1.html?_dsign=19ba636a
通过源码和SQL自定义BOSS（篇一：技能篇）
教程以Trinity为例，示范如何通过编辑源码和SQL数据库实现自定义BOSS施放技能、召唤怪物、阶段和剧情文本四个功能。本篇为篇一：技能篇
首先来看看与此相关的boss源码模板：
#include "ScriptPCH.h"

enum Spells
{
};

enum Events
{
};

class example : public CreatureScript
{
    public:
        example() : CreatureScript("example") { }

        struct exampleAI : public BossAI
        {
            exampleAI(Creature* creature) : BossAI(creature, 0)
            {
            }

            void Reset() OVERRIDE
            {
                _Reset();
            }

下面开始进行编辑修改
步骤1
在上面boss源码模板里找到下列代码，准备添加自定义技能

enum Spells
{
};

这里添加三个技能：闪电箭、治疗波、火焰冲击，注意：前缀“SPELL_”不是必须的，只是为了方便后续查找修改

enum Spells
{
    SPELL_LIGHTNINGBOLT = 403, 
    SPELL_HEALINGWAVE = 331,
    SPELL_FLAMESHOCK = 8050,
};


步骤2
在boss源码模板里找到下列代码，准备添加自定义事件

enum Events
{
};

这里添加三个事件并编号，分别对应步骤1自定义的三个技能。后面会根据事件编号进行切换，下文会说。

enum Events
{
    EVENT_LIGHTNINGBOLT = 1,
    EVENT_HEALINGWAVE = 2,
    EVENT_FLAMESHOCK = 3,
};

注意，前缀“EVENT_”不是必须的，这里也是为了方便后续查找修改，事件编号最好按照你想要的先后顺序按照数字大小排列。

在boss源码模板里找到代码“void EnterCombat”

void EnterCombat(Unit* /*who*/) OVERRIDE
{
}


下面自定义战斗开始后事件发生的间隔时间，注意时间单位是毫秒，1000ms=1s

void EnterCombat(Unit* /*who*/) OVERRIDE
{
                        events.ScheduleEvent(EVENT_LIGHTNINGBOLT, 8000);
                events.ScheduleEvent(EVENT_HEALINGWAVE, 12000);
                events.ScheduleEvent(EVENT_FLAMESHOCK , 10000);
}


步骤3

while (uint32 eventId = events.ExecuteEvent())
{
    switch (eventId)
    {
        default:
            break;
    }
}

按照我们步骤2自定义添加的三个事件，应该如下

while (uint32 eventId = events.ExecuteEvent())
{
    switch (eventId)
    {
        case EVENT_LIGHTNINGBOLT:
            break;
        case EVENT_HEALINGWAVE:
            break;
        case EVENT_FLAMESHOCK:
            break;
        default:
            break;
    }
}

只有事件ID，这样执行是没效果的，我们接着完善，如下所示

while (uint32 eventId = events.ExecuteEvent())
{
    switch (eventId)
    {
        case EVENT_LIGHTNINGBOLT:
            DoCastVictim(SPELL_LIGHTNINGBOLT);
            events.ScheduleEvent(EVENT_LIGHTNINGBOLT, 8000);
            break;
        case EVENT_HEALINGWAVE:
            DoCast(me, SPELL_HEALINGWAVE);
            events.ScheduleEvent(EVENT_HEALINGWAVE, 12000);
            break;
        case EVENT_FLAMESHOCK:
            if (Unit *target = SelectTarget(SELECT_TARGET_RANDOM, 0))
                DoCast(target, SPELL_FLAMESHOCK);
            events.ScheduleEvent(EVENT_FLAMESHOCK, 10000);
            break;
        default:
            break;
    }
}

boss在满足技能施放要求时就会按照设定的事件发生的间隔时间重复发动技能。

需要说明的是关于事件3“火焰冲击”的说明，如下

if (Unit *target = SelectTarget(SELECT_TARGET_RANDOM, [pre]0[/pre]))
    DoCast(target, SPELL_FLAMESHOCK);
events.ScheduleEvent(EVENT_FLAMESHOCK , 10000);

高亮标出的数字代表随机玩家的分组类别，0就是任意随机，具体如下
(SELECT_TARGET_RANDOM, 0)    //任意随机玩家
(SELECT_TARGET_RANDOM, 1)    //与boss距离近的随机玩家
(SELECT_TARGET_RANDOM, 2)    //与boss距离中等的随机玩家
(SELECT_TARGET_RANDOM, 3)    //与boss距离远的随机玩家
(SELECT_TARGET_RANDOM, 4)    //有魔法值的随机玩家
(SELECT_TARGET_RANDOM, 5)    //有怒气值的随机玩家
(SELECT_TARGET_RANDOM, 6)    //有能量值的随机玩家

OK 至此，通过源码自定义BOSS技能就完成了.




















From:https://uiwow.com/thread-8670-1-1.html?_dsign=fe080743
通过源码和SQL自定义BOSS（篇二：召唤篇）
教程以Trinity为例，示范如何通过编辑源码和SQL数据库实现自定义BOSS施放技能、召唤怪物、阶段和剧情文本四个功能。本篇为篇二：召唤篇   
已发布的其他篇传送门（每篇教程相互独立，可以单独浏览某一篇教程）：
篇一：BOSS技能篇

下面开始：

首先来看看与此相关的boss源码模板：
#include "ScriptPCH.h"

enum Spells
{
};

enum Events
{
};

class example : public CreatureScript
{
    public:
        example() : CreatureScript("example") { }

        struct exampleAI : public BossAI
        {
            exampleAI(Creature* creature) : BossAI(creature, 0)
            {
            }

            void Reset() OVERRIDE
            {
                _Reset();
            }
                        
            void EnterCombat(Unit* /*who*/) OVERRIDE
            {
            }
                        
            void KilledUnit(Unit * /*victim*/) OVERRIDE
            {
            }
                        
            void JustDied(Unit * /*victim*/) OVERRIDE
            {
            }

            void UpdateAI(uint32 diff) OVERRIDE
            {
                if (!UpdateVictim())
                    return;
                                        
                events.Update(diff);

                if (me->HasUnitState(UNIT_STATE_CASTING))
                    return;
                                        
                while (uint32 eventId = events.ExecuteEvent())
                {
                    switch (eventId)
                    {
                        default:
                            break;
                    }
                }
                                
                DoMeleeAttackIfReady();
            }
        };

        CreatureAI* GetAI(Creature* creature) const OVERRIDE
        {
            return new exampleAI(creature);
        }
};

void AddSC_example()
{
        new example();
}

下面开始编辑修改
步骤1
在上面boss源码模板里找到下列代码，准备添加自定义事件
enum Events
{
};

这里添加一个召唤npc生物的事件，并进行编号，如下所示
enum Events
{
    EVENT_SPAWNCREATURE = 1
};

步骤2
在boss源码模板里找到代码“void EnterCombat”

void EnterCombat(Unit* /*who*/) OVERRIDE
{
}

然后给这个事件设置循环发生的时间间隔，注意：
（1）事件名称的前缀“EVENT_”不是必须的，只是方便后面查找修改
（2）时间单位是毫秒，1000ms=1s
具体如下

void EnterCombat(Unit* /*who*/) OVERRIDE
{
    events.ScheduleEvent(EVENT_SPAWNCREATURE, 25000)
}

步骤3
在boss源码模板里找到下列代码
while (uint32 eventId = events.ExecuteEvent())
{
    switch (eventId)
    {
        default:
            break;
    }
}

按照步骤2添加的召唤npc生物事件，填充进模板如下
while (uint32 eventId = events.ExecuteEvent())
{
    switch (eventId)
    {
        case EVENT_SPAWNCREATURE:
        events.ScheduleEvent(EVENT_SPAWNCREATURE, 25000);
            break;
        default:
            break;
    }
}

因为是召唤npc生物，所以还需要设置召唤物生成的坐标、召唤者脱离战斗后多久解散，因此增加代码如下
while (uint32 eventId = events.ExecuteEvent())
{
    switch (eventId)
    {case EVENT_SPAWNCREATURE:
    me->SummonCreature(NPCID, xf, yf, zf, of, TEMPSUMMON_TIMED_DESPAWN_OUT_OF_COMBAT, 5000);
    events.ScheduleEvent(EVENT_SPAWNCREATURE, 25000);
    break;
default:
            break;
    }
}

这里假设召唤npc生物的ID为1123，召唤生成位置的坐标为（-512.42f, 1234.56f, 56.21f, 2.1f），召唤者脱离战斗5秒后消失。注意：坐标值后面的“f”不要删除改动，将相应代码完善如下
me->SummonCreature(1234, -512.42f, 1234.56f, 56.21f, 2.1f, TEMPSUMMON_TIMED_DESPAWN_OUT_OF_COMBAT, 5000);
这里列一下解散召唤物的其他可用指令
TEMPSUMMON_TIMED_OR_DEAD_DESPAWN                    //达到设置的限定时间或召唤者消失的情况下
TEMPSUMMON_TIMED_OR_CORPSE_DESPAWN                  //达到设置的限定时间或召唤者死亡的情况下
TEMPSUMMON_TIMED_DESPAWN                            //达到设置的限定时间后
TEMPSUMMON_TIMED_DESPAWN_OUT_OF_COMBAT              //达到设置的召唤物脱离战斗后的限定时间
TEMPSUMMON_CORPSE_DESPAWN                           //召唤物死亡后立即解散
TEMPSUMMON_CORPSE_TIMED_DESPAWN                     //达到设置的召唤物死亡后的限定时间
TEMPSUMMON_DEAD_DESPAWN                             //当召唤物消失时立即解散
TEMPSUMMON_MANUAL_DESPAWN                           //当其他UnSummon()指令被调用时
注意：如果你选择非时间限制的解散召唤物条件，在套用步骤3的示例模板时，要把最后的数字去掉，如下
me->SummonCreature(1234, -512.42f, 1234.56f, 56.21f, 2.1f, TEMPSUMMON_DEAD_DESPAWN);

OK 至此，源码自定义BOSS召唤npc生物就完成了，完整代码是这样的：


篇二：召唤篇 结束
下一个教程预告：篇三：BOSS阶段篇


//https://uiwow.com/thread-8689-1-3.html?_dsign=c042525c
//篇三：BOSS阶段篇

教程以Trinity为例，示范如何通过编辑源码和SQL数据库实现自定义BOSS施放技能、召唤怪物、阶段和剧情文本四个功能。本篇为篇三：BOSS阶段篇

已发布的其他篇传送门（每篇教程相互独立，可以单独浏览某一篇教程）：
篇一：BOSS技能篇

篇二：召唤篇
(这两篇就是上面那两个)
下面开始

本篇将根据BOSS血量状态转换阶段，先来看看与BOSS阶段相关的源码模板：


#include "ScriptPCH.h"
enum Spells
{
};

enum Events
{
};

enum Phases
{
};

class example : public CreatureScript
{
    public:
        example() : CreatureScript("example") { }

        struct exampleAI : public BossAI
        {
            exampleAI(Creature* creature) : BossAI(creature, 0)
            {
            }

            void Reset() OVERRIDE
            {
                _Reset();
            }

            void EnterCombat(Unit* /*who*/) OVERRIDE
            {
            }

            void KilledUnit(Unit * /*victim*/) OVERRIDE
            {
            }

            void JustDied(Unit * /*victim*/) OVERRIDE
            {
            }

            void UpdateAI(uint32 diff) OVERRIDE
            {
                if (!UpdateVictim())
                    return;

                events.Update(diff);

                if (me->HasUnitState(UNIT_STATE_CASTING))
                    return;

                while (uint32 eventId = events.ExecuteEvent())
                {
                    switch (eventId)
                    {
                        default:
                            break;
                    }
                }

                DoMeleeAttackIfReady();
            }
        };

        CreatureAI* GetAI(Creature* creature) const OVERRIDE
        {
            return new exampleAI(creature);
        }
};

void AddSC_example()
{
        new example();
}


下面开始编辑修改
步骤1
在上面的源码模板里找到以下代码，准备添加自定义阶段

enum Phases
{
};

这里自定义2个阶段，顺序编号为1、2

enum Phases
{
    PHASE_ONE = 1,
    PHASE_TWO = 2,
};


步骤2
在源码模板里找到字段“EnterCombat”所在语句块，我们通过添加事件将阶段1作为BOSS战的起始阶段，如下所示


void EnterCombat(Unit* /*who*/) OVERRIDE
{
    events.SetPhase(PHASE_ONE);
}

步骤3
在源码模板里找到字段“void UpdateAI”所在语句块，设定如下：当处于阶段1的boss血量降到75%以下时进入阶段2，代码如下
void UpdateAI(uint32 diff) OVERRIDE
{
    if (!UpdateVictim())
        return;
                                        
    events.Update(diff);

    if (me->HasUnitState(UNIT_STATE_CASTING))
        return;
        
    if (events.IsInPhase(PHASE_ONE) && HealthBelowPct(75))
    {
        events.SetPhase(PHASE_TWO);
    }
    while (uint32 eventId = events.ExecuteEvent())
    {
        switch (eventId)
        {
            default:
                break;
        }
    }
                                
    DoMeleeAttackIfReady();
}


以上就完成了BOSS的阶段转换，不过…是不是感觉少了点啥 BOSS转换阶段后应该有些变化，比如会施放阶段专属的技能，那我们就为boss加几个阶段技能吧

步骤4
（1）回到刚刚步骤1 找到字段“EnterCombat”所在的语句块，我们给阶段1的boss加两个技能，这个步骤是不是有点似曾相识，没错，这就是篇一：BOSS技能篇的内容，不熟悉的可以去看一下，我们继续

void EnterCombat(Unit* /*who*/) OVERRIDE
{
    events.SetPhase(PHASE_ONE);
    events.ScheduleEvent(EVENT_LIGHTNINGBOLT, 8000, 0, PHASE_ONE);
    events.ScheduleEvent(EVENT_HEALINGWAVE, 12000, 0, PHASE_ONE);
}

仔细看是不是和篇一：BOSS技能篇里的又不太一样，对，因为多了“0, PHASE_ONE”这两个参数变量，作用是这两个施放技能的事件只会在阶段1生效

（2）我们给阶段2的boss也加两个技能，回到刚刚步骤3的源码模板，找到“events.SetPhase(PHASE_TWO)”这行代码，在它下一行新增两行代码，如下所示

if (events.IsInPhase(PHASE_ONE) && HealthBelowPct(75))
{
    events.SetPhase(PHASE_TWO);
    events.ScheduleEvent(EVENT_FLAMESHOCK, 10000, 0, PHASE_TWO);
    events.ScheduleEvent(EVENT_SPAWNCREATURE, 25000, 0, PHASE_TWO);
}

这样，BOSS进入第二阶段就会施放火焰冲击和召唤怪物啦

OK 至此，通过源码自定义BOSS阶段就大功告成了.

篇三：BOSS阶段篇 结束

下一个教程预告
篇四：BOSS剧情文本



