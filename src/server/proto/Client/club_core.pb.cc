// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: club_core.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "club_core.pb.h"

#include <algorithm>
#include <utility>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
#include "Log.h"
// @@protoc_insertion_point(includes)

namespace bgs {
namespace protocol {
namespace club {
namespace v1 {

namespace {

const ::google::protobuf::Descriptor* AvatarId_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AvatarId_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetBroadcastOptions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetBroadcastOptions_reflection_ = NULL;
const ::google::protobuf::Descriptor* Broadcast_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Broadcast_reflection_ = NULL;
const ::google::protobuf::Descriptor* UniqueClubType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UniqueClubType_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClubCreateOptions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClubCreateOptions_reflection_ = NULL;
const ::google::protobuf::Descriptor* Club_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Club_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClubDescription_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClubDescription_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClubView_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClubView_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClubStateOptions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClubStateOptions_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClubStateAssignment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClubStateAssignment_reflection_ = NULL;
const ::google::protobuf::Descriptor* StreamSettings_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StreamSettings_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClubSettings_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClubSettings_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClubSettingsOptions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClubSettingsOptions_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClubSettingsAssignment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClubSettingsAssignment_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_club_5fcore_2eproto() {
  protobuf_AddDesc_club_5fcore_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "club_core.proto");
  GOOGLE_CHECK(file != NULL);
  AvatarId_descriptor_ = file->message_type(0);
  static const int AvatarId_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarId, id_),
  };
  AvatarId_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AvatarId_descriptor_,
      AvatarId::default_instance_,
      AvatarId_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarId, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarId, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AvatarId));
  SetBroadcastOptions_descriptor_ = file->message_type(1);
  static const int SetBroadcastOptions_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetBroadcastOptions, content_),
  };
  SetBroadcastOptions_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetBroadcastOptions_descriptor_,
      SetBroadcastOptions::default_instance_,
      SetBroadcastOptions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetBroadcastOptions, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetBroadcastOptions, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetBroadcastOptions));
  Broadcast_descriptor_ = file->message_type(2);
  static const int Broadcast_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Broadcast, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Broadcast, creator_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Broadcast, creation_time_),
  };
  Broadcast_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Broadcast_descriptor_,
      Broadcast::default_instance_,
      Broadcast_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Broadcast, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Broadcast, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Broadcast));
  UniqueClubType_descriptor_ = file->message_type(3);
  static const int UniqueClubType_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UniqueClubType, program_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UniqueClubType, name_),
  };
  UniqueClubType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UniqueClubType_descriptor_,
      UniqueClubType::default_instance_,
      UniqueClubType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UniqueClubType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UniqueClubType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UniqueClubType));
  ClubCreateOptions_descriptor_ = file->message_type(4);
  static const int ClubCreateOptions_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubCreateOptions, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubCreateOptions, attribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubCreateOptions, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubCreateOptions, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubCreateOptions, avatar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubCreateOptions, privacy_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubCreateOptions, short_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubCreateOptions, member_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubCreateOptions, stream_),
  };
  ClubCreateOptions_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClubCreateOptions_descriptor_,
      ClubCreateOptions::default_instance_,
      ClubCreateOptions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubCreateOptions, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubCreateOptions, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClubCreateOptions));
  Club_descriptor_ = file->message_type(5);
  static const int Club_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Club, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Club, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Club, attribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Club, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Club, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Club, broadcast_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Club, avatar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Club, privacy_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Club, visibility_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Club, member_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Club, creation_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Club, stream_position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Club, role_set_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Club, leader_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Club, short_name_),
  };
  Club_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Club_descriptor_,
      Club::default_instance_,
      Club_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Club, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Club, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Club));
  ClubDescription_descriptor_ = file->message_type(6);
  static const int ClubDescription_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubDescription, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubDescription, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubDescription, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubDescription, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubDescription, avatar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubDescription, privacy_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubDescription, visibility_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubDescription, member_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubDescription, leader_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubDescription, creation_time_),
  };
  ClubDescription_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClubDescription_descriptor_,
      ClubDescription::default_instance_,
      ClubDescription_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubDescription, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubDescription, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClubDescription));
  ClubView_descriptor_ = file->message_type(7);
  static const int ClubView_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubView, club_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubView, marker_),
  };
  ClubView_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClubView_descriptor_,
      ClubView::default_instance_,
      ClubView_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubView, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubView, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClubView));
  ClubStateOptions_descriptor_ = file->message_type(8);
  static const int ClubStateOptions_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubStateOptions, attribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubStateOptions, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubStateOptions, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubStateOptions, broadcast_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubStateOptions, avatar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubStateOptions, privacy_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubStateOptions, stream_position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubStateOptions, short_name_),
  };
  ClubStateOptions_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClubStateOptions_descriptor_,
      ClubStateOptions::default_instance_,
      ClubStateOptions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubStateOptions, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubStateOptions, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClubStateOptions));
  ClubStateAssignment_descriptor_ = file->message_type(9);
  static const int ClubStateAssignment_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubStateAssignment, club_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubStateAssignment, attribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubStateAssignment, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubStateAssignment, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubStateAssignment, broadcast_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubStateAssignment, avatar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubStateAssignment, privacy_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubStateAssignment, stream_position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubStateAssignment, short_name_),
  };
  ClubStateAssignment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClubStateAssignment_descriptor_,
      ClubStateAssignment::default_instance_,
      ClubStateAssignment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubStateAssignment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubStateAssignment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClubStateAssignment));
  StreamSettings_descriptor_ = file->message_type(10);
  static const int StreamSettings_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamSettings, stream_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamSettings, filter_),
  };
  StreamSettings_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StreamSettings_descriptor_,
      StreamSettings::default_instance_,
      StreamSettings_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamSettings, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamSettings, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StreamSettings));
  ClubSettings_descriptor_ = file->message_type(11);
  static const int ClubSettings_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubSettings, stream_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubSettings, stream_notification_filter_all_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubSettings, attribute_),
  };
  ClubSettings_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClubSettings_descriptor_,
      ClubSettings::default_instance_,
      ClubSettings_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubSettings, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubSettings, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClubSettings));
  ClubSettingsOptions_descriptor_ = file->message_type(12);
  static const int ClubSettingsOptions_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubSettingsOptions, stream_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubSettingsOptions, settings_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubSettingsOptions, version_),
  };
  ClubSettingsOptions_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClubSettingsOptions_descriptor_,
      ClubSettingsOptions::default_instance_,
      ClubSettingsOptions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubSettingsOptions, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubSettingsOptions, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClubSettingsOptions));
  ClubSettingsAssignment_descriptor_ = file->message_type(13);
  static const int ClubSettingsAssignment_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubSettingsAssignment, stream_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubSettingsAssignment, settings_),
  };
  ClubSettingsAssignment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClubSettingsAssignment_descriptor_,
      ClubSettingsAssignment::default_instance_,
      ClubSettingsAssignment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubSettingsAssignment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubSettingsAssignment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClubSettingsAssignment));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_club_5fcore_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AvatarId_descriptor_, &AvatarId::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetBroadcastOptions_descriptor_, &SetBroadcastOptions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Broadcast_descriptor_, &Broadcast::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UniqueClubType_descriptor_, &UniqueClubType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClubCreateOptions_descriptor_, &ClubCreateOptions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Club_descriptor_, &Club::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClubDescription_descriptor_, &ClubDescription::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClubView_descriptor_, &ClubView::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClubStateOptions_descriptor_, &ClubStateOptions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClubStateAssignment_descriptor_, &ClubStateAssignment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StreamSettings_descriptor_, &StreamSettings::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClubSettings_descriptor_, &ClubSettings::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClubSettingsOptions_descriptor_, &ClubSettingsOptions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClubSettingsAssignment_descriptor_, &ClubSettingsAssignment::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_club_5fcore_2eproto() {
  delete AvatarId::default_instance_;
  delete AvatarId_reflection_;
  delete SetBroadcastOptions::default_instance_;
  delete SetBroadcastOptions_reflection_;
  delete Broadcast::default_instance_;
  delete Broadcast_reflection_;
  delete UniqueClubType::default_instance_;
  delete UniqueClubType_reflection_;
  delete ClubCreateOptions::default_instance_;
  delete ClubCreateOptions_reflection_;
  delete Club::default_instance_;
  delete Club_reflection_;
  delete ClubDescription::default_instance_;
  delete ClubDescription_reflection_;
  delete ClubView::default_instance_;
  delete ClubView_reflection_;
  delete ClubStateOptions::default_instance_;
  delete ClubStateOptions_reflection_;
  delete ClubStateAssignment::default_instance_;
  delete ClubStateAssignment_reflection_;
  delete StreamSettings::default_instance_;
  delete StreamSettings_reflection_;
  delete ClubSettings::default_instance_;
  delete ClubSettings_reflection_;
  delete ClubSettingsOptions::default_instance_;
  delete ClubSettingsOptions_reflection_;
  delete ClubSettingsAssignment::default_instance_;
  delete ClubSettingsAssignment_reflection_;
}

void protobuf_AddDesc_club_5fcore_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::bgs::protocol::club::v1::protobuf_AddDesc_club_5fenum_2eproto();
  ::bgs::protocol::club::v1::protobuf_AddDesc_club_5frole_2eproto();
  ::bgs::protocol::club::v1::protobuf_AddDesc_club_5fmember_2eproto();
  ::bgs::protocol::club::v1::protobuf_AddDesc_club_5fstream_2eproto();
  ::bgs::protocol::v2::protobuf_AddDesc_api_2fclient_2fv2_2fattribute_5ftypes_2eproto();
  ::bgs::protocol::protobuf_AddDesc_event_5fview_5ftypes_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017club_core.proto\022\024bgs.protocol.club.v1\032"
    "\017club_enum.proto\032\017club_role.proto\032\021club_"
    "member.proto\032\021club_stream.proto\032#api/cli"
    "ent/v2/attribute_types.proto\032\026event_view"
    "_types.proto\"\026\n\010AvatarId\022\n\n\002id\030\001 \001(\r\"&\n\023"
    "SetBroadcastOptions\022\017\n\007content\030\001 \001(\t\"m\n\t"
    "Broadcast\022\017\n\007content\030\001 \001(\t\0228\n\007creator\030\002 "
    "\001(\0132\'.bgs.protocol.club.v1.MemberDescrip"
    "tion\022\025\n\rcreation_time\030\003 \001(\004\"/\n\016UniqueClu"
    "bType\022\017\n\007program\030\001 \001(\007\022\014\n\004name\030\002 \001(\t\"\216\003\n"
    "\021ClubCreateOptions\0222\n\004type\030\001 \001(\0132$.bgs.p"
    "rotocol.club.v1.UniqueClubType\022-\n\tattrib"
    "ute\030\002 \003(\0132\032.bgs.protocol.v2.Attribute\022\014\n"
    "\004name\030\003 \001(\t\022\023\n\013description\030\004 \001(\t\022.\n\006avat"
    "ar\030\005 \001(\0132\036.bgs.protocol.club.v1.AvatarId"
    "\0229\n\rprivacy_level\030\006 \001(\0162\".bgs.protocol.c"
    "lub.v1.PrivacyLevel\022\022\n\nshort_name\030\007 \001(\t\022"
    "9\n\006member\030\n \001(\0132).bgs.protocol.club.v1.C"
    "reateMemberOptions\0229\n\006stream\030\013 \001(\0132).bgs"
    ".protocol.club.v1.CreateStreamOptions\"\346\004"
    "\n\004Club\022\n\n\002id\030\001 \001(\004\0222\n\004type\030\002 \001(\0132$.bgs.p"
    "rotocol.club.v1.UniqueClubType\022-\n\tattrib"
    "ute\030\003 \003(\0132\032.bgs.protocol.v2.Attribute\022\014\n"
    "\004name\030\004 \001(\t\022\023\n\013description\030\005 \001(\t\0222\n\tbroa"
    "dcast\030\006 \001(\0132\037.bgs.protocol.club.v1.Broad"
    "cast\022.\n\006avatar\030\007 \001(\0132\036.bgs.protocol.club"
    ".v1.AvatarId\0229\n\rprivacy_level\030\010 \001(\0162\".bg"
    "s.protocol.club.v1.PrivacyLevel\022\?\n\020visib"
    "ility_level\030\t \001(\0162%.bgs.protocol.club.v1"
    ".VisibilityLevel\022\024\n\014member_count\030\n \001(\r\022\025"
    "\n\rcreation_time\030\013 \001(\004\022=\n\017stream_position"
    "\030\014 \001(\0132$.bgs.protocol.club.v1.StreamPosi"
    "tion\0223\n\010role_set\030\r \001(\0132!.bgs.protocol.cl"
    "ub.v1.ClubRoleSet\0227\n\006leader\030\016 \003(\0132\'.bgs."
    "protocol.club.v1.MemberDescription\022\022\n\nsh"
    "ort_name\030\017 \001(\t\"\206\003\n\017ClubDescription\022\n\n\002id"
    "\030\001 \001(\004\0222\n\004type\030\002 \001(\0132$.bgs.protocol.club"
    ".v1.UniqueClubType\022\014\n\004name\030\003 \001(\t\022\023\n\013desc"
    "ription\030\004 \001(\t\022.\n\006avatar\030\005 \001(\0132\036.bgs.prot"
    "ocol.club.v1.AvatarId\0229\n\rprivacy_level\030\006"
    " \001(\0162\".bgs.protocol.club.v1.PrivacyLevel"
    "\022\?\n\020visibility_level\030\007 \001(\0162%.bgs.protoco"
    "l.club.v1.VisibilityLevel\022\024\n\014member_coun"
    "t\030\010 \001(\r\0227\n\006leader\030\t \003(\0132\'.bgs.protocol.c"
    "lub.v1.MemberDescription\022\025\n\rcreation_tim"
    "e\030\n \001(\004\"E\n\010ClubView\022\017\n\007club_id\030\001 \001(\004\022(\n\006"
    "marker\030\002 \001(\0132\030.bgs.protocol.ViewMarker\"\340"
    "\002\n\020ClubStateOptions\022-\n\tattribute\030\001 \003(\0132\032"
    ".bgs.protocol.v2.Attribute\022\014\n\004name\030\002 \001(\t"
    "\022\023\n\013description\030\003 \001(\t\022<\n\tbroadcast\030\004 \001(\013"
    "2).bgs.protocol.club.v1.SetBroadcastOpti"
    "ons\022.\n\006avatar\030\005 \001(\0132\036.bgs.protocol.club."
    "v1.AvatarId\0229\n\rprivacy_level\030\006 \001(\0162\".bgs"
    ".protocol.club.v1.PrivacyLevel\022=\n\017stream"
    "_position\030\007 \001(\0132$.bgs.protocol.club.v1.S"
    "treamPosition\022\022\n\nshort_name\030\010 \001(\t\"\352\002\n\023Cl"
    "ubStateAssignment\022\017\n\007club_id\030\001 \001(\004\022-\n\tat"
    "tribute\030\002 \003(\0132\032.bgs.protocol.v2.Attribut"
    "e\022\014\n\004name\030\003 \001(\t\022\023\n\013description\030\004 \001(\t\0222\n\t"
    "broadcast\030\005 \001(\0132\037.bgs.protocol.club.v1.B"
    "roadcast\022.\n\006avatar\030\006 \001(\0132\036.bgs.protocol."
    "club.v1.AvatarId\0229\n\rprivacy_level\030\007 \001(\0162"
    "\".bgs.protocol.club.v1.PrivacyLevel\022=\n\017s"
    "tream_position\030\010 \001(\0132$.bgs.protocol.club"
    ".v1.StreamPosition\022\022\n\nshort_name\030\t \001(\t\"c"
    "\n\016StreamSettings\022\021\n\tstream_id\030\001 \001(\004\022>\n\006f"
    "ilter\030\002 \001(\0162..bgs.protocol.club.v1.Strea"
    "mNotificationFilter\"\233\001\n\014ClubSettings\0224\n\006"
    "stream\030\001 \003(\0132$.bgs.protocol.club.v1.Stre"
    "amSettings\022&\n\036stream_notification_filter"
    "_all\030\002 \001(\010\022-\n\tattribute\030\003 \003(\0132\032.bgs.prot"
    "ocol.v2.Attribute\"\226\001\n\023ClubSettingsOption"
    "s\0228\n\006stream\030\001 \003(\0132$.bgs.protocol.club.v1"
    ".StreamSettingsB\002\030\001\0224\n\010settings\030\002 \001(\0132\"."
    "bgs.protocol.club.v1.ClubSettings\022\017\n\007ver"
    "sion\030\003 \001(\r\"\210\001\n\026ClubSettingsAssignment\0228\n"
    "\006stream\030\001 \003(\0132$.bgs.protocol.club.v1.Str"
    "eamSettingsB\002\030\001\0224\n\010settings\030\002 \001(\0132\".bgs."
    "protocol.club.v1.ClubSettingsB\002H\001", 3153);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "club_core.proto", &protobuf_RegisterTypes);
  AvatarId::default_instance_ = new AvatarId();
  SetBroadcastOptions::default_instance_ = new SetBroadcastOptions();
  Broadcast::default_instance_ = new Broadcast();
  UniqueClubType::default_instance_ = new UniqueClubType();
  ClubCreateOptions::default_instance_ = new ClubCreateOptions();
  Club::default_instance_ = new Club();
  ClubDescription::default_instance_ = new ClubDescription();
  ClubView::default_instance_ = new ClubView();
  ClubStateOptions::default_instance_ = new ClubStateOptions();
  ClubStateAssignment::default_instance_ = new ClubStateAssignment();
  StreamSettings::default_instance_ = new StreamSettings();
  ClubSettings::default_instance_ = new ClubSettings();
  ClubSettingsOptions::default_instance_ = new ClubSettingsOptions();
  ClubSettingsAssignment::default_instance_ = new ClubSettingsAssignment();
  AvatarId::default_instance_->InitAsDefaultInstance();
  SetBroadcastOptions::default_instance_->InitAsDefaultInstance();
  Broadcast::default_instance_->InitAsDefaultInstance();
  UniqueClubType::default_instance_->InitAsDefaultInstance();
  ClubCreateOptions::default_instance_->InitAsDefaultInstance();
  Club::default_instance_->InitAsDefaultInstance();
  ClubDescription::default_instance_->InitAsDefaultInstance();
  ClubView::default_instance_->InitAsDefaultInstance();
  ClubStateOptions::default_instance_->InitAsDefaultInstance();
  ClubStateAssignment::default_instance_->InitAsDefaultInstance();
  StreamSettings::default_instance_->InitAsDefaultInstance();
  ClubSettings::default_instance_->InitAsDefaultInstance();
  ClubSettingsOptions::default_instance_->InitAsDefaultInstance();
  ClubSettingsAssignment::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_club_5fcore_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_club_5fcore_2eproto {
  StaticDescriptorInitializer_club_5fcore_2eproto() {
    protobuf_AddDesc_club_5fcore_2eproto();
  }
} static_descriptor_initializer_club_5fcore_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int AvatarId::kIdFieldNumber;
#endif  // !_MSC_VER

AvatarId::AvatarId()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.AvatarId)
}

void AvatarId::InitAsDefaultInstance() {
}

AvatarId::AvatarId(const AvatarId& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.AvatarId)
}

void AvatarId::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AvatarId::~AvatarId() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.AvatarId)
  SharedDtor();
}

void AvatarId::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AvatarId::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AvatarId::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AvatarId_descriptor_;
}

const AvatarId& AvatarId::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_club_5fcore_2eproto();
  return *default_instance_;
}

AvatarId* AvatarId::default_instance_ = NULL;

AvatarId* AvatarId::New() const {
  return new AvatarId;
}

void AvatarId::Clear() {
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AvatarId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bgs.protocol.club.v1.AvatarId)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bgs.protocol.club.v1.AvatarId)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bgs.protocol.club.v1.AvatarId)
  return false;
#undef DO_
}

void AvatarId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bgs.protocol.club.v1.AvatarId)
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bgs.protocol.club.v1.AvatarId)
}

::google::protobuf::uint8* AvatarId::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.AvatarId)
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.AvatarId)
  return target;
}

int AvatarId::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AvatarId::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AvatarId* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AvatarId*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AvatarId::MergeFrom(const AvatarId& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AvatarId::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AvatarId::CopyFrom(const AvatarId& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AvatarId::IsInitialized() const {

  return true;
}

void AvatarId::Swap(AvatarId* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AvatarId::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AvatarId_descriptor_;
  metadata.reflection = AvatarId_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetBroadcastOptions::kContentFieldNumber;
#endif  // !_MSC_VER

SetBroadcastOptions::SetBroadcastOptions()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.SetBroadcastOptions)
}

void SetBroadcastOptions::InitAsDefaultInstance() {
}

SetBroadcastOptions::SetBroadcastOptions(const SetBroadcastOptions& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.SetBroadcastOptions)
}

void SetBroadcastOptions::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetBroadcastOptions::~SetBroadcastOptions() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.SetBroadcastOptions)
  SharedDtor();
}

void SetBroadcastOptions::SharedDtor() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void SetBroadcastOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetBroadcastOptions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetBroadcastOptions_descriptor_;
}

const SetBroadcastOptions& SetBroadcastOptions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_club_5fcore_2eproto();
  return *default_instance_;
}

SetBroadcastOptions* SetBroadcastOptions::default_instance_ = NULL;

SetBroadcastOptions* SetBroadcastOptions::New() const {
  return new SetBroadcastOptions;
}

void SetBroadcastOptions::Clear() {
  if (has_content()) {
    if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      content_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetBroadcastOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bgs.protocol.club.v1.SetBroadcastOptions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string content = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "content");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bgs.protocol.club.v1.SetBroadcastOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bgs.protocol.club.v1.SetBroadcastOptions)
  return false;
#undef DO_
}

void SetBroadcastOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bgs.protocol.club.v1.SetBroadcastOptions)
  // optional string content = 1;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bgs.protocol.club.v1.SetBroadcastOptions)
}

::google::protobuf::uint8* SetBroadcastOptions::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.SetBroadcastOptions)
  // optional string content = 1;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.SetBroadcastOptions)
  return target;
}

int SetBroadcastOptions::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string content = 1;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetBroadcastOptions::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetBroadcastOptions* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetBroadcastOptions*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetBroadcastOptions::MergeFrom(const SetBroadcastOptions& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetBroadcastOptions::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetBroadcastOptions::CopyFrom(const SetBroadcastOptions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetBroadcastOptions::IsInitialized() const {

  return true;
}

void SetBroadcastOptions::Swap(SetBroadcastOptions* other) {
  if (other != this) {
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetBroadcastOptions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetBroadcastOptions_descriptor_;
  metadata.reflection = SetBroadcastOptions_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Broadcast::kContentFieldNumber;
const int Broadcast::kCreatorFieldNumber;
const int Broadcast::kCreationTimeFieldNumber;
#endif  // !_MSC_VER

Broadcast::Broadcast()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.Broadcast)
}

void Broadcast::InitAsDefaultInstance() {
  creator_ = const_cast< ::bgs::protocol::club::v1::MemberDescription*>(&::bgs::protocol::club::v1::MemberDescription::default_instance());
}

Broadcast::Broadcast(const Broadcast& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.Broadcast)
}

void Broadcast::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  creator_ = NULL;
  creation_time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Broadcast::~Broadcast() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.Broadcast)
  SharedDtor();
}

void Broadcast::SharedDtor() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (this != default_instance_) {
    delete creator_;
  }
}

void Broadcast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Broadcast::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Broadcast_descriptor_;
}

const Broadcast& Broadcast::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_club_5fcore_2eproto();
  return *default_instance_;
}

Broadcast* Broadcast::default_instance_ = NULL;

Broadcast* Broadcast::New() const {
  return new Broadcast;
}

void Broadcast::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        content_->clear();
      }
    }
    if (has_creator()) {
      if (creator_ != NULL) creator_->::bgs::protocol::club::v1::MemberDescription::Clear();
    }
    creation_time_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Broadcast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bgs.protocol.club.v1.Broadcast)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string content = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "content");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_creator;
        break;
      }

      // optional .bgs.protocol.club.v1.MemberDescription creator = 2;
      case 2: {
        if (tag == 18) {
         parse_creator:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_creator()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_creation_time;
        break;
      }

      // optional uint64 creation_time = 3;
      case 3: {
        if (tag == 24) {
         parse_creation_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &creation_time_)));
          set_has_creation_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bgs.protocol.club.v1.Broadcast)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bgs.protocol.club.v1.Broadcast)
  return false;
#undef DO_
}

void Broadcast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bgs.protocol.club.v1.Broadcast)
  // optional string content = 1;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->content(), output);
  }

  // optional .bgs.protocol.club.v1.MemberDescription creator = 2;
  if (has_creator()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->creator(), output);
  }

  // optional uint64 creation_time = 3;
  if (has_creation_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->creation_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bgs.protocol.club.v1.Broadcast)
}

::google::protobuf::uint8* Broadcast::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.Broadcast)
  // optional string content = 1;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->content(), target);
  }

  // optional .bgs.protocol.club.v1.MemberDescription creator = 2;
  if (has_creator()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->creator(), target);
  }

  // optional uint64 creation_time = 3;
  if (has_creation_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->creation_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.Broadcast)
  return target;
}

int Broadcast::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string content = 1;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional .bgs.protocol.club.v1.MemberDescription creator = 2;
    if (has_creator()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->creator());
    }

    // optional uint64 creation_time = 3;
    if (has_creation_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->creation_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Broadcast::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Broadcast* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Broadcast*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Broadcast::MergeFrom(const Broadcast& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_creator()) {
      mutable_creator()->::bgs::protocol::club::v1::MemberDescription::MergeFrom(from.creator());
    }
    if (from.has_creation_time()) {
      set_creation_time(from.creation_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Broadcast::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Broadcast::CopyFrom(const Broadcast& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Broadcast::IsInitialized() const {

  if (has_creator()) {
    if (!this->creator().IsInitialized()) return false;
  }
  return true;
}

void Broadcast::Swap(Broadcast* other) {
  if (other != this) {
    std::swap(content_, other->content_);
    std::swap(creator_, other->creator_);
    std::swap(creation_time_, other->creation_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Broadcast::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Broadcast_descriptor_;
  metadata.reflection = Broadcast_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UniqueClubType::kProgramFieldNumber;
const int UniqueClubType::kNameFieldNumber;
#endif  // !_MSC_VER

UniqueClubType::UniqueClubType()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.UniqueClubType)
}

void UniqueClubType::InitAsDefaultInstance() {
}

UniqueClubType::UniqueClubType(const UniqueClubType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.UniqueClubType)
}

void UniqueClubType::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  program_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UniqueClubType::~UniqueClubType() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.UniqueClubType)
  SharedDtor();
}

void UniqueClubType::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void UniqueClubType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UniqueClubType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UniqueClubType_descriptor_;
}

const UniqueClubType& UniqueClubType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_club_5fcore_2eproto();
  return *default_instance_;
}

UniqueClubType* UniqueClubType::default_instance_ = NULL;

UniqueClubType* UniqueClubType::New() const {
  return new UniqueClubType;
}

void UniqueClubType::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    program_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UniqueClubType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bgs.protocol.club.v1.UniqueClubType)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 program = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &program_)));
          set_has_program();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bgs.protocol.club.v1.UniqueClubType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bgs.protocol.club.v1.UniqueClubType)
  return false;
#undef DO_
}

void UniqueClubType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bgs.protocol.club.v1.UniqueClubType)
  // optional fixed32 program = 1;
  if (has_program()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->program(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bgs.protocol.club.v1.UniqueClubType)
}

::google::protobuf::uint8* UniqueClubType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.UniqueClubType)
  // optional fixed32 program = 1;
  if (has_program()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->program(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.UniqueClubType)
  return target;
}

int UniqueClubType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed32 program = 1;
    if (has_program()) {
      total_size += 1 + 4;
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UniqueClubType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UniqueClubType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UniqueClubType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UniqueClubType::MergeFrom(const UniqueClubType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_program()) {
      set_program(from.program());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UniqueClubType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UniqueClubType::CopyFrom(const UniqueClubType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UniqueClubType::IsInitialized() const {

  return true;
}

void UniqueClubType::Swap(UniqueClubType* other) {
  if (other != this) {
    std::swap(program_, other->program_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UniqueClubType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UniqueClubType_descriptor_;
  metadata.reflection = UniqueClubType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClubCreateOptions::kTypeFieldNumber;
const int ClubCreateOptions::kAttributeFieldNumber;
const int ClubCreateOptions::kNameFieldNumber;
const int ClubCreateOptions::kDescriptionFieldNumber;
const int ClubCreateOptions::kAvatarFieldNumber;
const int ClubCreateOptions::kPrivacyLevelFieldNumber;
const int ClubCreateOptions::kShortNameFieldNumber;
const int ClubCreateOptions::kMemberFieldNumber;
const int ClubCreateOptions::kStreamFieldNumber;
#endif  // !_MSC_VER

ClubCreateOptions::ClubCreateOptions()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.ClubCreateOptions)
}

void ClubCreateOptions::InitAsDefaultInstance() {
  type_ = const_cast< ::bgs::protocol::club::v1::UniqueClubType*>(&::bgs::protocol::club::v1::UniqueClubType::default_instance());
  avatar_ = const_cast< ::bgs::protocol::club::v1::AvatarId*>(&::bgs::protocol::club::v1::AvatarId::default_instance());
  member_ = const_cast< ::bgs::protocol::club::v1::CreateMemberOptions*>(&::bgs::protocol::club::v1::CreateMemberOptions::default_instance());
  stream_ = const_cast< ::bgs::protocol::club::v1::CreateStreamOptions*>(&::bgs::protocol::club::v1::CreateStreamOptions::default_instance());
}

ClubCreateOptions::ClubCreateOptions(const ClubCreateOptions& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.ClubCreateOptions)
}

void ClubCreateOptions::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = NULL;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_ = NULL;
  privacy_level_ = 0;
  short_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  member_ = NULL;
  stream_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClubCreateOptions::~ClubCreateOptions() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.ClubCreateOptions)
  SharedDtor();
}

void ClubCreateOptions::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete description_;
  }
  if (short_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete short_name_;
  }
  if (this != default_instance_) {
    delete type_;
    delete avatar_;
    delete member_;
    delete stream_;
  }
}

void ClubCreateOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClubCreateOptions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClubCreateOptions_descriptor_;
}

const ClubCreateOptions& ClubCreateOptions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_club_5fcore_2eproto();
  return *default_instance_;
}

ClubCreateOptions* ClubCreateOptions::default_instance_ = NULL;

ClubCreateOptions* ClubCreateOptions::New() const {
  return new ClubCreateOptions;
}

void ClubCreateOptions::Clear() {
  if (_has_bits_[0 / 32] & 253) {
    if (has_type()) {
      if (type_ != NULL) type_->::bgs::protocol::club::v1::UniqueClubType::Clear();
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        description_->clear();
      }
    }
    if (has_avatar()) {
      if (avatar_ != NULL) avatar_->::bgs::protocol::club::v1::AvatarId::Clear();
    }
    privacy_level_ = 0;
    if (has_short_name()) {
      if (short_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        short_name_->clear();
      }
    }
    if (has_member()) {
      if (member_ != NULL) member_->::bgs::protocol::club::v1::CreateMemberOptions::Clear();
    }
  }
  if (has_stream()) {
    if (stream_ != NULL) stream_->::bgs::protocol::club::v1::CreateStreamOptions::Clear();
  }
  attribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClubCreateOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bgs.protocol.club.v1.ClubCreateOptions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .bgs.protocol.club.v1.UniqueClubType type = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_type()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_attribute;
        break;
      }

      // repeated .bgs.protocol.v2.Attribute attribute = 2;
      case 2: {
        if (tag == 18) {
         parse_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attribute()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_attribute;
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_description;
        break;
      }

      // optional string description = 4;
      case 4: {
        if (tag == 34) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "description");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_avatar;
        break;
      }

      // optional .bgs.protocol.club.v1.AvatarId avatar = 5;
      case 5: {
        if (tag == 42) {
         parse_avatar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_avatar()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_privacy_level;
        break;
      }

      // optional .bgs.protocol.club.v1.PrivacyLevel privacy_level = 6;
      case 6: {
        if (tag == 48) {
         parse_privacy_level:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::bgs::protocol::club::v1::PrivacyLevel_IsValid(value)) {
            set_privacy_level(static_cast< ::bgs::protocol::club::v1::PrivacyLevel >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_short_name;
        break;
      }

      // optional string short_name = 7;
      case 7: {
        if (tag == 58) {
         parse_short_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_short_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->short_name().data(), this->short_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "short_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_member;
        break;
      }

      // optional .bgs.protocol.club.v1.CreateMemberOptions member = 10;
      case 10: {
        if (tag == 82) {
         parse_member:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_member()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_stream;
        break;
      }

      // optional .bgs.protocol.club.v1.CreateStreamOptions stream = 11;
      case 11: {
        if (tag == 90) {
         parse_stream:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stream()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bgs.protocol.club.v1.ClubCreateOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bgs.protocol.club.v1.ClubCreateOptions)
  return false;
#undef DO_
}

void ClubCreateOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bgs.protocol.club.v1.ClubCreateOptions)
  // optional .bgs.protocol.club.v1.UniqueClubType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->type(), output);
  }

  // repeated .bgs.protocol.v2.Attribute attribute = 2;
  for (int i = 0; i < this->attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->attribute(i), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional string description = 4;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->description(), output);
  }

  // optional .bgs.protocol.club.v1.AvatarId avatar = 5;
  if (has_avatar()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->avatar(), output);
  }

  // optional .bgs.protocol.club.v1.PrivacyLevel privacy_level = 6;
  if (has_privacy_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->privacy_level(), output);
  }

  // optional string short_name = 7;
  if (has_short_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->short_name().data(), this->short_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "short_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->short_name(), output);
  }

  // optional .bgs.protocol.club.v1.CreateMemberOptions member = 10;
  if (has_member()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->member(), output);
  }

  // optional .bgs.protocol.club.v1.CreateStreamOptions stream = 11;
  if (has_stream()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->stream(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bgs.protocol.club.v1.ClubCreateOptions)
}

::google::protobuf::uint8* ClubCreateOptions::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.ClubCreateOptions)
  // optional .bgs.protocol.club.v1.UniqueClubType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->type(), target);
  }

  // repeated .bgs.protocol.v2.Attribute attribute = 2;
  for (int i = 0; i < this->attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->attribute(i), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional string description = 4;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->description(), target);
  }

  // optional .bgs.protocol.club.v1.AvatarId avatar = 5;
  if (has_avatar()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->avatar(), target);
  }

  // optional .bgs.protocol.club.v1.PrivacyLevel privacy_level = 6;
  if (has_privacy_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->privacy_level(), target);
  }

  // optional string short_name = 7;
  if (has_short_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->short_name().data(), this->short_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "short_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->short_name(), target);
  }

  // optional .bgs.protocol.club.v1.CreateMemberOptions member = 10;
  if (has_member()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->member(), target);
  }

  // optional .bgs.protocol.club.v1.CreateStreamOptions stream = 11;
  if (has_stream()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->stream(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.ClubCreateOptions)
  return target;
}

int ClubCreateOptions::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .bgs.protocol.club.v1.UniqueClubType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->type());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string description = 4;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // optional .bgs.protocol.club.v1.AvatarId avatar = 5;
    if (has_avatar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->avatar());
    }

    // optional .bgs.protocol.club.v1.PrivacyLevel privacy_level = 6;
    if (has_privacy_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->privacy_level());
    }

    // optional string short_name = 7;
    if (has_short_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->short_name());
    }

    // optional .bgs.protocol.club.v1.CreateMemberOptions member = 10;
    if (has_member()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->member());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .bgs.protocol.club.v1.CreateStreamOptions stream = 11;
    if (has_stream()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stream());
    }

  }
  // repeated .bgs.protocol.v2.Attribute attribute = 2;
  total_size += 1 * this->attribute_size();
  for (int i = 0; i < this->attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attribute(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClubCreateOptions::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClubCreateOptions* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClubCreateOptions*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClubCreateOptions::MergeFrom(const ClubCreateOptions& from) {
  GOOGLE_CHECK_NE(&from, this);
  attribute_.MergeFrom(from.attribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      mutable_type()->::bgs::protocol::club::v1::UniqueClubType::MergeFrom(from.type());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
    if (from.has_avatar()) {
      mutable_avatar()->::bgs::protocol::club::v1::AvatarId::MergeFrom(from.avatar());
    }
    if (from.has_privacy_level()) {
      set_privacy_level(from.privacy_level());
    }
    if (from.has_short_name()) {
      set_short_name(from.short_name());
    }
    if (from.has_member()) {
      mutable_member()->::bgs::protocol::club::v1::CreateMemberOptions::MergeFrom(from.member());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_stream()) {
      mutable_stream()->::bgs::protocol::club::v1::CreateStreamOptions::MergeFrom(from.stream());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClubCreateOptions::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClubCreateOptions::CopyFrom(const ClubCreateOptions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClubCreateOptions::IsInitialized() const {

  if (has_member()) {
    if (!this->member().IsInitialized()) return false;
  }
  return true;
}

void ClubCreateOptions::Swap(ClubCreateOptions* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    attribute_.Swap(&other->attribute_);
    std::swap(name_, other->name_);
    std::swap(description_, other->description_);
    std::swap(avatar_, other->avatar_);
    std::swap(privacy_level_, other->privacy_level_);
    std::swap(short_name_, other->short_name_);
    std::swap(member_, other->member_);
    std::swap(stream_, other->stream_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClubCreateOptions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClubCreateOptions_descriptor_;
  metadata.reflection = ClubCreateOptions_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Club::kIdFieldNumber;
const int Club::kTypeFieldNumber;
const int Club::kAttributeFieldNumber;
const int Club::kNameFieldNumber;
const int Club::kDescriptionFieldNumber;
const int Club::kBroadcastFieldNumber;
const int Club::kAvatarFieldNumber;
const int Club::kPrivacyLevelFieldNumber;
const int Club::kVisibilityLevelFieldNumber;
const int Club::kMemberCountFieldNumber;
const int Club::kCreationTimeFieldNumber;
const int Club::kStreamPositionFieldNumber;
const int Club::kRoleSetFieldNumber;
const int Club::kLeaderFieldNumber;
const int Club::kShortNameFieldNumber;
#endif  // !_MSC_VER

Club::Club()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.Club)
}

void Club::InitAsDefaultInstance() {
  type_ = const_cast< ::bgs::protocol::club::v1::UniqueClubType*>(&::bgs::protocol::club::v1::UniqueClubType::default_instance());
  broadcast_ = const_cast< ::bgs::protocol::club::v1::Broadcast*>(&::bgs::protocol::club::v1::Broadcast::default_instance());
  avatar_ = const_cast< ::bgs::protocol::club::v1::AvatarId*>(&::bgs::protocol::club::v1::AvatarId::default_instance());
  stream_position_ = const_cast< ::bgs::protocol::club::v1::StreamPosition*>(&::bgs::protocol::club::v1::StreamPosition::default_instance());
  role_set_ = const_cast< ::bgs::protocol::club::v1::ClubRoleSet*>(&::bgs::protocol::club::v1::ClubRoleSet::default_instance());
}

Club::Club(const Club& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.Club)
}

void Club::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  type_ = NULL;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  broadcast_ = NULL;
  avatar_ = NULL;
  privacy_level_ = 0;
  visibility_level_ = 0;
  member_count_ = 0u;
  creation_time_ = GOOGLE_ULONGLONG(0);
  stream_position_ = NULL;
  role_set_ = NULL;
  short_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Club::~Club() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.Club)
  SharedDtor();
}

void Club::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete description_;
  }
  if (short_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete short_name_;
  }
  if (this != default_instance_) {
    delete type_;
    delete broadcast_;
    delete avatar_;
    delete stream_position_;
    delete role_set_;
  }
}

void Club::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Club::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Club_descriptor_;
}

const Club& Club::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_club_5fcore_2eproto();
  return *default_instance_;
}

Club* Club::default_instance_ = NULL;

Club* Club::New() const {
  return new Club;
}

void Club::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Club*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 251) {
    id_ = GOOGLE_ULONGLONG(0);
    if (has_type()) {
      if (type_ != NULL) type_->::bgs::protocol::club::v1::UniqueClubType::Clear();
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        description_->clear();
      }
    }
    if (has_broadcast()) {
      if (broadcast_ != NULL) broadcast_->::bgs::protocol::club::v1::Broadcast::Clear();
    }
    if (has_avatar()) {
      if (avatar_ != NULL) avatar_->::bgs::protocol::club::v1::AvatarId::Clear();
    }
    privacy_level_ = 0;
  }
  if (_has_bits_[8 / 32] & 24320) {
    ZR_(visibility_level_, creation_time_);
    member_count_ = 0u;
    if (has_stream_position()) {
      if (stream_position_ != NULL) stream_position_->::bgs::protocol::club::v1::StreamPosition::Clear();
    }
    if (has_role_set()) {
      if (role_set_ != NULL) role_set_->::bgs::protocol::club::v1::ClubRoleSet::Clear();
    }
    if (has_short_name()) {
      if (short_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        short_name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  attribute_.Clear();
  leader_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Club::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bgs.protocol.club.v1.Club)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_type;
        break;
      }

      // optional .bgs.protocol.club.v1.UniqueClubType type = 2;
      case 2: {
        if (tag == 18) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_type()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_attribute;
        break;
      }

      // repeated .bgs.protocol.v2.Attribute attribute = 3;
      case 3: {
        if (tag == 26) {
         parse_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attribute()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_attribute;
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // optional string name = 4;
      case 4: {
        if (tag == 34) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_description;
        break;
      }

      // optional string description = 5;
      case 5: {
        if (tag == 42) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "description");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_broadcast;
        break;
      }

      // optional .bgs.protocol.club.v1.Broadcast broadcast = 6;
      case 6: {
        if (tag == 50) {
         parse_broadcast:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_broadcast()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_avatar;
        break;
      }

      // optional .bgs.protocol.club.v1.AvatarId avatar = 7;
      case 7: {
        if (tag == 58) {
         parse_avatar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_avatar()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_privacy_level;
        break;
      }

      // optional .bgs.protocol.club.v1.PrivacyLevel privacy_level = 8;
      case 8: {
        if (tag == 64) {
         parse_privacy_level:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::bgs::protocol::club::v1::PrivacyLevel_IsValid(value)) {
            set_privacy_level(static_cast< ::bgs::protocol::club::v1::PrivacyLevel >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_visibility_level;
        break;
      }

      // optional .bgs.protocol.club.v1.VisibilityLevel visibility_level = 9;
      case 9: {
        if (tag == 72) {
         parse_visibility_level:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::bgs::protocol::club::v1::VisibilityLevel_IsValid(value)) {
            set_visibility_level(static_cast< ::bgs::protocol::club::v1::VisibilityLevel >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_member_count;
        break;
      }

      // optional uint32 member_count = 10;
      case 10: {
        if (tag == 80) {
         parse_member_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &member_count_)));
          set_has_member_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_creation_time;
        break;
      }

      // optional uint64 creation_time = 11;
      case 11: {
        if (tag == 88) {
         parse_creation_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &creation_time_)));
          set_has_creation_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_stream_position;
        break;
      }

      // optional .bgs.protocol.club.v1.StreamPosition stream_position = 12;
      case 12: {
        if (tag == 98) {
         parse_stream_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stream_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_role_set;
        break;
      }

      // optional .bgs.protocol.club.v1.ClubRoleSet role_set = 13;
      case 13: {
        if (tag == 106) {
         parse_role_set:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_role_set()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_leader;
        break;
      }

      // repeated .bgs.protocol.club.v1.MemberDescription leader = 14;
      case 14: {
        if (tag == 114) {
         parse_leader:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_leader()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_leader;
        if (input->ExpectTag(122)) goto parse_short_name;
        break;
      }

      // optional string short_name = 15;
      case 15: {
        if (tag == 122) {
         parse_short_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_short_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->short_name().data(), this->short_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "short_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bgs.protocol.club.v1.Club)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bgs.protocol.club.v1.Club)
  return false;
#undef DO_
}

void Club::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bgs.protocol.club.v1.Club)
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional .bgs.protocol.club.v1.UniqueClubType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->type(), output);
  }

  // repeated .bgs.protocol.v2.Attribute attribute = 3;
  for (int i = 0; i < this->attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->attribute(i), output);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->name(), output);
  }

  // optional string description = 5;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->description(), output);
  }

  // optional .bgs.protocol.club.v1.Broadcast broadcast = 6;
  if (has_broadcast()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->broadcast(), output);
  }

  // optional .bgs.protocol.club.v1.AvatarId avatar = 7;
  if (has_avatar()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->avatar(), output);
  }

  // optional .bgs.protocol.club.v1.PrivacyLevel privacy_level = 8;
  if (has_privacy_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->privacy_level(), output);
  }

  // optional .bgs.protocol.club.v1.VisibilityLevel visibility_level = 9;
  if (has_visibility_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->visibility_level(), output);
  }

  // optional uint32 member_count = 10;
  if (has_member_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->member_count(), output);
  }

  // optional uint64 creation_time = 11;
  if (has_creation_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->creation_time(), output);
  }

  // optional .bgs.protocol.club.v1.StreamPosition stream_position = 12;
  if (has_stream_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->stream_position(), output);
  }

  // optional .bgs.protocol.club.v1.ClubRoleSet role_set = 13;
  if (has_role_set()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->role_set(), output);
  }

  // repeated .bgs.protocol.club.v1.MemberDescription leader = 14;
  for (int i = 0; i < this->leader_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->leader(i), output);
  }

  // optional string short_name = 15;
  if (has_short_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->short_name().data(), this->short_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "short_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->short_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bgs.protocol.club.v1.Club)
}

::google::protobuf::uint8* Club::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.Club)
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional .bgs.protocol.club.v1.UniqueClubType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->type(), target);
  }

  // repeated .bgs.protocol.v2.Attribute attribute = 3;
  for (int i = 0; i < this->attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->attribute(i), target);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  // optional string description = 5;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->description(), target);
  }

  // optional .bgs.protocol.club.v1.Broadcast broadcast = 6;
  if (has_broadcast()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->broadcast(), target);
  }

  // optional .bgs.protocol.club.v1.AvatarId avatar = 7;
  if (has_avatar()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->avatar(), target);
  }

  // optional .bgs.protocol.club.v1.PrivacyLevel privacy_level = 8;
  if (has_privacy_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->privacy_level(), target);
  }

  // optional .bgs.protocol.club.v1.VisibilityLevel visibility_level = 9;
  if (has_visibility_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->visibility_level(), target);
  }

  // optional uint32 member_count = 10;
  if (has_member_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->member_count(), target);
  }

  // optional uint64 creation_time = 11;
  if (has_creation_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->creation_time(), target);
  }

  // optional .bgs.protocol.club.v1.StreamPosition stream_position = 12;
  if (has_stream_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->stream_position(), target);
  }

  // optional .bgs.protocol.club.v1.ClubRoleSet role_set = 13;
  if (has_role_set()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->role_set(), target);
  }

  // repeated .bgs.protocol.club.v1.MemberDescription leader = 14;
  for (int i = 0; i < this->leader_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->leader(i), target);
  }

  // optional string short_name = 15;
  if (has_short_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->short_name().data(), this->short_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "short_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->short_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.Club)
  return target;
}

int Club::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional .bgs.protocol.club.v1.UniqueClubType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->type());
    }

    // optional string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string description = 5;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // optional .bgs.protocol.club.v1.Broadcast broadcast = 6;
    if (has_broadcast()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->broadcast());
    }

    // optional .bgs.protocol.club.v1.AvatarId avatar = 7;
    if (has_avatar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->avatar());
    }

    // optional .bgs.protocol.club.v1.PrivacyLevel privacy_level = 8;
    if (has_privacy_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->privacy_level());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .bgs.protocol.club.v1.VisibilityLevel visibility_level = 9;
    if (has_visibility_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->visibility_level());
    }

    // optional uint32 member_count = 10;
    if (has_member_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->member_count());
    }

    // optional uint64 creation_time = 11;
    if (has_creation_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->creation_time());
    }

    // optional .bgs.protocol.club.v1.StreamPosition stream_position = 12;
    if (has_stream_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stream_position());
    }

    // optional .bgs.protocol.club.v1.ClubRoleSet role_set = 13;
    if (has_role_set()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->role_set());
    }

    // optional string short_name = 15;
    if (has_short_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->short_name());
    }

  }
  // repeated .bgs.protocol.v2.Attribute attribute = 3;
  total_size += 1 * this->attribute_size();
  for (int i = 0; i < this->attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attribute(i));
  }

  // repeated .bgs.protocol.club.v1.MemberDescription leader = 14;
  total_size += 1 * this->leader_size();
  for (int i = 0; i < this->leader_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->leader(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Club::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Club* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Club*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Club::MergeFrom(const Club& from) {
  GOOGLE_CHECK_NE(&from, this);
  attribute_.MergeFrom(from.attribute_);
  leader_.MergeFrom(from.leader_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      mutable_type()->::bgs::protocol::club::v1::UniqueClubType::MergeFrom(from.type());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
    if (from.has_broadcast()) {
      mutable_broadcast()->::bgs::protocol::club::v1::Broadcast::MergeFrom(from.broadcast());
    }
    if (from.has_avatar()) {
      mutable_avatar()->::bgs::protocol::club::v1::AvatarId::MergeFrom(from.avatar());
    }
    if (from.has_privacy_level()) {
      set_privacy_level(from.privacy_level());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_visibility_level()) {
      set_visibility_level(from.visibility_level());
    }
    if (from.has_member_count()) {
      set_member_count(from.member_count());
    }
    if (from.has_creation_time()) {
      set_creation_time(from.creation_time());
    }
    if (from.has_stream_position()) {
      mutable_stream_position()->::bgs::protocol::club::v1::StreamPosition::MergeFrom(from.stream_position());
    }
    if (from.has_role_set()) {
      mutable_role_set()->::bgs::protocol::club::v1::ClubRoleSet::MergeFrom(from.role_set());
    }
    if (from.has_short_name()) {
      set_short_name(from.short_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Club::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Club::CopyFrom(const Club& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Club::IsInitialized() const {

  if (has_broadcast()) {
    if (!this->broadcast().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->leader())) return false;
  return true;
}

void Club::Swap(Club* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    attribute_.Swap(&other->attribute_);
    std::swap(name_, other->name_);
    std::swap(description_, other->description_);
    std::swap(broadcast_, other->broadcast_);
    std::swap(avatar_, other->avatar_);
    std::swap(privacy_level_, other->privacy_level_);
    std::swap(visibility_level_, other->visibility_level_);
    std::swap(member_count_, other->member_count_);
    std::swap(creation_time_, other->creation_time_);
    std::swap(stream_position_, other->stream_position_);
    std::swap(role_set_, other->role_set_);
    leader_.Swap(&other->leader_);
    std::swap(short_name_, other->short_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Club::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Club_descriptor_;
  metadata.reflection = Club_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClubDescription::kIdFieldNumber;
const int ClubDescription::kTypeFieldNumber;
const int ClubDescription::kNameFieldNumber;
const int ClubDescription::kDescriptionFieldNumber;
const int ClubDescription::kAvatarFieldNumber;
const int ClubDescription::kPrivacyLevelFieldNumber;
const int ClubDescription::kVisibilityLevelFieldNumber;
const int ClubDescription::kMemberCountFieldNumber;
const int ClubDescription::kLeaderFieldNumber;
const int ClubDescription::kCreationTimeFieldNumber;
#endif  // !_MSC_VER

ClubDescription::ClubDescription()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.ClubDescription)
}

void ClubDescription::InitAsDefaultInstance() {
  type_ = const_cast< ::bgs::protocol::club::v1::UniqueClubType*>(&::bgs::protocol::club::v1::UniqueClubType::default_instance());
  avatar_ = const_cast< ::bgs::protocol::club::v1::AvatarId*>(&::bgs::protocol::club::v1::AvatarId::default_instance());
}

ClubDescription::ClubDescription(const ClubDescription& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.ClubDescription)
}

void ClubDescription::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  type_ = NULL;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_ = NULL;
  privacy_level_ = 0;
  visibility_level_ = 0;
  member_count_ = 0u;
  creation_time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClubDescription::~ClubDescription() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.ClubDescription)
  SharedDtor();
}

void ClubDescription::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete description_;
  }
  if (this != default_instance_) {
    delete type_;
    delete avatar_;
  }
}

void ClubDescription::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClubDescription::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClubDescription_descriptor_;
}

const ClubDescription& ClubDescription::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_club_5fcore_2eproto();
  return *default_instance_;
}

ClubDescription* ClubDescription::default_instance_ = NULL;

ClubDescription* ClubDescription::New() const {
  return new ClubDescription;
}

void ClubDescription::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ClubDescription*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(privacy_level_, visibility_level_);
    id_ = GOOGLE_ULONGLONG(0);
    if (has_type()) {
      if (type_ != NULL) type_->::bgs::protocol::club::v1::UniqueClubType::Clear();
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        description_->clear();
      }
    }
    if (has_avatar()) {
      if (avatar_ != NULL) avatar_->::bgs::protocol::club::v1::AvatarId::Clear();
    }
    member_count_ = 0u;
  }
  creation_time_ = GOOGLE_ULONGLONG(0);

#undef OFFSET_OF_FIELD_
#undef ZR_

  leader_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClubDescription::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bgs.protocol.club.v1.ClubDescription)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_type;
        break;
      }

      // optional .bgs.protocol.club.v1.UniqueClubType type = 2;
      case 2: {
        if (tag == 18) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_type()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_description;
        break;
      }

      // optional string description = 4;
      case 4: {
        if (tag == 34) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "description");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_avatar;
        break;
      }

      // optional .bgs.protocol.club.v1.AvatarId avatar = 5;
      case 5: {
        if (tag == 42) {
         parse_avatar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_avatar()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_privacy_level;
        break;
      }

      // optional .bgs.protocol.club.v1.PrivacyLevel privacy_level = 6;
      case 6: {
        if (tag == 48) {
         parse_privacy_level:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::bgs::protocol::club::v1::PrivacyLevel_IsValid(value)) {
            set_privacy_level(static_cast< ::bgs::protocol::club::v1::PrivacyLevel >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_visibility_level;
        break;
      }

      // optional .bgs.protocol.club.v1.VisibilityLevel visibility_level = 7;
      case 7: {
        if (tag == 56) {
         parse_visibility_level:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::bgs::protocol::club::v1::VisibilityLevel_IsValid(value)) {
            set_visibility_level(static_cast< ::bgs::protocol::club::v1::VisibilityLevel >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_member_count;
        break;
      }

      // optional uint32 member_count = 8;
      case 8: {
        if (tag == 64) {
         parse_member_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &member_count_)));
          set_has_member_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_leader;
        break;
      }

      // repeated .bgs.protocol.club.v1.MemberDescription leader = 9;
      case 9: {
        if (tag == 74) {
         parse_leader:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_leader()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_leader;
        if (input->ExpectTag(80)) goto parse_creation_time;
        break;
      }

      // optional uint64 creation_time = 10;
      case 10: {
        if (tag == 80) {
         parse_creation_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &creation_time_)));
          set_has_creation_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bgs.protocol.club.v1.ClubDescription)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bgs.protocol.club.v1.ClubDescription)
  return false;
#undef DO_
}

void ClubDescription::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bgs.protocol.club.v1.ClubDescription)
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional .bgs.protocol.club.v1.UniqueClubType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->type(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional string description = 4;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->description(), output);
  }

  // optional .bgs.protocol.club.v1.AvatarId avatar = 5;
  if (has_avatar()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->avatar(), output);
  }

  // optional .bgs.protocol.club.v1.PrivacyLevel privacy_level = 6;
  if (has_privacy_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->privacy_level(), output);
  }

  // optional .bgs.protocol.club.v1.VisibilityLevel visibility_level = 7;
  if (has_visibility_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->visibility_level(), output);
  }

  // optional uint32 member_count = 8;
  if (has_member_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->member_count(), output);
  }

  // repeated .bgs.protocol.club.v1.MemberDescription leader = 9;
  for (int i = 0; i < this->leader_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->leader(i), output);
  }

  // optional uint64 creation_time = 10;
  if (has_creation_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->creation_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bgs.protocol.club.v1.ClubDescription)
}

::google::protobuf::uint8* ClubDescription::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.ClubDescription)
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional .bgs.protocol.club.v1.UniqueClubType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->type(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional string description = 4;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->description(), target);
  }

  // optional .bgs.protocol.club.v1.AvatarId avatar = 5;
  if (has_avatar()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->avatar(), target);
  }

  // optional .bgs.protocol.club.v1.PrivacyLevel privacy_level = 6;
  if (has_privacy_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->privacy_level(), target);
  }

  // optional .bgs.protocol.club.v1.VisibilityLevel visibility_level = 7;
  if (has_visibility_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->visibility_level(), target);
  }

  // optional uint32 member_count = 8;
  if (has_member_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->member_count(), target);
  }

  // repeated .bgs.protocol.club.v1.MemberDescription leader = 9;
  for (int i = 0; i < this->leader_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->leader(i), target);
  }

  // optional uint64 creation_time = 10;
  if (has_creation_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->creation_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.ClubDescription)
  return target;
}

int ClubDescription::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional .bgs.protocol.club.v1.UniqueClubType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->type());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string description = 4;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // optional .bgs.protocol.club.v1.AvatarId avatar = 5;
    if (has_avatar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->avatar());
    }

    // optional .bgs.protocol.club.v1.PrivacyLevel privacy_level = 6;
    if (has_privacy_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->privacy_level());
    }

    // optional .bgs.protocol.club.v1.VisibilityLevel visibility_level = 7;
    if (has_visibility_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->visibility_level());
    }

    // optional uint32 member_count = 8;
    if (has_member_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->member_count());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional uint64 creation_time = 10;
    if (has_creation_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->creation_time());
    }

  }
  // repeated .bgs.protocol.club.v1.MemberDescription leader = 9;
  total_size += 1 * this->leader_size();
  for (int i = 0; i < this->leader_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->leader(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClubDescription::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClubDescription* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClubDescription*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClubDescription::MergeFrom(const ClubDescription& from) {
  GOOGLE_CHECK_NE(&from, this);
  leader_.MergeFrom(from.leader_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      mutable_type()->::bgs::protocol::club::v1::UniqueClubType::MergeFrom(from.type());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
    if (from.has_avatar()) {
      mutable_avatar()->::bgs::protocol::club::v1::AvatarId::MergeFrom(from.avatar());
    }
    if (from.has_privacy_level()) {
      set_privacy_level(from.privacy_level());
    }
    if (from.has_visibility_level()) {
      set_visibility_level(from.visibility_level());
    }
    if (from.has_member_count()) {
      set_member_count(from.member_count());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_creation_time()) {
      set_creation_time(from.creation_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClubDescription::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClubDescription::CopyFrom(const ClubDescription& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClubDescription::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->leader())) return false;
  return true;
}

void ClubDescription::Swap(ClubDescription* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(name_, other->name_);
    std::swap(description_, other->description_);
    std::swap(avatar_, other->avatar_);
    std::swap(privacy_level_, other->privacy_level_);
    std::swap(visibility_level_, other->visibility_level_);
    std::swap(member_count_, other->member_count_);
    leader_.Swap(&other->leader_);
    std::swap(creation_time_, other->creation_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClubDescription::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClubDescription_descriptor_;
  metadata.reflection = ClubDescription_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClubView::kClubIdFieldNumber;
const int ClubView::kMarkerFieldNumber;
#endif  // !_MSC_VER

ClubView::ClubView()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.ClubView)
}

void ClubView::InitAsDefaultInstance() {
  marker_ = const_cast< ::bgs::protocol::ViewMarker*>(&::bgs::protocol::ViewMarker::default_instance());
}

ClubView::ClubView(const ClubView& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.ClubView)
}

void ClubView::SharedCtor() {
  _cached_size_ = 0;
  club_id_ = GOOGLE_ULONGLONG(0);
  marker_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClubView::~ClubView() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.ClubView)
  SharedDtor();
}

void ClubView::SharedDtor() {
  if (this != default_instance_) {
    delete marker_;
  }
}

void ClubView::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClubView::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClubView_descriptor_;
}

const ClubView& ClubView::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_club_5fcore_2eproto();
  return *default_instance_;
}

ClubView* ClubView::default_instance_ = NULL;

ClubView* ClubView::New() const {
  return new ClubView;
}

void ClubView::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    club_id_ = GOOGLE_ULONGLONG(0);
    if (has_marker()) {
      if (marker_ != NULL) marker_->::bgs::protocol::ViewMarker::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClubView::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bgs.protocol.club.v1.ClubView)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 club_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &club_id_)));
          set_has_club_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_marker;
        break;
      }

      // optional .bgs.protocol.ViewMarker marker = 2;
      case 2: {
        if (tag == 18) {
         parse_marker:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_marker()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bgs.protocol.club.v1.ClubView)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bgs.protocol.club.v1.ClubView)
  return false;
#undef DO_
}

void ClubView::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bgs.protocol.club.v1.ClubView)
  // optional uint64 club_id = 1;
  if (has_club_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->club_id(), output);
  }

  // optional .bgs.protocol.ViewMarker marker = 2;
  if (has_marker()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->marker(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bgs.protocol.club.v1.ClubView)
}

::google::protobuf::uint8* ClubView::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.ClubView)
  // optional uint64 club_id = 1;
  if (has_club_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->club_id(), target);
  }

  // optional .bgs.protocol.ViewMarker marker = 2;
  if (has_marker()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->marker(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.ClubView)
  return target;
}

int ClubView::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 club_id = 1;
    if (has_club_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->club_id());
    }

    // optional .bgs.protocol.ViewMarker marker = 2;
    if (has_marker()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->marker());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClubView::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClubView* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClubView*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClubView::MergeFrom(const ClubView& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_club_id()) {
      set_club_id(from.club_id());
    }
    if (from.has_marker()) {
      mutable_marker()->::bgs::protocol::ViewMarker::MergeFrom(from.marker());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClubView::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClubView::CopyFrom(const ClubView& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClubView::IsInitialized() const {

  return true;
}

void ClubView::Swap(ClubView* other) {
  if (other != this) {
    std::swap(club_id_, other->club_id_);
    std::swap(marker_, other->marker_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClubView::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClubView_descriptor_;
  metadata.reflection = ClubView_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClubStateOptions::kAttributeFieldNumber;
const int ClubStateOptions::kNameFieldNumber;
const int ClubStateOptions::kDescriptionFieldNumber;
const int ClubStateOptions::kBroadcastFieldNumber;
const int ClubStateOptions::kAvatarFieldNumber;
const int ClubStateOptions::kPrivacyLevelFieldNumber;
const int ClubStateOptions::kStreamPositionFieldNumber;
const int ClubStateOptions::kShortNameFieldNumber;
#endif  // !_MSC_VER

ClubStateOptions::ClubStateOptions()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.ClubStateOptions)
}

void ClubStateOptions::InitAsDefaultInstance() {
  broadcast_ = const_cast< ::bgs::protocol::club::v1::SetBroadcastOptions*>(&::bgs::protocol::club::v1::SetBroadcastOptions::default_instance());
  avatar_ = const_cast< ::bgs::protocol::club::v1::AvatarId*>(&::bgs::protocol::club::v1::AvatarId::default_instance());
  stream_position_ = const_cast< ::bgs::protocol::club::v1::StreamPosition*>(&::bgs::protocol::club::v1::StreamPosition::default_instance());
}

ClubStateOptions::ClubStateOptions(const ClubStateOptions& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.ClubStateOptions)
}

void ClubStateOptions::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  broadcast_ = NULL;
  avatar_ = NULL;
  privacy_level_ = 0;
  stream_position_ = NULL;
  short_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClubStateOptions::~ClubStateOptions() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.ClubStateOptions)
  SharedDtor();
}

void ClubStateOptions::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete description_;
  }
  if (short_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete short_name_;
  }
  if (this != default_instance_) {
    delete broadcast_;
    delete avatar_;
    delete stream_position_;
  }
}

void ClubStateOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClubStateOptions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClubStateOptions_descriptor_;
}

const ClubStateOptions& ClubStateOptions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_club_5fcore_2eproto();
  return *default_instance_;
}

ClubStateOptions* ClubStateOptions::default_instance_ = NULL;

ClubStateOptions* ClubStateOptions::New() const {
  return new ClubStateOptions;
}

void ClubStateOptions::Clear() {
  if (_has_bits_[0 / 32] & 254) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        description_->clear();
      }
    }
    if (has_broadcast()) {
      if (broadcast_ != NULL) broadcast_->::bgs::protocol::club::v1::SetBroadcastOptions::Clear();
    }
    if (has_avatar()) {
      if (avatar_ != NULL) avatar_->::bgs::protocol::club::v1::AvatarId::Clear();
    }
    privacy_level_ = 0;
    if (has_stream_position()) {
      if (stream_position_ != NULL) stream_position_->::bgs::protocol::club::v1::StreamPosition::Clear();
    }
    if (has_short_name()) {
      if (short_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        short_name_->clear();
      }
    }
  }
  attribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClubStateOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bgs.protocol.club.v1.ClubStateOptions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .bgs.protocol.v2.Attribute attribute = 1;
      case 1: {
        if (tag == 10) {
         parse_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attribute()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_attribute;
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_description;
        break;
      }

      // optional string description = 3;
      case 3: {
        if (tag == 26) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "description");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_broadcast;
        break;
      }

      // optional .bgs.protocol.club.v1.SetBroadcastOptions broadcast = 4;
      case 4: {
        if (tag == 34) {
         parse_broadcast:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_broadcast()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_avatar;
        break;
      }

      // optional .bgs.protocol.club.v1.AvatarId avatar = 5;
      case 5: {
        if (tag == 42) {
         parse_avatar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_avatar()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_privacy_level;
        break;
      }

      // optional .bgs.protocol.club.v1.PrivacyLevel privacy_level = 6;
      case 6: {
        if (tag == 48) {
         parse_privacy_level:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::bgs::protocol::club::v1::PrivacyLevel_IsValid(value)) {
            set_privacy_level(static_cast< ::bgs::protocol::club::v1::PrivacyLevel >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_stream_position;
        break;
      }

      // optional .bgs.protocol.club.v1.StreamPosition stream_position = 7;
      case 7: {
        if (tag == 58) {
         parse_stream_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stream_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_short_name;
        break;
      }

      // optional string short_name = 8;
      case 8: {
        if (tag == 66) {
         parse_short_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_short_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->short_name().data(), this->short_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "short_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bgs.protocol.club.v1.ClubStateOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bgs.protocol.club.v1.ClubStateOptions)
  return false;
#undef DO_
}

void ClubStateOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bgs.protocol.club.v1.ClubStateOptions)
  // repeated .bgs.protocol.v2.Attribute attribute = 1;
  for (int i = 0; i < this->attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->attribute(i), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional string description = 3;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->description(), output);
  }

  // optional .bgs.protocol.club.v1.SetBroadcastOptions broadcast = 4;
  if (has_broadcast()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->broadcast(), output);
  }

  // optional .bgs.protocol.club.v1.AvatarId avatar = 5;
  if (has_avatar()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->avatar(), output);
  }

  // optional .bgs.protocol.club.v1.PrivacyLevel privacy_level = 6;
  if (has_privacy_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->privacy_level(), output);
  }

  // optional .bgs.protocol.club.v1.StreamPosition stream_position = 7;
  if (has_stream_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->stream_position(), output);
  }

  // optional string short_name = 8;
  if (has_short_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->short_name().data(), this->short_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "short_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->short_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bgs.protocol.club.v1.ClubStateOptions)
}

::google::protobuf::uint8* ClubStateOptions::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.ClubStateOptions)
  // repeated .bgs.protocol.v2.Attribute attribute = 1;
  for (int i = 0; i < this->attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->attribute(i), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string description = 3;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->description(), target);
  }

  // optional .bgs.protocol.club.v1.SetBroadcastOptions broadcast = 4;
  if (has_broadcast()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->broadcast(), target);
  }

  // optional .bgs.protocol.club.v1.AvatarId avatar = 5;
  if (has_avatar()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->avatar(), target);
  }

  // optional .bgs.protocol.club.v1.PrivacyLevel privacy_level = 6;
  if (has_privacy_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->privacy_level(), target);
  }

  // optional .bgs.protocol.club.v1.StreamPosition stream_position = 7;
  if (has_stream_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->stream_position(), target);
  }

  // optional string short_name = 8;
  if (has_short_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->short_name().data(), this->short_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "short_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->short_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.ClubStateOptions)
  return target;
}

int ClubStateOptions::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string description = 3;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // optional .bgs.protocol.club.v1.SetBroadcastOptions broadcast = 4;
    if (has_broadcast()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->broadcast());
    }

    // optional .bgs.protocol.club.v1.AvatarId avatar = 5;
    if (has_avatar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->avatar());
    }

    // optional .bgs.protocol.club.v1.PrivacyLevel privacy_level = 6;
    if (has_privacy_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->privacy_level());
    }

    // optional .bgs.protocol.club.v1.StreamPosition stream_position = 7;
    if (has_stream_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stream_position());
    }

    // optional string short_name = 8;
    if (has_short_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->short_name());
    }

  }
  // repeated .bgs.protocol.v2.Attribute attribute = 1;
  total_size += 1 * this->attribute_size();
  for (int i = 0; i < this->attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attribute(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClubStateOptions::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClubStateOptions* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClubStateOptions*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClubStateOptions::MergeFrom(const ClubStateOptions& from) {
  GOOGLE_CHECK_NE(&from, this);
  attribute_.MergeFrom(from.attribute_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
    if (from.has_broadcast()) {
      mutable_broadcast()->::bgs::protocol::club::v1::SetBroadcastOptions::MergeFrom(from.broadcast());
    }
    if (from.has_avatar()) {
      mutable_avatar()->::bgs::protocol::club::v1::AvatarId::MergeFrom(from.avatar());
    }
    if (from.has_privacy_level()) {
      set_privacy_level(from.privacy_level());
    }
    if (from.has_stream_position()) {
      mutable_stream_position()->::bgs::protocol::club::v1::StreamPosition::MergeFrom(from.stream_position());
    }
    if (from.has_short_name()) {
      set_short_name(from.short_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClubStateOptions::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClubStateOptions::CopyFrom(const ClubStateOptions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClubStateOptions::IsInitialized() const {

  return true;
}

void ClubStateOptions::Swap(ClubStateOptions* other) {
  if (other != this) {
    attribute_.Swap(&other->attribute_);
    std::swap(name_, other->name_);
    std::swap(description_, other->description_);
    std::swap(broadcast_, other->broadcast_);
    std::swap(avatar_, other->avatar_);
    std::swap(privacy_level_, other->privacy_level_);
    std::swap(stream_position_, other->stream_position_);
    std::swap(short_name_, other->short_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClubStateOptions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClubStateOptions_descriptor_;
  metadata.reflection = ClubStateOptions_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClubStateAssignment::kClubIdFieldNumber;
const int ClubStateAssignment::kAttributeFieldNumber;
const int ClubStateAssignment::kNameFieldNumber;
const int ClubStateAssignment::kDescriptionFieldNumber;
const int ClubStateAssignment::kBroadcastFieldNumber;
const int ClubStateAssignment::kAvatarFieldNumber;
const int ClubStateAssignment::kPrivacyLevelFieldNumber;
const int ClubStateAssignment::kStreamPositionFieldNumber;
const int ClubStateAssignment::kShortNameFieldNumber;
#endif  // !_MSC_VER

ClubStateAssignment::ClubStateAssignment()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.ClubStateAssignment)
}

void ClubStateAssignment::InitAsDefaultInstance() {
  broadcast_ = const_cast< ::bgs::protocol::club::v1::Broadcast*>(&::bgs::protocol::club::v1::Broadcast::default_instance());
  avatar_ = const_cast< ::bgs::protocol::club::v1::AvatarId*>(&::bgs::protocol::club::v1::AvatarId::default_instance());
  stream_position_ = const_cast< ::bgs::protocol::club::v1::StreamPosition*>(&::bgs::protocol::club::v1::StreamPosition::default_instance());
}

ClubStateAssignment::ClubStateAssignment(const ClubStateAssignment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.ClubStateAssignment)
}

void ClubStateAssignment::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  club_id_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  broadcast_ = NULL;
  avatar_ = NULL;
  privacy_level_ = 0;
  stream_position_ = NULL;
  short_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClubStateAssignment::~ClubStateAssignment() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.ClubStateAssignment)
  SharedDtor();
}

void ClubStateAssignment::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete description_;
  }
  if (short_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete short_name_;
  }
  if (this != default_instance_) {
    delete broadcast_;
    delete avatar_;
    delete stream_position_;
  }
}

void ClubStateAssignment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClubStateAssignment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClubStateAssignment_descriptor_;
}

const ClubStateAssignment& ClubStateAssignment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_club_5fcore_2eproto();
  return *default_instance_;
}

ClubStateAssignment* ClubStateAssignment::default_instance_ = NULL;

ClubStateAssignment* ClubStateAssignment::New() const {
  return new ClubStateAssignment;
}

void ClubStateAssignment::Clear() {
  if (_has_bits_[0 / 32] & 253) {
    club_id_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        description_->clear();
      }
    }
    if (has_broadcast()) {
      if (broadcast_ != NULL) broadcast_->::bgs::protocol::club::v1::Broadcast::Clear();
    }
    if (has_avatar()) {
      if (avatar_ != NULL) avatar_->::bgs::protocol::club::v1::AvatarId::Clear();
    }
    privacy_level_ = 0;
    if (has_stream_position()) {
      if (stream_position_ != NULL) stream_position_->::bgs::protocol::club::v1::StreamPosition::Clear();
    }
  }
  if (has_short_name()) {
    if (short_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      short_name_->clear();
    }
  }
  attribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClubStateAssignment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bgs.protocol.club.v1.ClubStateAssignment)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 club_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &club_id_)));
          set_has_club_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_attribute;
        break;
      }

      // repeated .bgs.protocol.v2.Attribute attribute = 2;
      case 2: {
        if (tag == 18) {
         parse_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attribute()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_attribute;
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_description;
        break;
      }

      // optional string description = 4;
      case 4: {
        if (tag == 34) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "description");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_broadcast;
        break;
      }

      // optional .bgs.protocol.club.v1.Broadcast broadcast = 5;
      case 5: {
        if (tag == 42) {
         parse_broadcast:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_broadcast()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_avatar;
        break;
      }

      // optional .bgs.protocol.club.v1.AvatarId avatar = 6;
      case 6: {
        if (tag == 50) {
         parse_avatar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_avatar()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_privacy_level;
        break;
      }

      // optional .bgs.protocol.club.v1.PrivacyLevel privacy_level = 7;
      case 7: {
        if (tag == 56) {
         parse_privacy_level:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::bgs::protocol::club::v1::PrivacyLevel_IsValid(value)) {
            set_privacy_level(static_cast< ::bgs::protocol::club::v1::PrivacyLevel >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_stream_position;
        break;
      }

      // optional .bgs.protocol.club.v1.StreamPosition stream_position = 8;
      case 8: {
        if (tag == 66) {
         parse_stream_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stream_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_short_name;
        break;
      }

      // optional string short_name = 9;
      case 9: {
        if (tag == 74) {
         parse_short_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_short_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->short_name().data(), this->short_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "short_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bgs.protocol.club.v1.ClubStateAssignment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bgs.protocol.club.v1.ClubStateAssignment)
  return false;
#undef DO_
}

void ClubStateAssignment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bgs.protocol.club.v1.ClubStateAssignment)
  // optional uint64 club_id = 1;
  if (has_club_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->club_id(), output);
  }

  // repeated .bgs.protocol.v2.Attribute attribute = 2;
  for (int i = 0; i < this->attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->attribute(i), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional string description = 4;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->description(), output);
  }

  // optional .bgs.protocol.club.v1.Broadcast broadcast = 5;
  if (has_broadcast()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->broadcast(), output);
  }

  // optional .bgs.protocol.club.v1.AvatarId avatar = 6;
  if (has_avatar()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->avatar(), output);
  }

  // optional .bgs.protocol.club.v1.PrivacyLevel privacy_level = 7;
  if (has_privacy_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->privacy_level(), output);
  }

  // optional .bgs.protocol.club.v1.StreamPosition stream_position = 8;
  if (has_stream_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->stream_position(), output);
  }

  // optional string short_name = 9;
  if (has_short_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->short_name().data(), this->short_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "short_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->short_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bgs.protocol.club.v1.ClubStateAssignment)
}

::google::protobuf::uint8* ClubStateAssignment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.ClubStateAssignment)
  // optional uint64 club_id = 1;
  if (has_club_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->club_id(), target);
  }

  // repeated .bgs.protocol.v2.Attribute attribute = 2;
  for (int i = 0; i < this->attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->attribute(i), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional string description = 4;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->description(), target);
  }

  // optional .bgs.protocol.club.v1.Broadcast broadcast = 5;
  if (has_broadcast()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->broadcast(), target);
  }

  // optional .bgs.protocol.club.v1.AvatarId avatar = 6;
  if (has_avatar()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->avatar(), target);
  }

  // optional .bgs.protocol.club.v1.PrivacyLevel privacy_level = 7;
  if (has_privacy_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->privacy_level(), target);
  }

  // optional .bgs.protocol.club.v1.StreamPosition stream_position = 8;
  if (has_stream_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->stream_position(), target);
  }

  // optional string short_name = 9;
  if (has_short_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->short_name().data(), this->short_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "short_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->short_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.ClubStateAssignment)
  return target;
}

int ClubStateAssignment::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 club_id = 1;
    if (has_club_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->club_id());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string description = 4;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // optional .bgs.protocol.club.v1.Broadcast broadcast = 5;
    if (has_broadcast()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->broadcast());
    }

    // optional .bgs.protocol.club.v1.AvatarId avatar = 6;
    if (has_avatar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->avatar());
    }

    // optional .bgs.protocol.club.v1.PrivacyLevel privacy_level = 7;
    if (has_privacy_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->privacy_level());
    }

    // optional .bgs.protocol.club.v1.StreamPosition stream_position = 8;
    if (has_stream_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stream_position());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string short_name = 9;
    if (has_short_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->short_name());
    }

  }
  // repeated .bgs.protocol.v2.Attribute attribute = 2;
  total_size += 1 * this->attribute_size();
  for (int i = 0; i < this->attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attribute(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClubStateAssignment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClubStateAssignment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClubStateAssignment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClubStateAssignment::MergeFrom(const ClubStateAssignment& from) {
  GOOGLE_CHECK_NE(&from, this);
  attribute_.MergeFrom(from.attribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_club_id()) {
      set_club_id(from.club_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
    if (from.has_broadcast()) {
      mutable_broadcast()->::bgs::protocol::club::v1::Broadcast::MergeFrom(from.broadcast());
    }
    if (from.has_avatar()) {
      mutable_avatar()->::bgs::protocol::club::v1::AvatarId::MergeFrom(from.avatar());
    }
    if (from.has_privacy_level()) {
      set_privacy_level(from.privacy_level());
    }
    if (from.has_stream_position()) {
      mutable_stream_position()->::bgs::protocol::club::v1::StreamPosition::MergeFrom(from.stream_position());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_short_name()) {
      set_short_name(from.short_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClubStateAssignment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClubStateAssignment::CopyFrom(const ClubStateAssignment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClubStateAssignment::IsInitialized() const {

  if (has_broadcast()) {
    if (!this->broadcast().IsInitialized()) return false;
  }
  return true;
}

void ClubStateAssignment::Swap(ClubStateAssignment* other) {
  if (other != this) {
    std::swap(club_id_, other->club_id_);
    attribute_.Swap(&other->attribute_);
    std::swap(name_, other->name_);
    std::swap(description_, other->description_);
    std::swap(broadcast_, other->broadcast_);
    std::swap(avatar_, other->avatar_);
    std::swap(privacy_level_, other->privacy_level_);
    std::swap(stream_position_, other->stream_position_);
    std::swap(short_name_, other->short_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClubStateAssignment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClubStateAssignment_descriptor_;
  metadata.reflection = ClubStateAssignment_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StreamSettings::kStreamIdFieldNumber;
const int StreamSettings::kFilterFieldNumber;
#endif  // !_MSC_VER

StreamSettings::StreamSettings()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.StreamSettings)
}

void StreamSettings::InitAsDefaultInstance() {
}

StreamSettings::StreamSettings(const StreamSettings& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.StreamSettings)
}

void StreamSettings::SharedCtor() {
  _cached_size_ = 0;
  stream_id_ = GOOGLE_ULONGLONG(0);
  filter_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StreamSettings::~StreamSettings() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.StreamSettings)
  SharedDtor();
}

void StreamSettings::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StreamSettings::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreamSettings::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StreamSettings_descriptor_;
}

const StreamSettings& StreamSettings::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_club_5fcore_2eproto();
  return *default_instance_;
}

StreamSettings* StreamSettings::default_instance_ = NULL;

StreamSettings* StreamSettings::New() const {
  return new StreamSettings;
}

void StreamSettings::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<StreamSettings*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(stream_id_, filter_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StreamSettings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bgs.protocol.club.v1.StreamSettings)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 stream_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &stream_id_)));
          set_has_stream_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_filter;
        break;
      }

      // optional .bgs.protocol.club.v1.StreamNotificationFilter filter = 2;
      case 2: {
        if (tag == 16) {
         parse_filter:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::bgs::protocol::club::v1::StreamNotificationFilter_IsValid(value)) {
            set_filter(static_cast< ::bgs::protocol::club::v1::StreamNotificationFilter >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bgs.protocol.club.v1.StreamSettings)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bgs.protocol.club.v1.StreamSettings)
  return false;
#undef DO_
}

void StreamSettings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bgs.protocol.club.v1.StreamSettings)
  // optional uint64 stream_id = 1;
  if (has_stream_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->stream_id(), output);
  }

  // optional .bgs.protocol.club.v1.StreamNotificationFilter filter = 2;
  if (has_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->filter(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bgs.protocol.club.v1.StreamSettings)
}

::google::protobuf::uint8* StreamSettings::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.StreamSettings)
  // optional uint64 stream_id = 1;
  if (has_stream_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->stream_id(), target);
  }

  // optional .bgs.protocol.club.v1.StreamNotificationFilter filter = 2;
  if (has_filter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->filter(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.StreamSettings)
  return target;
}

int StreamSettings::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 stream_id = 1;
    if (has_stream_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->stream_id());
    }

    // optional .bgs.protocol.club.v1.StreamNotificationFilter filter = 2;
    if (has_filter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->filter());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StreamSettings::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StreamSettings* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StreamSettings*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StreamSettings::MergeFrom(const StreamSettings& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stream_id()) {
      set_stream_id(from.stream_id());
    }
    if (from.has_filter()) {
      set_filter(from.filter());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StreamSettings::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamSettings::CopyFrom(const StreamSettings& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamSettings::IsInitialized() const {

  return true;
}

void StreamSettings::Swap(StreamSettings* other) {
  if (other != this) {
    std::swap(stream_id_, other->stream_id_);
    std::swap(filter_, other->filter_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StreamSettings::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StreamSettings_descriptor_;
  metadata.reflection = StreamSettings_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClubSettings::kStreamFieldNumber;
const int ClubSettings::kStreamNotificationFilterAllFieldNumber;
const int ClubSettings::kAttributeFieldNumber;
#endif  // !_MSC_VER

ClubSettings::ClubSettings()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.ClubSettings)
}

void ClubSettings::InitAsDefaultInstance() {
}

ClubSettings::ClubSettings(const ClubSettings& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.ClubSettings)
}

void ClubSettings::SharedCtor() {
  _cached_size_ = 0;
  stream_notification_filter_all_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClubSettings::~ClubSettings() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.ClubSettings)
  SharedDtor();
}

void ClubSettings::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClubSettings::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClubSettings::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClubSettings_descriptor_;
}

const ClubSettings& ClubSettings::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_club_5fcore_2eproto();
  return *default_instance_;
}

ClubSettings* ClubSettings::default_instance_ = NULL;

ClubSettings* ClubSettings::New() const {
  return new ClubSettings;
}

void ClubSettings::Clear() {
  stream_notification_filter_all_ = false;
  stream_.Clear();
  attribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClubSettings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bgs.protocol.club.v1.ClubSettings)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .bgs.protocol.club.v1.StreamSettings stream = 1;
      case 1: {
        if (tag == 10) {
         parse_stream:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stream()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_stream;
        if (input->ExpectTag(16)) goto parse_stream_notification_filter_all;
        break;
      }

      // optional bool stream_notification_filter_all = 2;
      case 2: {
        if (tag == 16) {
         parse_stream_notification_filter_all:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &stream_notification_filter_all_)));
          set_has_stream_notification_filter_all();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_attribute;
        break;
      }

      // repeated .bgs.protocol.v2.Attribute attribute = 3;
      case 3: {
        if (tag == 26) {
         parse_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attribute()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_attribute;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bgs.protocol.club.v1.ClubSettings)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bgs.protocol.club.v1.ClubSettings)
  return false;
#undef DO_
}

void ClubSettings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bgs.protocol.club.v1.ClubSettings)
  // repeated .bgs.protocol.club.v1.StreamSettings stream = 1;
  for (int i = 0; i < this->stream_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->stream(i), output);
  }

  // optional bool stream_notification_filter_all = 2;
  if (has_stream_notification_filter_all()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->stream_notification_filter_all(), output);
  }

  // repeated .bgs.protocol.v2.Attribute attribute = 3;
  for (int i = 0; i < this->attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->attribute(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bgs.protocol.club.v1.ClubSettings)
}

::google::protobuf::uint8* ClubSettings::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.ClubSettings)
  // repeated .bgs.protocol.club.v1.StreamSettings stream = 1;
  for (int i = 0; i < this->stream_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->stream(i), target);
  }

  // optional bool stream_notification_filter_all = 2;
  if (has_stream_notification_filter_all()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->stream_notification_filter_all(), target);
  }

  // repeated .bgs.protocol.v2.Attribute attribute = 3;
  for (int i = 0; i < this->attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->attribute(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.ClubSettings)
  return target;
}

int ClubSettings::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional bool stream_notification_filter_all = 2;
    if (has_stream_notification_filter_all()) {
      total_size += 1 + 1;
    }

  }
  // repeated .bgs.protocol.club.v1.StreamSettings stream = 1;
  total_size += 1 * this->stream_size();
  for (int i = 0; i < this->stream_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stream(i));
  }

  // repeated .bgs.protocol.v2.Attribute attribute = 3;
  total_size += 1 * this->attribute_size();
  for (int i = 0; i < this->attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attribute(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClubSettings::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClubSettings* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClubSettings*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClubSettings::MergeFrom(const ClubSettings& from) {
  GOOGLE_CHECK_NE(&from, this);
  stream_.MergeFrom(from.stream_);
  attribute_.MergeFrom(from.attribute_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_stream_notification_filter_all()) {
      set_stream_notification_filter_all(from.stream_notification_filter_all());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClubSettings::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClubSettings::CopyFrom(const ClubSettings& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClubSettings::IsInitialized() const {

  return true;
}

void ClubSettings::Swap(ClubSettings* other) {
  if (other != this) {
    stream_.Swap(&other->stream_);
    std::swap(stream_notification_filter_all_, other->stream_notification_filter_all_);
    attribute_.Swap(&other->attribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClubSettings::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClubSettings_descriptor_;
  metadata.reflection = ClubSettings_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClubSettingsOptions::kStreamFieldNumber;
const int ClubSettingsOptions::kSettingsFieldNumber;
const int ClubSettingsOptions::kVersionFieldNumber;
#endif  // !_MSC_VER

ClubSettingsOptions::ClubSettingsOptions()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.ClubSettingsOptions)
}

void ClubSettingsOptions::InitAsDefaultInstance() {
  settings_ = const_cast< ::bgs::protocol::club::v1::ClubSettings*>(&::bgs::protocol::club::v1::ClubSettings::default_instance());
}

ClubSettingsOptions::ClubSettingsOptions(const ClubSettingsOptions& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.ClubSettingsOptions)
}

void ClubSettingsOptions::SharedCtor() {
  _cached_size_ = 0;
  settings_ = NULL;
  version_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClubSettingsOptions::~ClubSettingsOptions() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.ClubSettingsOptions)
  SharedDtor();
}

void ClubSettingsOptions::SharedDtor() {
  if (this != default_instance_) {
    delete settings_;
  }
}

void ClubSettingsOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClubSettingsOptions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClubSettingsOptions_descriptor_;
}

const ClubSettingsOptions& ClubSettingsOptions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_club_5fcore_2eproto();
  return *default_instance_;
}

ClubSettingsOptions* ClubSettingsOptions::default_instance_ = NULL;

ClubSettingsOptions* ClubSettingsOptions::New() const {
  return new ClubSettingsOptions;
}

void ClubSettingsOptions::Clear() {
  if (_has_bits_[0 / 32] & 6) {
    if (has_settings()) {
      if (settings_ != NULL) settings_->::bgs::protocol::club::v1::ClubSettings::Clear();
    }
    version_ = 0u;
  }
  stream_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClubSettingsOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bgs.protocol.club.v1.ClubSettingsOptions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .bgs.protocol.club.v1.StreamSettings stream = 1 [deprecated = true];
      case 1: {
        if (tag == 10) {
         parse_stream:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stream()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_stream;
        if (input->ExpectTag(18)) goto parse_settings;
        break;
      }

      // optional .bgs.protocol.club.v1.ClubSettings settings = 2;
      case 2: {
        if (tag == 18) {
         parse_settings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_settings()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_version;
        break;
      }

      // optional uint32 version = 3;
      case 3: {
        if (tag == 24) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bgs.protocol.club.v1.ClubSettingsOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bgs.protocol.club.v1.ClubSettingsOptions)
  return false;
#undef DO_
}

void ClubSettingsOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bgs.protocol.club.v1.ClubSettingsOptions)
  // repeated .bgs.protocol.club.v1.StreamSettings stream = 1 [deprecated = true];
  for (int i = 0; i < this->stream_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->stream(i), output);
  }

  // optional .bgs.protocol.club.v1.ClubSettings settings = 2;
  if (has_settings()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->settings(), output);
  }

  // optional uint32 version = 3;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bgs.protocol.club.v1.ClubSettingsOptions)
}

::google::protobuf::uint8* ClubSettingsOptions::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.ClubSettingsOptions)
  // repeated .bgs.protocol.club.v1.StreamSettings stream = 1 [deprecated = true];
  for (int i = 0; i < this->stream_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->stream(i), target);
  }

  // optional .bgs.protocol.club.v1.ClubSettings settings = 2;
  if (has_settings()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->settings(), target);
  }

  // optional uint32 version = 3;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.ClubSettingsOptions)
  return target;
}

int ClubSettingsOptions::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .bgs.protocol.club.v1.ClubSettings settings = 2;
    if (has_settings()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->settings());
    }

    // optional uint32 version = 3;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

  }
  // repeated .bgs.protocol.club.v1.StreamSettings stream = 1 [deprecated = true];
  total_size += 1 * this->stream_size();
  for (int i = 0; i < this->stream_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stream(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClubSettingsOptions::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClubSettingsOptions* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClubSettingsOptions*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClubSettingsOptions::MergeFrom(const ClubSettingsOptions& from) {
  GOOGLE_CHECK_NE(&from, this);
  stream_.MergeFrom(from.stream_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_settings()) {
      mutable_settings()->::bgs::protocol::club::v1::ClubSettings::MergeFrom(from.settings());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClubSettingsOptions::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClubSettingsOptions::CopyFrom(const ClubSettingsOptions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClubSettingsOptions::IsInitialized() const {

  return true;
}

void ClubSettingsOptions::Swap(ClubSettingsOptions* other) {
  if (other != this) {
    stream_.Swap(&other->stream_);
    std::swap(settings_, other->settings_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClubSettingsOptions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClubSettingsOptions_descriptor_;
  metadata.reflection = ClubSettingsOptions_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClubSettingsAssignment::kStreamFieldNumber;
const int ClubSettingsAssignment::kSettingsFieldNumber;
#endif  // !_MSC_VER

ClubSettingsAssignment::ClubSettingsAssignment()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.ClubSettingsAssignment)
}

void ClubSettingsAssignment::InitAsDefaultInstance() {
  settings_ = const_cast< ::bgs::protocol::club::v1::ClubSettings*>(&::bgs::protocol::club::v1::ClubSettings::default_instance());
}

ClubSettingsAssignment::ClubSettingsAssignment(const ClubSettingsAssignment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.ClubSettingsAssignment)
}

void ClubSettingsAssignment::SharedCtor() {
  _cached_size_ = 0;
  settings_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClubSettingsAssignment::~ClubSettingsAssignment() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.ClubSettingsAssignment)
  SharedDtor();
}

void ClubSettingsAssignment::SharedDtor() {
  if (this != default_instance_) {
    delete settings_;
  }
}

void ClubSettingsAssignment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClubSettingsAssignment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClubSettingsAssignment_descriptor_;
}

const ClubSettingsAssignment& ClubSettingsAssignment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_club_5fcore_2eproto();
  return *default_instance_;
}

ClubSettingsAssignment* ClubSettingsAssignment::default_instance_ = NULL;

ClubSettingsAssignment* ClubSettingsAssignment::New() const {
  return new ClubSettingsAssignment;
}

void ClubSettingsAssignment::Clear() {
  if (has_settings()) {
    if (settings_ != NULL) settings_->::bgs::protocol::club::v1::ClubSettings::Clear();
  }
  stream_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClubSettingsAssignment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bgs.protocol.club.v1.ClubSettingsAssignment)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .bgs.protocol.club.v1.StreamSettings stream = 1 [deprecated = true];
      case 1: {
        if (tag == 10) {
         parse_stream:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stream()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_stream;
        if (input->ExpectTag(18)) goto parse_settings;
        break;
      }

      // optional .bgs.protocol.club.v1.ClubSettings settings = 2;
      case 2: {
        if (tag == 18) {
         parse_settings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_settings()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bgs.protocol.club.v1.ClubSettingsAssignment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bgs.protocol.club.v1.ClubSettingsAssignment)
  return false;
#undef DO_
}

void ClubSettingsAssignment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bgs.protocol.club.v1.ClubSettingsAssignment)
  // repeated .bgs.protocol.club.v1.StreamSettings stream = 1 [deprecated = true];
  for (int i = 0; i < this->stream_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->stream(i), output);
  }

  // optional .bgs.protocol.club.v1.ClubSettings settings = 2;
  if (has_settings()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->settings(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bgs.protocol.club.v1.ClubSettingsAssignment)
}

::google::protobuf::uint8* ClubSettingsAssignment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.ClubSettingsAssignment)
  // repeated .bgs.protocol.club.v1.StreamSettings stream = 1 [deprecated = true];
  for (int i = 0; i < this->stream_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->stream(i), target);
  }

  // optional .bgs.protocol.club.v1.ClubSettings settings = 2;
  if (has_settings()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->settings(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.ClubSettingsAssignment)
  return target;
}

int ClubSettingsAssignment::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .bgs.protocol.club.v1.ClubSettings settings = 2;
    if (has_settings()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->settings());
    }

  }
  // repeated .bgs.protocol.club.v1.StreamSettings stream = 1 [deprecated = true];
  total_size += 1 * this->stream_size();
  for (int i = 0; i < this->stream_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stream(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClubSettingsAssignment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClubSettingsAssignment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClubSettingsAssignment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClubSettingsAssignment::MergeFrom(const ClubSettingsAssignment& from) {
  GOOGLE_CHECK_NE(&from, this);
  stream_.MergeFrom(from.stream_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_settings()) {
      mutable_settings()->::bgs::protocol::club::v1::ClubSettings::MergeFrom(from.settings());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClubSettingsAssignment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClubSettingsAssignment::CopyFrom(const ClubSettingsAssignment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClubSettingsAssignment::IsInitialized() const {

  return true;
}

void ClubSettingsAssignment::Swap(ClubSettingsAssignment* other) {
  if (other != this) {
    stream_.Swap(&other->stream_);
    std::swap(settings_, other->settings_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClubSettingsAssignment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClubSettingsAssignment_descriptor_;
  metadata.reflection = ClubSettingsAssignment_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace club
}  // namespace protocol
}  // namespace bgs

// @@protoc_insertion_point(global_scope)
