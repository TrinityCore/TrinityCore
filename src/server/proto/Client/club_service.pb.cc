// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: club_service.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "club_service.pb.h"

#include <utility>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
#include "BattlenetRpcErrorCodes.h"
// @@protoc_insertion_point(includes)

namespace bgs {
namespace protocol {
namespace club {
namespace v1 {

namespace {

const ::google::protobuf::ServiceDescriptor* ClubService_descriptor_ = NULL;

}  // namespace

void protobuf_AssignDesc_club_5fservice_2eproto() {
  protobuf_AddDesc_club_5fservice_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "club_service.proto");
  GOOGLE_CHECK(file != NULL);
  ClubService_descriptor_ = file->service(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_club_5fservice_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
}

}  // namespace

void protobuf_ShutdownFile_club_5fservice_2eproto() {
}

void protobuf_AddDesc_club_5fservice_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::bgs::protocol::club::v1::protobuf_AddDesc_club_5frequest_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022club_service.proto\022\024bgs.protocol.club."
    "v1\032\022club_request.proto2\260+\n\013ClubService\022Q"
    "\n\tSubscribe\022&.bgs.protocol.club.v1.Subsc"
    "ribeRequest\032\024.bgs.protocol.NoData\"\006\202\371+\002\010"
    "\001\022U\n\013Unsubscribe\022(.bgs.protocol.club.v1."
    "UnsubscribeRequest\032\024.bgs.protocol.NoData"
    "\"\006\202\371+\002\010\002\022[\n\006Create\022#.bgs.protocol.club.v"
    "1.CreateRequest\032$.bgs.protocol.club.v1.C"
    "reateResponse\"\006\202\371+\002\010\003\022M\n\007Destroy\022$.bgs.p"
    "rotocol.club.v1.DestroyRequest\032\024.bgs.pro"
    "tocol.NoData\"\006\202\371+\002\010\004\022s\n\016GetDescription\022+"
    ".bgs.protocol.club.v1.GetDescriptionRequ"
    "est\032,.bgs.protocol.club.v1.GetDescriptio"
    "nResponse\"\006\202\371+\002\010\005\022j\n\013GetClubType\022(.bgs.p"
    "rotocol.club.v1.GetClubTypeRequest\032).bgs"
    ".protocol.club.v1.GetClubTypeResponse\"\006\202"
    "\371+\002\010\006\022]\n\017UpdateClubState\022,.bgs.protocol."
    "club.v1.UpdateClubStateRequest\032\024.bgs.pro"
    "tocol.NoData\"\006\202\371+\002\010\007\022c\n\022UpdateClubSettin"
    "gs\022/.bgs.protocol.club.v1.UpdateClubSett"
    "ingsRequest\032\024.bgs.protocol.NoData\"\006\202\371+\002\010"
    "\010\022G\n\004Join\022!.bgs.protocol.club.v1.JoinReq"
    "uest\032\024.bgs.protocol.NoData\"\006\202\371+\002\010\036\022I\n\005Le"
    "ave\022\".bgs.protocol.club.v1.LeaveRequest\032"
    "\024.bgs.protocol.NoData\"\006\202\371+\002\010\037\022G\n\004Kick\022!."
    "bgs.protocol.club.v1.KickRequest\032\024.bgs.p"
    "rotocol.NoData\"\006\202\371+\002\010 \022d\n\tGetMember\022&.bg"
    "s.protocol.club.v1.GetMemberRequest\032\'.bg"
    "s.protocol.club.v1.GetMemberResponse\"\006\202\371"
    "+\002\010!\022g\n\nGetMembers\022\'.bgs.protocol.club.v"
    "1.GetMembersRequest\032(.bgs.protocol.club."
    "v1.GetMembersResponse\"\006\202\371+\002\010\"\022a\n\021UpdateM"
    "emberState\022..bgs.protocol.club.v1.Update"
    "MemberStateRequest\032\024.bgs.protocol.NoData"
    "\"\006\202\371+\002\010#\022i\n\025UpdateSubscriberState\0222.bgs."
    "protocol.club.v1.UpdateSubscriberStateRe"
    "quest\032\024.bgs.protocol.NoData\"\006\202\371+\002\010$\022S\n\nA"
    "ssignRole\022\'.bgs.protocol.club.v1.AssignR"
    "oleRequest\032\024.bgs.protocol.NoData\"\006\202\371+\002\010%"
    "\022W\n\014UnassignRole\022).bgs.protocol.club.v1."
    "UnassignRoleRequest\032\024.bgs.protocol.NoDat"
    "a\"\006\202\371+\002\010&\022[\n\016SendInvitation\022+.bgs.protoc"
    "ol.club.v1.SendInvitationRequest\032\024.bgs.p"
    "rotocol.NoData\"\006\202\371+\002\0102\022_\n\020AcceptInvitati"
    "on\022-.bgs.protocol.club.v1.AcceptInvitati"
    "onRequest\032\024.bgs.protocol.NoData\"\006\202\371+\002\0103\022"
    "a\n\021DeclineInvitation\022..bgs.protocol.club"
    ".v1.DeclineInvitationRequest\032\024.bgs.proto"
    "col.NoData\"\006\202\371+\002\0104\022_\n\020RevokeInvitation\022-"
    ".bgs.protocol.club.v1.RevokeInvitationRe"
    "quest\032\024.bgs.protocol.NoData\"\006\202\371+\002\0105\022p\n\rG"
    "etInvitation\022*.bgs.protocol.club.v1.GetI"
    "nvitationRequest\032+.bgs.protocol.club.v1."
    "GetInvitationResponse\"\006\202\371+\002\0106\022s\n\016GetInvi"
    "tations\022+.bgs.protocol.club.v1.GetInvita"
    "tionsRequest\032,.bgs.protocol.club.v1.GetI"
    "nvitationsResponse\"\006\202\371+\002\0107\022[\n\016SendSugges"
    "tion\022+.bgs.protocol.club.v1.SendSuggesti"
    "onRequest\032\024.bgs.protocol.NoData\"\006\202\371+\002\010<\022"
    "_\n\020AcceptSuggestion\022-.bgs.protocol.club."
    "v1.AcceptSuggestionRequest\032\024.bgs.protoco"
    "l.NoData\"\006\202\371+\002\010=\022a\n\021DeclineSuggestion\022.."
    "bgs.protocol.club.v1.DeclineSuggestionRe"
    "quest\032\024.bgs.protocol.NoData\"\006\202\371+\002\010>\022p\n\rG"
    "etSuggestion\022*.bgs.protocol.club.v1.GetS"
    "uggestionRequest\032+.bgs.protocol.club.v1."
    "GetSuggestionResponse\"\006\202\371+\002\010\?\022s\n\016GetSugg"
    "estions\022+.bgs.protocol.club.v1.GetSugges"
    "tionsRequest\032,.bgs.protocol.club.v1.GetS"
    "uggestionsResponse\"\006\202\371+\002\010@\022m\n\014CreateTick"
    "et\022).bgs.protocol.club.v1.CreateTicketRe"
    "quest\032*.bgs.protocol.club.v1.CreateTicke"
    "tResponse\"\006\202\371+\002\010F\022Y\n\rDestroyTicket\022*.bgs"
    ".protocol.club.v1.DestroyTicketRequest\032\024"
    ".bgs.protocol.NoData\"\006\202\371+\002\010G\022W\n\014RedeemTi"
    "cket\022).bgs.protocol.club.v1.RedeemTicket"
    "Request\032\024.bgs.protocol.NoData\"\006\202\371+\002\010H\022d\n"
    "\tGetTicket\022&.bgs.protocol.club.v1.GetTic"
    "ketRequest\032\'.bgs.protocol.club.v1.GetTic"
    "ketResponse\"\006\202\371+\002\010I\022g\n\nGetTickets\022\'.bgs."
    "protocol.club.v1.GetTicketsRequest\032(.bgs"
    ".protocol.club.v1.GetTicketsResponse\"\006\202\371"
    "+\002\010J\022K\n\006AddBan\022#.bgs.protocol.club.v1.Ad"
    "dBanRequest\032\024.bgs.protocol.NoData\"\006\202\371+\002\010"
    "P\022Q\n\tRemoveBan\022&.bgs.protocol.club.v1.Re"
    "moveBanRequest\032\024.bgs.protocol.NoData\"\006\202\371"
    "+\002\010Q\022[\n\006GetBan\022#.bgs.protocol.club.v1.Ge"
    "tBanRequest\032$.bgs.protocol.club.v1.GetBa"
    "nResponse\"\006\202\371+\002\010R\022^\n\007GetBans\022$.bgs.proto"
    "col.club.v1.GetBansRequest\032%.bgs.protoco"
    "l.club.v1.GetBansResponse\"\006\202\371+\002\010S\022]\n\017Sub"
    "scribeStream\022,.bgs.protocol.club.v1.Subs"
    "cribeStreamRequest\032\024.bgs.protocol.NoData"
    "\"\006\202\371+\002\010d\022a\n\021UnsubscribeStream\022..bgs.prot"
    "ocol.club.v1.UnsubscribeStreamRequest\032\024."
    "bgs.protocol.NoData\"\006\202\371+\002\010e\022m\n\014CreateStr"
    "eam\022).bgs.protocol.club.v1.CreateStreamR"
    "equest\032*.bgs.protocol.club.v1.CreateStre"
    "amResponse\"\006\202\371+\002\010f\022Y\n\rDestroyStream\022*.bg"
    "s.protocol.club.v1.DestroyStreamRequest\032"
    "\024.bgs.protocol.NoData\"\006\202\371+\002\010g\022d\n\tGetStre"
    "am\022&.bgs.protocol.club.v1.GetStreamReque"
    "st\032\'.bgs.protocol.club.v1.GetStreamRespo"
    "nse\"\006\202\371+\002\010h\022g\n\nGetStreams\022\'.bgs.protocol"
    ".club.v1.GetStreamsRequest\032(.bgs.protoco"
    "l.club.v1.GetStreamsResponse\"\006\202\371+\002\010i\022a\n\021"
    "UpdateStreamState\022..bgs.protocol.club.v1"
    ".UpdateStreamStateRequest\032\024.bgs.protocol"
    ".NoData\"\006\202\371+\002\010j\022[\n\016SetStreamFocus\022+.bgs."
    "protocol.club.v1.SetStreamFocusRequest\032\024"
    ".bgs.protocol.NoData\"\006\202\371+\002\010k\022\202\001\n\023GetStre"
    "amVoiceToken\0220.bgs.protocol.club.v1.GetS"
    "treamVoiceTokenRequest\0321.bgs.protocol.cl"
    "ub.v1.GetStreamVoiceTokenResponse\"\006\202\371+\002\010"
    "l\022e\n\023KickFromStreamVoice\0220.bgs.protocol."
    "club.v1.KickFromStreamVoiceRequest\032\024.bgs"
    ".protocol.NoData\"\006\202\371+\002\010m\022q\n\rCreateMessag"
    "e\022*.bgs.protocol.club.v1.CreateMessageRe"
    "quest\032+.bgs.protocol.club.v1.CreateMessa"
    "geResponse\"\007\202\371+\003\010\226\001\022t\n\016DestroyMessage\022+."
    "bgs.protocol.club.v1.DestroyMessageReque"
    "st\032,.bgs.protocol.club.v1.DestroyMessage"
    "Response\"\007\202\371+\003\010\227\001\022k\n\013EditMessage\022(.bgs.p"
    "rotocol.club.v1.EditMessageRequest\032).bgs"
    ".protocol.club.v1.EditMessageResponse\"\007\202"
    "\371+\003\010\230\001\022`\n\020SetMessagePinned\022-.bgs.protoco"
    "l.club.v1.SetMessagePinnedRequest\032\024.bgs."
    "protocol.NoData\"\007\202\371+\003\010\231\001\022d\n\022SetTypingInd"
    "icator\022/.bgs.protocol.club.v1.SetTypingI"
    "ndicatorRequest\032\024.bgs.protocol.NoData\"\007\202"
    "\371+\003\010\232\001\022j\n\025AdvanceStreamViewTime\0222.bgs.pr"
    "otocol.club.v1.AdvanceStreamViewTimeRequ"
    "est\032\024.bgs.protocol.NoData\"\007\202\371+\003\010\233\001\022z\n\020Ge"
    "tStreamHistory\022-.bgs.protocol.club.v1.Ge"
    "tStreamHistoryRequest\032..bgs.protocol.clu"
    "b.v1.GetStreamHistoryResponse\"\007\202\371+\003\010\234\001\022z"
    "\n\020GetStreamMessage\022-.bgs.protocol.club.v"
    "1.GetStreamMessageRequest\032..bgs.protocol"
    ".club.v1.GetStreamMessageResponse\"\007\202\371+\003\010"
    "\235\001\0325\202\371+)\n!bnet.protocol.club.v1.ClubServ"
    "ice*\004club\212\371+\004\020\001\030\001B\005H\002\200\001\000", 5624);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "club_service.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_club_5fservice_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_club_5fservice_2eproto {
  StaticDescriptorInitializer_club_5fservice_2eproto() {
    protobuf_AddDesc_club_5fservice_2eproto();
  }
} static_descriptor_initializer_club_5fservice_2eproto_;
// ===================================================================

ClubService::ClubService(bool use_original_hash) : ServiceBase(use_original_hash ? OriginalHash::value : NameHash::value) {
}

ClubService::~ClubService() {
}

google::protobuf::ServiceDescriptor const* ClubService::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClubService_descriptor_;
}

void ClubService::CallServerMethod(uint32 token, uint32 methodId, MessageBuffer buffer) {
  switch(methodId & 0x3FFFFFFF) {
    case 1:
      ParseAndHandleSubscribe(token, methodId, buffer);
      break;
    case 2:
      ParseAndHandleUnsubscribe(token, methodId, buffer);
      break;
    case 3:
      ParseAndHandleCreate(token, methodId, buffer);
      break;
    case 4:
      ParseAndHandleDestroy(token, methodId, buffer);
      break;
    case 5:
      ParseAndHandleGetDescription(token, methodId, buffer);
      break;
    case 6:
      ParseAndHandleGetClubType(token, methodId, buffer);
      break;
    case 7:
      ParseAndHandleUpdateClubState(token, methodId, buffer);
      break;
    case 8:
      ParseAndHandleUpdateClubSettings(token, methodId, buffer);
      break;
    case 30:
      ParseAndHandleJoin(token, methodId, buffer);
      break;
    case 31:
      ParseAndHandleLeave(token, methodId, buffer);
      break;
    case 32:
      ParseAndHandleKick(token, methodId, buffer);
      break;
    case 33:
      ParseAndHandleGetMember(token, methodId, buffer);
      break;
    case 34:
      ParseAndHandleGetMembers(token, methodId, buffer);
      break;
    case 35:
      ParseAndHandleUpdateMemberState(token, methodId, buffer);
      break;
    case 36:
      ParseAndHandleUpdateSubscriberState(token, methodId, buffer);
      break;
    case 37:
      ParseAndHandleAssignRole(token, methodId, buffer);
      break;
    case 38:
      ParseAndHandleUnassignRole(token, methodId, buffer);
      break;
    case 50:
      ParseAndHandleSendInvitation(token, methodId, buffer);
      break;
    case 51:
      ParseAndHandleAcceptInvitation(token, methodId, buffer);
      break;
    case 52:
      ParseAndHandleDeclineInvitation(token, methodId, buffer);
      break;
    case 53:
      ParseAndHandleRevokeInvitation(token, methodId, buffer);
      break;
    case 54:
      ParseAndHandleGetInvitation(token, methodId, buffer);
      break;
    case 55:
      ParseAndHandleGetInvitations(token, methodId, buffer);
      break;
    case 60:
      ParseAndHandleSendSuggestion(token, methodId, buffer);
      break;
    case 61:
      ParseAndHandleAcceptSuggestion(token, methodId, buffer);
      break;
    case 62:
      ParseAndHandleDeclineSuggestion(token, methodId, buffer);
      break;
    case 63:
      ParseAndHandleGetSuggestion(token, methodId, buffer);
      break;
    case 64:
      ParseAndHandleGetSuggestions(token, methodId, buffer);
      break;
    case 70:
      ParseAndHandleCreateTicket(token, methodId, buffer);
      break;
    case 71:
      ParseAndHandleDestroyTicket(token, methodId, buffer);
      break;
    case 72:
      ParseAndHandleRedeemTicket(token, methodId, buffer);
      break;
    case 73:
      ParseAndHandleGetTicket(token, methodId, buffer);
      break;
    case 74:
      ParseAndHandleGetTickets(token, methodId, buffer);
      break;
    case 80:
      ParseAndHandleAddBan(token, methodId, buffer);
      break;
    case 81:
      ParseAndHandleRemoveBan(token, methodId, buffer);
      break;
    case 82:
      ParseAndHandleGetBan(token, methodId, buffer);
      break;
    case 83:
      ParseAndHandleGetBans(token, methodId, buffer);
      break;
    case 100:
      ParseAndHandleSubscribeStream(token, methodId, buffer);
      break;
    case 101:
      ParseAndHandleUnsubscribeStream(token, methodId, buffer);
      break;
    case 102:
      ParseAndHandleCreateStream(token, methodId, buffer);
      break;
    case 103:
      ParseAndHandleDestroyStream(token, methodId, buffer);
      break;
    case 104:
      ParseAndHandleGetStream(token, methodId, buffer);
      break;
    case 105:
      ParseAndHandleGetStreams(token, methodId, buffer);
      break;
    case 106:
      ParseAndHandleUpdateStreamState(token, methodId, buffer);
      break;
    case 107:
      ParseAndHandleSetStreamFocus(token, methodId, buffer);
      break;
    case 108:
      ParseAndHandleGetStreamVoiceToken(token, methodId, buffer);
      break;
    case 109:
      ParseAndHandleKickFromStreamVoice(token, methodId, buffer);
      break;
    case 150:
      ParseAndHandleCreateMessage(token, methodId, buffer);
      break;
    case 151:
      ParseAndHandleDestroyMessage(token, methodId, buffer);
      break;
    case 152:
      ParseAndHandleEditMessage(token, methodId, buffer);
      break;
    case 153:
      ParseAndHandleSetMessagePinned(token, methodId, buffer);
      break;
    case 154:
      ParseAndHandleSetTypingIndicator(token, methodId, buffer);
      break;
    case 155:
      ParseAndHandleAdvanceStreamViewTime(token, methodId, buffer);
      break;
    case 156:
      ParseAndHandleGetStreamHistory(token, methodId, buffer);
      break;
    case 157:
      ParseAndHandleGetStreamMessage(token, methodId, buffer);
      break;
    default:
      LogInvalidMethod(methodId);
      SendResponse(service_hash_, methodId, token, ERROR_RPC_INVALID_METHOD);
      break;
    }
}

uint32 ClubService::HandleSubscribe(::bgs::protocol::club::v1::SubscribeRequest const* request, ::bgs::protocol::NoData* /*response*/, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& /*continuation*/) {
  LogUnimplementedServerMethod("ClubService.Subscribe", request);
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 ClubService::HandleUnsubscribe(::bgs::protocol::club::v1::UnsubscribeRequest const* request, ::bgs::protocol::NoData* /*response*/, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& /*continuation*/) {
  LogUnimplementedServerMethod("ClubService.Unsubscribe", request);
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 ClubService::HandleCreate(::bgs::protocol::club::v1::CreateRequest const* request, ::bgs::protocol::club::v1::CreateResponse* /*response*/, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& /*continuation*/) {
  LogUnimplementedServerMethod("ClubService.Create", request);
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 ClubService::HandleDestroy(::bgs::protocol::club::v1::DestroyRequest const* request, ::bgs::protocol::NoData* /*response*/, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& /*continuation*/) {
  LogUnimplementedServerMethod("ClubService.Destroy", request);
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 ClubService::HandleGetDescription(::bgs::protocol::club::v1::GetDescriptionRequest const* request, ::bgs::protocol::club::v1::GetDescriptionResponse* /*response*/, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& /*continuation*/) {
  LogUnimplementedServerMethod("ClubService.GetDescription", request);
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 ClubService::HandleGetClubType(::bgs::protocol::club::v1::GetClubTypeRequest const* request, ::bgs::protocol::club::v1::GetClubTypeResponse* /*response*/, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& /*continuation*/) {
  LogUnimplementedServerMethod("ClubService.GetClubType", request);
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 ClubService::HandleUpdateClubState(::bgs::protocol::club::v1::UpdateClubStateRequest const* request, ::bgs::protocol::NoData* /*response*/, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& /*continuation*/) {
  LogUnimplementedServerMethod("ClubService.UpdateClubState", request);
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 ClubService::HandleUpdateClubSettings(::bgs::protocol::club::v1::UpdateClubSettingsRequest const* request, ::bgs::protocol::NoData* /*response*/, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& /*continuation*/) {
  LogUnimplementedServerMethod("ClubService.UpdateClubSettings", request);
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 ClubService::HandleJoin(::bgs::protocol::club::v1::JoinRequest const* request, ::bgs::protocol::NoData* /*response*/, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& /*continuation*/) {
  LogUnimplementedServerMethod("ClubService.Join", request);
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 ClubService::HandleLeave(::bgs::protocol::club::v1::LeaveRequest const* request, ::bgs::protocol::NoData* /*response*/, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& /*continuation*/) {
  LogUnimplementedServerMethod("ClubService.Leave", request);
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 ClubService::HandleKick(::bgs::protocol::club::v1::KickRequest const* request, ::bgs::protocol::NoData* /*response*/, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& /*continuation*/) {
  LogUnimplementedServerMethod("ClubService.Kick", request);
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 ClubService::HandleGetMember(::bgs::protocol::club::v1::GetMemberRequest const* request, ::bgs::protocol::club::v1::GetMemberResponse* /*response*/, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& /*continuation*/) {
  LogUnimplementedServerMethod("ClubService.GetMember", request);
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 ClubService::HandleGetMembers(::bgs::protocol::club::v1::GetMembersRequest const* request, ::bgs::protocol::club::v1::GetMembersResponse* /*response*/, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& /*continuation*/) {
  LogUnimplementedServerMethod("ClubService.GetMembers", request);
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 ClubService::HandleUpdateMemberState(::bgs::protocol::club::v1::UpdateMemberStateRequest const* request, ::bgs::protocol::NoData* /*response*/, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& /*continuation*/) {
  LogUnimplementedServerMethod("ClubService.UpdateMemberState", request);
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 ClubService::HandleUpdateSubscriberState(::bgs::protocol::club::v1::UpdateSubscriberStateRequest const* request, ::bgs::protocol::NoData* /*response*/, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& /*continuation*/) {
  LogUnimplementedServerMethod("ClubService.UpdateSubscriberState", request);
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 ClubService::HandleAssignRole(::bgs::protocol::club::v1::AssignRoleRequest const* request, ::bgs::protocol::NoData* /*response*/, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& /*continuation*/) {
  LogUnimplementedServerMethod("ClubService.AssignRole", request);
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 ClubService::HandleUnassignRole(::bgs::protocol::club::v1::UnassignRoleRequest const* request, ::bgs::protocol::NoData* /*response*/, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& /*continuation*/) {
  LogUnimplementedServerMethod("ClubService.UnassignRole", request);
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 ClubService::HandleSendInvitation(::bgs::protocol::club::v1::SendInvitationRequest const* request, ::bgs::protocol::NoData* /*response*/, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& /*continuation*/) {
  LogUnimplementedServerMethod("ClubService.SendInvitation", request);
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 ClubService::HandleAcceptInvitation(::bgs::protocol::club::v1::AcceptInvitationRequest const* request, ::bgs::protocol::NoData* /*response*/, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& /*continuation*/) {
  LogUnimplementedServerMethod("ClubService.AcceptInvitation", request);
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 ClubService::HandleDeclineInvitation(::bgs::protocol::club::v1::DeclineInvitationRequest const* request, ::bgs::protocol::NoData* /*response*/, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& /*continuation*/) {
  LogUnimplementedServerMethod("ClubService.DeclineInvitation", request);
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 ClubService::HandleRevokeInvitation(::bgs::protocol::club::v1::RevokeInvitationRequest const* request, ::bgs::protocol::NoData* /*response*/, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& /*continuation*/) {
  LogUnimplementedServerMethod("ClubService.RevokeInvitation", request);
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 ClubService::HandleGetInvitation(::bgs::protocol::club::v1::GetInvitationRequest const* request, ::bgs::protocol::club::v1::GetInvitationResponse* /*response*/, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& /*continuation*/) {
  LogUnimplementedServerMethod("ClubService.GetInvitation", request);
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 ClubService::HandleGetInvitations(::bgs::protocol::club::v1::GetInvitationsRequest const* request, ::bgs::protocol::club::v1::GetInvitationsResponse* /*response*/, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& /*continuation*/) {
  LogUnimplementedServerMethod("ClubService.GetInvitations", request);
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 ClubService::HandleSendSuggestion(::bgs::protocol::club::v1::SendSuggestionRequest const* request, ::bgs::protocol::NoData* /*response*/, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& /*continuation*/) {
  LogUnimplementedServerMethod("ClubService.SendSuggestion", request);
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 ClubService::HandleAcceptSuggestion(::bgs::protocol::club::v1::AcceptSuggestionRequest const* request, ::bgs::protocol::NoData* /*response*/, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& /*continuation*/) {
  LogUnimplementedServerMethod("ClubService.AcceptSuggestion", request);
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 ClubService::HandleDeclineSuggestion(::bgs::protocol::club::v1::DeclineSuggestionRequest const* request, ::bgs::protocol::NoData* /*response*/, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& /*continuation*/) {
  LogUnimplementedServerMethod("ClubService.DeclineSuggestion", request);
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 ClubService::HandleGetSuggestion(::bgs::protocol::club::v1::GetSuggestionRequest const* request, ::bgs::protocol::club::v1::GetSuggestionResponse* /*response*/, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& /*continuation*/) {
  LogUnimplementedServerMethod("ClubService.GetSuggestion", request);
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 ClubService::HandleGetSuggestions(::bgs::protocol::club::v1::GetSuggestionsRequest const* request, ::bgs::protocol::club::v1::GetSuggestionsResponse* /*response*/, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& /*continuation*/) {
  LogUnimplementedServerMethod("ClubService.GetSuggestions", request);
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 ClubService::HandleCreateTicket(::bgs::protocol::club::v1::CreateTicketRequest const* request, ::bgs::protocol::club::v1::CreateTicketResponse* /*response*/, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& /*continuation*/) {
  LogUnimplementedServerMethod("ClubService.CreateTicket", request);
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 ClubService::HandleDestroyTicket(::bgs::protocol::club::v1::DestroyTicketRequest const* request, ::bgs::protocol::NoData* /*response*/, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& /*continuation*/) {
  LogUnimplementedServerMethod("ClubService.DestroyTicket", request);
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 ClubService::HandleRedeemTicket(::bgs::protocol::club::v1::RedeemTicketRequest const* request, ::bgs::protocol::NoData* /*response*/, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& /*continuation*/) {
  LogUnimplementedServerMethod("ClubService.RedeemTicket", request);
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 ClubService::HandleGetTicket(::bgs::protocol::club::v1::GetTicketRequest const* request, ::bgs::protocol::club::v1::GetTicketResponse* /*response*/, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& /*continuation*/) {
  LogUnimplementedServerMethod("ClubService.GetTicket", request);
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 ClubService::HandleGetTickets(::bgs::protocol::club::v1::GetTicketsRequest const* request, ::bgs::protocol::club::v1::GetTicketsResponse* /*response*/, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& /*continuation*/) {
  LogUnimplementedServerMethod("ClubService.GetTickets", request);
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 ClubService::HandleAddBan(::bgs::protocol::club::v1::AddBanRequest const* request, ::bgs::protocol::NoData* /*response*/, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& /*continuation*/) {
  LogUnimplementedServerMethod("ClubService.AddBan", request);
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 ClubService::HandleRemoveBan(::bgs::protocol::club::v1::RemoveBanRequest const* request, ::bgs::protocol::NoData* /*response*/, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& /*continuation*/) {
  LogUnimplementedServerMethod("ClubService.RemoveBan", request);
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 ClubService::HandleGetBan(::bgs::protocol::club::v1::GetBanRequest const* request, ::bgs::protocol::club::v1::GetBanResponse* /*response*/, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& /*continuation*/) {
  LogUnimplementedServerMethod("ClubService.GetBan", request);
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 ClubService::HandleGetBans(::bgs::protocol::club::v1::GetBansRequest const* request, ::bgs::protocol::club::v1::GetBansResponse* /*response*/, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& /*continuation*/) {
  LogUnimplementedServerMethod("ClubService.GetBans", request);
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 ClubService::HandleSubscribeStream(::bgs::protocol::club::v1::SubscribeStreamRequest const* request, ::bgs::protocol::NoData* /*response*/, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& /*continuation*/) {
  LogUnimplementedServerMethod("ClubService.SubscribeStream", request);
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 ClubService::HandleUnsubscribeStream(::bgs::protocol::club::v1::UnsubscribeStreamRequest const* request, ::bgs::protocol::NoData* /*response*/, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& /*continuation*/) {
  LogUnimplementedServerMethod("ClubService.UnsubscribeStream", request);
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 ClubService::HandleCreateStream(::bgs::protocol::club::v1::CreateStreamRequest const* request, ::bgs::protocol::club::v1::CreateStreamResponse* /*response*/, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& /*continuation*/) {
  LogUnimplementedServerMethod("ClubService.CreateStream", request);
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 ClubService::HandleDestroyStream(::bgs::protocol::club::v1::DestroyStreamRequest const* request, ::bgs::protocol::NoData* /*response*/, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& /*continuation*/) {
  LogUnimplementedServerMethod("ClubService.DestroyStream", request);
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 ClubService::HandleGetStream(::bgs::protocol::club::v1::GetStreamRequest const* request, ::bgs::protocol::club::v1::GetStreamResponse* /*response*/, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& /*continuation*/) {
  LogUnimplementedServerMethod("ClubService.GetStream", request);
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 ClubService::HandleGetStreams(::bgs::protocol::club::v1::GetStreamsRequest const* request, ::bgs::protocol::club::v1::GetStreamsResponse* /*response*/, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& /*continuation*/) {
  LogUnimplementedServerMethod("ClubService.GetStreams", request);
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 ClubService::HandleUpdateStreamState(::bgs::protocol::club::v1::UpdateStreamStateRequest const* request, ::bgs::protocol::NoData* /*response*/, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& /*continuation*/) {
  LogUnimplementedServerMethod("ClubService.UpdateStreamState", request);
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 ClubService::HandleSetStreamFocus(::bgs::protocol::club::v1::SetStreamFocusRequest const* request, ::bgs::protocol::NoData* /*response*/, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& /*continuation*/) {
  LogUnimplementedServerMethod("ClubService.SetStreamFocus", request);
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 ClubService::HandleGetStreamVoiceToken(::bgs::protocol::club::v1::GetStreamVoiceTokenRequest const* request, ::bgs::protocol::club::v1::GetStreamVoiceTokenResponse* /*response*/, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& /*continuation*/) {
  LogUnimplementedServerMethod("ClubService.GetStreamVoiceToken", request);
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 ClubService::HandleKickFromStreamVoice(::bgs::protocol::club::v1::KickFromStreamVoiceRequest const* request, ::bgs::protocol::NoData* /*response*/, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& /*continuation*/) {
  LogUnimplementedServerMethod("ClubService.KickFromStreamVoice", request);
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 ClubService::HandleCreateMessage(::bgs::protocol::club::v1::CreateMessageRequest const* request, ::bgs::protocol::club::v1::CreateMessageResponse* /*response*/, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& /*continuation*/) {
  LogUnimplementedServerMethod("ClubService.CreateMessage", request);
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 ClubService::HandleDestroyMessage(::bgs::protocol::club::v1::DestroyMessageRequest const* request, ::bgs::protocol::club::v1::DestroyMessageResponse* /*response*/, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& /*continuation*/) {
  LogUnimplementedServerMethod("ClubService.DestroyMessage", request);
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 ClubService::HandleEditMessage(::bgs::protocol::club::v1::EditMessageRequest const* request, ::bgs::protocol::club::v1::EditMessageResponse* /*response*/, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& /*continuation*/) {
  LogUnimplementedServerMethod("ClubService.EditMessage", request);
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 ClubService::HandleSetMessagePinned(::bgs::protocol::club::v1::SetMessagePinnedRequest const* request, ::bgs::protocol::NoData* /*response*/, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& /*continuation*/) {
  LogUnimplementedServerMethod("ClubService.SetMessagePinned", request);
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 ClubService::HandleSetTypingIndicator(::bgs::protocol::club::v1::SetTypingIndicatorRequest const* request, ::bgs::protocol::NoData* /*response*/, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& /*continuation*/) {
  LogUnimplementedServerMethod("ClubService.SetTypingIndicator", request);
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 ClubService::HandleAdvanceStreamViewTime(::bgs::protocol::club::v1::AdvanceStreamViewTimeRequest const* request, ::bgs::protocol::NoData* /*response*/, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& /*continuation*/) {
  LogUnimplementedServerMethod("ClubService.AdvanceStreamViewTime", request);
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 ClubService::HandleGetStreamHistory(::bgs::protocol::club::v1::GetStreamHistoryRequest const* request, ::bgs::protocol::club::v1::GetStreamHistoryResponse* /*response*/, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& /*continuation*/) {
  LogUnimplementedServerMethod("ClubService.GetStreamHistory", request);
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 ClubService::HandleGetStreamMessage(::bgs::protocol::club::v1::GetStreamMessageRequest const* request, ::bgs::protocol::club::v1::GetStreamMessageResponse* /*response*/, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& /*continuation*/) {
  LogUnimplementedServerMethod("ClubService.GetStreamMessage", request);
  return ERROR_RPC_NOT_IMPLEMENTED;
}

void ClubService::ParseAndHandleSubscribe(uint32 token, uint32 methodId, MessageBuffer& buffer) {
  ::bgs::protocol::club::v1::SubscribeRequest request;
  if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
    LogFailedParsingRequest("ClubService.Subscribe");
    SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
    return;
  }
  LogCallServerMethod("ClubService.Subscribe", "bgs.protocol.club.v1.SubscribeRequest", &request);
  std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = CreateServerContinuation(token, methodId, "ClubService.Subscribe", ::bgs::protocol::NoData::descriptor());
  ::bgs::protocol::NoData response;
  uint32 status = HandleSubscribe(&request, &response, continuation);
  if (continuation)
    continuation(this, status, &response);
}

void ClubService::ParseAndHandleUnsubscribe(uint32 token, uint32 methodId, MessageBuffer& buffer) {
  ::bgs::protocol::club::v1::UnsubscribeRequest request;
  if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
    LogFailedParsingRequest("ClubService.Unsubscribe");
    SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
    return;
  }
  LogCallServerMethod("ClubService.Unsubscribe", "bgs.protocol.club.v1.UnsubscribeRequest", &request);
  std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = CreateServerContinuation(token, methodId, "ClubService.Unsubscribe", ::bgs::protocol::NoData::descriptor());
  ::bgs::protocol::NoData response;
  uint32 status = HandleUnsubscribe(&request, &response, continuation);
  if (continuation)
    continuation(this, status, &response);
}

void ClubService::ParseAndHandleCreate(uint32 token, uint32 methodId, MessageBuffer& buffer) {
  ::bgs::protocol::club::v1::CreateRequest request;
  if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
    LogFailedParsingRequest("ClubService.Create");
    SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
    return;
  }
  LogCallServerMethod("ClubService.Create", "bgs.protocol.club.v1.CreateRequest", &request);
  std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = CreateServerContinuation(token, methodId, "ClubService.Create", ::bgs::protocol::club::v1::CreateResponse::descriptor());
  ::bgs::protocol::club::v1::CreateResponse response;
  uint32 status = HandleCreate(&request, &response, continuation);
  if (continuation)
    continuation(this, status, &response);
}

void ClubService::ParseAndHandleDestroy(uint32 token, uint32 methodId, MessageBuffer& buffer) {
  ::bgs::protocol::club::v1::DestroyRequest request;
  if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
    LogFailedParsingRequest("ClubService.Destroy");
    SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
    return;
  }
  LogCallServerMethod("ClubService.Destroy", "bgs.protocol.club.v1.DestroyRequest", &request);
  std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = CreateServerContinuation(token, methodId, "ClubService.Destroy", ::bgs::protocol::NoData::descriptor());
  ::bgs::protocol::NoData response;
  uint32 status = HandleDestroy(&request, &response, continuation);
  if (continuation)
    continuation(this, status, &response);
}

void ClubService::ParseAndHandleGetDescription(uint32 token, uint32 methodId, MessageBuffer& buffer) {
  ::bgs::protocol::club::v1::GetDescriptionRequest request;
  if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
    LogFailedParsingRequest("ClubService.GetDescription");
    SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
    return;
  }
  LogCallServerMethod("ClubService.GetDescription", "bgs.protocol.club.v1.GetDescriptionRequest", &request);
  std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = CreateServerContinuation(token, methodId, "ClubService.GetDescription", ::bgs::protocol::club::v1::GetDescriptionResponse::descriptor());
  ::bgs::protocol::club::v1::GetDescriptionResponse response;
  uint32 status = HandleGetDescription(&request, &response, continuation);
  if (continuation)
    continuation(this, status, &response);
}

void ClubService::ParseAndHandleGetClubType(uint32 token, uint32 methodId, MessageBuffer& buffer) {
  ::bgs::protocol::club::v1::GetClubTypeRequest request;
  if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
    LogFailedParsingRequest("ClubService.GetClubType");
    SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
    return;
  }
  LogCallServerMethod("ClubService.GetClubType", "bgs.protocol.club.v1.GetClubTypeRequest", &request);
  std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = CreateServerContinuation(token, methodId, "ClubService.GetClubType", ::bgs::protocol::club::v1::GetClubTypeResponse::descriptor());
  ::bgs::protocol::club::v1::GetClubTypeResponse response;
  uint32 status = HandleGetClubType(&request, &response, continuation);
  if (continuation)
    continuation(this, status, &response);
}

void ClubService::ParseAndHandleUpdateClubState(uint32 token, uint32 methodId, MessageBuffer& buffer) {
  ::bgs::protocol::club::v1::UpdateClubStateRequest request;
  if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
    LogFailedParsingRequest("ClubService.UpdateClubState");
    SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
    return;
  }
  LogCallServerMethod("ClubService.UpdateClubState", "bgs.protocol.club.v1.UpdateClubStateRequest", &request);
  std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = CreateServerContinuation(token, methodId, "ClubService.UpdateClubState", ::bgs::protocol::NoData::descriptor());
  ::bgs::protocol::NoData response;
  uint32 status = HandleUpdateClubState(&request, &response, continuation);
  if (continuation)
    continuation(this, status, &response);
}

void ClubService::ParseAndHandleUpdateClubSettings(uint32 token, uint32 methodId, MessageBuffer& buffer) {
  ::bgs::protocol::club::v1::UpdateClubSettingsRequest request;
  if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
    LogFailedParsingRequest("ClubService.UpdateClubSettings");
    SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
    return;
  }
  LogCallServerMethod("ClubService.UpdateClubSettings", "bgs.protocol.club.v1.UpdateClubSettingsRequest", &request);
  std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = CreateServerContinuation(token, methodId, "ClubService.UpdateClubSettings", ::bgs::protocol::NoData::descriptor());
  ::bgs::protocol::NoData response;
  uint32 status = HandleUpdateClubSettings(&request, &response, continuation);
  if (continuation)
    continuation(this, status, &response);
}

void ClubService::ParseAndHandleJoin(uint32 token, uint32 methodId, MessageBuffer& buffer) {
  ::bgs::protocol::club::v1::JoinRequest request;
  if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
    LogFailedParsingRequest("ClubService.Join");
    SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
    return;
  }
  LogCallServerMethod("ClubService.Join", "bgs.protocol.club.v1.JoinRequest", &request);
  std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = CreateServerContinuation(token, methodId, "ClubService.Join", ::bgs::protocol::NoData::descriptor());
  ::bgs::protocol::NoData response;
  uint32 status = HandleJoin(&request, &response, continuation);
  if (continuation)
    continuation(this, status, &response);
}

void ClubService::ParseAndHandleLeave(uint32 token, uint32 methodId, MessageBuffer& buffer) {
  ::bgs::protocol::club::v1::LeaveRequest request;
  if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
    LogFailedParsingRequest("ClubService.Leave");
    SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
    return;
  }
  LogCallServerMethod("ClubService.Leave", "bgs.protocol.club.v1.LeaveRequest", &request);
  std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = CreateServerContinuation(token, methodId, "ClubService.Leave", ::bgs::protocol::NoData::descriptor());
  ::bgs::protocol::NoData response;
  uint32 status = HandleLeave(&request, &response, continuation);
  if (continuation)
    continuation(this, status, &response);
}

void ClubService::ParseAndHandleKick(uint32 token, uint32 methodId, MessageBuffer& buffer) {
  ::bgs::protocol::club::v1::KickRequest request;
  if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
    LogFailedParsingRequest("ClubService.Kick");
    SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
    return;
  }
  LogCallServerMethod("ClubService.Kick", "bgs.protocol.club.v1.KickRequest", &request);
  std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = CreateServerContinuation(token, methodId, "ClubService.Kick", ::bgs::protocol::NoData::descriptor());
  ::bgs::protocol::NoData response;
  uint32 status = HandleKick(&request, &response, continuation);
  if (continuation)
    continuation(this, status, &response);
}

void ClubService::ParseAndHandleGetMember(uint32 token, uint32 methodId, MessageBuffer& buffer) {
  ::bgs::protocol::club::v1::GetMemberRequest request;
  if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
    LogFailedParsingRequest("ClubService.GetMember");
    SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
    return;
  }
  LogCallServerMethod("ClubService.GetMember", "bgs.protocol.club.v1.GetMemberRequest", &request);
  std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = CreateServerContinuation(token, methodId, "ClubService.GetMember", ::bgs::protocol::club::v1::GetMemberResponse::descriptor());
  ::bgs::protocol::club::v1::GetMemberResponse response;
  uint32 status = HandleGetMember(&request, &response, continuation);
  if (continuation)
    continuation(this, status, &response);
}

void ClubService::ParseAndHandleGetMembers(uint32 token, uint32 methodId, MessageBuffer& buffer) {
  ::bgs::protocol::club::v1::GetMembersRequest request;
  if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
    LogFailedParsingRequest("ClubService.GetMembers");
    SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
    return;
  }
  LogCallServerMethod("ClubService.GetMembers", "bgs.protocol.club.v1.GetMembersRequest", &request);
  std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = CreateServerContinuation(token, methodId, "ClubService.GetMembers", ::bgs::protocol::club::v1::GetMembersResponse::descriptor());
  ::bgs::protocol::club::v1::GetMembersResponse response;
  uint32 status = HandleGetMembers(&request, &response, continuation);
  if (continuation)
    continuation(this, status, &response);
}

void ClubService::ParseAndHandleUpdateMemberState(uint32 token, uint32 methodId, MessageBuffer& buffer) {
  ::bgs::protocol::club::v1::UpdateMemberStateRequest request;
  if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
    LogFailedParsingRequest("ClubService.UpdateMemberState");
    SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
    return;
  }
  LogCallServerMethod("ClubService.UpdateMemberState", "bgs.protocol.club.v1.UpdateMemberStateRequest", &request);
  std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = CreateServerContinuation(token, methodId, "ClubService.UpdateMemberState", ::bgs::protocol::NoData::descriptor());
  ::bgs::protocol::NoData response;
  uint32 status = HandleUpdateMemberState(&request, &response, continuation);
  if (continuation)
    continuation(this, status, &response);
}

void ClubService::ParseAndHandleUpdateSubscriberState(uint32 token, uint32 methodId, MessageBuffer& buffer) {
  ::bgs::protocol::club::v1::UpdateSubscriberStateRequest request;
  if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
    LogFailedParsingRequest("ClubService.UpdateSubscriberState");
    SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
    return;
  }
  LogCallServerMethod("ClubService.UpdateSubscriberState", "bgs.protocol.club.v1.UpdateSubscriberStateRequest", &request);
  std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = CreateServerContinuation(token, methodId, "ClubService.UpdateSubscriberState", ::bgs::protocol::NoData::descriptor());
  ::bgs::protocol::NoData response;
  uint32 status = HandleUpdateSubscriberState(&request, &response, continuation);
  if (continuation)
    continuation(this, status, &response);
}

void ClubService::ParseAndHandleAssignRole(uint32 token, uint32 methodId, MessageBuffer& buffer) {
  ::bgs::protocol::club::v1::AssignRoleRequest request;
  if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
    LogFailedParsingRequest("ClubService.AssignRole");
    SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
    return;
  }
  LogCallServerMethod("ClubService.AssignRole", "bgs.protocol.club.v1.AssignRoleRequest", &request);
  std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = CreateServerContinuation(token, methodId, "ClubService.AssignRole", ::bgs::protocol::NoData::descriptor());
  ::bgs::protocol::NoData response;
  uint32 status = HandleAssignRole(&request, &response, continuation);
  if (continuation)
    continuation(this, status, &response);
}

void ClubService::ParseAndHandleUnassignRole(uint32 token, uint32 methodId, MessageBuffer& buffer) {
  ::bgs::protocol::club::v1::UnassignRoleRequest request;
  if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
    LogFailedParsingRequest("ClubService.UnassignRole");
    SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
    return;
  }
  LogCallServerMethod("ClubService.UnassignRole", "bgs.protocol.club.v1.UnassignRoleRequest", &request);
  std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = CreateServerContinuation(token, methodId, "ClubService.UnassignRole", ::bgs::protocol::NoData::descriptor());
  ::bgs::protocol::NoData response;
  uint32 status = HandleUnassignRole(&request, &response, continuation);
  if (continuation)
    continuation(this, status, &response);
}

void ClubService::ParseAndHandleSendInvitation(uint32 token, uint32 methodId, MessageBuffer& buffer) {
  ::bgs::protocol::club::v1::SendInvitationRequest request;
  if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
    LogFailedParsingRequest("ClubService.SendInvitation");
    SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
    return;
  }
  LogCallServerMethod("ClubService.SendInvitation", "bgs.protocol.club.v1.SendInvitationRequest", &request);
  std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = CreateServerContinuation(token, methodId, "ClubService.SendInvitation", ::bgs::protocol::NoData::descriptor());
  ::bgs::protocol::NoData response;
  uint32 status = HandleSendInvitation(&request, &response, continuation);
  if (continuation)
    continuation(this, status, &response);
}

void ClubService::ParseAndHandleAcceptInvitation(uint32 token, uint32 methodId, MessageBuffer& buffer) {
  ::bgs::protocol::club::v1::AcceptInvitationRequest request;
  if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
    LogFailedParsingRequest("ClubService.AcceptInvitation");
    SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
    return;
  }
  LogCallServerMethod("ClubService.AcceptInvitation", "bgs.protocol.club.v1.AcceptInvitationRequest", &request);
  std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = CreateServerContinuation(token, methodId, "ClubService.AcceptInvitation", ::bgs::protocol::NoData::descriptor());
  ::bgs::protocol::NoData response;
  uint32 status = HandleAcceptInvitation(&request, &response, continuation);
  if (continuation)
    continuation(this, status, &response);
}

void ClubService::ParseAndHandleDeclineInvitation(uint32 token, uint32 methodId, MessageBuffer& buffer) {
  ::bgs::protocol::club::v1::DeclineInvitationRequest request;
  if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
    LogFailedParsingRequest("ClubService.DeclineInvitation");
    SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
    return;
  }
  LogCallServerMethod("ClubService.DeclineInvitation", "bgs.protocol.club.v1.DeclineInvitationRequest", &request);
  std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = CreateServerContinuation(token, methodId, "ClubService.DeclineInvitation", ::bgs::protocol::NoData::descriptor());
  ::bgs::protocol::NoData response;
  uint32 status = HandleDeclineInvitation(&request, &response, continuation);
  if (continuation)
    continuation(this, status, &response);
}

void ClubService::ParseAndHandleRevokeInvitation(uint32 token, uint32 methodId, MessageBuffer& buffer) {
  ::bgs::protocol::club::v1::RevokeInvitationRequest request;
  if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
    LogFailedParsingRequest("ClubService.RevokeInvitation");
    SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
    return;
  }
  LogCallServerMethod("ClubService.RevokeInvitation", "bgs.protocol.club.v1.RevokeInvitationRequest", &request);
  std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = CreateServerContinuation(token, methodId, "ClubService.RevokeInvitation", ::bgs::protocol::NoData::descriptor());
  ::bgs::protocol::NoData response;
  uint32 status = HandleRevokeInvitation(&request, &response, continuation);
  if (continuation)
    continuation(this, status, &response);
}

void ClubService::ParseAndHandleGetInvitation(uint32 token, uint32 methodId, MessageBuffer& buffer) {
  ::bgs::protocol::club::v1::GetInvitationRequest request;
  if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
    LogFailedParsingRequest("ClubService.GetInvitation");
    SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
    return;
  }
  LogCallServerMethod("ClubService.GetInvitation", "bgs.protocol.club.v1.GetInvitationRequest", &request);
  std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = CreateServerContinuation(token, methodId, "ClubService.GetInvitation", ::bgs::protocol::club::v1::GetInvitationResponse::descriptor());
  ::bgs::protocol::club::v1::GetInvitationResponse response;
  uint32 status = HandleGetInvitation(&request, &response, continuation);
  if (continuation)
    continuation(this, status, &response);
}

void ClubService::ParseAndHandleGetInvitations(uint32 token, uint32 methodId, MessageBuffer& buffer) {
  ::bgs::protocol::club::v1::GetInvitationsRequest request;
  if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
    LogFailedParsingRequest("ClubService.GetInvitations");
    SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
    return;
  }
  LogCallServerMethod("ClubService.GetInvitations", "bgs.protocol.club.v1.GetInvitationsRequest", &request);
  std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = CreateServerContinuation(token, methodId, "ClubService.GetInvitations", ::bgs::protocol::club::v1::GetInvitationsResponse::descriptor());
  ::bgs::protocol::club::v1::GetInvitationsResponse response;
  uint32 status = HandleGetInvitations(&request, &response, continuation);
  if (continuation)
    continuation(this, status, &response);
}

void ClubService::ParseAndHandleSendSuggestion(uint32 token, uint32 methodId, MessageBuffer& buffer) {
  ::bgs::protocol::club::v1::SendSuggestionRequest request;
  if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
    LogFailedParsingRequest("ClubService.SendSuggestion");
    SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
    return;
  }
  LogCallServerMethod("ClubService.SendSuggestion", "bgs.protocol.club.v1.SendSuggestionRequest", &request);
  std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = CreateServerContinuation(token, methodId, "ClubService.SendSuggestion", ::bgs::protocol::NoData::descriptor());
  ::bgs::protocol::NoData response;
  uint32 status = HandleSendSuggestion(&request, &response, continuation);
  if (continuation)
    continuation(this, status, &response);
}

void ClubService::ParseAndHandleAcceptSuggestion(uint32 token, uint32 methodId, MessageBuffer& buffer) {
  ::bgs::protocol::club::v1::AcceptSuggestionRequest request;
  if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
    LogFailedParsingRequest("ClubService.AcceptSuggestion");
    SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
    return;
  }
  LogCallServerMethod("ClubService.AcceptSuggestion", "bgs.protocol.club.v1.AcceptSuggestionRequest", &request);
  std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = CreateServerContinuation(token, methodId, "ClubService.AcceptSuggestion", ::bgs::protocol::NoData::descriptor());
  ::bgs::protocol::NoData response;
  uint32 status = HandleAcceptSuggestion(&request, &response, continuation);
  if (continuation)
    continuation(this, status, &response);
}

void ClubService::ParseAndHandleDeclineSuggestion(uint32 token, uint32 methodId, MessageBuffer& buffer) {
  ::bgs::protocol::club::v1::DeclineSuggestionRequest request;
  if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
    LogFailedParsingRequest("ClubService.DeclineSuggestion");
    SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
    return;
  }
  LogCallServerMethod("ClubService.DeclineSuggestion", "bgs.protocol.club.v1.DeclineSuggestionRequest", &request);
  std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = CreateServerContinuation(token, methodId, "ClubService.DeclineSuggestion", ::bgs::protocol::NoData::descriptor());
  ::bgs::protocol::NoData response;
  uint32 status = HandleDeclineSuggestion(&request, &response, continuation);
  if (continuation)
    continuation(this, status, &response);
}

void ClubService::ParseAndHandleGetSuggestion(uint32 token, uint32 methodId, MessageBuffer& buffer) {
  ::bgs::protocol::club::v1::GetSuggestionRequest request;
  if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
    LogFailedParsingRequest("ClubService.GetSuggestion");
    SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
    return;
  }
  LogCallServerMethod("ClubService.GetSuggestion", "bgs.protocol.club.v1.GetSuggestionRequest", &request);
  std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = CreateServerContinuation(token, methodId, "ClubService.GetSuggestion", ::bgs::protocol::club::v1::GetSuggestionResponse::descriptor());
  ::bgs::protocol::club::v1::GetSuggestionResponse response;
  uint32 status = HandleGetSuggestion(&request, &response, continuation);
  if (continuation)
    continuation(this, status, &response);
}

void ClubService::ParseAndHandleGetSuggestions(uint32 token, uint32 methodId, MessageBuffer& buffer) {
  ::bgs::protocol::club::v1::GetSuggestionsRequest request;
  if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
    LogFailedParsingRequest("ClubService.GetSuggestions");
    SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
    return;
  }
  LogCallServerMethod("ClubService.GetSuggestions", "bgs.protocol.club.v1.GetSuggestionsRequest", &request);
  std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = CreateServerContinuation(token, methodId, "ClubService.GetSuggestions", ::bgs::protocol::club::v1::GetSuggestionsResponse::descriptor());
  ::bgs::protocol::club::v1::GetSuggestionsResponse response;
  uint32 status = HandleGetSuggestions(&request, &response, continuation);
  if (continuation)
    continuation(this, status, &response);
}

void ClubService::ParseAndHandleCreateTicket(uint32 token, uint32 methodId, MessageBuffer& buffer) {
  ::bgs::protocol::club::v1::CreateTicketRequest request;
  if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
    LogFailedParsingRequest("ClubService.CreateTicket");
    SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
    return;
  }
  LogCallServerMethod("ClubService.CreateTicket", "bgs.protocol.club.v1.CreateTicketRequest", &request);
  std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = CreateServerContinuation(token, methodId, "ClubService.CreateTicket", ::bgs::protocol::club::v1::CreateTicketResponse::descriptor());
  ::bgs::protocol::club::v1::CreateTicketResponse response;
  uint32 status = HandleCreateTicket(&request, &response, continuation);
  if (continuation)
    continuation(this, status, &response);
}

void ClubService::ParseAndHandleDestroyTicket(uint32 token, uint32 methodId, MessageBuffer& buffer) {
  ::bgs::protocol::club::v1::DestroyTicketRequest request;
  if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
    LogFailedParsingRequest("ClubService.DestroyTicket");
    SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
    return;
  }
  LogCallServerMethod("ClubService.DestroyTicket", "bgs.protocol.club.v1.DestroyTicketRequest", &request);
  std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = CreateServerContinuation(token, methodId, "ClubService.DestroyTicket", ::bgs::protocol::NoData::descriptor());
  ::bgs::protocol::NoData response;
  uint32 status = HandleDestroyTicket(&request, &response, continuation);
  if (continuation)
    continuation(this, status, &response);
}

void ClubService::ParseAndHandleRedeemTicket(uint32 token, uint32 methodId, MessageBuffer& buffer) {
  ::bgs::protocol::club::v1::RedeemTicketRequest request;
  if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
    LogFailedParsingRequest("ClubService.RedeemTicket");
    SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
    return;
  }
  LogCallServerMethod("ClubService.RedeemTicket", "bgs.protocol.club.v1.RedeemTicketRequest", &request);
  std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = CreateServerContinuation(token, methodId, "ClubService.RedeemTicket", ::bgs::protocol::NoData::descriptor());
  ::bgs::protocol::NoData response;
  uint32 status = HandleRedeemTicket(&request, &response, continuation);
  if (continuation)
    continuation(this, status, &response);
}

void ClubService::ParseAndHandleGetTicket(uint32 token, uint32 methodId, MessageBuffer& buffer) {
  ::bgs::protocol::club::v1::GetTicketRequest request;
  if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
    LogFailedParsingRequest("ClubService.GetTicket");
    SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
    return;
  }
  LogCallServerMethod("ClubService.GetTicket", "bgs.protocol.club.v1.GetTicketRequest", &request);
  std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = CreateServerContinuation(token, methodId, "ClubService.GetTicket", ::bgs::protocol::club::v1::GetTicketResponse::descriptor());
  ::bgs::protocol::club::v1::GetTicketResponse response;
  uint32 status = HandleGetTicket(&request, &response, continuation);
  if (continuation)
    continuation(this, status, &response);
}

void ClubService::ParseAndHandleGetTickets(uint32 token, uint32 methodId, MessageBuffer& buffer) {
  ::bgs::protocol::club::v1::GetTicketsRequest request;
  if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
    LogFailedParsingRequest("ClubService.GetTickets");
    SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
    return;
  }
  LogCallServerMethod("ClubService.GetTickets", "bgs.protocol.club.v1.GetTicketsRequest", &request);
  std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = CreateServerContinuation(token, methodId, "ClubService.GetTickets", ::bgs::protocol::club::v1::GetTicketsResponse::descriptor());
  ::bgs::protocol::club::v1::GetTicketsResponse response;
  uint32 status = HandleGetTickets(&request, &response, continuation);
  if (continuation)
    continuation(this, status, &response);
}

void ClubService::ParseAndHandleAddBan(uint32 token, uint32 methodId, MessageBuffer& buffer) {
  ::bgs::protocol::club::v1::AddBanRequest request;
  if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
    LogFailedParsingRequest("ClubService.AddBan");
    SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
    return;
  }
  LogCallServerMethod("ClubService.AddBan", "bgs.protocol.club.v1.AddBanRequest", &request);
  std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = CreateServerContinuation(token, methodId, "ClubService.AddBan", ::bgs::protocol::NoData::descriptor());
  ::bgs::protocol::NoData response;
  uint32 status = HandleAddBan(&request, &response, continuation);
  if (continuation)
    continuation(this, status, &response);
}

void ClubService::ParseAndHandleRemoveBan(uint32 token, uint32 methodId, MessageBuffer& buffer) {
  ::bgs::protocol::club::v1::RemoveBanRequest request;
  if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
    LogFailedParsingRequest("ClubService.RemoveBan");
    SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
    return;
  }
  LogCallServerMethod("ClubService.RemoveBan", "bgs.protocol.club.v1.RemoveBanRequest", &request);
  std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = CreateServerContinuation(token, methodId, "ClubService.RemoveBan", ::bgs::protocol::NoData::descriptor());
  ::bgs::protocol::NoData response;
  uint32 status = HandleRemoveBan(&request, &response, continuation);
  if (continuation)
    continuation(this, status, &response);
}

void ClubService::ParseAndHandleGetBan(uint32 token, uint32 methodId, MessageBuffer& buffer) {
  ::bgs::protocol::club::v1::GetBanRequest request;
  if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
    LogFailedParsingRequest("ClubService.GetBan");
    SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
    return;
  }
  LogCallServerMethod("ClubService.GetBan", "bgs.protocol.club.v1.GetBanRequest", &request);
  std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = CreateServerContinuation(token, methodId, "ClubService.GetBan", ::bgs::protocol::club::v1::GetBanResponse::descriptor());
  ::bgs::protocol::club::v1::GetBanResponse response;
  uint32 status = HandleGetBan(&request, &response, continuation);
  if (continuation)
    continuation(this, status, &response);
}

void ClubService::ParseAndHandleGetBans(uint32 token, uint32 methodId, MessageBuffer& buffer) {
  ::bgs::protocol::club::v1::GetBansRequest request;
  if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
    LogFailedParsingRequest("ClubService.GetBans");
    SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
    return;
  }
  LogCallServerMethod("ClubService.GetBans", "bgs.protocol.club.v1.GetBansRequest", &request);
  std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = CreateServerContinuation(token, methodId, "ClubService.GetBans", ::bgs::protocol::club::v1::GetBansResponse::descriptor());
  ::bgs::protocol::club::v1::GetBansResponse response;
  uint32 status = HandleGetBans(&request, &response, continuation);
  if (continuation)
    continuation(this, status, &response);
}

void ClubService::ParseAndHandleSubscribeStream(uint32 token, uint32 methodId, MessageBuffer& buffer) {
  ::bgs::protocol::club::v1::SubscribeStreamRequest request;
  if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
    LogFailedParsingRequest("ClubService.SubscribeStream");
    SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
    return;
  }
  LogCallServerMethod("ClubService.SubscribeStream", "bgs.protocol.club.v1.SubscribeStreamRequest", &request);
  std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = CreateServerContinuation(token, methodId, "ClubService.SubscribeStream", ::bgs::protocol::NoData::descriptor());
  ::bgs::protocol::NoData response;
  uint32 status = HandleSubscribeStream(&request, &response, continuation);
  if (continuation)
    continuation(this, status, &response);
}

void ClubService::ParseAndHandleUnsubscribeStream(uint32 token, uint32 methodId, MessageBuffer& buffer) {
  ::bgs::protocol::club::v1::UnsubscribeStreamRequest request;
  if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
    LogFailedParsingRequest("ClubService.UnsubscribeStream");
    SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
    return;
  }
  LogCallServerMethod("ClubService.UnsubscribeStream", "bgs.protocol.club.v1.UnsubscribeStreamRequest", &request);
  std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = CreateServerContinuation(token, methodId, "ClubService.UnsubscribeStream", ::bgs::protocol::NoData::descriptor());
  ::bgs::protocol::NoData response;
  uint32 status = HandleUnsubscribeStream(&request, &response, continuation);
  if (continuation)
    continuation(this, status, &response);
}

void ClubService::ParseAndHandleCreateStream(uint32 token, uint32 methodId, MessageBuffer& buffer) {
  ::bgs::protocol::club::v1::CreateStreamRequest request;
  if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
    LogFailedParsingRequest("ClubService.CreateStream");
    SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
    return;
  }
  LogCallServerMethod("ClubService.CreateStream", "bgs.protocol.club.v1.CreateStreamRequest", &request);
  std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = CreateServerContinuation(token, methodId, "ClubService.CreateStream", ::bgs::protocol::club::v1::CreateStreamResponse::descriptor());
  ::bgs::protocol::club::v1::CreateStreamResponse response;
  uint32 status = HandleCreateStream(&request, &response, continuation);
  if (continuation)
    continuation(this, status, &response);
}

void ClubService::ParseAndHandleDestroyStream(uint32 token, uint32 methodId, MessageBuffer& buffer) {
  ::bgs::protocol::club::v1::DestroyStreamRequest request;
  if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
    LogFailedParsingRequest("ClubService.DestroyStream");
    SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
    return;
  }
  LogCallServerMethod("ClubService.DestroyStream", "bgs.protocol.club.v1.DestroyStreamRequest", &request);
  std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = CreateServerContinuation(token, methodId, "ClubService.DestroyStream", ::bgs::protocol::NoData::descriptor());
  ::bgs::protocol::NoData response;
  uint32 status = HandleDestroyStream(&request, &response, continuation);
  if (continuation)
    continuation(this, status, &response);
}

void ClubService::ParseAndHandleGetStream(uint32 token, uint32 methodId, MessageBuffer& buffer) {
  ::bgs::protocol::club::v1::GetStreamRequest request;
  if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
    LogFailedParsingRequest("ClubService.GetStream");
    SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
    return;
  }
  LogCallServerMethod("ClubService.GetStream", "bgs.protocol.club.v1.GetStreamRequest", &request);
  std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = CreateServerContinuation(token, methodId, "ClubService.GetStream", ::bgs::protocol::club::v1::GetStreamResponse::descriptor());
  ::bgs::protocol::club::v1::GetStreamResponse response;
  uint32 status = HandleGetStream(&request, &response, continuation);
  if (continuation)
    continuation(this, status, &response);
}

void ClubService::ParseAndHandleGetStreams(uint32 token, uint32 methodId, MessageBuffer& buffer) {
  ::bgs::protocol::club::v1::GetStreamsRequest request;
  if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
    LogFailedParsingRequest("ClubService.GetStreams");
    SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
    return;
  }
  LogCallServerMethod("ClubService.GetStreams", "bgs.protocol.club.v1.GetStreamsRequest", &request);
  std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = CreateServerContinuation(token, methodId, "ClubService.GetStreams", ::bgs::protocol::club::v1::GetStreamsResponse::descriptor());
  ::bgs::protocol::club::v1::GetStreamsResponse response;
  uint32 status = HandleGetStreams(&request, &response, continuation);
  if (continuation)
    continuation(this, status, &response);
}

void ClubService::ParseAndHandleUpdateStreamState(uint32 token, uint32 methodId, MessageBuffer& buffer) {
  ::bgs::protocol::club::v1::UpdateStreamStateRequest request;
  if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
    LogFailedParsingRequest("ClubService.UpdateStreamState");
    SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
    return;
  }
  LogCallServerMethod("ClubService.UpdateStreamState", "bgs.protocol.club.v1.UpdateStreamStateRequest", &request);
  std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = CreateServerContinuation(token, methodId, "ClubService.UpdateStreamState", ::bgs::protocol::NoData::descriptor());
  ::bgs::protocol::NoData response;
  uint32 status = HandleUpdateStreamState(&request, &response, continuation);
  if (continuation)
    continuation(this, status, &response);
}

void ClubService::ParseAndHandleSetStreamFocus(uint32 token, uint32 methodId, MessageBuffer& buffer) {
  ::bgs::protocol::club::v1::SetStreamFocusRequest request;
  if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
    LogFailedParsingRequest("ClubService.SetStreamFocus");
    SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
    return;
  }
  LogCallServerMethod("ClubService.SetStreamFocus", "bgs.protocol.club.v1.SetStreamFocusRequest", &request);
  std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = CreateServerContinuation(token, methodId, "ClubService.SetStreamFocus", ::bgs::protocol::NoData::descriptor());
  ::bgs::protocol::NoData response;
  uint32 status = HandleSetStreamFocus(&request, &response, continuation);
  if (continuation)
    continuation(this, status, &response);
}

void ClubService::ParseAndHandleGetStreamVoiceToken(uint32 token, uint32 methodId, MessageBuffer& buffer) {
  ::bgs::protocol::club::v1::GetStreamVoiceTokenRequest request;
  if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
    LogFailedParsingRequest("ClubService.GetStreamVoiceToken");
    SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
    return;
  }
  LogCallServerMethod("ClubService.GetStreamVoiceToken", "bgs.protocol.club.v1.GetStreamVoiceTokenRequest", &request);
  std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = CreateServerContinuation(token, methodId, "ClubService.GetStreamVoiceToken", ::bgs::protocol::club::v1::GetStreamVoiceTokenResponse::descriptor());
  ::bgs::protocol::club::v1::GetStreamVoiceTokenResponse response;
  uint32 status = HandleGetStreamVoiceToken(&request, &response, continuation);
  if (continuation)
    continuation(this, status, &response);
}

void ClubService::ParseAndHandleKickFromStreamVoice(uint32 token, uint32 methodId, MessageBuffer& buffer) {
  ::bgs::protocol::club::v1::KickFromStreamVoiceRequest request;
  if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
    LogFailedParsingRequest("ClubService.KickFromStreamVoice");
    SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
    return;
  }
  LogCallServerMethod("ClubService.KickFromStreamVoice", "bgs.protocol.club.v1.KickFromStreamVoiceRequest", &request);
  std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = CreateServerContinuation(token, methodId, "ClubService.KickFromStreamVoice", ::bgs::protocol::NoData::descriptor());
  ::bgs::protocol::NoData response;
  uint32 status = HandleKickFromStreamVoice(&request, &response, continuation);
  if (continuation)
    continuation(this, status, &response);
}

void ClubService::ParseAndHandleCreateMessage(uint32 token, uint32 methodId, MessageBuffer& buffer) {
  ::bgs::protocol::club::v1::CreateMessageRequest request;
  if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
    LogFailedParsingRequest("ClubService.CreateMessage");
    SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
    return;
  }
  LogCallServerMethod("ClubService.CreateMessage", "bgs.protocol.club.v1.CreateMessageRequest", &request);
  std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = CreateServerContinuation(token, methodId, "ClubService.CreateMessage", ::bgs::protocol::club::v1::CreateMessageResponse::descriptor());
  ::bgs::protocol::club::v1::CreateMessageResponse response;
  uint32 status = HandleCreateMessage(&request, &response, continuation);
  if (continuation)
    continuation(this, status, &response);
}

void ClubService::ParseAndHandleDestroyMessage(uint32 token, uint32 methodId, MessageBuffer& buffer) {
  ::bgs::protocol::club::v1::DestroyMessageRequest request;
  if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
    LogFailedParsingRequest("ClubService.DestroyMessage");
    SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
    return;
  }
  LogCallServerMethod("ClubService.DestroyMessage", "bgs.protocol.club.v1.DestroyMessageRequest", &request);
  std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = CreateServerContinuation(token, methodId, "ClubService.DestroyMessage", ::bgs::protocol::club::v1::DestroyMessageResponse::descriptor());
  ::bgs::protocol::club::v1::DestroyMessageResponse response;
  uint32 status = HandleDestroyMessage(&request, &response, continuation);
  if (continuation)
    continuation(this, status, &response);
}

void ClubService::ParseAndHandleEditMessage(uint32 token, uint32 methodId, MessageBuffer& buffer) {
  ::bgs::protocol::club::v1::EditMessageRequest request;
  if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
    LogFailedParsingRequest("ClubService.EditMessage");
    SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
    return;
  }
  LogCallServerMethod("ClubService.EditMessage", "bgs.protocol.club.v1.EditMessageRequest", &request);
  std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = CreateServerContinuation(token, methodId, "ClubService.EditMessage", ::bgs::protocol::club::v1::EditMessageResponse::descriptor());
  ::bgs::protocol::club::v1::EditMessageResponse response;
  uint32 status = HandleEditMessage(&request, &response, continuation);
  if (continuation)
    continuation(this, status, &response);
}

void ClubService::ParseAndHandleSetMessagePinned(uint32 token, uint32 methodId, MessageBuffer& buffer) {
  ::bgs::protocol::club::v1::SetMessagePinnedRequest request;
  if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
    LogFailedParsingRequest("ClubService.SetMessagePinned");
    SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
    return;
  }
  LogCallServerMethod("ClubService.SetMessagePinned", "bgs.protocol.club.v1.SetMessagePinnedRequest", &request);
  std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = CreateServerContinuation(token, methodId, "ClubService.SetMessagePinned", ::bgs::protocol::NoData::descriptor());
  ::bgs::protocol::NoData response;
  uint32 status = HandleSetMessagePinned(&request, &response, continuation);
  if (continuation)
    continuation(this, status, &response);
}

void ClubService::ParseAndHandleSetTypingIndicator(uint32 token, uint32 methodId, MessageBuffer& buffer) {
  ::bgs::protocol::club::v1::SetTypingIndicatorRequest request;
  if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
    LogFailedParsingRequest("ClubService.SetTypingIndicator");
    SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
    return;
  }
  LogCallServerMethod("ClubService.SetTypingIndicator", "bgs.protocol.club.v1.SetTypingIndicatorRequest", &request);
  std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = CreateServerContinuation(token, methodId, "ClubService.SetTypingIndicator", ::bgs::protocol::NoData::descriptor());
  ::bgs::protocol::NoData response;
  uint32 status = HandleSetTypingIndicator(&request, &response, continuation);
  if (continuation)
    continuation(this, status, &response);
}

void ClubService::ParseAndHandleAdvanceStreamViewTime(uint32 token, uint32 methodId, MessageBuffer& buffer) {
  ::bgs::protocol::club::v1::AdvanceStreamViewTimeRequest request;
  if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
    LogFailedParsingRequest("ClubService.AdvanceStreamViewTime");
    SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
    return;
  }
  LogCallServerMethod("ClubService.AdvanceStreamViewTime", "bgs.protocol.club.v1.AdvanceStreamViewTimeRequest", &request);
  std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = CreateServerContinuation(token, methodId, "ClubService.AdvanceStreamViewTime", ::bgs::protocol::NoData::descriptor());
  ::bgs::protocol::NoData response;
  uint32 status = HandleAdvanceStreamViewTime(&request, &response, continuation);
  if (continuation)
    continuation(this, status, &response);
}

void ClubService::ParseAndHandleGetStreamHistory(uint32 token, uint32 methodId, MessageBuffer& buffer) {
  ::bgs::protocol::club::v1::GetStreamHistoryRequest request;
  if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
    LogFailedParsingRequest("ClubService.GetStreamHistory");
    SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
    return;
  }
  LogCallServerMethod("ClubService.GetStreamHistory", "bgs.protocol.club.v1.GetStreamHistoryRequest", &request);
  std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = CreateServerContinuation(token, methodId, "ClubService.GetStreamHistory", ::bgs::protocol::club::v1::GetStreamHistoryResponse::descriptor());
  ::bgs::protocol::club::v1::GetStreamHistoryResponse response;
  uint32 status = HandleGetStreamHistory(&request, &response, continuation);
  if (continuation)
    continuation(this, status, &response);
}

void ClubService::ParseAndHandleGetStreamMessage(uint32 token, uint32 methodId, MessageBuffer& buffer) {
  ::bgs::protocol::club::v1::GetStreamMessageRequest request;
  if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
    LogFailedParsingRequest("ClubService.GetStreamMessage");
    SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
    return;
  }
  LogCallServerMethod("ClubService.GetStreamMessage", "bgs.protocol.club.v1.GetStreamMessageRequest", &request);
  std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = CreateServerContinuation(token, methodId, "ClubService.GetStreamMessage", ::bgs::protocol::club::v1::GetStreamMessageResponse::descriptor());
  ::bgs::protocol::club::v1::GetStreamMessageResponse response;
  uint32 status = HandleGetStreamMessage(&request, &response, continuation);
  if (continuation)
    continuation(this, status, &response);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace club
}  // namespace protocol
}  // namespace bgs

// @@protoc_insertion_point(global_scope)
