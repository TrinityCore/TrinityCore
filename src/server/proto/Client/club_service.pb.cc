// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: club_service.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "club_service.pb.h"

#include <algorithm>
#include <utility>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
#include "Log.h"
#include "Errors.h"
#include "BattlenetRpcErrorCodes.h"
// @@protoc_insertion_point(includes)

namespace bgs {
namespace protocol {
namespace club {
namespace v1 {

namespace {

const ::google::protobuf::ServiceDescriptor* ClubService_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_club_5fservice_2eproto() {
  protobuf_AddDesc_club_5fservice_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "club_service.proto");
  GOOGLE_CHECK(file != NULL);
  ClubService_descriptor_ = file->service(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_club_5fservice_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
}

}  // namespace

void protobuf_ShutdownFile_club_5fservice_2eproto() {
}

void protobuf_AddDesc_club_5fservice_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::bgs::protocol::club::v1::protobuf_AddDesc_club_5frequest_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022club_service.proto\022\024bgs.protocol.club."
    "v1\032\022club_request.proto2\260+\n\013ClubService\022Q"
    "\n\tSubscribe\022&.bgs.protocol.club.v1.Subsc"
    "ribeRequest\032\024.bgs.protocol.NoData\"\006\202\371+\002\010"
    "\001\022U\n\013Unsubscribe\022(.bgs.protocol.club.v1."
    "UnsubscribeRequest\032\024.bgs.protocol.NoData"
    "\"\006\202\371+\002\010\002\022[\n\006Create\022#.bgs.protocol.club.v"
    "1.CreateRequest\032$.bgs.protocol.club.v1.C"
    "reateResponse\"\006\202\371+\002\010\003\022M\n\007Destroy\022$.bgs.p"
    "rotocol.club.v1.DestroyRequest\032\024.bgs.pro"
    "tocol.NoData\"\006\202\371+\002\010\004\022s\n\016GetDescription\022+"
    ".bgs.protocol.club.v1.GetDescriptionRequ"
    "est\032,.bgs.protocol.club.v1.GetDescriptio"
    "nResponse\"\006\202\371+\002\010\005\022j\n\013GetClubType\022(.bgs.p"
    "rotocol.club.v1.GetClubTypeRequest\032).bgs"
    ".protocol.club.v1.GetClubTypeResponse\"\006\202"
    "\371+\002\010\006\022]\n\017UpdateClubState\022,.bgs.protocol."
    "club.v1.UpdateClubStateRequest\032\024.bgs.pro"
    "tocol.NoData\"\006\202\371+\002\010\007\022c\n\022UpdateClubSettin"
    "gs\022/.bgs.protocol.club.v1.UpdateClubSett"
    "ingsRequest\032\024.bgs.protocol.NoData\"\006\202\371+\002\010"
    "\010\022G\n\004Join\022!.bgs.protocol.club.v1.JoinReq"
    "uest\032\024.bgs.protocol.NoData\"\006\202\371+\002\010\036\022I\n\005Le"
    "ave\022\".bgs.protocol.club.v1.LeaveRequest\032"
    "\024.bgs.protocol.NoData\"\006\202\371+\002\010\037\022G\n\004Kick\022!."
    "bgs.protocol.club.v1.KickRequest\032\024.bgs.p"
    "rotocol.NoData\"\006\202\371+\002\010 \022d\n\tGetMember\022&.bg"
    "s.protocol.club.v1.GetMemberRequest\032\'.bg"
    "s.protocol.club.v1.GetMemberResponse\"\006\202\371"
    "+\002\010!\022g\n\nGetMembers\022\'.bgs.protocol.club.v"
    "1.GetMembersRequest\032(.bgs.protocol.club."
    "v1.GetMembersResponse\"\006\202\371+\002\010\"\022a\n\021UpdateM"
    "emberState\022..bgs.protocol.club.v1.Update"
    "MemberStateRequest\032\024.bgs.protocol.NoData"
    "\"\006\202\371+\002\010#\022i\n\025UpdateSubscriberState\0222.bgs."
    "protocol.club.v1.UpdateSubscriberStateRe"
    "quest\032\024.bgs.protocol.NoData\"\006\202\371+\002\010$\022S\n\nA"
    "ssignRole\022\'.bgs.protocol.club.v1.AssignR"
    "oleRequest\032\024.bgs.protocol.NoData\"\006\202\371+\002\010%"
    "\022W\n\014UnassignRole\022).bgs.protocol.club.v1."
    "UnassignRoleRequest\032\024.bgs.protocol.NoDat"
    "a\"\006\202\371+\002\010&\022[\n\016SendInvitation\022+.bgs.protoc"
    "ol.club.v1.SendInvitationRequest\032\024.bgs.p"
    "rotocol.NoData\"\006\202\371+\002\0102\022_\n\020AcceptInvitati"
    "on\022-.bgs.protocol.club.v1.AcceptInvitati"
    "onRequest\032\024.bgs.protocol.NoData\"\006\202\371+\002\0103\022"
    "a\n\021DeclineInvitation\022..bgs.protocol.club"
    ".v1.DeclineInvitationRequest\032\024.bgs.proto"
    "col.NoData\"\006\202\371+\002\0104\022_\n\020RevokeInvitation\022-"
    ".bgs.protocol.club.v1.RevokeInvitationRe"
    "quest\032\024.bgs.protocol.NoData\"\006\202\371+\002\0105\022p\n\rG"
    "etInvitation\022*.bgs.protocol.club.v1.GetI"
    "nvitationRequest\032+.bgs.protocol.club.v1."
    "GetInvitationResponse\"\006\202\371+\002\0106\022s\n\016GetInvi"
    "tations\022+.bgs.protocol.club.v1.GetInvita"
    "tionsRequest\032,.bgs.protocol.club.v1.GetI"
    "nvitationsResponse\"\006\202\371+\002\0107\022[\n\016SendSugges"
    "tion\022+.bgs.protocol.club.v1.SendSuggesti"
    "onRequest\032\024.bgs.protocol.NoData\"\006\202\371+\002\010<\022"
    "_\n\020AcceptSuggestion\022-.bgs.protocol.club."
    "v1.AcceptSuggestionRequest\032\024.bgs.protoco"
    "l.NoData\"\006\202\371+\002\010=\022a\n\021DeclineSuggestion\022.."
    "bgs.protocol.club.v1.DeclineSuggestionRe"
    "quest\032\024.bgs.protocol.NoData\"\006\202\371+\002\010>\022p\n\rG"
    "etSuggestion\022*.bgs.protocol.club.v1.GetS"
    "uggestionRequest\032+.bgs.protocol.club.v1."
    "GetSuggestionResponse\"\006\202\371+\002\010\?\022s\n\016GetSugg"
    "estions\022+.bgs.protocol.club.v1.GetSugges"
    "tionsRequest\032,.bgs.protocol.club.v1.GetS"
    "uggestionsResponse\"\006\202\371+\002\010@\022m\n\014CreateTick"
    "et\022).bgs.protocol.club.v1.CreateTicketRe"
    "quest\032*.bgs.protocol.club.v1.CreateTicke"
    "tResponse\"\006\202\371+\002\010F\022Y\n\rDestroyTicket\022*.bgs"
    ".protocol.club.v1.DestroyTicketRequest\032\024"
    ".bgs.protocol.NoData\"\006\202\371+\002\010G\022W\n\014RedeemTi"
    "cket\022).bgs.protocol.club.v1.RedeemTicket"
    "Request\032\024.bgs.protocol.NoData\"\006\202\371+\002\010H\022d\n"
    "\tGetTicket\022&.bgs.protocol.club.v1.GetTic"
    "ketRequest\032\'.bgs.protocol.club.v1.GetTic"
    "ketResponse\"\006\202\371+\002\010I\022g\n\nGetTickets\022\'.bgs."
    "protocol.club.v1.GetTicketsRequest\032(.bgs"
    ".protocol.club.v1.GetTicketsResponse\"\006\202\371"
    "+\002\010J\022K\n\006AddBan\022#.bgs.protocol.club.v1.Ad"
    "dBanRequest\032\024.bgs.protocol.NoData\"\006\202\371+\002\010"
    "P\022Q\n\tRemoveBan\022&.bgs.protocol.club.v1.Re"
    "moveBanRequest\032\024.bgs.protocol.NoData\"\006\202\371"
    "+\002\010Q\022[\n\006GetBan\022#.bgs.protocol.club.v1.Ge"
    "tBanRequest\032$.bgs.protocol.club.v1.GetBa"
    "nResponse\"\006\202\371+\002\010R\022^\n\007GetBans\022$.bgs.proto"
    "col.club.v1.GetBansRequest\032%.bgs.protoco"
    "l.club.v1.GetBansResponse\"\006\202\371+\002\010S\022]\n\017Sub"
    "scribeStream\022,.bgs.protocol.club.v1.Subs"
    "cribeStreamRequest\032\024.bgs.protocol.NoData"
    "\"\006\202\371+\002\010d\022a\n\021UnsubscribeStream\022..bgs.prot"
    "ocol.club.v1.UnsubscribeStreamRequest\032\024."
    "bgs.protocol.NoData\"\006\202\371+\002\010e\022m\n\014CreateStr"
    "eam\022).bgs.protocol.club.v1.CreateStreamR"
    "equest\032*.bgs.protocol.club.v1.CreateStre"
    "amResponse\"\006\202\371+\002\010f\022Y\n\rDestroyStream\022*.bg"
    "s.protocol.club.v1.DestroyStreamRequest\032"
    "\024.bgs.protocol.NoData\"\006\202\371+\002\010g\022d\n\tGetStre"
    "am\022&.bgs.protocol.club.v1.GetStreamReque"
    "st\032\'.bgs.protocol.club.v1.GetStreamRespo"
    "nse\"\006\202\371+\002\010h\022g\n\nGetStreams\022\'.bgs.protocol"
    ".club.v1.GetStreamsRequest\032(.bgs.protoco"
    "l.club.v1.GetStreamsResponse\"\006\202\371+\002\010i\022a\n\021"
    "UpdateStreamState\022..bgs.protocol.club.v1"
    ".UpdateStreamStateRequest\032\024.bgs.protocol"
    ".NoData\"\006\202\371+\002\010j\022[\n\016SetStreamFocus\022+.bgs."
    "protocol.club.v1.SetStreamFocusRequest\032\024"
    ".bgs.protocol.NoData\"\006\202\371+\002\010k\022\202\001\n\023GetStre"
    "amVoiceToken\0220.bgs.protocol.club.v1.GetS"
    "treamVoiceTokenRequest\0321.bgs.protocol.cl"
    "ub.v1.GetStreamVoiceTokenResponse\"\006\202\371+\002\010"
    "l\022e\n\023KickFromStreamVoice\0220.bgs.protocol."
    "club.v1.KickFromStreamVoiceRequest\032\024.bgs"
    ".protocol.NoData\"\006\202\371+\002\010m\022q\n\rCreateMessag"
    "e\022*.bgs.protocol.club.v1.CreateMessageRe"
    "quest\032+.bgs.protocol.club.v1.CreateMessa"
    "geResponse\"\007\202\371+\003\010\226\001\022t\n\016DestroyMessage\022+."
    "bgs.protocol.club.v1.DestroyMessageReque"
    "st\032,.bgs.protocol.club.v1.DestroyMessage"
    "Response\"\007\202\371+\003\010\227\001\022k\n\013EditMessage\022(.bgs.p"
    "rotocol.club.v1.EditMessageRequest\032).bgs"
    ".protocol.club.v1.EditMessageResponse\"\007\202"
    "\371+\003\010\230\001\022`\n\020SetMessagePinned\022-.bgs.protoco"
    "l.club.v1.SetMessagePinnedRequest\032\024.bgs."
    "protocol.NoData\"\007\202\371+\003\010\231\001\022d\n\022SetTypingInd"
    "icator\022/.bgs.protocol.club.v1.SetTypingI"
    "ndicatorRequest\032\024.bgs.protocol.NoData\"\007\202"
    "\371+\003\010\232\001\022j\n\025AdvanceStreamViewTime\0222.bgs.pr"
    "otocol.club.v1.AdvanceStreamViewTimeRequ"
    "est\032\024.bgs.protocol.NoData\"\007\202\371+\003\010\233\001\022z\n\020Ge"
    "tStreamHistory\022-.bgs.protocol.club.v1.Ge"
    "tStreamHistoryRequest\032..bgs.protocol.clu"
    "b.v1.GetStreamHistoryResponse\"\007\202\371+\003\010\234\001\022z"
    "\n\020GetStreamMessage\022-.bgs.protocol.club.v"
    "1.GetStreamMessageRequest\032..bgs.protocol"
    ".club.v1.GetStreamMessageResponse\"\007\202\371+\003\010"
    "\235\001\0325\202\371+)\n!bnet.protocol.club.v1.ClubServ"
    "ice*\004club\212\371+\004\020\001\030\001B\005H\001\200\001\000", 5624);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "club_service.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_club_5fservice_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_club_5fservice_2eproto {
  StaticDescriptorInitializer_club_5fservice_2eproto() {
    protobuf_AddDesc_club_5fservice_2eproto();
  }
} static_descriptor_initializer_club_5fservice_2eproto_;

// ===================================================================

ClubService::ClubService(bool use_original_hash) : service_hash_(use_original_hash ? OriginalHash::value : NameHash::value) {
}

ClubService::~ClubService() {
}

google::protobuf::ServiceDescriptor const* ClubService::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClubService_descriptor_;
}

void ClubService::CallServerMethod(uint32 token, uint32 methodId, MessageBuffer buffer) {
  switch(methodId & 0x3FFFFFFF) {
    case 1: {
      ::bgs::protocol::club::v1::SubscribeRequest request;
      if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
        TC_LOG_DEBUG("service.protobuf", "%s Failed to parse request for ClubService.Subscribe server method call.", GetCallerInfo().c_str());
        SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
        return;
      }
      TC_LOG_DEBUG("service.protobuf", "%s Client called server method ClubService.Subscribe(bgs.protocol.club.v1.SubscribeRequest{ %s }).",
        GetCallerInfo().c_str(), request.ShortDebugString().c_str());
      std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = [token, methodId](ServiceBase* service, uint32 status, ::google::protobuf::Message const* response)
      {
        ASSERT(response->GetDescriptor() == ::bgs::protocol::NoData::descriptor());
        ClubService* self = static_cast<ClubService*>(service);
        TC_LOG_DEBUG("service.protobuf", "%s Client called server method ClubService.Subscribe() returned bgs.protocol.NoData{ %s } status %u.",
          self->GetCallerInfo().c_str(), response->ShortDebugString().c_str(), status);
        if (!status)
          self->SendResponse(self->service_hash_, methodId, token, response);
        else
          self->SendResponse(self->service_hash_, methodId, token, status);
      };
      ::bgs::protocol::NoData response;
      uint32 status = HandleSubscribe(&request, &response, continuation);
      if (continuation)
        continuation(this, status, &response);
      break;
    }
    case 2: {
      ::bgs::protocol::club::v1::UnsubscribeRequest request;
      if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
        TC_LOG_DEBUG("service.protobuf", "%s Failed to parse request for ClubService.Unsubscribe server method call.", GetCallerInfo().c_str());
        SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
        return;
      }
      TC_LOG_DEBUG("service.protobuf", "%s Client called server method ClubService.Unsubscribe(bgs.protocol.club.v1.UnsubscribeRequest{ %s }).",
        GetCallerInfo().c_str(), request.ShortDebugString().c_str());
      std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = [token, methodId](ServiceBase* service, uint32 status, ::google::protobuf::Message const* response)
      {
        ASSERT(response->GetDescriptor() == ::bgs::protocol::NoData::descriptor());
        ClubService* self = static_cast<ClubService*>(service);
        TC_LOG_DEBUG("service.protobuf", "%s Client called server method ClubService.Unsubscribe() returned bgs.protocol.NoData{ %s } status %u.",
          self->GetCallerInfo().c_str(), response->ShortDebugString().c_str(), status);
        if (!status)
          self->SendResponse(self->service_hash_, methodId, token, response);
        else
          self->SendResponse(self->service_hash_, methodId, token, status);
      };
      ::bgs::protocol::NoData response;
      uint32 status = HandleUnsubscribe(&request, &response, continuation);
      if (continuation)
        continuation(this, status, &response);
      break;
    }
    case 3: {
      ::bgs::protocol::club::v1::CreateRequest request;
      if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
        TC_LOG_DEBUG("service.protobuf", "%s Failed to parse request for ClubService.Create server method call.", GetCallerInfo().c_str());
        SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
        return;
      }
      TC_LOG_DEBUG("service.protobuf", "%s Client called server method ClubService.Create(bgs.protocol.club.v1.CreateRequest{ %s }).",
        GetCallerInfo().c_str(), request.ShortDebugString().c_str());
      std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = [token, methodId](ServiceBase* service, uint32 status, ::google::protobuf::Message const* response)
      {
        ASSERT(response->GetDescriptor() == ::bgs::protocol::club::v1::CreateResponse::descriptor());
        ClubService* self = static_cast<ClubService*>(service);
        TC_LOG_DEBUG("service.protobuf", "%s Client called server method ClubService.Create() returned bgs.protocol.club.v1.CreateResponse{ %s } status %u.",
          self->GetCallerInfo().c_str(), response->ShortDebugString().c_str(), status);
        if (!status)
          self->SendResponse(self->service_hash_, methodId, token, response);
        else
          self->SendResponse(self->service_hash_, methodId, token, status);
      };
      ::bgs::protocol::club::v1::CreateResponse response;
      uint32 status = HandleCreate(&request, &response, continuation);
      if (continuation)
        continuation(this, status, &response);
      break;
    }
    case 4: {
      ::bgs::protocol::club::v1::DestroyRequest request;
      if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
        TC_LOG_DEBUG("service.protobuf", "%s Failed to parse request for ClubService.Destroy server method call.", GetCallerInfo().c_str());
        SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
        return;
      }
      TC_LOG_DEBUG("service.protobuf", "%s Client called server method ClubService.Destroy(bgs.protocol.club.v1.DestroyRequest{ %s }).",
        GetCallerInfo().c_str(), request.ShortDebugString().c_str());
      std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = [token, methodId](ServiceBase* service, uint32 status, ::google::protobuf::Message const* response)
      {
        ASSERT(response->GetDescriptor() == ::bgs::protocol::NoData::descriptor());
        ClubService* self = static_cast<ClubService*>(service);
        TC_LOG_DEBUG("service.protobuf", "%s Client called server method ClubService.Destroy() returned bgs.protocol.NoData{ %s } status %u.",
          self->GetCallerInfo().c_str(), response->ShortDebugString().c_str(), status);
        if (!status)
          self->SendResponse(self->service_hash_, methodId, token, response);
        else
          self->SendResponse(self->service_hash_, methodId, token, status);
      };
      ::bgs::protocol::NoData response;
      uint32 status = HandleDestroy(&request, &response, continuation);
      if (continuation)
        continuation(this, status, &response);
      break;
    }
    case 5: {
      ::bgs::protocol::club::v1::GetDescriptionRequest request;
      if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
        TC_LOG_DEBUG("service.protobuf", "%s Failed to parse request for ClubService.GetDescription server method call.", GetCallerInfo().c_str());
        SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
        return;
      }
      TC_LOG_DEBUG("service.protobuf", "%s Client called server method ClubService.GetDescription(bgs.protocol.club.v1.GetDescriptionRequest{ %s }).",
        GetCallerInfo().c_str(), request.ShortDebugString().c_str());
      std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = [token, methodId](ServiceBase* service, uint32 status, ::google::protobuf::Message const* response)
      {
        ASSERT(response->GetDescriptor() == ::bgs::protocol::club::v1::GetDescriptionResponse::descriptor());
        ClubService* self = static_cast<ClubService*>(service);
        TC_LOG_DEBUG("service.protobuf", "%s Client called server method ClubService.GetDescription() returned bgs.protocol.club.v1.GetDescriptionResponse{ %s } status %u.",
          self->GetCallerInfo().c_str(), response->ShortDebugString().c_str(), status);
        if (!status)
          self->SendResponse(self->service_hash_, methodId, token, response);
        else
          self->SendResponse(self->service_hash_, methodId, token, status);
      };
      ::bgs::protocol::club::v1::GetDescriptionResponse response;
      uint32 status = HandleGetDescription(&request, &response, continuation);
      if (continuation)
        continuation(this, status, &response);
      break;
    }
    case 6: {
      ::bgs::protocol::club::v1::GetClubTypeRequest request;
      if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
        TC_LOG_DEBUG("service.protobuf", "%s Failed to parse request for ClubService.GetClubType server method call.", GetCallerInfo().c_str());
        SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
        return;
      }
      TC_LOG_DEBUG("service.protobuf", "%s Client called server method ClubService.GetClubType(bgs.protocol.club.v1.GetClubTypeRequest{ %s }).",
        GetCallerInfo().c_str(), request.ShortDebugString().c_str());
      std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = [token, methodId](ServiceBase* service, uint32 status, ::google::protobuf::Message const* response)
      {
        ASSERT(response->GetDescriptor() == ::bgs::protocol::club::v1::GetClubTypeResponse::descriptor());
        ClubService* self = static_cast<ClubService*>(service);
        TC_LOG_DEBUG("service.protobuf", "%s Client called server method ClubService.GetClubType() returned bgs.protocol.club.v1.GetClubTypeResponse{ %s } status %u.",
          self->GetCallerInfo().c_str(), response->ShortDebugString().c_str(), status);
        if (!status)
          self->SendResponse(self->service_hash_, methodId, token, response);
        else
          self->SendResponse(self->service_hash_, methodId, token, status);
      };
      ::bgs::protocol::club::v1::GetClubTypeResponse response;
      uint32 status = HandleGetClubType(&request, &response, continuation);
      if (continuation)
        continuation(this, status, &response);
      break;
    }
    case 7: {
      ::bgs::protocol::club::v1::UpdateClubStateRequest request;
      if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
        TC_LOG_DEBUG("service.protobuf", "%s Failed to parse request for ClubService.UpdateClubState server method call.", GetCallerInfo().c_str());
        SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
        return;
      }
      TC_LOG_DEBUG("service.protobuf", "%s Client called server method ClubService.UpdateClubState(bgs.protocol.club.v1.UpdateClubStateRequest{ %s }).",
        GetCallerInfo().c_str(), request.ShortDebugString().c_str());
      std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = [token, methodId](ServiceBase* service, uint32 status, ::google::protobuf::Message const* response)
      {
        ASSERT(response->GetDescriptor() == ::bgs::protocol::NoData::descriptor());
        ClubService* self = static_cast<ClubService*>(service);
        TC_LOG_DEBUG("service.protobuf", "%s Client called server method ClubService.UpdateClubState() returned bgs.protocol.NoData{ %s } status %u.",
          self->GetCallerInfo().c_str(), response->ShortDebugString().c_str(), status);
        if (!status)
          self->SendResponse(self->service_hash_, methodId, token, response);
        else
          self->SendResponse(self->service_hash_, methodId, token, status);
      };
      ::bgs::protocol::NoData response;
      uint32 status = HandleUpdateClubState(&request, &response, continuation);
      if (continuation)
        continuation(this, status, &response);
      break;
    }
    case 8: {
      ::bgs::protocol::club::v1::UpdateClubSettingsRequest request;
      if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
        TC_LOG_DEBUG("service.protobuf", "%s Failed to parse request for ClubService.UpdateClubSettings server method call.", GetCallerInfo().c_str());
        SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
        return;
      }
      TC_LOG_DEBUG("service.protobuf", "%s Client called server method ClubService.UpdateClubSettings(bgs.protocol.club.v1.UpdateClubSettingsRequest{ %s }).",
        GetCallerInfo().c_str(), request.ShortDebugString().c_str());
      std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = [token, methodId](ServiceBase* service, uint32 status, ::google::protobuf::Message const* response)
      {
        ASSERT(response->GetDescriptor() == ::bgs::protocol::NoData::descriptor());
        ClubService* self = static_cast<ClubService*>(service);
        TC_LOG_DEBUG("service.protobuf", "%s Client called server method ClubService.UpdateClubSettings() returned bgs.protocol.NoData{ %s } status %u.",
          self->GetCallerInfo().c_str(), response->ShortDebugString().c_str(), status);
        if (!status)
          self->SendResponse(self->service_hash_, methodId, token, response);
        else
          self->SendResponse(self->service_hash_, methodId, token, status);
      };
      ::bgs::protocol::NoData response;
      uint32 status = HandleUpdateClubSettings(&request, &response, continuation);
      if (continuation)
        continuation(this, status, &response);
      break;
    }
    case 30: {
      ::bgs::protocol::club::v1::JoinRequest request;
      if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
        TC_LOG_DEBUG("service.protobuf", "%s Failed to parse request for ClubService.Join server method call.", GetCallerInfo().c_str());
        SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
        return;
      }
      TC_LOG_DEBUG("service.protobuf", "%s Client called server method ClubService.Join(bgs.protocol.club.v1.JoinRequest{ %s }).",
        GetCallerInfo().c_str(), request.ShortDebugString().c_str());
      std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = [token, methodId](ServiceBase* service, uint32 status, ::google::protobuf::Message const* response)
      {
        ASSERT(response->GetDescriptor() == ::bgs::protocol::NoData::descriptor());
        ClubService* self = static_cast<ClubService*>(service);
        TC_LOG_DEBUG("service.protobuf", "%s Client called server method ClubService.Join() returned bgs.protocol.NoData{ %s } status %u.",
          self->GetCallerInfo().c_str(), response->ShortDebugString().c_str(), status);
        if (!status)
          self->SendResponse(self->service_hash_, methodId, token, response);
        else
          self->SendResponse(self->service_hash_, methodId, token, status);
      };
      ::bgs::protocol::NoData response;
      uint32 status = HandleJoin(&request, &response, continuation);
      if (continuation)
        continuation(this, status, &response);
      break;
    }
    case 31: {
      ::bgs::protocol::club::v1::LeaveRequest request;
      if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
        TC_LOG_DEBUG("service.protobuf", "%s Failed to parse request for ClubService.Leave server method call.", GetCallerInfo().c_str());
        SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
        return;
      }
      TC_LOG_DEBUG("service.protobuf", "%s Client called server method ClubService.Leave(bgs.protocol.club.v1.LeaveRequest{ %s }).",
        GetCallerInfo().c_str(), request.ShortDebugString().c_str());
      std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = [token, methodId](ServiceBase* service, uint32 status, ::google::protobuf::Message const* response)
      {
        ASSERT(response->GetDescriptor() == ::bgs::protocol::NoData::descriptor());
        ClubService* self = static_cast<ClubService*>(service);
        TC_LOG_DEBUG("service.protobuf", "%s Client called server method ClubService.Leave() returned bgs.protocol.NoData{ %s } status %u.",
          self->GetCallerInfo().c_str(), response->ShortDebugString().c_str(), status);
        if (!status)
          self->SendResponse(self->service_hash_, methodId, token, response);
        else
          self->SendResponse(self->service_hash_, methodId, token, status);
      };
      ::bgs::protocol::NoData response;
      uint32 status = HandleLeave(&request, &response, continuation);
      if (continuation)
        continuation(this, status, &response);
      break;
    }
    case 32: {
      ::bgs::protocol::club::v1::KickRequest request;
      if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
        TC_LOG_DEBUG("service.protobuf", "%s Failed to parse request for ClubService.Kick server method call.", GetCallerInfo().c_str());
        SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
        return;
      }
      TC_LOG_DEBUG("service.protobuf", "%s Client called server method ClubService.Kick(bgs.protocol.club.v1.KickRequest{ %s }).",
        GetCallerInfo().c_str(), request.ShortDebugString().c_str());
      std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = [token, methodId](ServiceBase* service, uint32 status, ::google::protobuf::Message const* response)
      {
        ASSERT(response->GetDescriptor() == ::bgs::protocol::NoData::descriptor());
        ClubService* self = static_cast<ClubService*>(service);
        TC_LOG_DEBUG("service.protobuf", "%s Client called server method ClubService.Kick() returned bgs.protocol.NoData{ %s } status %u.",
          self->GetCallerInfo().c_str(), response->ShortDebugString().c_str(), status);
        if (!status)
          self->SendResponse(self->service_hash_, methodId, token, response);
        else
          self->SendResponse(self->service_hash_, methodId, token, status);
      };
      ::bgs::protocol::NoData response;
      uint32 status = HandleKick(&request, &response, continuation);
      if (continuation)
        continuation(this, status, &response);
      break;
    }
    case 33: {
      ::bgs::protocol::club::v1::GetMemberRequest request;
      if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
        TC_LOG_DEBUG("service.protobuf", "%s Failed to parse request for ClubService.GetMember server method call.", GetCallerInfo().c_str());
        SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
        return;
      }
      TC_LOG_DEBUG("service.protobuf", "%s Client called server method ClubService.GetMember(bgs.protocol.club.v1.GetMemberRequest{ %s }).",
        GetCallerInfo().c_str(), request.ShortDebugString().c_str());
      std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = [token, methodId](ServiceBase* service, uint32 status, ::google::protobuf::Message const* response)
      {
        ASSERT(response->GetDescriptor() == ::bgs::protocol::club::v1::GetMemberResponse::descriptor());
        ClubService* self = static_cast<ClubService*>(service);
        TC_LOG_DEBUG("service.protobuf", "%s Client called server method ClubService.GetMember() returned bgs.protocol.club.v1.GetMemberResponse{ %s } status %u.",
          self->GetCallerInfo().c_str(), response->ShortDebugString().c_str(), status);
        if (!status)
          self->SendResponse(self->service_hash_, methodId, token, response);
        else
          self->SendResponse(self->service_hash_, methodId, token, status);
      };
      ::bgs::protocol::club::v1::GetMemberResponse response;
      uint32 status = HandleGetMember(&request, &response, continuation);
      if (continuation)
        continuation(this, status, &response);
      break;
    }
    case 34: {
      ::bgs::protocol::club::v1::GetMembersRequest request;
      if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
        TC_LOG_DEBUG("service.protobuf", "%s Failed to parse request for ClubService.GetMembers server method call.", GetCallerInfo().c_str());
        SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
        return;
      }
      TC_LOG_DEBUG("service.protobuf", "%s Client called server method ClubService.GetMembers(bgs.protocol.club.v1.GetMembersRequest{ %s }).",
        GetCallerInfo().c_str(), request.ShortDebugString().c_str());
      std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = [token, methodId](ServiceBase* service, uint32 status, ::google::protobuf::Message const* response)
      {
        ASSERT(response->GetDescriptor() == ::bgs::protocol::club::v1::GetMembersResponse::descriptor());
        ClubService* self = static_cast<ClubService*>(service);
        TC_LOG_DEBUG("service.protobuf", "%s Client called server method ClubService.GetMembers() returned bgs.protocol.club.v1.GetMembersResponse{ %s } status %u.",
          self->GetCallerInfo().c_str(), response->ShortDebugString().c_str(), status);
        if (!status)
          self->SendResponse(self->service_hash_, methodId, token, response);
        else
          self->SendResponse(self->service_hash_, methodId, token, status);
      };
      ::bgs::protocol::club::v1::GetMembersResponse response;
      uint32 status = HandleGetMembers(&request, &response, continuation);
      if (continuation)
        continuation(this, status, &response);
      break;
    }
    case 35: {
      ::bgs::protocol::club::v1::UpdateMemberStateRequest request;
      if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
        TC_LOG_DEBUG("service.protobuf", "%s Failed to parse request for ClubService.UpdateMemberState server method call.", GetCallerInfo().c_str());
        SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
        return;
      }
      TC_LOG_DEBUG("service.protobuf", "%s Client called server method ClubService.UpdateMemberState(bgs.protocol.club.v1.UpdateMemberStateRequest{ %s }).",
        GetCallerInfo().c_str(), request.ShortDebugString().c_str());
      std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = [token, methodId](ServiceBase* service, uint32 status, ::google::protobuf::Message const* response)
      {
        ASSERT(response->GetDescriptor() == ::bgs::protocol::NoData::descriptor());
        ClubService* self = static_cast<ClubService*>(service);
        TC_LOG_DEBUG("service.protobuf", "%s Client called server method ClubService.UpdateMemberState() returned bgs.protocol.NoData{ %s } status %u.",
          self->GetCallerInfo().c_str(), response->ShortDebugString().c_str(), status);
        if (!status)
          self->SendResponse(self->service_hash_, methodId, token, response);
        else
          self->SendResponse(self->service_hash_, methodId, token, status);
      };
      ::bgs::protocol::NoData response;
      uint32 status = HandleUpdateMemberState(&request, &response, continuation);
      if (continuation)
        continuation(this, status, &response);
      break;
    }
    case 36: {
      ::bgs::protocol::club::v1::UpdateSubscriberStateRequest request;
      if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
        TC_LOG_DEBUG("service.protobuf", "%s Failed to parse request for ClubService.UpdateSubscriberState server method call.", GetCallerInfo().c_str());
        SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
        return;
      }
      TC_LOG_DEBUG("service.protobuf", "%s Client called server method ClubService.UpdateSubscriberState(bgs.protocol.club.v1.UpdateSubscriberStateRequest{ %s }).",
        GetCallerInfo().c_str(), request.ShortDebugString().c_str());
      std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = [token, methodId](ServiceBase* service, uint32 status, ::google::protobuf::Message const* response)
      {
        ASSERT(response->GetDescriptor() == ::bgs::protocol::NoData::descriptor());
        ClubService* self = static_cast<ClubService*>(service);
        TC_LOG_DEBUG("service.protobuf", "%s Client called server method ClubService.UpdateSubscriberState() returned bgs.protocol.NoData{ %s } status %u.",
          self->GetCallerInfo().c_str(), response->ShortDebugString().c_str(), status);
        if (!status)
          self->SendResponse(self->service_hash_, methodId, token, response);
        else
          self->SendResponse(self->service_hash_, methodId, token, status);
      };
      ::bgs::protocol::NoData response;
      uint32 status = HandleUpdateSubscriberState(&request, &response, continuation);
      if (continuation)
        continuation(this, status, &response);
      break;
    }
    case 37: {
      ::bgs::protocol::club::v1::AssignRoleRequest request;
      if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
        TC_LOG_DEBUG("service.protobuf", "%s Failed to parse request for ClubService.AssignRole server method call.", GetCallerInfo().c_str());
        SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
        return;
      }
      TC_LOG_DEBUG("service.protobuf", "%s Client called server method ClubService.AssignRole(bgs.protocol.club.v1.AssignRoleRequest{ %s }).",
        GetCallerInfo().c_str(), request.ShortDebugString().c_str());
      std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = [token, methodId](ServiceBase* service, uint32 status, ::google::protobuf::Message const* response)
      {
        ASSERT(response->GetDescriptor() == ::bgs::protocol::NoData::descriptor());
        ClubService* self = static_cast<ClubService*>(service);
        TC_LOG_DEBUG("service.protobuf", "%s Client called server method ClubService.AssignRole() returned bgs.protocol.NoData{ %s } status %u.",
          self->GetCallerInfo().c_str(), response->ShortDebugString().c_str(), status);
        if (!status)
          self->SendResponse(self->service_hash_, methodId, token, response);
        else
          self->SendResponse(self->service_hash_, methodId, token, status);
      };
      ::bgs::protocol::NoData response;
      uint32 status = HandleAssignRole(&request, &response, continuation);
      if (continuation)
        continuation(this, status, &response);
      break;
    }
    case 38: {
      ::bgs::protocol::club::v1::UnassignRoleRequest request;
      if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
        TC_LOG_DEBUG("service.protobuf", "%s Failed to parse request for ClubService.UnassignRole server method call.", GetCallerInfo().c_str());
        SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
        return;
      }
      TC_LOG_DEBUG("service.protobuf", "%s Client called server method ClubService.UnassignRole(bgs.protocol.club.v1.UnassignRoleRequest{ %s }).",
        GetCallerInfo().c_str(), request.ShortDebugString().c_str());
      std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = [token, methodId](ServiceBase* service, uint32 status, ::google::protobuf::Message const* response)
      {
        ASSERT(response->GetDescriptor() == ::bgs::protocol::NoData::descriptor());
        ClubService* self = static_cast<ClubService*>(service);
        TC_LOG_DEBUG("service.protobuf", "%s Client called server method ClubService.UnassignRole() returned bgs.protocol.NoData{ %s } status %u.",
          self->GetCallerInfo().c_str(), response->ShortDebugString().c_str(), status);
        if (!status)
          self->SendResponse(self->service_hash_, methodId, token, response);
        else
          self->SendResponse(self->service_hash_, methodId, token, status);
      };
      ::bgs::protocol::NoData response;
      uint32 status = HandleUnassignRole(&request, &response, continuation);
      if (continuation)
        continuation(this, status, &response);
      break;
    }
    case 50: {
      ::bgs::protocol::club::v1::SendInvitationRequest request;
      if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
        TC_LOG_DEBUG("service.protobuf", "%s Failed to parse request for ClubService.SendInvitation server method call.", GetCallerInfo().c_str());
        SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
        return;
      }
      TC_LOG_DEBUG("service.protobuf", "%s Client called server method ClubService.SendInvitation(bgs.protocol.club.v1.SendInvitationRequest{ %s }).",
        GetCallerInfo().c_str(), request.ShortDebugString().c_str());
      std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = [token, methodId](ServiceBase* service, uint32 status, ::google::protobuf::Message const* response)
      {
        ASSERT(response->GetDescriptor() == ::bgs::protocol::NoData::descriptor());
        ClubService* self = static_cast<ClubService*>(service);
        TC_LOG_DEBUG("service.protobuf", "%s Client called server method ClubService.SendInvitation() returned bgs.protocol.NoData{ %s } status %u.",
          self->GetCallerInfo().c_str(), response->ShortDebugString().c_str(), status);
        if (!status)
          self->SendResponse(self->service_hash_, methodId, token, response);
        else
          self->SendResponse(self->service_hash_, methodId, token, status);
      };
      ::bgs::protocol::NoData response;
      uint32 status = HandleSendInvitation(&request, &response, continuation);
      if (continuation)
        continuation(this, status, &response);
      break;
    }
    case 51: {
      ::bgs::protocol::club::v1::AcceptInvitationRequest request;
      if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
        TC_LOG_DEBUG("service.protobuf", "%s Failed to parse request for ClubService.AcceptInvitation server method call.", GetCallerInfo().c_str());
        SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
        return;
      }
      TC_LOG_DEBUG("service.protobuf", "%s Client called server method ClubService.AcceptInvitation(bgs.protocol.club.v1.AcceptInvitationRequest{ %s }).",
        GetCallerInfo().c_str(), request.ShortDebugString().c_str());
      std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = [token, methodId](ServiceBase* service, uint32 status, ::google::protobuf::Message const* response)
      {
        ASSERT(response->GetDescriptor() == ::bgs::protocol::NoData::descriptor());
        ClubService* self = static_cast<ClubService*>(service);
        TC_LOG_DEBUG("service.protobuf", "%s Client called server method ClubService.AcceptInvitation() returned bgs.protocol.NoData{ %s } status %u.",
          self->GetCallerInfo().c_str(), response->ShortDebugString().c_str(), status);
        if (!status)
          self->SendResponse(self->service_hash_, methodId, token, response);
        else
          self->SendResponse(self->service_hash_, methodId, token, status);
      };
      ::bgs::protocol::NoData response;
      uint32 status = HandleAcceptInvitation(&request, &response, continuation);
      if (continuation)
        continuation(this, status, &response);
      break;
    }
    case 52: {
      ::bgs::protocol::club::v1::DeclineInvitationRequest request;
      if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
        TC_LOG_DEBUG("service.protobuf", "%s Failed to parse request for ClubService.DeclineInvitation server method call.", GetCallerInfo().c_str());
        SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
        return;
      }
      TC_LOG_DEBUG("service.protobuf", "%s Client called server method ClubService.DeclineInvitation(bgs.protocol.club.v1.DeclineInvitationRequest{ %s }).",
        GetCallerInfo().c_str(), request.ShortDebugString().c_str());
      std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = [token, methodId](ServiceBase* service, uint32 status, ::google::protobuf::Message const* response)
      {
        ASSERT(response->GetDescriptor() == ::bgs::protocol::NoData::descriptor());
        ClubService* self = static_cast<ClubService*>(service);
        TC_LOG_DEBUG("service.protobuf", "%s Client called server method ClubService.DeclineInvitation() returned bgs.protocol.NoData{ %s } status %u.",
          self->GetCallerInfo().c_str(), response->ShortDebugString().c_str(), status);
        if (!status)
          self->SendResponse(self->service_hash_, methodId, token, response);
        else
          self->SendResponse(self->service_hash_, methodId, token, status);
      };
      ::bgs::protocol::NoData response;
      uint32 status = HandleDeclineInvitation(&request, &response, continuation);
      if (continuation)
        continuation(this, status, &response);
      break;
    }
    case 53: {
      ::bgs::protocol::club::v1::RevokeInvitationRequest request;
      if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
        TC_LOG_DEBUG("service.protobuf", "%s Failed to parse request for ClubService.RevokeInvitation server method call.", GetCallerInfo().c_str());
        SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
        return;
      }
      TC_LOG_DEBUG("service.protobuf", "%s Client called server method ClubService.RevokeInvitation(bgs.protocol.club.v1.RevokeInvitationRequest{ %s }).",
        GetCallerInfo().c_str(), request.ShortDebugString().c_str());
      std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = [token, methodId](ServiceBase* service, uint32 status, ::google::protobuf::Message const* response)
      {
        ASSERT(response->GetDescriptor() == ::bgs::protocol::NoData::descriptor());
        ClubService* self = static_cast<ClubService*>(service);
        TC_LOG_DEBUG("service.protobuf", "%s Client called server method ClubService.RevokeInvitation() returned bgs.protocol.NoData{ %s } status %u.",
          self->GetCallerInfo().c_str(), response->ShortDebugString().c_str(), status);
        if (!status)
          self->SendResponse(self->service_hash_, methodId, token, response);
        else
          self->SendResponse(self->service_hash_, methodId, token, status);
      };
      ::bgs::protocol::NoData response;
      uint32 status = HandleRevokeInvitation(&request, &response, continuation);
      if (continuation)
        continuation(this, status, &response);
      break;
    }
    case 54: {
      ::bgs::protocol::club::v1::GetInvitationRequest request;
      if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
        TC_LOG_DEBUG("service.protobuf", "%s Failed to parse request for ClubService.GetInvitation server method call.", GetCallerInfo().c_str());
        SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
        return;
      }
      TC_LOG_DEBUG("service.protobuf", "%s Client called server method ClubService.GetInvitation(bgs.protocol.club.v1.GetInvitationRequest{ %s }).",
        GetCallerInfo().c_str(), request.ShortDebugString().c_str());
      std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = [token, methodId](ServiceBase* service, uint32 status, ::google::protobuf::Message const* response)
      {
        ASSERT(response->GetDescriptor() == ::bgs::protocol::club::v1::GetInvitationResponse::descriptor());
        ClubService* self = static_cast<ClubService*>(service);
        TC_LOG_DEBUG("service.protobuf", "%s Client called server method ClubService.GetInvitation() returned bgs.protocol.club.v1.GetInvitationResponse{ %s } status %u.",
          self->GetCallerInfo().c_str(), response->ShortDebugString().c_str(), status);
        if (!status)
          self->SendResponse(self->service_hash_, methodId, token, response);
        else
          self->SendResponse(self->service_hash_, methodId, token, status);
      };
      ::bgs::protocol::club::v1::GetInvitationResponse response;
      uint32 status = HandleGetInvitation(&request, &response, continuation);
      if (continuation)
        continuation(this, status, &response);
      break;
    }
    case 55: {
      ::bgs::protocol::club::v1::GetInvitationsRequest request;
      if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
        TC_LOG_DEBUG("service.protobuf", "%s Failed to parse request for ClubService.GetInvitations server method call.", GetCallerInfo().c_str());
        SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
        return;
      }
      TC_LOG_DEBUG("service.protobuf", "%s Client called server method ClubService.GetInvitations(bgs.protocol.club.v1.GetInvitationsRequest{ %s }).",
        GetCallerInfo().c_str(), request.ShortDebugString().c_str());
      std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = [token, methodId](ServiceBase* service, uint32 status, ::google::protobuf::Message const* response)
      {
        ASSERT(response->GetDescriptor() == ::bgs::protocol::club::v1::GetInvitationsResponse::descriptor());
        ClubService* self = static_cast<ClubService*>(service);
        TC_LOG_DEBUG("service.protobuf", "%s Client called server method ClubService.GetInvitations() returned bgs.protocol.club.v1.GetInvitationsResponse{ %s } status %u.",
          self->GetCallerInfo().c_str(), response->ShortDebugString().c_str(), status);
        if (!status)
          self->SendResponse(self->service_hash_, methodId, token, response);
        else
          self->SendResponse(self->service_hash_, methodId, token, status);
      };
      ::bgs::protocol::club::v1::GetInvitationsResponse response;
      uint32 status = HandleGetInvitations(&request, &response, continuation);
      if (continuation)
        continuation(this, status, &response);
      break;
    }
    case 60: {
      ::bgs::protocol::club::v1::SendSuggestionRequest request;
      if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
        TC_LOG_DEBUG("service.protobuf", "%s Failed to parse request for ClubService.SendSuggestion server method call.", GetCallerInfo().c_str());
        SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
        return;
      }
      TC_LOG_DEBUG("service.protobuf", "%s Client called server method ClubService.SendSuggestion(bgs.protocol.club.v1.SendSuggestionRequest{ %s }).",
        GetCallerInfo().c_str(), request.ShortDebugString().c_str());
      std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = [token, methodId](ServiceBase* service, uint32 status, ::google::protobuf::Message const* response)
      {
        ASSERT(response->GetDescriptor() == ::bgs::protocol::NoData::descriptor());
        ClubService* self = static_cast<ClubService*>(service);
        TC_LOG_DEBUG("service.protobuf", "%s Client called server method ClubService.SendSuggestion() returned bgs.protocol.NoData{ %s } status %u.",
          self->GetCallerInfo().c_str(), response->ShortDebugString().c_str(), status);
        if (!status)
          self->SendResponse(self->service_hash_, methodId, token, response);
        else
          self->SendResponse(self->service_hash_, methodId, token, status);
      };
      ::bgs::protocol::NoData response;
      uint32 status = HandleSendSuggestion(&request, &response, continuation);
      if (continuation)
        continuation(this, status, &response);
      break;
    }
    case 61: {
      ::bgs::protocol::club::v1::AcceptSuggestionRequest request;
      if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
        TC_LOG_DEBUG("service.protobuf", "%s Failed to parse request for ClubService.AcceptSuggestion server method call.", GetCallerInfo().c_str());
        SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
        return;
      }
      TC_LOG_DEBUG("service.protobuf", "%s Client called server method ClubService.AcceptSuggestion(bgs.protocol.club.v1.AcceptSuggestionRequest{ %s }).",
        GetCallerInfo().c_str(), request.ShortDebugString().c_str());
      std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = [token, methodId](ServiceBase* service, uint32 status, ::google::protobuf::Message const* response)
      {
        ASSERT(response->GetDescriptor() == ::bgs::protocol::NoData::descriptor());
        ClubService* self = static_cast<ClubService*>(service);
        TC_LOG_DEBUG("service.protobuf", "%s Client called server method ClubService.AcceptSuggestion() returned bgs.protocol.NoData{ %s } status %u.",
          self->GetCallerInfo().c_str(), response->ShortDebugString().c_str(), status);
        if (!status)
          self->SendResponse(self->service_hash_, methodId, token, response);
        else
          self->SendResponse(self->service_hash_, methodId, token, status);
      };
      ::bgs::protocol::NoData response;
      uint32 status = HandleAcceptSuggestion(&request, &response, continuation);
      if (continuation)
        continuation(this, status, &response);
      break;
    }
    case 62: {
      ::bgs::protocol::club::v1::DeclineSuggestionRequest request;
      if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
        TC_LOG_DEBUG("service.protobuf", "%s Failed to parse request for ClubService.DeclineSuggestion server method call.", GetCallerInfo().c_str());
        SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
        return;
      }
      TC_LOG_DEBUG("service.protobuf", "%s Client called server method ClubService.DeclineSuggestion(bgs.protocol.club.v1.DeclineSuggestionRequest{ %s }).",
        GetCallerInfo().c_str(), request.ShortDebugString().c_str());
      std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = [token, methodId](ServiceBase* service, uint32 status, ::google::protobuf::Message const* response)
      {
        ASSERT(response->GetDescriptor() == ::bgs::protocol::NoData::descriptor());
        ClubService* self = static_cast<ClubService*>(service);
        TC_LOG_DEBUG("service.protobuf", "%s Client called server method ClubService.DeclineSuggestion() returned bgs.protocol.NoData{ %s } status %u.",
          self->GetCallerInfo().c_str(), response->ShortDebugString().c_str(), status);
        if (!status)
          self->SendResponse(self->service_hash_, methodId, token, response);
        else
          self->SendResponse(self->service_hash_, methodId, token, status);
      };
      ::bgs::protocol::NoData response;
      uint32 status = HandleDeclineSuggestion(&request, &response, continuation);
      if (continuation)
        continuation(this, status, &response);
      break;
    }
    case 63: {
      ::bgs::protocol::club::v1::GetSuggestionRequest request;
      if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
        TC_LOG_DEBUG("service.protobuf", "%s Failed to parse request for ClubService.GetSuggestion server method call.", GetCallerInfo().c_str());
        SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
        return;
      }
      TC_LOG_DEBUG("service.protobuf", "%s Client called server method ClubService.GetSuggestion(bgs.protocol.club.v1.GetSuggestionRequest{ %s }).",
        GetCallerInfo().c_str(), request.ShortDebugString().c_str());
      std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = [token, methodId](ServiceBase* service, uint32 status, ::google::protobuf::Message const* response)
      {
        ASSERT(response->GetDescriptor() == ::bgs::protocol::club::v1::GetSuggestionResponse::descriptor());
        ClubService* self = static_cast<ClubService*>(service);
        TC_LOG_DEBUG("service.protobuf", "%s Client called server method ClubService.GetSuggestion() returned bgs.protocol.club.v1.GetSuggestionResponse{ %s } status %u.",
          self->GetCallerInfo().c_str(), response->ShortDebugString().c_str(), status);
        if (!status)
          self->SendResponse(self->service_hash_, methodId, token, response);
        else
          self->SendResponse(self->service_hash_, methodId, token, status);
      };
      ::bgs::protocol::club::v1::GetSuggestionResponse response;
      uint32 status = HandleGetSuggestion(&request, &response, continuation);
      if (continuation)
        continuation(this, status, &response);
      break;
    }
    case 64: {
      ::bgs::protocol::club::v1::GetSuggestionsRequest request;
      if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
        TC_LOG_DEBUG("service.protobuf", "%s Failed to parse request for ClubService.GetSuggestions server method call.", GetCallerInfo().c_str());
        SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
        return;
      }
      TC_LOG_DEBUG("service.protobuf", "%s Client called server method ClubService.GetSuggestions(bgs.protocol.club.v1.GetSuggestionsRequest{ %s }).",
        GetCallerInfo().c_str(), request.ShortDebugString().c_str());
      std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = [token, methodId](ServiceBase* service, uint32 status, ::google::protobuf::Message const* response)
      {
        ASSERT(response->GetDescriptor() == ::bgs::protocol::club::v1::GetSuggestionsResponse::descriptor());
        ClubService* self = static_cast<ClubService*>(service);
        TC_LOG_DEBUG("service.protobuf", "%s Client called server method ClubService.GetSuggestions() returned bgs.protocol.club.v1.GetSuggestionsResponse{ %s } status %u.",
          self->GetCallerInfo().c_str(), response->ShortDebugString().c_str(), status);
        if (!status)
          self->SendResponse(self->service_hash_, methodId, token, response);
        else
          self->SendResponse(self->service_hash_, methodId, token, status);
      };
      ::bgs::protocol::club::v1::GetSuggestionsResponse response;
      uint32 status = HandleGetSuggestions(&request, &response, continuation);
      if (continuation)
        continuation(this, status, &response);
      break;
    }
    case 70: {
      ::bgs::protocol::club::v1::CreateTicketRequest request;
      if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
        TC_LOG_DEBUG("service.protobuf", "%s Failed to parse request for ClubService.CreateTicket server method call.", GetCallerInfo().c_str());
        SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
        return;
      }
      TC_LOG_DEBUG("service.protobuf", "%s Client called server method ClubService.CreateTicket(bgs.protocol.club.v1.CreateTicketRequest{ %s }).",
        GetCallerInfo().c_str(), request.ShortDebugString().c_str());
      std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = [token, methodId](ServiceBase* service, uint32 status, ::google::protobuf::Message const* response)
      {
        ASSERT(response->GetDescriptor() == ::bgs::protocol::club::v1::CreateTicketResponse::descriptor());
        ClubService* self = static_cast<ClubService*>(service);
        TC_LOG_DEBUG("service.protobuf", "%s Client called server method ClubService.CreateTicket() returned bgs.protocol.club.v1.CreateTicketResponse{ %s } status %u.",
          self->GetCallerInfo().c_str(), response->ShortDebugString().c_str(), status);
        if (!status)
          self->SendResponse(self->service_hash_, methodId, token, response);
        else
          self->SendResponse(self->service_hash_, methodId, token, status);
      };
      ::bgs::protocol::club::v1::CreateTicketResponse response;
      uint32 status = HandleCreateTicket(&request, &response, continuation);
      if (continuation)
        continuation(this, status, &response);
      break;
    }
    case 71: {
      ::bgs::protocol::club::v1::DestroyTicketRequest request;
      if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
        TC_LOG_DEBUG("service.protobuf", "%s Failed to parse request for ClubService.DestroyTicket server method call.", GetCallerInfo().c_str());
        SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
        return;
      }
      TC_LOG_DEBUG("service.protobuf", "%s Client called server method ClubService.DestroyTicket(bgs.protocol.club.v1.DestroyTicketRequest{ %s }).",
        GetCallerInfo().c_str(), request.ShortDebugString().c_str());
      std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = [token, methodId](ServiceBase* service, uint32 status, ::google::protobuf::Message const* response)
      {
        ASSERT(response->GetDescriptor() == ::bgs::protocol::NoData::descriptor());
        ClubService* self = static_cast<ClubService*>(service);
        TC_LOG_DEBUG("service.protobuf", "%s Client called server method ClubService.DestroyTicket() returned bgs.protocol.NoData{ %s } status %u.",
          self->GetCallerInfo().c_str(), response->ShortDebugString().c_str(), status);
        if (!status)
          self->SendResponse(self->service_hash_, methodId, token, response);
        else
          self->SendResponse(self->service_hash_, methodId, token, status);
      };
      ::bgs::protocol::NoData response;
      uint32 status = HandleDestroyTicket(&request, &response, continuation);
      if (continuation)
        continuation(this, status, &response);
      break;
    }
    case 72: {
      ::bgs::protocol::club::v1::RedeemTicketRequest request;
      if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
        TC_LOG_DEBUG("service.protobuf", "%s Failed to parse request for ClubService.RedeemTicket server method call.", GetCallerInfo().c_str());
        SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
        return;
      }
      TC_LOG_DEBUG("service.protobuf", "%s Client called server method ClubService.RedeemTicket(bgs.protocol.club.v1.RedeemTicketRequest{ %s }).",
        GetCallerInfo().c_str(), request.ShortDebugString().c_str());
      std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = [token, methodId](ServiceBase* service, uint32 status, ::google::protobuf::Message const* response)
      {
        ASSERT(response->GetDescriptor() == ::bgs::protocol::NoData::descriptor());
        ClubService* self = static_cast<ClubService*>(service);
        TC_LOG_DEBUG("service.protobuf", "%s Client called server method ClubService.RedeemTicket() returned bgs.protocol.NoData{ %s } status %u.",
          self->GetCallerInfo().c_str(), response->ShortDebugString().c_str(), status);
        if (!status)
          self->SendResponse(self->service_hash_, methodId, token, response);
        else
          self->SendResponse(self->service_hash_, methodId, token, status);
      };
      ::bgs::protocol::NoData response;
      uint32 status = HandleRedeemTicket(&request, &response, continuation);
      if (continuation)
        continuation(this, status, &response);
      break;
    }
    case 73: {
      ::bgs::protocol::club::v1::GetTicketRequest request;
      if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
        TC_LOG_DEBUG("service.protobuf", "%s Failed to parse request for ClubService.GetTicket server method call.", GetCallerInfo().c_str());
        SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
        return;
      }
      TC_LOG_DEBUG("service.protobuf", "%s Client called server method ClubService.GetTicket(bgs.protocol.club.v1.GetTicketRequest{ %s }).",
        GetCallerInfo().c_str(), request.ShortDebugString().c_str());
      std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = [token, methodId](ServiceBase* service, uint32 status, ::google::protobuf::Message const* response)
      {
        ASSERT(response->GetDescriptor() == ::bgs::protocol::club::v1::GetTicketResponse::descriptor());
        ClubService* self = static_cast<ClubService*>(service);
        TC_LOG_DEBUG("service.protobuf", "%s Client called server method ClubService.GetTicket() returned bgs.protocol.club.v1.GetTicketResponse{ %s } status %u.",
          self->GetCallerInfo().c_str(), response->ShortDebugString().c_str(), status);
        if (!status)
          self->SendResponse(self->service_hash_, methodId, token, response);
        else
          self->SendResponse(self->service_hash_, methodId, token, status);
      };
      ::bgs::protocol::club::v1::GetTicketResponse response;
      uint32 status = HandleGetTicket(&request, &response, continuation);
      if (continuation)
        continuation(this, status, &response);
      break;
    }
    case 74: {
      ::bgs::protocol::club::v1::GetTicketsRequest request;
      if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
        TC_LOG_DEBUG("service.protobuf", "%s Failed to parse request for ClubService.GetTickets server method call.", GetCallerInfo().c_str());
        SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
        return;
      }
      TC_LOG_DEBUG("service.protobuf", "%s Client called server method ClubService.GetTickets(bgs.protocol.club.v1.GetTicketsRequest{ %s }).",
        GetCallerInfo().c_str(), request.ShortDebugString().c_str());
      std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = [token, methodId](ServiceBase* service, uint32 status, ::google::protobuf::Message const* response)
      {
        ASSERT(response->GetDescriptor() == ::bgs::protocol::club::v1::GetTicketsResponse::descriptor());
        ClubService* self = static_cast<ClubService*>(service);
        TC_LOG_DEBUG("service.protobuf", "%s Client called server method ClubService.GetTickets() returned bgs.protocol.club.v1.GetTicketsResponse{ %s } status %u.",
          self->GetCallerInfo().c_str(), response->ShortDebugString().c_str(), status);
        if (!status)
          self->SendResponse(self->service_hash_, methodId, token, response);
        else
          self->SendResponse(self->service_hash_, methodId, token, status);
      };
      ::bgs::protocol::club::v1::GetTicketsResponse response;
      uint32 status = HandleGetTickets(&request, &response, continuation);
      if (continuation)
        continuation(this, status, &response);
      break;
    }
    case 80: {
      ::bgs::protocol::club::v1::AddBanRequest request;
      if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
        TC_LOG_DEBUG("service.protobuf", "%s Failed to parse request for ClubService.AddBan server method call.", GetCallerInfo().c_str());
        SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
        return;
      }
      TC_LOG_DEBUG("service.protobuf", "%s Client called server method ClubService.AddBan(bgs.protocol.club.v1.AddBanRequest{ %s }).",
        GetCallerInfo().c_str(), request.ShortDebugString().c_str());
      std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = [token, methodId](ServiceBase* service, uint32 status, ::google::protobuf::Message const* response)
      {
        ASSERT(response->GetDescriptor() == ::bgs::protocol::NoData::descriptor());
        ClubService* self = static_cast<ClubService*>(service);
        TC_LOG_DEBUG("service.protobuf", "%s Client called server method ClubService.AddBan() returned bgs.protocol.NoData{ %s } status %u.",
          self->GetCallerInfo().c_str(), response->ShortDebugString().c_str(), status);
        if (!status)
          self->SendResponse(self->service_hash_, methodId, token, response);
        else
          self->SendResponse(self->service_hash_, methodId, token, status);
      };
      ::bgs::protocol::NoData response;
      uint32 status = HandleAddBan(&request, &response, continuation);
      if (continuation)
        continuation(this, status, &response);
      break;
    }
    case 81: {
      ::bgs::protocol::club::v1::RemoveBanRequest request;
      if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
        TC_LOG_DEBUG("service.protobuf", "%s Failed to parse request for ClubService.RemoveBan server method call.", GetCallerInfo().c_str());
        SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
        return;
      }
      TC_LOG_DEBUG("service.protobuf", "%s Client called server method ClubService.RemoveBan(bgs.protocol.club.v1.RemoveBanRequest{ %s }).",
        GetCallerInfo().c_str(), request.ShortDebugString().c_str());
      std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = [token, methodId](ServiceBase* service, uint32 status, ::google::protobuf::Message const* response)
      {
        ASSERT(response->GetDescriptor() == ::bgs::protocol::NoData::descriptor());
        ClubService* self = static_cast<ClubService*>(service);
        TC_LOG_DEBUG("service.protobuf", "%s Client called server method ClubService.RemoveBan() returned bgs.protocol.NoData{ %s } status %u.",
          self->GetCallerInfo().c_str(), response->ShortDebugString().c_str(), status);
        if (!status)
          self->SendResponse(self->service_hash_, methodId, token, response);
        else
          self->SendResponse(self->service_hash_, methodId, token, status);
      };
      ::bgs::protocol::NoData response;
      uint32 status = HandleRemoveBan(&request, &response, continuation);
      if (continuation)
        continuation(this, status, &response);
      break;
    }
    case 82: {
      ::bgs::protocol::club::v1::GetBanRequest request;
      if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
        TC_LOG_DEBUG("service.protobuf", "%s Failed to parse request for ClubService.GetBan server method call.", GetCallerInfo().c_str());
        SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
        return;
      }
      TC_LOG_DEBUG("service.protobuf", "%s Client called server method ClubService.GetBan(bgs.protocol.club.v1.GetBanRequest{ %s }).",
        GetCallerInfo().c_str(), request.ShortDebugString().c_str());
      std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = [token, methodId](ServiceBase* service, uint32 status, ::google::protobuf::Message const* response)
      {
        ASSERT(response->GetDescriptor() == ::bgs::protocol::club::v1::GetBanResponse::descriptor());
        ClubService* self = static_cast<ClubService*>(service);
        TC_LOG_DEBUG("service.protobuf", "%s Client called server method ClubService.GetBan() returned bgs.protocol.club.v1.GetBanResponse{ %s } status %u.",
          self->GetCallerInfo().c_str(), response->ShortDebugString().c_str(), status);
        if (!status)
          self->SendResponse(self->service_hash_, methodId, token, response);
        else
          self->SendResponse(self->service_hash_, methodId, token, status);
      };
      ::bgs::protocol::club::v1::GetBanResponse response;
      uint32 status = HandleGetBan(&request, &response, continuation);
      if (continuation)
        continuation(this, status, &response);
      break;
    }
    case 83: {
      ::bgs::protocol::club::v1::GetBansRequest request;
      if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
        TC_LOG_DEBUG("service.protobuf", "%s Failed to parse request for ClubService.GetBans server method call.", GetCallerInfo().c_str());
        SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
        return;
      }
      TC_LOG_DEBUG("service.protobuf", "%s Client called server method ClubService.GetBans(bgs.protocol.club.v1.GetBansRequest{ %s }).",
        GetCallerInfo().c_str(), request.ShortDebugString().c_str());
      std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = [token, methodId](ServiceBase* service, uint32 status, ::google::protobuf::Message const* response)
      {
        ASSERT(response->GetDescriptor() == ::bgs::protocol::club::v1::GetBansResponse::descriptor());
        ClubService* self = static_cast<ClubService*>(service);
        TC_LOG_DEBUG("service.protobuf", "%s Client called server method ClubService.GetBans() returned bgs.protocol.club.v1.GetBansResponse{ %s } status %u.",
          self->GetCallerInfo().c_str(), response->ShortDebugString().c_str(), status);
        if (!status)
          self->SendResponse(self->service_hash_, methodId, token, response);
        else
          self->SendResponse(self->service_hash_, methodId, token, status);
      };
      ::bgs::protocol::club::v1::GetBansResponse response;
      uint32 status = HandleGetBans(&request, &response, continuation);
      if (continuation)
        continuation(this, status, &response);
      break;
    }
    case 100: {
      ::bgs::protocol::club::v1::SubscribeStreamRequest request;
      if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
        TC_LOG_DEBUG("service.protobuf", "%s Failed to parse request for ClubService.SubscribeStream server method call.", GetCallerInfo().c_str());
        SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
        return;
      }
      TC_LOG_DEBUG("service.protobuf", "%s Client called server method ClubService.SubscribeStream(bgs.protocol.club.v1.SubscribeStreamRequest{ %s }).",
        GetCallerInfo().c_str(), request.ShortDebugString().c_str());
      std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = [token, methodId](ServiceBase* service, uint32 status, ::google::protobuf::Message const* response)
      {
        ASSERT(response->GetDescriptor() == ::bgs::protocol::NoData::descriptor());
        ClubService* self = static_cast<ClubService*>(service);
        TC_LOG_DEBUG("service.protobuf", "%s Client called server method ClubService.SubscribeStream() returned bgs.protocol.NoData{ %s } status %u.",
          self->GetCallerInfo().c_str(), response->ShortDebugString().c_str(), status);
        if (!status)
          self->SendResponse(self->service_hash_, methodId, token, response);
        else
          self->SendResponse(self->service_hash_, methodId, token, status);
      };
      ::bgs::protocol::NoData response;
      uint32 status = HandleSubscribeStream(&request, &response, continuation);
      if (continuation)
        continuation(this, status, &response);
      break;
    }
    case 101: {
      ::bgs::protocol::club::v1::UnsubscribeStreamRequest request;
      if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
        TC_LOG_DEBUG("service.protobuf", "%s Failed to parse request for ClubService.UnsubscribeStream server method call.", GetCallerInfo().c_str());
        SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
        return;
      }
      TC_LOG_DEBUG("service.protobuf", "%s Client called server method ClubService.UnsubscribeStream(bgs.protocol.club.v1.UnsubscribeStreamRequest{ %s }).",
        GetCallerInfo().c_str(), request.ShortDebugString().c_str());
      std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = [token, methodId](ServiceBase* service, uint32 status, ::google::protobuf::Message const* response)
      {
        ASSERT(response->GetDescriptor() == ::bgs::protocol::NoData::descriptor());
        ClubService* self = static_cast<ClubService*>(service);
        TC_LOG_DEBUG("service.protobuf", "%s Client called server method ClubService.UnsubscribeStream() returned bgs.protocol.NoData{ %s } status %u.",
          self->GetCallerInfo().c_str(), response->ShortDebugString().c_str(), status);
        if (!status)
          self->SendResponse(self->service_hash_, methodId, token, response);
        else
          self->SendResponse(self->service_hash_, methodId, token, status);
      };
      ::bgs::protocol::NoData response;
      uint32 status = HandleUnsubscribeStream(&request, &response, continuation);
      if (continuation)
        continuation(this, status, &response);
      break;
    }
    case 102: {
      ::bgs::protocol::club::v1::CreateStreamRequest request;
      if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
        TC_LOG_DEBUG("service.protobuf", "%s Failed to parse request for ClubService.CreateStream server method call.", GetCallerInfo().c_str());
        SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
        return;
      }
      TC_LOG_DEBUG("service.protobuf", "%s Client called server method ClubService.CreateStream(bgs.protocol.club.v1.CreateStreamRequest{ %s }).",
        GetCallerInfo().c_str(), request.ShortDebugString().c_str());
      std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = [token, methodId](ServiceBase* service, uint32 status, ::google::protobuf::Message const* response)
      {
        ASSERT(response->GetDescriptor() == ::bgs::protocol::club::v1::CreateStreamResponse::descriptor());
        ClubService* self = static_cast<ClubService*>(service);
        TC_LOG_DEBUG("service.protobuf", "%s Client called server method ClubService.CreateStream() returned bgs.protocol.club.v1.CreateStreamResponse{ %s } status %u.",
          self->GetCallerInfo().c_str(), response->ShortDebugString().c_str(), status);
        if (!status)
          self->SendResponse(self->service_hash_, methodId, token, response);
        else
          self->SendResponse(self->service_hash_, methodId, token, status);
      };
      ::bgs::protocol::club::v1::CreateStreamResponse response;
      uint32 status = HandleCreateStream(&request, &response, continuation);
      if (continuation)
        continuation(this, status, &response);
      break;
    }
    case 103: {
      ::bgs::protocol::club::v1::DestroyStreamRequest request;
      if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
        TC_LOG_DEBUG("service.protobuf", "%s Failed to parse request for ClubService.DestroyStream server method call.", GetCallerInfo().c_str());
        SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
        return;
      }
      TC_LOG_DEBUG("service.protobuf", "%s Client called server method ClubService.DestroyStream(bgs.protocol.club.v1.DestroyStreamRequest{ %s }).",
        GetCallerInfo().c_str(), request.ShortDebugString().c_str());
      std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = [token, methodId](ServiceBase* service, uint32 status, ::google::protobuf::Message const* response)
      {
        ASSERT(response->GetDescriptor() == ::bgs::protocol::NoData::descriptor());
        ClubService* self = static_cast<ClubService*>(service);
        TC_LOG_DEBUG("service.protobuf", "%s Client called server method ClubService.DestroyStream() returned bgs.protocol.NoData{ %s } status %u.",
          self->GetCallerInfo().c_str(), response->ShortDebugString().c_str(), status);
        if (!status)
          self->SendResponse(self->service_hash_, methodId, token, response);
        else
          self->SendResponse(self->service_hash_, methodId, token, status);
      };
      ::bgs::protocol::NoData response;
      uint32 status = HandleDestroyStream(&request, &response, continuation);
      if (continuation)
        continuation(this, status, &response);
      break;
    }
    case 104: {
      ::bgs::protocol::club::v1::GetStreamRequest request;
      if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
        TC_LOG_DEBUG("service.protobuf", "%s Failed to parse request for ClubService.GetStream server method call.", GetCallerInfo().c_str());
        SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
        return;
      }
      TC_LOG_DEBUG("service.protobuf", "%s Client called server method ClubService.GetStream(bgs.protocol.club.v1.GetStreamRequest{ %s }).",
        GetCallerInfo().c_str(), request.ShortDebugString().c_str());
      std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = [token, methodId](ServiceBase* service, uint32 status, ::google::protobuf::Message const* response)
      {
        ASSERT(response->GetDescriptor() == ::bgs::protocol::club::v1::GetStreamResponse::descriptor());
        ClubService* self = static_cast<ClubService*>(service);
        TC_LOG_DEBUG("service.protobuf", "%s Client called server method ClubService.GetStream() returned bgs.protocol.club.v1.GetStreamResponse{ %s } status %u.",
          self->GetCallerInfo().c_str(), response->ShortDebugString().c_str(), status);
        if (!status)
          self->SendResponse(self->service_hash_, methodId, token, response);
        else
          self->SendResponse(self->service_hash_, methodId, token, status);
      };
      ::bgs::protocol::club::v1::GetStreamResponse response;
      uint32 status = HandleGetStream(&request, &response, continuation);
      if (continuation)
        continuation(this, status, &response);
      break;
    }
    case 105: {
      ::bgs::protocol::club::v1::GetStreamsRequest request;
      if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
        TC_LOG_DEBUG("service.protobuf", "%s Failed to parse request for ClubService.GetStreams server method call.", GetCallerInfo().c_str());
        SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
        return;
      }
      TC_LOG_DEBUG("service.protobuf", "%s Client called server method ClubService.GetStreams(bgs.protocol.club.v1.GetStreamsRequest{ %s }).",
        GetCallerInfo().c_str(), request.ShortDebugString().c_str());
      std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = [token, methodId](ServiceBase* service, uint32 status, ::google::protobuf::Message const* response)
      {
        ASSERT(response->GetDescriptor() == ::bgs::protocol::club::v1::GetStreamsResponse::descriptor());
        ClubService* self = static_cast<ClubService*>(service);
        TC_LOG_DEBUG("service.protobuf", "%s Client called server method ClubService.GetStreams() returned bgs.protocol.club.v1.GetStreamsResponse{ %s } status %u.",
          self->GetCallerInfo().c_str(), response->ShortDebugString().c_str(), status);
        if (!status)
          self->SendResponse(self->service_hash_, methodId, token, response);
        else
          self->SendResponse(self->service_hash_, methodId, token, status);
      };
      ::bgs::protocol::club::v1::GetStreamsResponse response;
      uint32 status = HandleGetStreams(&request, &response, continuation);
      if (continuation)
        continuation(this, status, &response);
      break;
    }
    case 106: {
      ::bgs::protocol::club::v1::UpdateStreamStateRequest request;
      if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
        TC_LOG_DEBUG("service.protobuf", "%s Failed to parse request for ClubService.UpdateStreamState server method call.", GetCallerInfo().c_str());
        SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
        return;
      }
      TC_LOG_DEBUG("service.protobuf", "%s Client called server method ClubService.UpdateStreamState(bgs.protocol.club.v1.UpdateStreamStateRequest{ %s }).",
        GetCallerInfo().c_str(), request.ShortDebugString().c_str());
      std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = [token, methodId](ServiceBase* service, uint32 status, ::google::protobuf::Message const* response)
      {
        ASSERT(response->GetDescriptor() == ::bgs::protocol::NoData::descriptor());
        ClubService* self = static_cast<ClubService*>(service);
        TC_LOG_DEBUG("service.protobuf", "%s Client called server method ClubService.UpdateStreamState() returned bgs.protocol.NoData{ %s } status %u.",
          self->GetCallerInfo().c_str(), response->ShortDebugString().c_str(), status);
        if (!status)
          self->SendResponse(self->service_hash_, methodId, token, response);
        else
          self->SendResponse(self->service_hash_, methodId, token, status);
      };
      ::bgs::protocol::NoData response;
      uint32 status = HandleUpdateStreamState(&request, &response, continuation);
      if (continuation)
        continuation(this, status, &response);
      break;
    }
    case 107: {
      ::bgs::protocol::club::v1::SetStreamFocusRequest request;
      if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
        TC_LOG_DEBUG("service.protobuf", "%s Failed to parse request for ClubService.SetStreamFocus server method call.", GetCallerInfo().c_str());
        SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
        return;
      }
      TC_LOG_DEBUG("service.protobuf", "%s Client called server method ClubService.SetStreamFocus(bgs.protocol.club.v1.SetStreamFocusRequest{ %s }).",
        GetCallerInfo().c_str(), request.ShortDebugString().c_str());
      std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = [token, methodId](ServiceBase* service, uint32 status, ::google::protobuf::Message const* response)
      {
        ASSERT(response->GetDescriptor() == ::bgs::protocol::NoData::descriptor());
        ClubService* self = static_cast<ClubService*>(service);
        TC_LOG_DEBUG("service.protobuf", "%s Client called server method ClubService.SetStreamFocus() returned bgs.protocol.NoData{ %s } status %u.",
          self->GetCallerInfo().c_str(), response->ShortDebugString().c_str(), status);
        if (!status)
          self->SendResponse(self->service_hash_, methodId, token, response);
        else
          self->SendResponse(self->service_hash_, methodId, token, status);
      };
      ::bgs::protocol::NoData response;
      uint32 status = HandleSetStreamFocus(&request, &response, continuation);
      if (continuation)
        continuation(this, status, &response);
      break;
    }
    case 108: {
      ::bgs::protocol::club::v1::GetStreamVoiceTokenRequest request;
      if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
        TC_LOG_DEBUG("service.protobuf", "%s Failed to parse request for ClubService.GetStreamVoiceToken server method call.", GetCallerInfo().c_str());
        SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
        return;
      }
      TC_LOG_DEBUG("service.protobuf", "%s Client called server method ClubService.GetStreamVoiceToken(bgs.protocol.club.v1.GetStreamVoiceTokenRequest{ %s }).",
        GetCallerInfo().c_str(), request.ShortDebugString().c_str());
      std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = [token, methodId](ServiceBase* service, uint32 status, ::google::protobuf::Message const* response)
      {
        ASSERT(response->GetDescriptor() == ::bgs::protocol::club::v1::GetStreamVoiceTokenResponse::descriptor());
        ClubService* self = static_cast<ClubService*>(service);
        TC_LOG_DEBUG("service.protobuf", "%s Client called server method ClubService.GetStreamVoiceToken() returned bgs.protocol.club.v1.GetStreamVoiceTokenResponse{ %s } status %u.",
          self->GetCallerInfo().c_str(), response->ShortDebugString().c_str(), status);
        if (!status)
          self->SendResponse(self->service_hash_, methodId, token, response);
        else
          self->SendResponse(self->service_hash_, methodId, token, status);
      };
      ::bgs::protocol::club::v1::GetStreamVoiceTokenResponse response;
      uint32 status = HandleGetStreamVoiceToken(&request, &response, continuation);
      if (continuation)
        continuation(this, status, &response);
      break;
    }
    case 109: {
      ::bgs::protocol::club::v1::KickFromStreamVoiceRequest request;
      if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
        TC_LOG_DEBUG("service.protobuf", "%s Failed to parse request for ClubService.KickFromStreamVoice server method call.", GetCallerInfo().c_str());
        SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
        return;
      }
      TC_LOG_DEBUG("service.protobuf", "%s Client called server method ClubService.KickFromStreamVoice(bgs.protocol.club.v1.KickFromStreamVoiceRequest{ %s }).",
        GetCallerInfo().c_str(), request.ShortDebugString().c_str());
      std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = [token, methodId](ServiceBase* service, uint32 status, ::google::protobuf::Message const* response)
      {
        ASSERT(response->GetDescriptor() == ::bgs::protocol::NoData::descriptor());
        ClubService* self = static_cast<ClubService*>(service);
        TC_LOG_DEBUG("service.protobuf", "%s Client called server method ClubService.KickFromStreamVoice() returned bgs.protocol.NoData{ %s } status %u.",
          self->GetCallerInfo().c_str(), response->ShortDebugString().c_str(), status);
        if (!status)
          self->SendResponse(self->service_hash_, methodId, token, response);
        else
          self->SendResponse(self->service_hash_, methodId, token, status);
      };
      ::bgs::protocol::NoData response;
      uint32 status = HandleKickFromStreamVoice(&request, &response, continuation);
      if (continuation)
        continuation(this, status, &response);
      break;
    }
    case 150: {
      ::bgs::protocol::club::v1::CreateMessageRequest request;
      if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
        TC_LOG_DEBUG("service.protobuf", "%s Failed to parse request for ClubService.CreateMessage server method call.", GetCallerInfo().c_str());
        SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
        return;
      }
      TC_LOG_DEBUG("service.protobuf", "%s Client called server method ClubService.CreateMessage(bgs.protocol.club.v1.CreateMessageRequest{ %s }).",
        GetCallerInfo().c_str(), request.ShortDebugString().c_str());
      std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = [token, methodId](ServiceBase* service, uint32 status, ::google::protobuf::Message const* response)
      {
        ASSERT(response->GetDescriptor() == ::bgs::protocol::club::v1::CreateMessageResponse::descriptor());
        ClubService* self = static_cast<ClubService*>(service);
        TC_LOG_DEBUG("service.protobuf", "%s Client called server method ClubService.CreateMessage() returned bgs.protocol.club.v1.CreateMessageResponse{ %s } status %u.",
          self->GetCallerInfo().c_str(), response->ShortDebugString().c_str(), status);
        if (!status)
          self->SendResponse(self->service_hash_, methodId, token, response);
        else
          self->SendResponse(self->service_hash_, methodId, token, status);
      };
      ::bgs::protocol::club::v1::CreateMessageResponse response;
      uint32 status = HandleCreateMessage(&request, &response, continuation);
      if (continuation)
        continuation(this, status, &response);
      break;
    }
    case 151: {
      ::bgs::protocol::club::v1::DestroyMessageRequest request;
      if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
        TC_LOG_DEBUG("service.protobuf", "%s Failed to parse request for ClubService.DestroyMessage server method call.", GetCallerInfo().c_str());
        SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
        return;
      }
      TC_LOG_DEBUG("service.protobuf", "%s Client called server method ClubService.DestroyMessage(bgs.protocol.club.v1.DestroyMessageRequest{ %s }).",
        GetCallerInfo().c_str(), request.ShortDebugString().c_str());
      std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = [token, methodId](ServiceBase* service, uint32 status, ::google::protobuf::Message const* response)
      {
        ASSERT(response->GetDescriptor() == ::bgs::protocol::club::v1::DestroyMessageResponse::descriptor());
        ClubService* self = static_cast<ClubService*>(service);
        TC_LOG_DEBUG("service.protobuf", "%s Client called server method ClubService.DestroyMessage() returned bgs.protocol.club.v1.DestroyMessageResponse{ %s } status %u.",
          self->GetCallerInfo().c_str(), response->ShortDebugString().c_str(), status);
        if (!status)
          self->SendResponse(self->service_hash_, methodId, token, response);
        else
          self->SendResponse(self->service_hash_, methodId, token, status);
      };
      ::bgs::protocol::club::v1::DestroyMessageResponse response;
      uint32 status = HandleDestroyMessage(&request, &response, continuation);
      if (continuation)
        continuation(this, status, &response);
      break;
    }
    case 152: {
      ::bgs::protocol::club::v1::EditMessageRequest request;
      if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
        TC_LOG_DEBUG("service.protobuf", "%s Failed to parse request for ClubService.EditMessage server method call.", GetCallerInfo().c_str());
        SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
        return;
      }
      TC_LOG_DEBUG("service.protobuf", "%s Client called server method ClubService.EditMessage(bgs.protocol.club.v1.EditMessageRequest{ %s }).",
        GetCallerInfo().c_str(), request.ShortDebugString().c_str());
      std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = [token, methodId](ServiceBase* service, uint32 status, ::google::protobuf::Message const* response)
      {
        ASSERT(response->GetDescriptor() == ::bgs::protocol::club::v1::EditMessageResponse::descriptor());
        ClubService* self = static_cast<ClubService*>(service);
        TC_LOG_DEBUG("service.protobuf", "%s Client called server method ClubService.EditMessage() returned bgs.protocol.club.v1.EditMessageResponse{ %s } status %u.",
          self->GetCallerInfo().c_str(), response->ShortDebugString().c_str(), status);
        if (!status)
          self->SendResponse(self->service_hash_, methodId, token, response);
        else
          self->SendResponse(self->service_hash_, methodId, token, status);
      };
      ::bgs::protocol::club::v1::EditMessageResponse response;
      uint32 status = HandleEditMessage(&request, &response, continuation);
      if (continuation)
        continuation(this, status, &response);
      break;
    }
    case 153: {
      ::bgs::protocol::club::v1::SetMessagePinnedRequest request;
      if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
        TC_LOG_DEBUG("service.protobuf", "%s Failed to parse request for ClubService.SetMessagePinned server method call.", GetCallerInfo().c_str());
        SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
        return;
      }
      TC_LOG_DEBUG("service.protobuf", "%s Client called server method ClubService.SetMessagePinned(bgs.protocol.club.v1.SetMessagePinnedRequest{ %s }).",
        GetCallerInfo().c_str(), request.ShortDebugString().c_str());
      std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = [token, methodId](ServiceBase* service, uint32 status, ::google::protobuf::Message const* response)
      {
        ASSERT(response->GetDescriptor() == ::bgs::protocol::NoData::descriptor());
        ClubService* self = static_cast<ClubService*>(service);
        TC_LOG_DEBUG("service.protobuf", "%s Client called server method ClubService.SetMessagePinned() returned bgs.protocol.NoData{ %s } status %u.",
          self->GetCallerInfo().c_str(), response->ShortDebugString().c_str(), status);
        if (!status)
          self->SendResponse(self->service_hash_, methodId, token, response);
        else
          self->SendResponse(self->service_hash_, methodId, token, status);
      };
      ::bgs::protocol::NoData response;
      uint32 status = HandleSetMessagePinned(&request, &response, continuation);
      if (continuation)
        continuation(this, status, &response);
      break;
    }
    case 154: {
      ::bgs::protocol::club::v1::SetTypingIndicatorRequest request;
      if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
        TC_LOG_DEBUG("service.protobuf", "%s Failed to parse request for ClubService.SetTypingIndicator server method call.", GetCallerInfo().c_str());
        SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
        return;
      }
      TC_LOG_DEBUG("service.protobuf", "%s Client called server method ClubService.SetTypingIndicator(bgs.protocol.club.v1.SetTypingIndicatorRequest{ %s }).",
        GetCallerInfo().c_str(), request.ShortDebugString().c_str());
      std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = [token, methodId](ServiceBase* service, uint32 status, ::google::protobuf::Message const* response)
      {
        ASSERT(response->GetDescriptor() == ::bgs::protocol::NoData::descriptor());
        ClubService* self = static_cast<ClubService*>(service);
        TC_LOG_DEBUG("service.protobuf", "%s Client called server method ClubService.SetTypingIndicator() returned bgs.protocol.NoData{ %s } status %u.",
          self->GetCallerInfo().c_str(), response->ShortDebugString().c_str(), status);
        if (!status)
          self->SendResponse(self->service_hash_, methodId, token, response);
        else
          self->SendResponse(self->service_hash_, methodId, token, status);
      };
      ::bgs::protocol::NoData response;
      uint32 status = HandleSetTypingIndicator(&request, &response, continuation);
      if (continuation)
        continuation(this, status, &response);
      break;
    }
    case 155: {
      ::bgs::protocol::club::v1::AdvanceStreamViewTimeRequest request;
      if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
        TC_LOG_DEBUG("service.protobuf", "%s Failed to parse request for ClubService.AdvanceStreamViewTime server method call.", GetCallerInfo().c_str());
        SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
        return;
      }
      TC_LOG_DEBUG("service.protobuf", "%s Client called server method ClubService.AdvanceStreamViewTime(bgs.protocol.club.v1.AdvanceStreamViewTimeRequest{ %s }).",
        GetCallerInfo().c_str(), request.ShortDebugString().c_str());
      std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = [token, methodId](ServiceBase* service, uint32 status, ::google::protobuf::Message const* response)
      {
        ASSERT(response->GetDescriptor() == ::bgs::protocol::NoData::descriptor());
        ClubService* self = static_cast<ClubService*>(service);
        TC_LOG_DEBUG("service.protobuf", "%s Client called server method ClubService.AdvanceStreamViewTime() returned bgs.protocol.NoData{ %s } status %u.",
          self->GetCallerInfo().c_str(), response->ShortDebugString().c_str(), status);
        if (!status)
          self->SendResponse(self->service_hash_, methodId, token, response);
        else
          self->SendResponse(self->service_hash_, methodId, token, status);
      };
      ::bgs::protocol::NoData response;
      uint32 status = HandleAdvanceStreamViewTime(&request, &response, continuation);
      if (continuation)
        continuation(this, status, &response);
      break;
    }
    case 156: {
      ::bgs::protocol::club::v1::GetStreamHistoryRequest request;
      if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
        TC_LOG_DEBUG("service.protobuf", "%s Failed to parse request for ClubService.GetStreamHistory server method call.", GetCallerInfo().c_str());
        SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
        return;
      }
      TC_LOG_DEBUG("service.protobuf", "%s Client called server method ClubService.GetStreamHistory(bgs.protocol.club.v1.GetStreamHistoryRequest{ %s }).",
        GetCallerInfo().c_str(), request.ShortDebugString().c_str());
      std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = [token, methodId](ServiceBase* service, uint32 status, ::google::protobuf::Message const* response)
      {
        ASSERT(response->GetDescriptor() == ::bgs::protocol::club::v1::GetStreamHistoryResponse::descriptor());
        ClubService* self = static_cast<ClubService*>(service);
        TC_LOG_DEBUG("service.protobuf", "%s Client called server method ClubService.GetStreamHistory() returned bgs.protocol.club.v1.GetStreamHistoryResponse{ %s } status %u.",
          self->GetCallerInfo().c_str(), response->ShortDebugString().c_str(), status);
        if (!status)
          self->SendResponse(self->service_hash_, methodId, token, response);
        else
          self->SendResponse(self->service_hash_, methodId, token, status);
      };
      ::bgs::protocol::club::v1::GetStreamHistoryResponse response;
      uint32 status = HandleGetStreamHistory(&request, &response, continuation);
      if (continuation)
        continuation(this, status, &response);
      break;
    }
    case 157: {
      ::bgs::protocol::club::v1::GetStreamMessageRequest request;
      if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
        TC_LOG_DEBUG("service.protobuf", "%s Failed to parse request for ClubService.GetStreamMessage server method call.", GetCallerInfo().c_str());
        SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
        return;
      }
      TC_LOG_DEBUG("service.protobuf", "%s Client called server method ClubService.GetStreamMessage(bgs.protocol.club.v1.GetStreamMessageRequest{ %s }).",
        GetCallerInfo().c_str(), request.ShortDebugString().c_str());
      std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = [token, methodId](ServiceBase* service, uint32 status, ::google::protobuf::Message const* response)
      {
        ASSERT(response->GetDescriptor() == ::bgs::protocol::club::v1::GetStreamMessageResponse::descriptor());
        ClubService* self = static_cast<ClubService*>(service);
        TC_LOG_DEBUG("service.protobuf", "%s Client called server method ClubService.GetStreamMessage() returned bgs.protocol.club.v1.GetStreamMessageResponse{ %s } status %u.",
          self->GetCallerInfo().c_str(), response->ShortDebugString().c_str(), status);
        if (!status)
          self->SendResponse(self->service_hash_, methodId, token, response);
        else
          self->SendResponse(self->service_hash_, methodId, token, status);
      };
      ::bgs::protocol::club::v1::GetStreamMessageResponse response;
      uint32 status = HandleGetStreamMessage(&request, &response, continuation);
      if (continuation)
        continuation(this, status, &response);
      break;
    }
    default:
      TC_LOG_ERROR("service.protobuf", "Bad method id %u.", methodId);
      SendResponse(service_hash_, methodId, token, ERROR_RPC_INVALID_METHOD);
      break;
    }
}

uint32 ClubService::HandleSubscribe(::bgs::protocol::club::v1::SubscribeRequest const* request, ::bgs::protocol::NoData* response, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& continuation) {
  TC_LOG_ERROR("service.protobuf", "%s Client tried to call not implemented method ClubService.Subscribe({ %s })",
    GetCallerInfo().c_str(), request->ShortDebugString().c_str());
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 ClubService::HandleUnsubscribe(::bgs::protocol::club::v1::UnsubscribeRequest const* request, ::bgs::protocol::NoData* response, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& continuation) {
  TC_LOG_ERROR("service.protobuf", "%s Client tried to call not implemented method ClubService.Unsubscribe({ %s })",
    GetCallerInfo().c_str(), request->ShortDebugString().c_str());
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 ClubService::HandleCreate(::bgs::protocol::club::v1::CreateRequest const* request, ::bgs::protocol::club::v1::CreateResponse* response, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& continuation) {
  TC_LOG_ERROR("service.protobuf", "%s Client tried to call not implemented method ClubService.Create({ %s })",
    GetCallerInfo().c_str(), request->ShortDebugString().c_str());
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 ClubService::HandleDestroy(::bgs::protocol::club::v1::DestroyRequest const* request, ::bgs::protocol::NoData* response, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& continuation) {
  TC_LOG_ERROR("service.protobuf", "%s Client tried to call not implemented method ClubService.Destroy({ %s })",
    GetCallerInfo().c_str(), request->ShortDebugString().c_str());
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 ClubService::HandleGetDescription(::bgs::protocol::club::v1::GetDescriptionRequest const* request, ::bgs::protocol::club::v1::GetDescriptionResponse* response, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& continuation) {
  TC_LOG_ERROR("service.protobuf", "%s Client tried to call not implemented method ClubService.GetDescription({ %s })",
    GetCallerInfo().c_str(), request->ShortDebugString().c_str());
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 ClubService::HandleGetClubType(::bgs::protocol::club::v1::GetClubTypeRequest const* request, ::bgs::protocol::club::v1::GetClubTypeResponse* response, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& continuation) {
  TC_LOG_ERROR("service.protobuf", "%s Client tried to call not implemented method ClubService.GetClubType({ %s })",
    GetCallerInfo().c_str(), request->ShortDebugString().c_str());
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 ClubService::HandleUpdateClubState(::bgs::protocol::club::v1::UpdateClubStateRequest const* request, ::bgs::protocol::NoData* response, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& continuation) {
  TC_LOG_ERROR("service.protobuf", "%s Client tried to call not implemented method ClubService.UpdateClubState({ %s })",
    GetCallerInfo().c_str(), request->ShortDebugString().c_str());
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 ClubService::HandleUpdateClubSettings(::bgs::protocol::club::v1::UpdateClubSettingsRequest const* request, ::bgs::protocol::NoData* response, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& continuation) {
  TC_LOG_ERROR("service.protobuf", "%s Client tried to call not implemented method ClubService.UpdateClubSettings({ %s })",
    GetCallerInfo().c_str(), request->ShortDebugString().c_str());
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 ClubService::HandleJoin(::bgs::protocol::club::v1::JoinRequest const* request, ::bgs::protocol::NoData* response, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& continuation) {
  TC_LOG_ERROR("service.protobuf", "%s Client tried to call not implemented method ClubService.Join({ %s })",
    GetCallerInfo().c_str(), request->ShortDebugString().c_str());
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 ClubService::HandleLeave(::bgs::protocol::club::v1::LeaveRequest const* request, ::bgs::protocol::NoData* response, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& continuation) {
  TC_LOG_ERROR("service.protobuf", "%s Client tried to call not implemented method ClubService.Leave({ %s })",
    GetCallerInfo().c_str(), request->ShortDebugString().c_str());
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 ClubService::HandleKick(::bgs::protocol::club::v1::KickRequest const* request, ::bgs::protocol::NoData* response, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& continuation) {
  TC_LOG_ERROR("service.protobuf", "%s Client tried to call not implemented method ClubService.Kick({ %s })",
    GetCallerInfo().c_str(), request->ShortDebugString().c_str());
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 ClubService::HandleGetMember(::bgs::protocol::club::v1::GetMemberRequest const* request, ::bgs::protocol::club::v1::GetMemberResponse* response, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& continuation) {
  TC_LOG_ERROR("service.protobuf", "%s Client tried to call not implemented method ClubService.GetMember({ %s })",
    GetCallerInfo().c_str(), request->ShortDebugString().c_str());
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 ClubService::HandleGetMembers(::bgs::protocol::club::v1::GetMembersRequest const* request, ::bgs::protocol::club::v1::GetMembersResponse* response, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& continuation) {
  TC_LOG_ERROR("service.protobuf", "%s Client tried to call not implemented method ClubService.GetMembers({ %s })",
    GetCallerInfo().c_str(), request->ShortDebugString().c_str());
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 ClubService::HandleUpdateMemberState(::bgs::protocol::club::v1::UpdateMemberStateRequest const* request, ::bgs::protocol::NoData* response, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& continuation) {
  TC_LOG_ERROR("service.protobuf", "%s Client tried to call not implemented method ClubService.UpdateMemberState({ %s })",
    GetCallerInfo().c_str(), request->ShortDebugString().c_str());
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 ClubService::HandleUpdateSubscriberState(::bgs::protocol::club::v1::UpdateSubscriberStateRequest const* request, ::bgs::protocol::NoData* response, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& continuation) {
  TC_LOG_ERROR("service.protobuf", "%s Client tried to call not implemented method ClubService.UpdateSubscriberState({ %s })",
    GetCallerInfo().c_str(), request->ShortDebugString().c_str());
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 ClubService::HandleAssignRole(::bgs::protocol::club::v1::AssignRoleRequest const* request, ::bgs::protocol::NoData* response, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& continuation) {
  TC_LOG_ERROR("service.protobuf", "%s Client tried to call not implemented method ClubService.AssignRole({ %s })",
    GetCallerInfo().c_str(), request->ShortDebugString().c_str());
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 ClubService::HandleUnassignRole(::bgs::protocol::club::v1::UnassignRoleRequest const* request, ::bgs::protocol::NoData* response, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& continuation) {
  TC_LOG_ERROR("service.protobuf", "%s Client tried to call not implemented method ClubService.UnassignRole({ %s })",
    GetCallerInfo().c_str(), request->ShortDebugString().c_str());
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 ClubService::HandleSendInvitation(::bgs::protocol::club::v1::SendInvitationRequest const* request, ::bgs::protocol::NoData* response, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& continuation) {
  TC_LOG_ERROR("service.protobuf", "%s Client tried to call not implemented method ClubService.SendInvitation({ %s })",
    GetCallerInfo().c_str(), request->ShortDebugString().c_str());
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 ClubService::HandleAcceptInvitation(::bgs::protocol::club::v1::AcceptInvitationRequest const* request, ::bgs::protocol::NoData* response, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& continuation) {
  TC_LOG_ERROR("service.protobuf", "%s Client tried to call not implemented method ClubService.AcceptInvitation({ %s })",
    GetCallerInfo().c_str(), request->ShortDebugString().c_str());
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 ClubService::HandleDeclineInvitation(::bgs::protocol::club::v1::DeclineInvitationRequest const* request, ::bgs::protocol::NoData* response, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& continuation) {
  TC_LOG_ERROR("service.protobuf", "%s Client tried to call not implemented method ClubService.DeclineInvitation({ %s })",
    GetCallerInfo().c_str(), request->ShortDebugString().c_str());
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 ClubService::HandleRevokeInvitation(::bgs::protocol::club::v1::RevokeInvitationRequest const* request, ::bgs::protocol::NoData* response, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& continuation) {
  TC_LOG_ERROR("service.protobuf", "%s Client tried to call not implemented method ClubService.RevokeInvitation({ %s })",
    GetCallerInfo().c_str(), request->ShortDebugString().c_str());
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 ClubService::HandleGetInvitation(::bgs::protocol::club::v1::GetInvitationRequest const* request, ::bgs::protocol::club::v1::GetInvitationResponse* response, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& continuation) {
  TC_LOG_ERROR("service.protobuf", "%s Client tried to call not implemented method ClubService.GetInvitation({ %s })",
    GetCallerInfo().c_str(), request->ShortDebugString().c_str());
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 ClubService::HandleGetInvitations(::bgs::protocol::club::v1::GetInvitationsRequest const* request, ::bgs::protocol::club::v1::GetInvitationsResponse* response, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& continuation) {
  TC_LOG_ERROR("service.protobuf", "%s Client tried to call not implemented method ClubService.GetInvitations({ %s })",
    GetCallerInfo().c_str(), request->ShortDebugString().c_str());
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 ClubService::HandleSendSuggestion(::bgs::protocol::club::v1::SendSuggestionRequest const* request, ::bgs::protocol::NoData* response, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& continuation) {
  TC_LOG_ERROR("service.protobuf", "%s Client tried to call not implemented method ClubService.SendSuggestion({ %s })",
    GetCallerInfo().c_str(), request->ShortDebugString().c_str());
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 ClubService::HandleAcceptSuggestion(::bgs::protocol::club::v1::AcceptSuggestionRequest const* request, ::bgs::protocol::NoData* response, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& continuation) {
  TC_LOG_ERROR("service.protobuf", "%s Client tried to call not implemented method ClubService.AcceptSuggestion({ %s })",
    GetCallerInfo().c_str(), request->ShortDebugString().c_str());
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 ClubService::HandleDeclineSuggestion(::bgs::protocol::club::v1::DeclineSuggestionRequest const* request, ::bgs::protocol::NoData* response, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& continuation) {
  TC_LOG_ERROR("service.protobuf", "%s Client tried to call not implemented method ClubService.DeclineSuggestion({ %s })",
    GetCallerInfo().c_str(), request->ShortDebugString().c_str());
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 ClubService::HandleGetSuggestion(::bgs::protocol::club::v1::GetSuggestionRequest const* request, ::bgs::protocol::club::v1::GetSuggestionResponse* response, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& continuation) {
  TC_LOG_ERROR("service.protobuf", "%s Client tried to call not implemented method ClubService.GetSuggestion({ %s })",
    GetCallerInfo().c_str(), request->ShortDebugString().c_str());
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 ClubService::HandleGetSuggestions(::bgs::protocol::club::v1::GetSuggestionsRequest const* request, ::bgs::protocol::club::v1::GetSuggestionsResponse* response, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& continuation) {
  TC_LOG_ERROR("service.protobuf", "%s Client tried to call not implemented method ClubService.GetSuggestions({ %s })",
    GetCallerInfo().c_str(), request->ShortDebugString().c_str());
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 ClubService::HandleCreateTicket(::bgs::protocol::club::v1::CreateTicketRequest const* request, ::bgs::protocol::club::v1::CreateTicketResponse* response, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& continuation) {
  TC_LOG_ERROR("service.protobuf", "%s Client tried to call not implemented method ClubService.CreateTicket({ %s })",
    GetCallerInfo().c_str(), request->ShortDebugString().c_str());
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 ClubService::HandleDestroyTicket(::bgs::protocol::club::v1::DestroyTicketRequest const* request, ::bgs::protocol::NoData* response, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& continuation) {
  TC_LOG_ERROR("service.protobuf", "%s Client tried to call not implemented method ClubService.DestroyTicket({ %s })",
    GetCallerInfo().c_str(), request->ShortDebugString().c_str());
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 ClubService::HandleRedeemTicket(::bgs::protocol::club::v1::RedeemTicketRequest const* request, ::bgs::protocol::NoData* response, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& continuation) {
  TC_LOG_ERROR("service.protobuf", "%s Client tried to call not implemented method ClubService.RedeemTicket({ %s })",
    GetCallerInfo().c_str(), request->ShortDebugString().c_str());
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 ClubService::HandleGetTicket(::bgs::protocol::club::v1::GetTicketRequest const* request, ::bgs::protocol::club::v1::GetTicketResponse* response, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& continuation) {
  TC_LOG_ERROR("service.protobuf", "%s Client tried to call not implemented method ClubService.GetTicket({ %s })",
    GetCallerInfo().c_str(), request->ShortDebugString().c_str());
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 ClubService::HandleGetTickets(::bgs::protocol::club::v1::GetTicketsRequest const* request, ::bgs::protocol::club::v1::GetTicketsResponse* response, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& continuation) {
  TC_LOG_ERROR("service.protobuf", "%s Client tried to call not implemented method ClubService.GetTickets({ %s })",
    GetCallerInfo().c_str(), request->ShortDebugString().c_str());
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 ClubService::HandleAddBan(::bgs::protocol::club::v1::AddBanRequest const* request, ::bgs::protocol::NoData* response, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& continuation) {
  TC_LOG_ERROR("service.protobuf", "%s Client tried to call not implemented method ClubService.AddBan({ %s })",
    GetCallerInfo().c_str(), request->ShortDebugString().c_str());
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 ClubService::HandleRemoveBan(::bgs::protocol::club::v1::RemoveBanRequest const* request, ::bgs::protocol::NoData* response, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& continuation) {
  TC_LOG_ERROR("service.protobuf", "%s Client tried to call not implemented method ClubService.RemoveBan({ %s })",
    GetCallerInfo().c_str(), request->ShortDebugString().c_str());
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 ClubService::HandleGetBan(::bgs::protocol::club::v1::GetBanRequest const* request, ::bgs::protocol::club::v1::GetBanResponse* response, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& continuation) {
  TC_LOG_ERROR("service.protobuf", "%s Client tried to call not implemented method ClubService.GetBan({ %s })",
    GetCallerInfo().c_str(), request->ShortDebugString().c_str());
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 ClubService::HandleGetBans(::bgs::protocol::club::v1::GetBansRequest const* request, ::bgs::protocol::club::v1::GetBansResponse* response, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& continuation) {
  TC_LOG_ERROR("service.protobuf", "%s Client tried to call not implemented method ClubService.GetBans({ %s })",
    GetCallerInfo().c_str(), request->ShortDebugString().c_str());
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 ClubService::HandleSubscribeStream(::bgs::protocol::club::v1::SubscribeStreamRequest const* request, ::bgs::protocol::NoData* response, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& continuation) {
  TC_LOG_ERROR("service.protobuf", "%s Client tried to call not implemented method ClubService.SubscribeStream({ %s })",
    GetCallerInfo().c_str(), request->ShortDebugString().c_str());
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 ClubService::HandleUnsubscribeStream(::bgs::protocol::club::v1::UnsubscribeStreamRequest const* request, ::bgs::protocol::NoData* response, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& continuation) {
  TC_LOG_ERROR("service.protobuf", "%s Client tried to call not implemented method ClubService.UnsubscribeStream({ %s })",
    GetCallerInfo().c_str(), request->ShortDebugString().c_str());
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 ClubService::HandleCreateStream(::bgs::protocol::club::v1::CreateStreamRequest const* request, ::bgs::protocol::club::v1::CreateStreamResponse* response, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& continuation) {
  TC_LOG_ERROR("service.protobuf", "%s Client tried to call not implemented method ClubService.CreateStream({ %s })",
    GetCallerInfo().c_str(), request->ShortDebugString().c_str());
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 ClubService::HandleDestroyStream(::bgs::protocol::club::v1::DestroyStreamRequest const* request, ::bgs::protocol::NoData* response, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& continuation) {
  TC_LOG_ERROR("service.protobuf", "%s Client tried to call not implemented method ClubService.DestroyStream({ %s })",
    GetCallerInfo().c_str(), request->ShortDebugString().c_str());
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 ClubService::HandleGetStream(::bgs::protocol::club::v1::GetStreamRequest const* request, ::bgs::protocol::club::v1::GetStreamResponse* response, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& continuation) {
  TC_LOG_ERROR("service.protobuf", "%s Client tried to call not implemented method ClubService.GetStream({ %s })",
    GetCallerInfo().c_str(), request->ShortDebugString().c_str());
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 ClubService::HandleGetStreams(::bgs::protocol::club::v1::GetStreamsRequest const* request, ::bgs::protocol::club::v1::GetStreamsResponse* response, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& continuation) {
  TC_LOG_ERROR("service.protobuf", "%s Client tried to call not implemented method ClubService.GetStreams({ %s })",
    GetCallerInfo().c_str(), request->ShortDebugString().c_str());
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 ClubService::HandleUpdateStreamState(::bgs::protocol::club::v1::UpdateStreamStateRequest const* request, ::bgs::protocol::NoData* response, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& continuation) {
  TC_LOG_ERROR("service.protobuf", "%s Client tried to call not implemented method ClubService.UpdateStreamState({ %s })",
    GetCallerInfo().c_str(), request->ShortDebugString().c_str());
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 ClubService::HandleSetStreamFocus(::bgs::protocol::club::v1::SetStreamFocusRequest const* request, ::bgs::protocol::NoData* response, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& continuation) {
  TC_LOG_ERROR("service.protobuf", "%s Client tried to call not implemented method ClubService.SetStreamFocus({ %s })",
    GetCallerInfo().c_str(), request->ShortDebugString().c_str());
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 ClubService::HandleGetStreamVoiceToken(::bgs::protocol::club::v1::GetStreamVoiceTokenRequest const* request, ::bgs::protocol::club::v1::GetStreamVoiceTokenResponse* response, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& continuation) {
  TC_LOG_ERROR("service.protobuf", "%s Client tried to call not implemented method ClubService.GetStreamVoiceToken({ %s })",
    GetCallerInfo().c_str(), request->ShortDebugString().c_str());
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 ClubService::HandleKickFromStreamVoice(::bgs::protocol::club::v1::KickFromStreamVoiceRequest const* request, ::bgs::protocol::NoData* response, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& continuation) {
  TC_LOG_ERROR("service.protobuf", "%s Client tried to call not implemented method ClubService.KickFromStreamVoice({ %s })",
    GetCallerInfo().c_str(), request->ShortDebugString().c_str());
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 ClubService::HandleCreateMessage(::bgs::protocol::club::v1::CreateMessageRequest const* request, ::bgs::protocol::club::v1::CreateMessageResponse* response, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& continuation) {
  TC_LOG_ERROR("service.protobuf", "%s Client tried to call not implemented method ClubService.CreateMessage({ %s })",
    GetCallerInfo().c_str(), request->ShortDebugString().c_str());
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 ClubService::HandleDestroyMessage(::bgs::protocol::club::v1::DestroyMessageRequest const* request, ::bgs::protocol::club::v1::DestroyMessageResponse* response, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& continuation) {
  TC_LOG_ERROR("service.protobuf", "%s Client tried to call not implemented method ClubService.DestroyMessage({ %s })",
    GetCallerInfo().c_str(), request->ShortDebugString().c_str());
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 ClubService::HandleEditMessage(::bgs::protocol::club::v1::EditMessageRequest const* request, ::bgs::protocol::club::v1::EditMessageResponse* response, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& continuation) {
  TC_LOG_ERROR("service.protobuf", "%s Client tried to call not implemented method ClubService.EditMessage({ %s })",
    GetCallerInfo().c_str(), request->ShortDebugString().c_str());
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 ClubService::HandleSetMessagePinned(::bgs::protocol::club::v1::SetMessagePinnedRequest const* request, ::bgs::protocol::NoData* response, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& continuation) {
  TC_LOG_ERROR("service.protobuf", "%s Client tried to call not implemented method ClubService.SetMessagePinned({ %s })",
    GetCallerInfo().c_str(), request->ShortDebugString().c_str());
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 ClubService::HandleSetTypingIndicator(::bgs::protocol::club::v1::SetTypingIndicatorRequest const* request, ::bgs::protocol::NoData* response, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& continuation) {
  TC_LOG_ERROR("service.protobuf", "%s Client tried to call not implemented method ClubService.SetTypingIndicator({ %s })",
    GetCallerInfo().c_str(), request->ShortDebugString().c_str());
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 ClubService::HandleAdvanceStreamViewTime(::bgs::protocol::club::v1::AdvanceStreamViewTimeRequest const* request, ::bgs::protocol::NoData* response, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& continuation) {
  TC_LOG_ERROR("service.protobuf", "%s Client tried to call not implemented method ClubService.AdvanceStreamViewTime({ %s })",
    GetCallerInfo().c_str(), request->ShortDebugString().c_str());
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 ClubService::HandleGetStreamHistory(::bgs::protocol::club::v1::GetStreamHistoryRequest const* request, ::bgs::protocol::club::v1::GetStreamHistoryResponse* response, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& continuation) {
  TC_LOG_ERROR("service.protobuf", "%s Client tried to call not implemented method ClubService.GetStreamHistory({ %s })",
    GetCallerInfo().c_str(), request->ShortDebugString().c_str());
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 ClubService::HandleGetStreamMessage(::bgs::protocol::club::v1::GetStreamMessageRequest const* request, ::bgs::protocol::club::v1::GetStreamMessageResponse* response, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& continuation) {
  TC_LOG_ERROR("service.protobuf", "%s Client tried to call not implemented method ClubService.GetStreamMessage({ %s })",
    GetCallerInfo().c_str(), request->ShortDebugString().c_str());
  return ERROR_RPC_NOT_IMPLEMENTED;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace club
}  // namespace protocol
}  // namespace bgs

// @@protoc_insertion_point(global_scope)
