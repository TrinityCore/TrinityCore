// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: user_manager_types.proto

#ifndef PROTOBUF_user_5fmanager_5ftypes_2eproto__INCLUDED
#define PROTOBUF_user_5fmanager_5ftypes_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "global_extensions/field_options.pb.h"  // IWYU pragma: export
#include "entity_types.pb.h"
#include "attribute_types.pb.h"
#include "Define.h" // for TC_PROTO_API
// @@protoc_insertion_point(includes)

namespace bgs {
namespace protocol {
namespace user_manager {
namespace v1 {

// Internal implementation detail -- do not call these.
void TC_PROTO_API protobuf_AddDesc_user_5fmanager_5ftypes_2eproto();
void protobuf_AssignDesc_user_5fmanager_5ftypes_2eproto();
void protobuf_ShutdownFile_user_5fmanager_5ftypes_2eproto();

class RecentPlayer;
class BlockedPlayer;

// ===================================================================

class TC_PROTO_API RecentPlayer : public ::google::protobuf::Message {
 public:
  RecentPlayer();
  virtual ~RecentPlayer();

  RecentPlayer(const RecentPlayer& from);

  inline RecentPlayer& operator=(const RecentPlayer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RecentPlayer& default_instance();

  void Swap(RecentPlayer* other);

  // implements Message ----------------------------------------------

  RecentPlayer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RecentPlayer& from);
  void MergeFrom(const RecentPlayer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .bgs.protocol.EntityId entity_id = 1;
  inline bool has_entity_id() const;
  inline void clear_entity_id();
  static const int kEntityIdFieldNumber = 1;
  inline const ::bgs::protocol::EntityId& entity_id() const;
  inline ::bgs::protocol::EntityId* mutable_entity_id();
  inline ::bgs::protocol::EntityId* release_entity_id();
  inline void set_allocated_entity_id(::bgs::protocol::EntityId* entity_id);

  // optional string program = 2;
  inline bool has_program() const;
  inline void clear_program();
  static const int kProgramFieldNumber = 2;
  inline const ::std::string& program() const;
  inline void set_program(const ::std::string& value);
  inline void set_program(const char* value);
  inline void set_program(const char* value, size_t size);
  inline ::std::string* mutable_program();
  inline ::std::string* release_program();
  inline void set_allocated_program(::std::string* program);

  // optional fixed64 timestamp_played = 3;
  inline bool has_timestamp_played() const;
  inline void clear_timestamp_played();
  static const int kTimestampPlayedFieldNumber = 3;
  inline ::google::protobuf::uint64 timestamp_played() const;
  inline void set_timestamp_played(::google::protobuf::uint64 value);

  // repeated .bgs.protocol.Attribute attributes = 4;
  inline int attributes_size() const;
  inline void clear_attributes();
  static const int kAttributesFieldNumber = 4;
  inline const ::bgs::protocol::Attribute& attributes(int index) const;
  inline ::bgs::protocol::Attribute* mutable_attributes(int index);
  inline ::bgs::protocol::Attribute* add_attributes();
  inline const ::google::protobuf::RepeatedPtrField< ::bgs::protocol::Attribute >&
      attributes() const;
  inline ::google::protobuf::RepeatedPtrField< ::bgs::protocol::Attribute >*
      mutable_attributes();

  // optional fixed32 counter = 6 [default = 0];
  inline bool has_counter() const;
  inline void clear_counter();
  static const int kCounterFieldNumber = 6;
  inline ::google::protobuf::uint32 counter() const;
  inline void set_counter(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:bgs.protocol.user_manager.v1.RecentPlayer)
 private:
  inline void set_has_entity_id();
  inline void clear_has_entity_id();
  inline void set_has_program();
  inline void clear_has_program();
  inline void set_has_timestamp_played();
  inline void clear_has_timestamp_played();
  inline void set_has_counter();
  inline void clear_has_counter();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::bgs::protocol::EntityId* entity_id_;
  ::std::string* program_;
  ::google::protobuf::uint64 timestamp_played_;
  ::google::protobuf::RepeatedPtrField< ::bgs::protocol::Attribute > attributes_;
  ::google::protobuf::uint32 counter_;
  friend void TC_PROTO_API protobuf_AddDesc_user_5fmanager_5ftypes_2eproto();
  friend void protobuf_AssignDesc_user_5fmanager_5ftypes_2eproto();
  friend void protobuf_ShutdownFile_user_5fmanager_5ftypes_2eproto();

  void InitAsDefaultInstance();
  static RecentPlayer* default_instance_;
};
// -------------------------------------------------------------------

class TC_PROTO_API BlockedPlayer : public ::google::protobuf::Message {
 public:
  BlockedPlayer();
  virtual ~BlockedPlayer();

  BlockedPlayer(const BlockedPlayer& from);

  inline BlockedPlayer& operator=(const BlockedPlayer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlockedPlayer& default_instance();

  void Swap(BlockedPlayer* other);

  // implements Message ----------------------------------------------

  BlockedPlayer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlockedPlayer& from);
  void MergeFrom(const BlockedPlayer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .bgs.protocol.EntityId account_id = 1;
  inline bool has_account_id() const;
  inline void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  inline const ::bgs::protocol::EntityId& account_id() const;
  inline ::bgs::protocol::EntityId* mutable_account_id();
  inline ::bgs::protocol::EntityId* release_account_id();
  inline void set_allocated_account_id(::bgs::protocol::EntityId* account_id);

  // optional string battle_tag = 2;
  inline bool has_battle_tag() const;
  inline void clear_battle_tag();
  static const int kBattleTagFieldNumber = 2;
  inline const ::std::string& battle_tag() const;
  inline void set_battle_tag(const ::std::string& value);
  inline void set_battle_tag(const char* value);
  inline void set_battle_tag(const char* value, size_t size);
  inline ::std::string* mutable_battle_tag();
  inline ::std::string* release_battle_tag();
  inline void set_allocated_battle_tag(::std::string* battle_tag);

  // repeated uint32 role = 3 [deprecated = true];
  inline int role_size() const PROTOBUF_DEPRECATED;
  inline void clear_role() PROTOBUF_DEPRECATED;
  static const int kRoleFieldNumber = 3;
  inline ::google::protobuf::uint32 role(int index) const PROTOBUF_DEPRECATED;
  inline void set_role(int index, ::google::protobuf::uint32 value) PROTOBUF_DEPRECATED;
  inline void add_role(::google::protobuf::uint32 value) PROTOBUF_DEPRECATED;
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      role() const PROTOBUF_DEPRECATED;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_role() PROTOBUF_DEPRECATED;

  // optional uint64 privileges = 4 [deprecated = true];
  inline bool has_privileges() const PROTOBUF_DEPRECATED;
  inline void clear_privileges() PROTOBUF_DEPRECATED;
  static const int kPrivilegesFieldNumber = 4;
  inline ::google::protobuf::uint64 privileges() const PROTOBUF_DEPRECATED;
  inline void set_privileges(::google::protobuf::uint64 value) PROTOBUF_DEPRECATED;

  // @@protoc_insertion_point(class_scope:bgs.protocol.user_manager.v1.BlockedPlayer)
 private:
  inline void set_has_account_id();
  inline void clear_has_account_id();
  inline void set_has_battle_tag();
  inline void clear_has_battle_tag();
  inline void set_has_privileges();
  inline void clear_has_privileges();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::bgs::protocol::EntityId* account_id_;
  ::std::string* battle_tag_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > role_;
  ::google::protobuf::uint64 privileges_;
  friend void TC_PROTO_API protobuf_AddDesc_user_5fmanager_5ftypes_2eproto();
  friend void protobuf_AssignDesc_user_5fmanager_5ftypes_2eproto();
  friend void protobuf_ShutdownFile_user_5fmanager_5ftypes_2eproto();

  void InitAsDefaultInstance();
  static BlockedPlayer* default_instance_;
};
// ===================================================================

// ===================================================================

// ===================================================================

// RecentPlayer

// required .bgs.protocol.EntityId entity_id = 1;
inline bool RecentPlayer::has_entity_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RecentPlayer::set_has_entity_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RecentPlayer::clear_has_entity_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RecentPlayer::clear_entity_id() {
  if (entity_id_ != NULL) entity_id_->::bgs::protocol::EntityId::Clear();
  clear_has_entity_id();
}
inline const ::bgs::protocol::EntityId& RecentPlayer::entity_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.user_manager.v1.RecentPlayer.entity_id)
  return entity_id_ != NULL ? *entity_id_ : *default_instance_->entity_id_;
}
inline ::bgs::protocol::EntityId* RecentPlayer::mutable_entity_id() {
  set_has_entity_id();
  if (entity_id_ == NULL) entity_id_ = new ::bgs::protocol::EntityId;
  // @@protoc_insertion_point(field_mutable:bgs.protocol.user_manager.v1.RecentPlayer.entity_id)
  return entity_id_;
}
inline ::bgs::protocol::EntityId* RecentPlayer::release_entity_id() {
  clear_has_entity_id();
  ::bgs::protocol::EntityId* temp = entity_id_;
  entity_id_ = NULL;
  return temp;
}
inline void RecentPlayer::set_allocated_entity_id(::bgs::protocol::EntityId* entity_id) {
  delete entity_id_;
  entity_id_ = entity_id;
  if (entity_id) {
    set_has_entity_id();
  } else {
    clear_has_entity_id();
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.user_manager.v1.RecentPlayer.entity_id)
}

// optional string program = 2;
inline bool RecentPlayer::has_program() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RecentPlayer::set_has_program() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RecentPlayer::clear_has_program() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RecentPlayer::clear_program() {
  if (program_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    program_->clear();
  }
  clear_has_program();
}
inline const ::std::string& RecentPlayer::program() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.user_manager.v1.RecentPlayer.program)
  return *program_;
}
inline void RecentPlayer::set_program(const ::std::string& value) {
  set_has_program();
  if (program_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    program_ = new ::std::string;
  }
  program_->assign(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.user_manager.v1.RecentPlayer.program)
}
inline void RecentPlayer::set_program(const char* value) {
  set_has_program();
  if (program_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    program_ = new ::std::string;
  }
  program_->assign(value);
  // @@protoc_insertion_point(field_set_char:bgs.protocol.user_manager.v1.RecentPlayer.program)
}
inline void RecentPlayer::set_program(const char* value, size_t size) {
  set_has_program();
  if (program_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    program_ = new ::std::string;
  }
  program_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.user_manager.v1.RecentPlayer.program)
}
inline ::std::string* RecentPlayer::mutable_program() {
  set_has_program();
  if (program_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    program_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:bgs.protocol.user_manager.v1.RecentPlayer.program)
  return program_;
}
inline ::std::string* RecentPlayer::release_program() {
  clear_has_program();
  if (program_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = program_;
    program_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RecentPlayer::set_allocated_program(::std::string* program) {
  if (program_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete program_;
  }
  if (program) {
    set_has_program();
    program_ = program;
  } else {
    clear_has_program();
    program_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.user_manager.v1.RecentPlayer.program)
}

// optional fixed64 timestamp_played = 3;
inline bool RecentPlayer::has_timestamp_played() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RecentPlayer::set_has_timestamp_played() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RecentPlayer::clear_has_timestamp_played() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RecentPlayer::clear_timestamp_played() {
  timestamp_played_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp_played();
}
inline ::google::protobuf::uint64 RecentPlayer::timestamp_played() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.user_manager.v1.RecentPlayer.timestamp_played)
  return timestamp_played_;
}
inline void RecentPlayer::set_timestamp_played(::google::protobuf::uint64 value) {
  set_has_timestamp_played();
  timestamp_played_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.user_manager.v1.RecentPlayer.timestamp_played)
}

// repeated .bgs.protocol.Attribute attributes = 4;
inline int RecentPlayer::attributes_size() const {
  return attributes_.size();
}
inline void RecentPlayer::clear_attributes() {
  attributes_.Clear();
}
inline const ::bgs::protocol::Attribute& RecentPlayer::attributes(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.user_manager.v1.RecentPlayer.attributes)
  return attributes_.Get(index);
}
inline ::bgs::protocol::Attribute* RecentPlayer::mutable_attributes(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.user_manager.v1.RecentPlayer.attributes)
  return attributes_.Mutable(index);
}
inline ::bgs::protocol::Attribute* RecentPlayer::add_attributes() {
  // @@protoc_insertion_point(field_add:bgs.protocol.user_manager.v1.RecentPlayer.attributes)
  return attributes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bgs::protocol::Attribute >&
RecentPlayer::attributes() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.user_manager.v1.RecentPlayer.attributes)
  return attributes_;
}
inline ::google::protobuf::RepeatedPtrField< ::bgs::protocol::Attribute >*
RecentPlayer::mutable_attributes() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.user_manager.v1.RecentPlayer.attributes)
  return &attributes_;
}

// optional fixed32 counter = 6 [default = 0];
inline bool RecentPlayer::has_counter() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RecentPlayer::set_has_counter() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RecentPlayer::clear_has_counter() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RecentPlayer::clear_counter() {
  counter_ = 0u;
  clear_has_counter();
}
inline ::google::protobuf::uint32 RecentPlayer::counter() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.user_manager.v1.RecentPlayer.counter)
  return counter_;
}
inline void RecentPlayer::set_counter(::google::protobuf::uint32 value) {
  set_has_counter();
  counter_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.user_manager.v1.RecentPlayer.counter)
}

// -------------------------------------------------------------------

// BlockedPlayer

// required .bgs.protocol.EntityId account_id = 1;
inline bool BlockedPlayer::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlockedPlayer::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BlockedPlayer::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BlockedPlayer::clear_account_id() {
  if (account_id_ != NULL) account_id_->::bgs::protocol::EntityId::Clear();
  clear_has_account_id();
}
inline const ::bgs::protocol::EntityId& BlockedPlayer::account_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.user_manager.v1.BlockedPlayer.account_id)
  return account_id_ != NULL ? *account_id_ : *default_instance_->account_id_;
}
inline ::bgs::protocol::EntityId* BlockedPlayer::mutable_account_id() {
  set_has_account_id();
  if (account_id_ == NULL) account_id_ = new ::bgs::protocol::EntityId;
  // @@protoc_insertion_point(field_mutable:bgs.protocol.user_manager.v1.BlockedPlayer.account_id)
  return account_id_;
}
inline ::bgs::protocol::EntityId* BlockedPlayer::release_account_id() {
  clear_has_account_id();
  ::bgs::protocol::EntityId* temp = account_id_;
  account_id_ = NULL;
  return temp;
}
inline void BlockedPlayer::set_allocated_account_id(::bgs::protocol::EntityId* account_id) {
  delete account_id_;
  account_id_ = account_id;
  if (account_id) {
    set_has_account_id();
  } else {
    clear_has_account_id();
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.user_manager.v1.BlockedPlayer.account_id)
}

// optional string battle_tag = 2;
inline bool BlockedPlayer::has_battle_tag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BlockedPlayer::set_has_battle_tag() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BlockedPlayer::clear_has_battle_tag() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BlockedPlayer::clear_battle_tag() {
  if (battle_tag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battle_tag_->clear();
  }
  clear_has_battle_tag();
}
inline const ::std::string& BlockedPlayer::battle_tag() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.user_manager.v1.BlockedPlayer.battle_tag)
  return *battle_tag_;
}
inline void BlockedPlayer::set_battle_tag(const ::std::string& value) {
  set_has_battle_tag();
  if (battle_tag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battle_tag_ = new ::std::string;
  }
  battle_tag_->assign(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.user_manager.v1.BlockedPlayer.battle_tag)
}
inline void BlockedPlayer::set_battle_tag(const char* value) {
  set_has_battle_tag();
  if (battle_tag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battle_tag_ = new ::std::string;
  }
  battle_tag_->assign(value);
  // @@protoc_insertion_point(field_set_char:bgs.protocol.user_manager.v1.BlockedPlayer.battle_tag)
}
inline void BlockedPlayer::set_battle_tag(const char* value, size_t size) {
  set_has_battle_tag();
  if (battle_tag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battle_tag_ = new ::std::string;
  }
  battle_tag_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.user_manager.v1.BlockedPlayer.battle_tag)
}
inline ::std::string* BlockedPlayer::mutable_battle_tag() {
  set_has_battle_tag();
  if (battle_tag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battle_tag_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:bgs.protocol.user_manager.v1.BlockedPlayer.battle_tag)
  return battle_tag_;
}
inline ::std::string* BlockedPlayer::release_battle_tag() {
  clear_has_battle_tag();
  if (battle_tag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = battle_tag_;
    battle_tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BlockedPlayer::set_allocated_battle_tag(::std::string* battle_tag) {
  if (battle_tag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete battle_tag_;
  }
  if (battle_tag) {
    set_has_battle_tag();
    battle_tag_ = battle_tag;
  } else {
    clear_has_battle_tag();
    battle_tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.user_manager.v1.BlockedPlayer.battle_tag)
}

// repeated uint32 role = 3 [deprecated = true];
inline int BlockedPlayer::role_size() const {
  return role_.size();
}
inline void BlockedPlayer::clear_role() {
  role_.Clear();
}
inline ::google::protobuf::uint32 BlockedPlayer::role(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.user_manager.v1.BlockedPlayer.role)
  return role_.Get(index);
}
inline void BlockedPlayer::set_role(int index, ::google::protobuf::uint32 value) {
  role_.Set(index, value);
  // @@protoc_insertion_point(field_set:bgs.protocol.user_manager.v1.BlockedPlayer.role)
}
inline void BlockedPlayer::add_role(::google::protobuf::uint32 value) {
  role_.Add(value);
  // @@protoc_insertion_point(field_add:bgs.protocol.user_manager.v1.BlockedPlayer.role)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
BlockedPlayer::role() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.user_manager.v1.BlockedPlayer.role)
  return role_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
BlockedPlayer::mutable_role() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.user_manager.v1.BlockedPlayer.role)
  return &role_;
}

// optional uint64 privileges = 4 [deprecated = true];
inline bool BlockedPlayer::has_privileges() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BlockedPlayer::set_has_privileges() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BlockedPlayer::clear_has_privileges() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BlockedPlayer::clear_privileges() {
  privileges_ = GOOGLE_ULONGLONG(0);
  clear_has_privileges();
}
inline ::google::protobuf::uint64 BlockedPlayer::privileges() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.user_manager.v1.BlockedPlayer.privileges)
  return privileges_;
}
inline void BlockedPlayer::set_privileges(::google::protobuf::uint64 value) {
  set_has_privileges();
  privileges_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.user_manager.v1.BlockedPlayer.privileges)
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace user_manager
}  // namespace protocol
}  // namespace bgs

#ifndef SWIG
namespace google {
namespace protobuf {
}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_user_5fmanager_5ftypes_2eproto__INCLUDED
