// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: club_role.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "club_role.pb.h"

#include <algorithm>
#include <utility>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
#include "Log.h"
// @@protoc_insertion_point(includes)

namespace bgs {
namespace protocol {
namespace club {
namespace v1 {

namespace {

const ::google::protobuf::Descriptor* ClubPrivilegeSet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClubPrivilegeSet_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClubRole_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClubRole_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClubRoleSet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClubRoleSet_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_club_5frole_2eproto() {
  protobuf_AddDesc_club_5frole_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "club_role.proto");
  GOOGLE_CHECK(file != NULL);
  ClubPrivilegeSet_descriptor_ = file->message_type(0);
  static const int ClubPrivilegeSet_offsets_[48] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubPrivilegeSet, can_destroy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubPrivilegeSet, can_set_attribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubPrivilegeSet, can_set_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubPrivilegeSet, can_set_description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubPrivilegeSet, can_set_avatar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubPrivilegeSet, can_set_broadcast_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubPrivilegeSet, can_set_privacy_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubPrivilegeSet, can_kick_member_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubPrivilegeSet, can_set_own_member_attribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubPrivilegeSet, can_set_other_member_attribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubPrivilegeSet, can_set_own_voice_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubPrivilegeSet, can_set_own_presence_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubPrivilegeSet, can_set_own_whisper_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubPrivilegeSet, can_set_own_member_note_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubPrivilegeSet, can_set_other_member_note_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubPrivilegeSet, can_use_voice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubPrivilegeSet, can_voice_mute_member_for_all_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubPrivilegeSet, can_get_invitation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubPrivilegeSet, can_send_invitation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubPrivilegeSet, can_send_guest_invitation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubPrivilegeSet, can_revoke_own_invitation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubPrivilegeSet, can_revoke_other_invitation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubPrivilegeSet, can_get_suggestion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubPrivilegeSet, can_suggest_member_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubPrivilegeSet, can_approve_member_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubPrivilegeSet, can_get_ticket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubPrivilegeSet, can_create_ticket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubPrivilegeSet, can_destroy_ticket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubPrivilegeSet, can_get_ban_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubPrivilegeSet, can_add_ban_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubPrivilegeSet, can_remove_ban_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubPrivilegeSet, can_create_stream_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubPrivilegeSet, can_destroy_stream_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubPrivilegeSet, can_set_stream_position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubPrivilegeSet, can_set_stream_attribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubPrivilegeSet, can_set_stream_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubPrivilegeSet, can_set_stream_subject_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubPrivilegeSet, can_set_stream_access_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubPrivilegeSet, can_set_stream_voice_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubPrivilegeSet, can_create_message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubPrivilegeSet, can_destroy_own_message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubPrivilegeSet, can_destroy_other_message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubPrivilegeSet, can_edit_own_message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubPrivilegeSet, can_pin_message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubPrivilegeSet, can_mention_all_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubPrivilegeSet, can_mention_here_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubPrivilegeSet, can_mention_member_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubPrivilegeSet, can_mention_role_),
  };
  ClubPrivilegeSet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClubPrivilegeSet_descriptor_,
      ClubPrivilegeSet::default_instance_,
      ClubPrivilegeSet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubPrivilegeSet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubPrivilegeSet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClubPrivilegeSet));
  ClubRole_descriptor_ = file->message_type(1);
  static const int ClubRole_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubRole, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubRole, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubRole, privilege_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubRole, always_grant_stream_access_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubRole, allow_in_club_slot_),
  };
  ClubRole_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClubRole_descriptor_,
      ClubRole::default_instance_,
      ClubRole_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubRole, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubRole, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClubRole));
  ClubRoleSet_descriptor_ = file->message_type(2);
  static const int ClubRoleSet_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubRoleSet, role_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubRoleSet, default_role_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubRoleSet, assignment_respects_relegation_chain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubRoleSet, subtype_),
  };
  ClubRoleSet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClubRoleSet_descriptor_,
      ClubRoleSet::default_instance_,
      ClubRoleSet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubRoleSet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubRoleSet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClubRoleSet));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_club_5frole_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClubPrivilegeSet_descriptor_, &ClubPrivilegeSet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClubRole_descriptor_, &ClubRole::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClubRoleSet_descriptor_, &ClubRoleSet::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_club_5frole_2eproto() {
  delete ClubPrivilegeSet::default_instance_;
  delete ClubPrivilegeSet_reflection_;
  delete ClubRole::default_instance_;
  delete ClubRole_reflection_;
  delete ClubRoleSet::default_instance_;
  delete ClubRoleSet_reflection_;
}

void protobuf_AddDesc_club_5frole_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::bgs::protocol::protobuf_AddDesc_role_5ftypes_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017club_role.proto\022\024bgs.protocol.club.v1\032"
    "\020role_types.proto\"\257\013\n\020ClubPrivilegeSet\022\023"
    "\n\013can_destroy\030\001 \001(\010\022\031\n\021can_set_attribute"
    "\030\n \001(\010\022\024\n\014can_set_name\030\013 \001(\010\022\033\n\023can_set_"
    "description\030\014 \001(\010\022\026\n\016can_set_avatar\030\r \001("
    "\010\022\031\n\021can_set_broadcast\030\016 \001(\010\022\035\n\025can_set_"
    "privacy_level\030\017 \001(\010\022\027\n\017can_kick_member\030\036"
    " \001(\010\022$\n\034can_set_own_member_attribute\030\037 \001"
    "(\010\022&\n\036can_set_other_member_attribute\030  \001"
    "(\010\022\037\n\027can_set_own_voice_state\030! \001(\010\022\"\n\032c"
    "an_set_own_presence_level\030\" \001(\010\022!\n\031can_s"
    "et_own_whisper_level\030# \001(\010\022\037\n\027can_set_ow"
    "n_member_note\030$ \001(\010\022!\n\031can_set_other_mem"
    "ber_note\030% \001(\010\022\025\n\rcan_use_voice\0302 \001(\010\022%\n"
    "\035can_voice_mute_member_for_all\0303 \001(\010\022\032\n\022"
    "can_get_invitation\030F \001(\010\022\033\n\023can_send_inv"
    "itation\030G \001(\010\022!\n\031can_send_guest_invitati"
    "on\030H \001(\010\022!\n\031can_revoke_own_invitation\030I "
    "\001(\010\022#\n\033can_revoke_other_invitation\030J \001(\010"
    "\022\032\n\022can_get_suggestion\030Z \001(\010\022\032\n\022can_sugg"
    "est_member\030[ \001(\010\022\032\n\022can_approve_member\030\\"
    " \001(\010\022\026\n\016can_get_ticket\030n \001(\010\022\031\n\021can_crea"
    "te_ticket\030o \001(\010\022\032\n\022can_destroy_ticket\030p "
    "\001(\010\022\024\n\013can_get_ban\030\202\001 \001(\010\022\024\n\013can_add_ban"
    "\030\203\001 \001(\010\022\027\n\016can_remove_ban\030\204\001 \001(\010\022\032\n\021can_"
    "create_stream\030\214\001 \001(\010\022\033\n\022can_destroy_stre"
    "am\030\215\001 \001(\010\022 \n\027can_set_stream_position\030\216\001 "
    "\001(\010\022!\n\030can_set_stream_attribute\030\217\001 \001(\010\022\034"
    "\n\023can_set_stream_name\030\220\001 \001(\010\022\037\n\026can_set_"
    "stream_subject\030\221\001 \001(\010\022\036\n\025can_set_stream_"
    "access\030\222\001 \001(\010\022#\n\032can_set_stream_voice_le"
    "vel\030\223\001 \001(\010\022\033\n\022can_create_message\030\264\001 \001(\010\022"
    " \n\027can_destroy_own_message\030\265\001 \001(\010\022\"\n\031can"
    "_destroy_other_message\030\266\001 \001(\010\022\035\n\024can_edi"
    "t_own_message\030\267\001 \001(\010\022\030\n\017can_pin_message\030"
    "\270\001 \001(\010\022\030\n\017can_mention_all\030\271\001 \001(\010\022\031\n\020can_"
    "mention_here\030\272\001 \001(\010\022\033\n\022can_mention_membe"
    "r\030\273\001 \001(\010\022\031\n\020can_mention_role\030\274\001 \001(\010\"\271\001\n\010"
    "ClubRole\022\n\n\002id\030\001 \001(\r\022&\n\005state\030\002 \001(\0132\027.bg"
    "s.protocol.RoleState\0229\n\tprivilege\030\003 \001(\0132"
    "&.bgs.protocol.club.v1.ClubPrivilegeSet\022"
    "\"\n\032always_grant_stream_access\030\004 \001(\010\022\032\n\022a"
    "llow_in_club_slot\030\005 \001(\010\"\224\001\n\013ClubRoleSet\022"
    ",\n\004role\030\001 \003(\0132\036.bgs.protocol.club.v1.Clu"
    "bRole\022\030\n\014default_role\030\005 \003(\rB\002\020\001\022,\n$assig"
    "nment_respects_relegation_chain\030\006 \001(\010\022\017\n"
    "\007subtype\030\007 \001(\tB\002H\001", 1858);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "club_role.proto", &protobuf_RegisterTypes);
  ClubPrivilegeSet::default_instance_ = new ClubPrivilegeSet();
  ClubRole::default_instance_ = new ClubRole();
  ClubRoleSet::default_instance_ = new ClubRoleSet();
  ClubPrivilegeSet::default_instance_->InitAsDefaultInstance();
  ClubRole::default_instance_->InitAsDefaultInstance();
  ClubRoleSet::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_club_5frole_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_club_5frole_2eproto {
  StaticDescriptorInitializer_club_5frole_2eproto() {
    protobuf_AddDesc_club_5frole_2eproto();
  }
} static_descriptor_initializer_club_5frole_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ClubPrivilegeSet::kCanDestroyFieldNumber;
const int ClubPrivilegeSet::kCanSetAttributeFieldNumber;
const int ClubPrivilegeSet::kCanSetNameFieldNumber;
const int ClubPrivilegeSet::kCanSetDescriptionFieldNumber;
const int ClubPrivilegeSet::kCanSetAvatarFieldNumber;
const int ClubPrivilegeSet::kCanSetBroadcastFieldNumber;
const int ClubPrivilegeSet::kCanSetPrivacyLevelFieldNumber;
const int ClubPrivilegeSet::kCanKickMemberFieldNumber;
const int ClubPrivilegeSet::kCanSetOwnMemberAttributeFieldNumber;
const int ClubPrivilegeSet::kCanSetOtherMemberAttributeFieldNumber;
const int ClubPrivilegeSet::kCanSetOwnVoiceStateFieldNumber;
const int ClubPrivilegeSet::kCanSetOwnPresenceLevelFieldNumber;
const int ClubPrivilegeSet::kCanSetOwnWhisperLevelFieldNumber;
const int ClubPrivilegeSet::kCanSetOwnMemberNoteFieldNumber;
const int ClubPrivilegeSet::kCanSetOtherMemberNoteFieldNumber;
const int ClubPrivilegeSet::kCanUseVoiceFieldNumber;
const int ClubPrivilegeSet::kCanVoiceMuteMemberForAllFieldNumber;
const int ClubPrivilegeSet::kCanGetInvitationFieldNumber;
const int ClubPrivilegeSet::kCanSendInvitationFieldNumber;
const int ClubPrivilegeSet::kCanSendGuestInvitationFieldNumber;
const int ClubPrivilegeSet::kCanRevokeOwnInvitationFieldNumber;
const int ClubPrivilegeSet::kCanRevokeOtherInvitationFieldNumber;
const int ClubPrivilegeSet::kCanGetSuggestionFieldNumber;
const int ClubPrivilegeSet::kCanSuggestMemberFieldNumber;
const int ClubPrivilegeSet::kCanApproveMemberFieldNumber;
const int ClubPrivilegeSet::kCanGetTicketFieldNumber;
const int ClubPrivilegeSet::kCanCreateTicketFieldNumber;
const int ClubPrivilegeSet::kCanDestroyTicketFieldNumber;
const int ClubPrivilegeSet::kCanGetBanFieldNumber;
const int ClubPrivilegeSet::kCanAddBanFieldNumber;
const int ClubPrivilegeSet::kCanRemoveBanFieldNumber;
const int ClubPrivilegeSet::kCanCreateStreamFieldNumber;
const int ClubPrivilegeSet::kCanDestroyStreamFieldNumber;
const int ClubPrivilegeSet::kCanSetStreamPositionFieldNumber;
const int ClubPrivilegeSet::kCanSetStreamAttributeFieldNumber;
const int ClubPrivilegeSet::kCanSetStreamNameFieldNumber;
const int ClubPrivilegeSet::kCanSetStreamSubjectFieldNumber;
const int ClubPrivilegeSet::kCanSetStreamAccessFieldNumber;
const int ClubPrivilegeSet::kCanSetStreamVoiceLevelFieldNumber;
const int ClubPrivilegeSet::kCanCreateMessageFieldNumber;
const int ClubPrivilegeSet::kCanDestroyOwnMessageFieldNumber;
const int ClubPrivilegeSet::kCanDestroyOtherMessageFieldNumber;
const int ClubPrivilegeSet::kCanEditOwnMessageFieldNumber;
const int ClubPrivilegeSet::kCanPinMessageFieldNumber;
const int ClubPrivilegeSet::kCanMentionAllFieldNumber;
const int ClubPrivilegeSet::kCanMentionHereFieldNumber;
const int ClubPrivilegeSet::kCanMentionMemberFieldNumber;
const int ClubPrivilegeSet::kCanMentionRoleFieldNumber;
#endif  // !_MSC_VER

ClubPrivilegeSet::ClubPrivilegeSet()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.ClubPrivilegeSet)
}

void ClubPrivilegeSet::InitAsDefaultInstance() {
}

ClubPrivilegeSet::ClubPrivilegeSet(const ClubPrivilegeSet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.ClubPrivilegeSet)
}

void ClubPrivilegeSet::SharedCtor() {
  _cached_size_ = 0;
  can_destroy_ = false;
  can_set_attribute_ = false;
  can_set_name_ = false;
  can_set_description_ = false;
  can_set_avatar_ = false;
  can_set_broadcast_ = false;
  can_set_privacy_level_ = false;
  can_kick_member_ = false;
  can_set_own_member_attribute_ = false;
  can_set_other_member_attribute_ = false;
  can_set_own_voice_state_ = false;
  can_set_own_presence_level_ = false;
  can_set_own_whisper_level_ = false;
  can_set_own_member_note_ = false;
  can_set_other_member_note_ = false;
  can_use_voice_ = false;
  can_voice_mute_member_for_all_ = false;
  can_get_invitation_ = false;
  can_send_invitation_ = false;
  can_send_guest_invitation_ = false;
  can_revoke_own_invitation_ = false;
  can_revoke_other_invitation_ = false;
  can_get_suggestion_ = false;
  can_suggest_member_ = false;
  can_approve_member_ = false;
  can_get_ticket_ = false;
  can_create_ticket_ = false;
  can_destroy_ticket_ = false;
  can_get_ban_ = false;
  can_add_ban_ = false;
  can_remove_ban_ = false;
  can_create_stream_ = false;
  can_destroy_stream_ = false;
  can_set_stream_position_ = false;
  can_set_stream_attribute_ = false;
  can_set_stream_name_ = false;
  can_set_stream_subject_ = false;
  can_set_stream_access_ = false;
  can_set_stream_voice_level_ = false;
  can_create_message_ = false;
  can_destroy_own_message_ = false;
  can_destroy_other_message_ = false;
  can_edit_own_message_ = false;
  can_pin_message_ = false;
  can_mention_all_ = false;
  can_mention_here_ = false;
  can_mention_member_ = false;
  can_mention_role_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClubPrivilegeSet::~ClubPrivilegeSet() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.ClubPrivilegeSet)
  SharedDtor();
}

void ClubPrivilegeSet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClubPrivilegeSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClubPrivilegeSet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClubPrivilegeSet_descriptor_;
}

const ClubPrivilegeSet& ClubPrivilegeSet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_club_5frole_2eproto();
  return *default_instance_;
}

ClubPrivilegeSet* ClubPrivilegeSet::default_instance_ = NULL;

ClubPrivilegeSet* ClubPrivilegeSet::New() const {
  return new ClubPrivilegeSet;
}

void ClubPrivilegeSet::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ClubPrivilegeSet*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(can_destroy_, can_kick_member_);
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(can_set_own_member_attribute_, can_use_voice_);
  }
  if (_has_bits_[16 / 32] & 16711680) {
    ZR_(can_voice_mute_member_for_all_, can_suggest_member_);
  }
  if (_has_bits_[24 / 32] & 4278190080) {
    ZR_(can_approve_member_, can_create_stream_);
  }
  if (_has_bits_[32 / 32] & 255) {
    ZR_(can_destroy_stream_, can_create_message_);
  }
  if (_has_bits_[40 / 32] & 65280) {
    ZR_(can_destroy_own_message_, can_mention_role_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClubPrivilegeSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bgs.protocol.club.v1.ClubPrivilegeSet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool can_destroy = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_destroy_)));
          set_has_can_destroy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_can_set_attribute;
        break;
      }

      // optional bool can_set_attribute = 10;
      case 10: {
        if (tag == 80) {
         parse_can_set_attribute:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_set_attribute_)));
          set_has_can_set_attribute();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_can_set_name;
        break;
      }

      // optional bool can_set_name = 11;
      case 11: {
        if (tag == 88) {
         parse_can_set_name:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_set_name_)));
          set_has_can_set_name();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_can_set_description;
        break;
      }

      // optional bool can_set_description = 12;
      case 12: {
        if (tag == 96) {
         parse_can_set_description:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_set_description_)));
          set_has_can_set_description();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_can_set_avatar;
        break;
      }

      // optional bool can_set_avatar = 13;
      case 13: {
        if (tag == 104) {
         parse_can_set_avatar:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_set_avatar_)));
          set_has_can_set_avatar();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_can_set_broadcast;
        break;
      }

      // optional bool can_set_broadcast = 14;
      case 14: {
        if (tag == 112) {
         parse_can_set_broadcast:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_set_broadcast_)));
          set_has_can_set_broadcast();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_can_set_privacy_level;
        break;
      }

      // optional bool can_set_privacy_level = 15;
      case 15: {
        if (tag == 120) {
         parse_can_set_privacy_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_set_privacy_level_)));
          set_has_can_set_privacy_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240)) goto parse_can_kick_member;
        break;
      }

      // optional bool can_kick_member = 30;
      case 30: {
        if (tag == 240) {
         parse_can_kick_member:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_kick_member_)));
          set_has_can_kick_member();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(248)) goto parse_can_set_own_member_attribute;
        break;
      }

      // optional bool can_set_own_member_attribute = 31;
      case 31: {
        if (tag == 248) {
         parse_can_set_own_member_attribute:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_set_own_member_attribute_)));
          set_has_can_set_own_member_attribute();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(256)) goto parse_can_set_other_member_attribute;
        break;
      }

      // optional bool can_set_other_member_attribute = 32;
      case 32: {
        if (tag == 256) {
         parse_can_set_other_member_attribute:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_set_other_member_attribute_)));
          set_has_can_set_other_member_attribute();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(264)) goto parse_can_set_own_voice_state;
        break;
      }

      // optional bool can_set_own_voice_state = 33;
      case 33: {
        if (tag == 264) {
         parse_can_set_own_voice_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_set_own_voice_state_)));
          set_has_can_set_own_voice_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(272)) goto parse_can_set_own_presence_level;
        break;
      }

      // optional bool can_set_own_presence_level = 34;
      case 34: {
        if (tag == 272) {
         parse_can_set_own_presence_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_set_own_presence_level_)));
          set_has_can_set_own_presence_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(280)) goto parse_can_set_own_whisper_level;
        break;
      }

      // optional bool can_set_own_whisper_level = 35;
      case 35: {
        if (tag == 280) {
         parse_can_set_own_whisper_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_set_own_whisper_level_)));
          set_has_can_set_own_whisper_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(288)) goto parse_can_set_own_member_note;
        break;
      }

      // optional bool can_set_own_member_note = 36;
      case 36: {
        if (tag == 288) {
         parse_can_set_own_member_note:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_set_own_member_note_)));
          set_has_can_set_own_member_note();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(296)) goto parse_can_set_other_member_note;
        break;
      }

      // optional bool can_set_other_member_note = 37;
      case 37: {
        if (tag == 296) {
         parse_can_set_other_member_note:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_set_other_member_note_)));
          set_has_can_set_other_member_note();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(400)) goto parse_can_use_voice;
        break;
      }

      // optional bool can_use_voice = 50;
      case 50: {
        if (tag == 400) {
         parse_can_use_voice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_use_voice_)));
          set_has_can_use_voice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(408)) goto parse_can_voice_mute_member_for_all;
        break;
      }

      // optional bool can_voice_mute_member_for_all = 51;
      case 51: {
        if (tag == 408) {
         parse_can_voice_mute_member_for_all:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_voice_mute_member_for_all_)));
          set_has_can_voice_mute_member_for_all();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(560)) goto parse_can_get_invitation;
        break;
      }

      // optional bool can_get_invitation = 70;
      case 70: {
        if (tag == 560) {
         parse_can_get_invitation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_get_invitation_)));
          set_has_can_get_invitation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(568)) goto parse_can_send_invitation;
        break;
      }

      // optional bool can_send_invitation = 71;
      case 71: {
        if (tag == 568) {
         parse_can_send_invitation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_send_invitation_)));
          set_has_can_send_invitation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(576)) goto parse_can_send_guest_invitation;
        break;
      }

      // optional bool can_send_guest_invitation = 72;
      case 72: {
        if (tag == 576) {
         parse_can_send_guest_invitation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_send_guest_invitation_)));
          set_has_can_send_guest_invitation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(584)) goto parse_can_revoke_own_invitation;
        break;
      }

      // optional bool can_revoke_own_invitation = 73;
      case 73: {
        if (tag == 584) {
         parse_can_revoke_own_invitation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_revoke_own_invitation_)));
          set_has_can_revoke_own_invitation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(592)) goto parse_can_revoke_other_invitation;
        break;
      }

      // optional bool can_revoke_other_invitation = 74;
      case 74: {
        if (tag == 592) {
         parse_can_revoke_other_invitation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_revoke_other_invitation_)));
          set_has_can_revoke_other_invitation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(720)) goto parse_can_get_suggestion;
        break;
      }

      // optional bool can_get_suggestion = 90;
      case 90: {
        if (tag == 720) {
         parse_can_get_suggestion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_get_suggestion_)));
          set_has_can_get_suggestion();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(728)) goto parse_can_suggest_member;
        break;
      }

      // optional bool can_suggest_member = 91;
      case 91: {
        if (tag == 728) {
         parse_can_suggest_member:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_suggest_member_)));
          set_has_can_suggest_member();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(736)) goto parse_can_approve_member;
        break;
      }

      // optional bool can_approve_member = 92;
      case 92: {
        if (tag == 736) {
         parse_can_approve_member:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_approve_member_)));
          set_has_can_approve_member();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(880)) goto parse_can_get_ticket;
        break;
      }

      // optional bool can_get_ticket = 110;
      case 110: {
        if (tag == 880) {
         parse_can_get_ticket:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_get_ticket_)));
          set_has_can_get_ticket();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(888)) goto parse_can_create_ticket;
        break;
      }

      // optional bool can_create_ticket = 111;
      case 111: {
        if (tag == 888) {
         parse_can_create_ticket:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_create_ticket_)));
          set_has_can_create_ticket();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(896)) goto parse_can_destroy_ticket;
        break;
      }

      // optional bool can_destroy_ticket = 112;
      case 112: {
        if (tag == 896) {
         parse_can_destroy_ticket:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_destroy_ticket_)));
          set_has_can_destroy_ticket();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1040)) goto parse_can_get_ban;
        break;
      }

      // optional bool can_get_ban = 130;
      case 130: {
        if (tag == 1040) {
         parse_can_get_ban:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_get_ban_)));
          set_has_can_get_ban();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1048)) goto parse_can_add_ban;
        break;
      }

      // optional bool can_add_ban = 131;
      case 131: {
        if (tag == 1048) {
         parse_can_add_ban:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_add_ban_)));
          set_has_can_add_ban();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1056)) goto parse_can_remove_ban;
        break;
      }

      // optional bool can_remove_ban = 132;
      case 132: {
        if (tag == 1056) {
         parse_can_remove_ban:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_remove_ban_)));
          set_has_can_remove_ban();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1120)) goto parse_can_create_stream;
        break;
      }

      // optional bool can_create_stream = 140;
      case 140: {
        if (tag == 1120) {
         parse_can_create_stream:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_create_stream_)));
          set_has_can_create_stream();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1128)) goto parse_can_destroy_stream;
        break;
      }

      // optional bool can_destroy_stream = 141;
      case 141: {
        if (tag == 1128) {
         parse_can_destroy_stream:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_destroy_stream_)));
          set_has_can_destroy_stream();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1136)) goto parse_can_set_stream_position;
        break;
      }

      // optional bool can_set_stream_position = 142;
      case 142: {
        if (tag == 1136) {
         parse_can_set_stream_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_set_stream_position_)));
          set_has_can_set_stream_position();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1144)) goto parse_can_set_stream_attribute;
        break;
      }

      // optional bool can_set_stream_attribute = 143;
      case 143: {
        if (tag == 1144) {
         parse_can_set_stream_attribute:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_set_stream_attribute_)));
          set_has_can_set_stream_attribute();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1152)) goto parse_can_set_stream_name;
        break;
      }

      // optional bool can_set_stream_name = 144;
      case 144: {
        if (tag == 1152) {
         parse_can_set_stream_name:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_set_stream_name_)));
          set_has_can_set_stream_name();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1160)) goto parse_can_set_stream_subject;
        break;
      }

      // optional bool can_set_stream_subject = 145;
      case 145: {
        if (tag == 1160) {
         parse_can_set_stream_subject:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_set_stream_subject_)));
          set_has_can_set_stream_subject();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1168)) goto parse_can_set_stream_access;
        break;
      }

      // optional bool can_set_stream_access = 146;
      case 146: {
        if (tag == 1168) {
         parse_can_set_stream_access:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_set_stream_access_)));
          set_has_can_set_stream_access();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1176)) goto parse_can_set_stream_voice_level;
        break;
      }

      // optional bool can_set_stream_voice_level = 147;
      case 147: {
        if (tag == 1176) {
         parse_can_set_stream_voice_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_set_stream_voice_level_)));
          set_has_can_set_stream_voice_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1440)) goto parse_can_create_message;
        break;
      }

      // optional bool can_create_message = 180;
      case 180: {
        if (tag == 1440) {
         parse_can_create_message:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_create_message_)));
          set_has_can_create_message();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1448)) goto parse_can_destroy_own_message;
        break;
      }

      // optional bool can_destroy_own_message = 181;
      case 181: {
        if (tag == 1448) {
         parse_can_destroy_own_message:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_destroy_own_message_)));
          set_has_can_destroy_own_message();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1456)) goto parse_can_destroy_other_message;
        break;
      }

      // optional bool can_destroy_other_message = 182;
      case 182: {
        if (tag == 1456) {
         parse_can_destroy_other_message:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_destroy_other_message_)));
          set_has_can_destroy_other_message();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1464)) goto parse_can_edit_own_message;
        break;
      }

      // optional bool can_edit_own_message = 183;
      case 183: {
        if (tag == 1464) {
         parse_can_edit_own_message:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_edit_own_message_)));
          set_has_can_edit_own_message();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1472)) goto parse_can_pin_message;
        break;
      }

      // optional bool can_pin_message = 184;
      case 184: {
        if (tag == 1472) {
         parse_can_pin_message:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_pin_message_)));
          set_has_can_pin_message();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1480)) goto parse_can_mention_all;
        break;
      }

      // optional bool can_mention_all = 185;
      case 185: {
        if (tag == 1480) {
         parse_can_mention_all:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_mention_all_)));
          set_has_can_mention_all();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1488)) goto parse_can_mention_here;
        break;
      }

      // optional bool can_mention_here = 186;
      case 186: {
        if (tag == 1488) {
         parse_can_mention_here:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_mention_here_)));
          set_has_can_mention_here();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1496)) goto parse_can_mention_member;
        break;
      }

      // optional bool can_mention_member = 187;
      case 187: {
        if (tag == 1496) {
         parse_can_mention_member:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_mention_member_)));
          set_has_can_mention_member();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1504)) goto parse_can_mention_role;
        break;
      }

      // optional bool can_mention_role = 188;
      case 188: {
        if (tag == 1504) {
         parse_can_mention_role:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_mention_role_)));
          set_has_can_mention_role();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bgs.protocol.club.v1.ClubPrivilegeSet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bgs.protocol.club.v1.ClubPrivilegeSet)
  return false;
#undef DO_
}

void ClubPrivilegeSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bgs.protocol.club.v1.ClubPrivilegeSet)
  // optional bool can_destroy = 1;
  if (has_can_destroy()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->can_destroy(), output);
  }

  // optional bool can_set_attribute = 10;
  if (has_can_set_attribute()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->can_set_attribute(), output);
  }

  // optional bool can_set_name = 11;
  if (has_can_set_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->can_set_name(), output);
  }

  // optional bool can_set_description = 12;
  if (has_can_set_description()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->can_set_description(), output);
  }

  // optional bool can_set_avatar = 13;
  if (has_can_set_avatar()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->can_set_avatar(), output);
  }

  // optional bool can_set_broadcast = 14;
  if (has_can_set_broadcast()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->can_set_broadcast(), output);
  }

  // optional bool can_set_privacy_level = 15;
  if (has_can_set_privacy_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->can_set_privacy_level(), output);
  }

  // optional bool can_kick_member = 30;
  if (has_can_kick_member()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(30, this->can_kick_member(), output);
  }

  // optional bool can_set_own_member_attribute = 31;
  if (has_can_set_own_member_attribute()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(31, this->can_set_own_member_attribute(), output);
  }

  // optional bool can_set_other_member_attribute = 32;
  if (has_can_set_other_member_attribute()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(32, this->can_set_other_member_attribute(), output);
  }

  // optional bool can_set_own_voice_state = 33;
  if (has_can_set_own_voice_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(33, this->can_set_own_voice_state(), output);
  }

  // optional bool can_set_own_presence_level = 34;
  if (has_can_set_own_presence_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(34, this->can_set_own_presence_level(), output);
  }

  // optional bool can_set_own_whisper_level = 35;
  if (has_can_set_own_whisper_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(35, this->can_set_own_whisper_level(), output);
  }

  // optional bool can_set_own_member_note = 36;
  if (has_can_set_own_member_note()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(36, this->can_set_own_member_note(), output);
  }

  // optional bool can_set_other_member_note = 37;
  if (has_can_set_other_member_note()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(37, this->can_set_other_member_note(), output);
  }

  // optional bool can_use_voice = 50;
  if (has_can_use_voice()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(50, this->can_use_voice(), output);
  }

  // optional bool can_voice_mute_member_for_all = 51;
  if (has_can_voice_mute_member_for_all()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(51, this->can_voice_mute_member_for_all(), output);
  }

  // optional bool can_get_invitation = 70;
  if (has_can_get_invitation()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(70, this->can_get_invitation(), output);
  }

  // optional bool can_send_invitation = 71;
  if (has_can_send_invitation()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(71, this->can_send_invitation(), output);
  }

  // optional bool can_send_guest_invitation = 72;
  if (has_can_send_guest_invitation()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(72, this->can_send_guest_invitation(), output);
  }

  // optional bool can_revoke_own_invitation = 73;
  if (has_can_revoke_own_invitation()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(73, this->can_revoke_own_invitation(), output);
  }

  // optional bool can_revoke_other_invitation = 74;
  if (has_can_revoke_other_invitation()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(74, this->can_revoke_other_invitation(), output);
  }

  // optional bool can_get_suggestion = 90;
  if (has_can_get_suggestion()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(90, this->can_get_suggestion(), output);
  }

  // optional bool can_suggest_member = 91;
  if (has_can_suggest_member()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(91, this->can_suggest_member(), output);
  }

  // optional bool can_approve_member = 92;
  if (has_can_approve_member()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(92, this->can_approve_member(), output);
  }

  // optional bool can_get_ticket = 110;
  if (has_can_get_ticket()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(110, this->can_get_ticket(), output);
  }

  // optional bool can_create_ticket = 111;
  if (has_can_create_ticket()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(111, this->can_create_ticket(), output);
  }

  // optional bool can_destroy_ticket = 112;
  if (has_can_destroy_ticket()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(112, this->can_destroy_ticket(), output);
  }

  // optional bool can_get_ban = 130;
  if (has_can_get_ban()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(130, this->can_get_ban(), output);
  }

  // optional bool can_add_ban = 131;
  if (has_can_add_ban()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(131, this->can_add_ban(), output);
  }

  // optional bool can_remove_ban = 132;
  if (has_can_remove_ban()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(132, this->can_remove_ban(), output);
  }

  // optional bool can_create_stream = 140;
  if (has_can_create_stream()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(140, this->can_create_stream(), output);
  }

  // optional bool can_destroy_stream = 141;
  if (has_can_destroy_stream()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(141, this->can_destroy_stream(), output);
  }

  // optional bool can_set_stream_position = 142;
  if (has_can_set_stream_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(142, this->can_set_stream_position(), output);
  }

  // optional bool can_set_stream_attribute = 143;
  if (has_can_set_stream_attribute()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(143, this->can_set_stream_attribute(), output);
  }

  // optional bool can_set_stream_name = 144;
  if (has_can_set_stream_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(144, this->can_set_stream_name(), output);
  }

  // optional bool can_set_stream_subject = 145;
  if (has_can_set_stream_subject()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(145, this->can_set_stream_subject(), output);
  }

  // optional bool can_set_stream_access = 146;
  if (has_can_set_stream_access()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(146, this->can_set_stream_access(), output);
  }

  // optional bool can_set_stream_voice_level = 147;
  if (has_can_set_stream_voice_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(147, this->can_set_stream_voice_level(), output);
  }

  // optional bool can_create_message = 180;
  if (has_can_create_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(180, this->can_create_message(), output);
  }

  // optional bool can_destroy_own_message = 181;
  if (has_can_destroy_own_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(181, this->can_destroy_own_message(), output);
  }

  // optional bool can_destroy_other_message = 182;
  if (has_can_destroy_other_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(182, this->can_destroy_other_message(), output);
  }

  // optional bool can_edit_own_message = 183;
  if (has_can_edit_own_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(183, this->can_edit_own_message(), output);
  }

  // optional bool can_pin_message = 184;
  if (has_can_pin_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(184, this->can_pin_message(), output);
  }

  // optional bool can_mention_all = 185;
  if (has_can_mention_all()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(185, this->can_mention_all(), output);
  }

  // optional bool can_mention_here = 186;
  if (has_can_mention_here()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(186, this->can_mention_here(), output);
  }

  // optional bool can_mention_member = 187;
  if (has_can_mention_member()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(187, this->can_mention_member(), output);
  }

  // optional bool can_mention_role = 188;
  if (has_can_mention_role()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(188, this->can_mention_role(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bgs.protocol.club.v1.ClubPrivilegeSet)
}

::google::protobuf::uint8* ClubPrivilegeSet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.ClubPrivilegeSet)
  // optional bool can_destroy = 1;
  if (has_can_destroy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->can_destroy(), target);
  }

  // optional bool can_set_attribute = 10;
  if (has_can_set_attribute()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->can_set_attribute(), target);
  }

  // optional bool can_set_name = 11;
  if (has_can_set_name()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->can_set_name(), target);
  }

  // optional bool can_set_description = 12;
  if (has_can_set_description()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->can_set_description(), target);
  }

  // optional bool can_set_avatar = 13;
  if (has_can_set_avatar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->can_set_avatar(), target);
  }

  // optional bool can_set_broadcast = 14;
  if (has_can_set_broadcast()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->can_set_broadcast(), target);
  }

  // optional bool can_set_privacy_level = 15;
  if (has_can_set_privacy_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->can_set_privacy_level(), target);
  }

  // optional bool can_kick_member = 30;
  if (has_can_kick_member()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(30, this->can_kick_member(), target);
  }

  // optional bool can_set_own_member_attribute = 31;
  if (has_can_set_own_member_attribute()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(31, this->can_set_own_member_attribute(), target);
  }

  // optional bool can_set_other_member_attribute = 32;
  if (has_can_set_other_member_attribute()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(32, this->can_set_other_member_attribute(), target);
  }

  // optional bool can_set_own_voice_state = 33;
  if (has_can_set_own_voice_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(33, this->can_set_own_voice_state(), target);
  }

  // optional bool can_set_own_presence_level = 34;
  if (has_can_set_own_presence_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(34, this->can_set_own_presence_level(), target);
  }

  // optional bool can_set_own_whisper_level = 35;
  if (has_can_set_own_whisper_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(35, this->can_set_own_whisper_level(), target);
  }

  // optional bool can_set_own_member_note = 36;
  if (has_can_set_own_member_note()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(36, this->can_set_own_member_note(), target);
  }

  // optional bool can_set_other_member_note = 37;
  if (has_can_set_other_member_note()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(37, this->can_set_other_member_note(), target);
  }

  // optional bool can_use_voice = 50;
  if (has_can_use_voice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(50, this->can_use_voice(), target);
  }

  // optional bool can_voice_mute_member_for_all = 51;
  if (has_can_voice_mute_member_for_all()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(51, this->can_voice_mute_member_for_all(), target);
  }

  // optional bool can_get_invitation = 70;
  if (has_can_get_invitation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(70, this->can_get_invitation(), target);
  }

  // optional bool can_send_invitation = 71;
  if (has_can_send_invitation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(71, this->can_send_invitation(), target);
  }

  // optional bool can_send_guest_invitation = 72;
  if (has_can_send_guest_invitation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(72, this->can_send_guest_invitation(), target);
  }

  // optional bool can_revoke_own_invitation = 73;
  if (has_can_revoke_own_invitation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(73, this->can_revoke_own_invitation(), target);
  }

  // optional bool can_revoke_other_invitation = 74;
  if (has_can_revoke_other_invitation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(74, this->can_revoke_other_invitation(), target);
  }

  // optional bool can_get_suggestion = 90;
  if (has_can_get_suggestion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(90, this->can_get_suggestion(), target);
  }

  // optional bool can_suggest_member = 91;
  if (has_can_suggest_member()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(91, this->can_suggest_member(), target);
  }

  // optional bool can_approve_member = 92;
  if (has_can_approve_member()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(92, this->can_approve_member(), target);
  }

  // optional bool can_get_ticket = 110;
  if (has_can_get_ticket()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(110, this->can_get_ticket(), target);
  }

  // optional bool can_create_ticket = 111;
  if (has_can_create_ticket()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(111, this->can_create_ticket(), target);
  }

  // optional bool can_destroy_ticket = 112;
  if (has_can_destroy_ticket()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(112, this->can_destroy_ticket(), target);
  }

  // optional bool can_get_ban = 130;
  if (has_can_get_ban()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(130, this->can_get_ban(), target);
  }

  // optional bool can_add_ban = 131;
  if (has_can_add_ban()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(131, this->can_add_ban(), target);
  }

  // optional bool can_remove_ban = 132;
  if (has_can_remove_ban()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(132, this->can_remove_ban(), target);
  }

  // optional bool can_create_stream = 140;
  if (has_can_create_stream()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(140, this->can_create_stream(), target);
  }

  // optional bool can_destroy_stream = 141;
  if (has_can_destroy_stream()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(141, this->can_destroy_stream(), target);
  }

  // optional bool can_set_stream_position = 142;
  if (has_can_set_stream_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(142, this->can_set_stream_position(), target);
  }

  // optional bool can_set_stream_attribute = 143;
  if (has_can_set_stream_attribute()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(143, this->can_set_stream_attribute(), target);
  }

  // optional bool can_set_stream_name = 144;
  if (has_can_set_stream_name()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(144, this->can_set_stream_name(), target);
  }

  // optional bool can_set_stream_subject = 145;
  if (has_can_set_stream_subject()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(145, this->can_set_stream_subject(), target);
  }

  // optional bool can_set_stream_access = 146;
  if (has_can_set_stream_access()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(146, this->can_set_stream_access(), target);
  }

  // optional bool can_set_stream_voice_level = 147;
  if (has_can_set_stream_voice_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(147, this->can_set_stream_voice_level(), target);
  }

  // optional bool can_create_message = 180;
  if (has_can_create_message()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(180, this->can_create_message(), target);
  }

  // optional bool can_destroy_own_message = 181;
  if (has_can_destroy_own_message()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(181, this->can_destroy_own_message(), target);
  }

  // optional bool can_destroy_other_message = 182;
  if (has_can_destroy_other_message()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(182, this->can_destroy_other_message(), target);
  }

  // optional bool can_edit_own_message = 183;
  if (has_can_edit_own_message()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(183, this->can_edit_own_message(), target);
  }

  // optional bool can_pin_message = 184;
  if (has_can_pin_message()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(184, this->can_pin_message(), target);
  }

  // optional bool can_mention_all = 185;
  if (has_can_mention_all()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(185, this->can_mention_all(), target);
  }

  // optional bool can_mention_here = 186;
  if (has_can_mention_here()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(186, this->can_mention_here(), target);
  }

  // optional bool can_mention_member = 187;
  if (has_can_mention_member()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(187, this->can_mention_member(), target);
  }

  // optional bool can_mention_role = 188;
  if (has_can_mention_role()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(188, this->can_mention_role(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.ClubPrivilegeSet)
  return target;
}

int ClubPrivilegeSet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool can_destroy = 1;
    if (has_can_destroy()) {
      total_size += 1 + 1;
    }

    // optional bool can_set_attribute = 10;
    if (has_can_set_attribute()) {
      total_size += 1 + 1;
    }

    // optional bool can_set_name = 11;
    if (has_can_set_name()) {
      total_size += 1 + 1;
    }

    // optional bool can_set_description = 12;
    if (has_can_set_description()) {
      total_size += 1 + 1;
    }

    // optional bool can_set_avatar = 13;
    if (has_can_set_avatar()) {
      total_size += 1 + 1;
    }

    // optional bool can_set_broadcast = 14;
    if (has_can_set_broadcast()) {
      total_size += 1 + 1;
    }

    // optional bool can_set_privacy_level = 15;
    if (has_can_set_privacy_level()) {
      total_size += 1 + 1;
    }

    // optional bool can_kick_member = 30;
    if (has_can_kick_member()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool can_set_own_member_attribute = 31;
    if (has_can_set_own_member_attribute()) {
      total_size += 2 + 1;
    }

    // optional bool can_set_other_member_attribute = 32;
    if (has_can_set_other_member_attribute()) {
      total_size += 2 + 1;
    }

    // optional bool can_set_own_voice_state = 33;
    if (has_can_set_own_voice_state()) {
      total_size += 2 + 1;
    }

    // optional bool can_set_own_presence_level = 34;
    if (has_can_set_own_presence_level()) {
      total_size += 2 + 1;
    }

    // optional bool can_set_own_whisper_level = 35;
    if (has_can_set_own_whisper_level()) {
      total_size += 2 + 1;
    }

    // optional bool can_set_own_member_note = 36;
    if (has_can_set_own_member_note()) {
      total_size += 2 + 1;
    }

    // optional bool can_set_other_member_note = 37;
    if (has_can_set_other_member_note()) {
      total_size += 2 + 1;
    }

    // optional bool can_use_voice = 50;
    if (has_can_use_voice()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional bool can_voice_mute_member_for_all = 51;
    if (has_can_voice_mute_member_for_all()) {
      total_size += 2 + 1;
    }

    // optional bool can_get_invitation = 70;
    if (has_can_get_invitation()) {
      total_size += 2 + 1;
    }

    // optional bool can_send_invitation = 71;
    if (has_can_send_invitation()) {
      total_size += 2 + 1;
    }

    // optional bool can_send_guest_invitation = 72;
    if (has_can_send_guest_invitation()) {
      total_size += 2 + 1;
    }

    // optional bool can_revoke_own_invitation = 73;
    if (has_can_revoke_own_invitation()) {
      total_size += 2 + 1;
    }

    // optional bool can_revoke_other_invitation = 74;
    if (has_can_revoke_other_invitation()) {
      total_size += 2 + 1;
    }

    // optional bool can_get_suggestion = 90;
    if (has_can_get_suggestion()) {
      total_size += 2 + 1;
    }

    // optional bool can_suggest_member = 91;
    if (has_can_suggest_member()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional bool can_approve_member = 92;
    if (has_can_approve_member()) {
      total_size += 2 + 1;
    }

    // optional bool can_get_ticket = 110;
    if (has_can_get_ticket()) {
      total_size += 2 + 1;
    }

    // optional bool can_create_ticket = 111;
    if (has_can_create_ticket()) {
      total_size += 2 + 1;
    }

    // optional bool can_destroy_ticket = 112;
    if (has_can_destroy_ticket()) {
      total_size += 2 + 1;
    }

    // optional bool can_get_ban = 130;
    if (has_can_get_ban()) {
      total_size += 2 + 1;
    }

    // optional bool can_add_ban = 131;
    if (has_can_add_ban()) {
      total_size += 2 + 1;
    }

    // optional bool can_remove_ban = 132;
    if (has_can_remove_ban()) {
      total_size += 2 + 1;
    }

    // optional bool can_create_stream = 140;
    if (has_can_create_stream()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional bool can_destroy_stream = 141;
    if (has_can_destroy_stream()) {
      total_size += 2 + 1;
    }

    // optional bool can_set_stream_position = 142;
    if (has_can_set_stream_position()) {
      total_size += 2 + 1;
    }

    // optional bool can_set_stream_attribute = 143;
    if (has_can_set_stream_attribute()) {
      total_size += 2 + 1;
    }

    // optional bool can_set_stream_name = 144;
    if (has_can_set_stream_name()) {
      total_size += 2 + 1;
    }

    // optional bool can_set_stream_subject = 145;
    if (has_can_set_stream_subject()) {
      total_size += 2 + 1;
    }

    // optional bool can_set_stream_access = 146;
    if (has_can_set_stream_access()) {
      total_size += 2 + 1;
    }

    // optional bool can_set_stream_voice_level = 147;
    if (has_can_set_stream_voice_level()) {
      total_size += 2 + 1;
    }

    // optional bool can_create_message = 180;
    if (has_can_create_message()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional bool can_destroy_own_message = 181;
    if (has_can_destroy_own_message()) {
      total_size += 2 + 1;
    }

    // optional bool can_destroy_other_message = 182;
    if (has_can_destroy_other_message()) {
      total_size += 2 + 1;
    }

    // optional bool can_edit_own_message = 183;
    if (has_can_edit_own_message()) {
      total_size += 2 + 1;
    }

    // optional bool can_pin_message = 184;
    if (has_can_pin_message()) {
      total_size += 2 + 1;
    }

    // optional bool can_mention_all = 185;
    if (has_can_mention_all()) {
      total_size += 2 + 1;
    }

    // optional bool can_mention_here = 186;
    if (has_can_mention_here()) {
      total_size += 2 + 1;
    }

    // optional bool can_mention_member = 187;
    if (has_can_mention_member()) {
      total_size += 2 + 1;
    }

    // optional bool can_mention_role = 188;
    if (has_can_mention_role()) {
      total_size += 2 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClubPrivilegeSet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClubPrivilegeSet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClubPrivilegeSet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClubPrivilegeSet::MergeFrom(const ClubPrivilegeSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_can_destroy()) {
      set_can_destroy(from.can_destroy());
    }
    if (from.has_can_set_attribute()) {
      set_can_set_attribute(from.can_set_attribute());
    }
    if (from.has_can_set_name()) {
      set_can_set_name(from.can_set_name());
    }
    if (from.has_can_set_description()) {
      set_can_set_description(from.can_set_description());
    }
    if (from.has_can_set_avatar()) {
      set_can_set_avatar(from.can_set_avatar());
    }
    if (from.has_can_set_broadcast()) {
      set_can_set_broadcast(from.can_set_broadcast());
    }
    if (from.has_can_set_privacy_level()) {
      set_can_set_privacy_level(from.can_set_privacy_level());
    }
    if (from.has_can_kick_member()) {
      set_can_kick_member(from.can_kick_member());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_can_set_own_member_attribute()) {
      set_can_set_own_member_attribute(from.can_set_own_member_attribute());
    }
    if (from.has_can_set_other_member_attribute()) {
      set_can_set_other_member_attribute(from.can_set_other_member_attribute());
    }
    if (from.has_can_set_own_voice_state()) {
      set_can_set_own_voice_state(from.can_set_own_voice_state());
    }
    if (from.has_can_set_own_presence_level()) {
      set_can_set_own_presence_level(from.can_set_own_presence_level());
    }
    if (from.has_can_set_own_whisper_level()) {
      set_can_set_own_whisper_level(from.can_set_own_whisper_level());
    }
    if (from.has_can_set_own_member_note()) {
      set_can_set_own_member_note(from.can_set_own_member_note());
    }
    if (from.has_can_set_other_member_note()) {
      set_can_set_other_member_note(from.can_set_other_member_note());
    }
    if (from.has_can_use_voice()) {
      set_can_use_voice(from.can_use_voice());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_can_voice_mute_member_for_all()) {
      set_can_voice_mute_member_for_all(from.can_voice_mute_member_for_all());
    }
    if (from.has_can_get_invitation()) {
      set_can_get_invitation(from.can_get_invitation());
    }
    if (from.has_can_send_invitation()) {
      set_can_send_invitation(from.can_send_invitation());
    }
    if (from.has_can_send_guest_invitation()) {
      set_can_send_guest_invitation(from.can_send_guest_invitation());
    }
    if (from.has_can_revoke_own_invitation()) {
      set_can_revoke_own_invitation(from.can_revoke_own_invitation());
    }
    if (from.has_can_revoke_other_invitation()) {
      set_can_revoke_other_invitation(from.can_revoke_other_invitation());
    }
    if (from.has_can_get_suggestion()) {
      set_can_get_suggestion(from.can_get_suggestion());
    }
    if (from.has_can_suggest_member()) {
      set_can_suggest_member(from.can_suggest_member());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_can_approve_member()) {
      set_can_approve_member(from.can_approve_member());
    }
    if (from.has_can_get_ticket()) {
      set_can_get_ticket(from.can_get_ticket());
    }
    if (from.has_can_create_ticket()) {
      set_can_create_ticket(from.can_create_ticket());
    }
    if (from.has_can_destroy_ticket()) {
      set_can_destroy_ticket(from.can_destroy_ticket());
    }
    if (from.has_can_get_ban()) {
      set_can_get_ban(from.can_get_ban());
    }
    if (from.has_can_add_ban()) {
      set_can_add_ban(from.can_add_ban());
    }
    if (from.has_can_remove_ban()) {
      set_can_remove_ban(from.can_remove_ban());
    }
    if (from.has_can_create_stream()) {
      set_can_create_stream(from.can_create_stream());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_can_destroy_stream()) {
      set_can_destroy_stream(from.can_destroy_stream());
    }
    if (from.has_can_set_stream_position()) {
      set_can_set_stream_position(from.can_set_stream_position());
    }
    if (from.has_can_set_stream_attribute()) {
      set_can_set_stream_attribute(from.can_set_stream_attribute());
    }
    if (from.has_can_set_stream_name()) {
      set_can_set_stream_name(from.can_set_stream_name());
    }
    if (from.has_can_set_stream_subject()) {
      set_can_set_stream_subject(from.can_set_stream_subject());
    }
    if (from.has_can_set_stream_access()) {
      set_can_set_stream_access(from.can_set_stream_access());
    }
    if (from.has_can_set_stream_voice_level()) {
      set_can_set_stream_voice_level(from.can_set_stream_voice_level());
    }
    if (from.has_can_create_message()) {
      set_can_create_message(from.can_create_message());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_can_destroy_own_message()) {
      set_can_destroy_own_message(from.can_destroy_own_message());
    }
    if (from.has_can_destroy_other_message()) {
      set_can_destroy_other_message(from.can_destroy_other_message());
    }
    if (from.has_can_edit_own_message()) {
      set_can_edit_own_message(from.can_edit_own_message());
    }
    if (from.has_can_pin_message()) {
      set_can_pin_message(from.can_pin_message());
    }
    if (from.has_can_mention_all()) {
      set_can_mention_all(from.can_mention_all());
    }
    if (from.has_can_mention_here()) {
      set_can_mention_here(from.can_mention_here());
    }
    if (from.has_can_mention_member()) {
      set_can_mention_member(from.can_mention_member());
    }
    if (from.has_can_mention_role()) {
      set_can_mention_role(from.can_mention_role());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClubPrivilegeSet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClubPrivilegeSet::CopyFrom(const ClubPrivilegeSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClubPrivilegeSet::IsInitialized() const {

  return true;
}

void ClubPrivilegeSet::Swap(ClubPrivilegeSet* other) {
  if (other != this) {
    std::swap(can_destroy_, other->can_destroy_);
    std::swap(can_set_attribute_, other->can_set_attribute_);
    std::swap(can_set_name_, other->can_set_name_);
    std::swap(can_set_description_, other->can_set_description_);
    std::swap(can_set_avatar_, other->can_set_avatar_);
    std::swap(can_set_broadcast_, other->can_set_broadcast_);
    std::swap(can_set_privacy_level_, other->can_set_privacy_level_);
    std::swap(can_kick_member_, other->can_kick_member_);
    std::swap(can_set_own_member_attribute_, other->can_set_own_member_attribute_);
    std::swap(can_set_other_member_attribute_, other->can_set_other_member_attribute_);
    std::swap(can_set_own_voice_state_, other->can_set_own_voice_state_);
    std::swap(can_set_own_presence_level_, other->can_set_own_presence_level_);
    std::swap(can_set_own_whisper_level_, other->can_set_own_whisper_level_);
    std::swap(can_set_own_member_note_, other->can_set_own_member_note_);
    std::swap(can_set_other_member_note_, other->can_set_other_member_note_);
    std::swap(can_use_voice_, other->can_use_voice_);
    std::swap(can_voice_mute_member_for_all_, other->can_voice_mute_member_for_all_);
    std::swap(can_get_invitation_, other->can_get_invitation_);
    std::swap(can_send_invitation_, other->can_send_invitation_);
    std::swap(can_send_guest_invitation_, other->can_send_guest_invitation_);
    std::swap(can_revoke_own_invitation_, other->can_revoke_own_invitation_);
    std::swap(can_revoke_other_invitation_, other->can_revoke_other_invitation_);
    std::swap(can_get_suggestion_, other->can_get_suggestion_);
    std::swap(can_suggest_member_, other->can_suggest_member_);
    std::swap(can_approve_member_, other->can_approve_member_);
    std::swap(can_get_ticket_, other->can_get_ticket_);
    std::swap(can_create_ticket_, other->can_create_ticket_);
    std::swap(can_destroy_ticket_, other->can_destroy_ticket_);
    std::swap(can_get_ban_, other->can_get_ban_);
    std::swap(can_add_ban_, other->can_add_ban_);
    std::swap(can_remove_ban_, other->can_remove_ban_);
    std::swap(can_create_stream_, other->can_create_stream_);
    std::swap(can_destroy_stream_, other->can_destroy_stream_);
    std::swap(can_set_stream_position_, other->can_set_stream_position_);
    std::swap(can_set_stream_attribute_, other->can_set_stream_attribute_);
    std::swap(can_set_stream_name_, other->can_set_stream_name_);
    std::swap(can_set_stream_subject_, other->can_set_stream_subject_);
    std::swap(can_set_stream_access_, other->can_set_stream_access_);
    std::swap(can_set_stream_voice_level_, other->can_set_stream_voice_level_);
    std::swap(can_create_message_, other->can_create_message_);
    std::swap(can_destroy_own_message_, other->can_destroy_own_message_);
    std::swap(can_destroy_other_message_, other->can_destroy_other_message_);
    std::swap(can_edit_own_message_, other->can_edit_own_message_);
    std::swap(can_pin_message_, other->can_pin_message_);
    std::swap(can_mention_all_, other->can_mention_all_);
    std::swap(can_mention_here_, other->can_mention_here_);
    std::swap(can_mention_member_, other->can_mention_member_);
    std::swap(can_mention_role_, other->can_mention_role_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClubPrivilegeSet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClubPrivilegeSet_descriptor_;
  metadata.reflection = ClubPrivilegeSet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClubRole::kIdFieldNumber;
const int ClubRole::kStateFieldNumber;
const int ClubRole::kPrivilegeFieldNumber;
const int ClubRole::kAlwaysGrantStreamAccessFieldNumber;
const int ClubRole::kAllowInClubSlotFieldNumber;
#endif  // !_MSC_VER

ClubRole::ClubRole()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.ClubRole)
}

void ClubRole::InitAsDefaultInstance() {
  state_ = const_cast< ::bgs::protocol::RoleState*>(&::bgs::protocol::RoleState::default_instance());
  privilege_ = const_cast< ::bgs::protocol::club::v1::ClubPrivilegeSet*>(&::bgs::protocol::club::v1::ClubPrivilegeSet::default_instance());
}

ClubRole::ClubRole(const ClubRole& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.ClubRole)
}

void ClubRole::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  state_ = NULL;
  privilege_ = NULL;
  always_grant_stream_access_ = false;
  allow_in_club_slot_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClubRole::~ClubRole() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.ClubRole)
  SharedDtor();
}

void ClubRole::SharedDtor() {
  if (this != default_instance_) {
    delete state_;
    delete privilege_;
  }
}

void ClubRole::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClubRole::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClubRole_descriptor_;
}

const ClubRole& ClubRole::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_club_5frole_2eproto();
  return *default_instance_;
}

ClubRole* ClubRole::default_instance_ = NULL;

ClubRole* ClubRole::New() const {
  return new ClubRole;
}

void ClubRole::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ClubRole*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(id_, allow_in_club_slot_);
    if (has_state()) {
      if (state_ != NULL) state_->::bgs::protocol::RoleState::Clear();
    }
    if (has_privilege()) {
      if (privilege_ != NULL) privilege_->::bgs::protocol::club::v1::ClubPrivilegeSet::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClubRole::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bgs.protocol.club.v1.ClubRole)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_state;
        break;
      }

      // optional .bgs.protocol.RoleState state = 2;
      case 2: {
        if (tag == 18) {
         parse_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_privilege;
        break;
      }

      // optional .bgs.protocol.club.v1.ClubPrivilegeSet privilege = 3;
      case 3: {
        if (tag == 26) {
         parse_privilege:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_privilege()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_always_grant_stream_access;
        break;
      }

      // optional bool always_grant_stream_access = 4;
      case 4: {
        if (tag == 32) {
         parse_always_grant_stream_access:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &always_grant_stream_access_)));
          set_has_always_grant_stream_access();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_allow_in_club_slot;
        break;
      }

      // optional bool allow_in_club_slot = 5;
      case 5: {
        if (tag == 40) {
         parse_allow_in_club_slot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_in_club_slot_)));
          set_has_allow_in_club_slot();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bgs.protocol.club.v1.ClubRole)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bgs.protocol.club.v1.ClubRole)
  return false;
#undef DO_
}

void ClubRole::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bgs.protocol.club.v1.ClubRole)
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional .bgs.protocol.RoleState state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->state(), output);
  }

  // optional .bgs.protocol.club.v1.ClubPrivilegeSet privilege = 3;
  if (has_privilege()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->privilege(), output);
  }

  // optional bool always_grant_stream_access = 4;
  if (has_always_grant_stream_access()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->always_grant_stream_access(), output);
  }

  // optional bool allow_in_club_slot = 5;
  if (has_allow_in_club_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->allow_in_club_slot(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bgs.protocol.club.v1.ClubRole)
}

::google::protobuf::uint8* ClubRole::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.ClubRole)
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional .bgs.protocol.RoleState state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->state(), target);
  }

  // optional .bgs.protocol.club.v1.ClubPrivilegeSet privilege = 3;
  if (has_privilege()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->privilege(), target);
  }

  // optional bool always_grant_stream_access = 4;
  if (has_always_grant_stream_access()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->always_grant_stream_access(), target);
  }

  // optional bool allow_in_club_slot = 5;
  if (has_allow_in_club_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->allow_in_club_slot(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.ClubRole)
  return target;
}

int ClubRole::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional .bgs.protocol.RoleState state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->state());
    }

    // optional .bgs.protocol.club.v1.ClubPrivilegeSet privilege = 3;
    if (has_privilege()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->privilege());
    }

    // optional bool always_grant_stream_access = 4;
    if (has_always_grant_stream_access()) {
      total_size += 1 + 1;
    }

    // optional bool allow_in_club_slot = 5;
    if (has_allow_in_club_slot()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClubRole::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClubRole* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClubRole*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClubRole::MergeFrom(const ClubRole& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_state()) {
      mutable_state()->::bgs::protocol::RoleState::MergeFrom(from.state());
    }
    if (from.has_privilege()) {
      mutable_privilege()->::bgs::protocol::club::v1::ClubPrivilegeSet::MergeFrom(from.privilege());
    }
    if (from.has_always_grant_stream_access()) {
      set_always_grant_stream_access(from.always_grant_stream_access());
    }
    if (from.has_allow_in_club_slot()) {
      set_allow_in_club_slot(from.allow_in_club_slot());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClubRole::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClubRole::CopyFrom(const ClubRole& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClubRole::IsInitialized() const {

  return true;
}

void ClubRole::Swap(ClubRole* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(state_, other->state_);
    std::swap(privilege_, other->privilege_);
    std::swap(always_grant_stream_access_, other->always_grant_stream_access_);
    std::swap(allow_in_club_slot_, other->allow_in_club_slot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClubRole::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClubRole_descriptor_;
  metadata.reflection = ClubRole_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClubRoleSet::kRoleFieldNumber;
const int ClubRoleSet::kDefaultRoleFieldNumber;
const int ClubRoleSet::kAssignmentRespectsRelegationChainFieldNumber;
const int ClubRoleSet::kSubtypeFieldNumber;
#endif  // !_MSC_VER

ClubRoleSet::ClubRoleSet()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.ClubRoleSet)
}

void ClubRoleSet::InitAsDefaultInstance() {
}

ClubRoleSet::ClubRoleSet(const ClubRoleSet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.ClubRoleSet)
}

void ClubRoleSet::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _default_role_cached_byte_size_ = 0;
  assignment_respects_relegation_chain_ = false;
  subtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClubRoleSet::~ClubRoleSet() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.ClubRoleSet)
  SharedDtor();
}

void ClubRoleSet::SharedDtor() {
  if (subtype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete subtype_;
  }
  if (this != default_instance_) {
  }
}

void ClubRoleSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClubRoleSet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClubRoleSet_descriptor_;
}

const ClubRoleSet& ClubRoleSet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_club_5frole_2eproto();
  return *default_instance_;
}

ClubRoleSet* ClubRoleSet::default_instance_ = NULL;

ClubRoleSet* ClubRoleSet::New() const {
  return new ClubRoleSet;
}

void ClubRoleSet::Clear() {
  if (_has_bits_[0 / 32] & 12) {
    assignment_respects_relegation_chain_ = false;
    if (has_subtype()) {
      if (subtype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        subtype_->clear();
      }
    }
  }
  role_.Clear();
  default_role_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClubRoleSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bgs.protocol.club.v1.ClubRoleSet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .bgs.protocol.club.v1.ClubRole role = 1;
      case 1: {
        if (tag == 10) {
         parse_role:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_role()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_role;
        if (input->ExpectTag(42)) goto parse_default_role;
        break;
      }

      // repeated uint32 default_role = 5 [packed = true];
      case 5: {
        if (tag == 42) {
         parse_default_role:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_default_role())));
        } else if (tag == 40) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 42, input, this->mutable_default_role())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_assignment_respects_relegation_chain;
        break;
      }

      // optional bool assignment_respects_relegation_chain = 6;
      case 6: {
        if (tag == 48) {
         parse_assignment_respects_relegation_chain:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &assignment_respects_relegation_chain_)));
          set_has_assignment_respects_relegation_chain();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_subtype;
        break;
      }

      // optional string subtype = 7;
      case 7: {
        if (tag == 58) {
         parse_subtype:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subtype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->subtype().data(), this->subtype().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "subtype");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bgs.protocol.club.v1.ClubRoleSet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bgs.protocol.club.v1.ClubRoleSet)
  return false;
#undef DO_
}

void ClubRoleSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bgs.protocol.club.v1.ClubRoleSet)
  // repeated .bgs.protocol.club.v1.ClubRole role = 1;
  for (int i = 0; i < this->role_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->role(i), output);
  }

  // repeated uint32 default_role = 5 [packed = true];
  if (this->default_role_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_default_role_cached_byte_size_);
  }
  for (int i = 0; i < this->default_role_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->default_role(i), output);
  }

  // optional bool assignment_respects_relegation_chain = 6;
  if (has_assignment_respects_relegation_chain()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->assignment_respects_relegation_chain(), output);
  }

  // optional string subtype = 7;
  if (has_subtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->subtype().data(), this->subtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "subtype");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->subtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bgs.protocol.club.v1.ClubRoleSet)
}

::google::protobuf::uint8* ClubRoleSet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.ClubRoleSet)
  // repeated .bgs.protocol.club.v1.ClubRole role = 1;
  for (int i = 0; i < this->role_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->role(i), target);
  }

  // repeated uint32 default_role = 5 [packed = true];
  if (this->default_role_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _default_role_cached_byte_size_, target);
  }
  for (int i = 0; i < this->default_role_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->default_role(i), target);
  }

  // optional bool assignment_respects_relegation_chain = 6;
  if (has_assignment_respects_relegation_chain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->assignment_respects_relegation_chain(), target);
  }

  // optional string subtype = 7;
  if (has_subtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->subtype().data(), this->subtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "subtype");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->subtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.ClubRoleSet)
  return target;
}

int ClubRoleSet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional bool assignment_respects_relegation_chain = 6;
    if (has_assignment_respects_relegation_chain()) {
      total_size += 1 + 1;
    }

    // optional string subtype = 7;
    if (has_subtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->subtype());
    }

  }
  // repeated .bgs.protocol.club.v1.ClubRole role = 1;
  total_size += 1 * this->role_size();
  for (int i = 0; i < this->role_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->role(i));
  }

  // repeated uint32 default_role = 5 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->default_role_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->default_role(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _default_role_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClubRoleSet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClubRoleSet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClubRoleSet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClubRoleSet::MergeFrom(const ClubRoleSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  role_.MergeFrom(from.role_);
  default_role_.MergeFrom(from.default_role_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_assignment_respects_relegation_chain()) {
      set_assignment_respects_relegation_chain(from.assignment_respects_relegation_chain());
    }
    if (from.has_subtype()) {
      set_subtype(from.subtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClubRoleSet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClubRoleSet::CopyFrom(const ClubRoleSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClubRoleSet::IsInitialized() const {

  return true;
}

void ClubRoleSet::Swap(ClubRoleSet* other) {
  if (other != this) {
    role_.Swap(&other->role_);
    default_role_.Swap(&other->default_role_);
    std::swap(assignment_respects_relegation_chain_, other->assignment_respects_relegation_chain_);
    std::swap(subtype_, other->subtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClubRoleSet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClubRoleSet_descriptor_;
  metadata.reflection = ClubRoleSet_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace club
}  // namespace protocol
}  // namespace bgs

// @@protoc_insertion_point(global_scope)
