// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: club_member_id.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "club_member_id.pb.h"

#include <algorithm>
#include <utility>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
#include "Log.h"
// @@protoc_insertion_point(includes)

namespace bgs {
namespace protocol {
namespace club {
namespace v1 {

namespace {

const ::google::protobuf::Descriptor* MemberId_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MemberId_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_club_5fmember_5fid_2eproto() {
  protobuf_AddDesc_club_5fmember_5fid_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "club_member_id.proto");
  GOOGLE_CHECK(file != NULL);
  MemberId_descriptor_ = file->message_type(0);
  static const int MemberId_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberId, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberId, unique_id_),
  };
  MemberId_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MemberId_descriptor_,
      MemberId::default_instance_,
      MemberId_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberId, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberId, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MemberId));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_club_5fmember_5fid_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MemberId_descriptor_, &MemberId::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_club_5fmember_5fid_2eproto() {
  delete MemberId::default_instance_;
  delete MemberId_reflection_;
}

void protobuf_AddDesc_club_5fmember_5fid_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::bgs::protocol::protobuf_AddDesc_global_5fextensions_2fmessage_5foptions_2eproto();
  ::bgs::protocol::account::v1::protobuf_AddDesc_account_5ftypes_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024club_member_id.proto\022\024bgs.protocol.clu"
    "b.v1\032\'global_extensions/message_options."
    "proto\032\023account_types.proto\"]\n\010MemberId\0226"
    "\n\naccount_id\030\001 \001(\0132\".bgs.protocol.accoun"
    "t.v1.AccountId\022\021\n\tunique_id\030\002 \001(\004:\006\202\371+\002\010"
    "\001B\002H\001", 205);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "club_member_id.proto", &protobuf_RegisterTypes);
  MemberId::default_instance_ = new MemberId();
  MemberId::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_club_5fmember_5fid_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_club_5fmember_5fid_2eproto {
  StaticDescriptorInitializer_club_5fmember_5fid_2eproto() {
    protobuf_AddDesc_club_5fmember_5fid_2eproto();
  }
} static_descriptor_initializer_club_5fmember_5fid_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int MemberId::kAccountIdFieldNumber;
const int MemberId::kUniqueIdFieldNumber;
#endif  // !_MSC_VER

MemberId::MemberId()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.MemberId)
}

void MemberId::InitAsDefaultInstance() {
  account_id_ = const_cast< ::bgs::protocol::account::v1::AccountId*>(&::bgs::protocol::account::v1::AccountId::default_instance());
}

MemberId::MemberId(const MemberId& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.MemberId)
}

void MemberId::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = NULL;
  unique_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MemberId::~MemberId() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.MemberId)
  SharedDtor();
}

void MemberId::SharedDtor() {
  if (this != default_instance_) {
    delete account_id_;
  }
}

void MemberId::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MemberId::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MemberId_descriptor_;
}

const MemberId& MemberId::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_club_5fmember_5fid_2eproto();
  return *default_instance_;
}

MemberId* MemberId::default_instance_ = NULL;

MemberId* MemberId::New() const {
  return new MemberId;
}

void MemberId::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_account_id()) {
      if (account_id_ != NULL) account_id_->::bgs::protocol::account::v1::AccountId::Clear();
    }
    unique_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MemberId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bgs.protocol.club.v1.MemberId)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .bgs.protocol.account.v1.AccountId account_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_account_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_unique_id;
        break;
      }

      // optional uint64 unique_id = 2;
      case 2: {
        if (tag == 16) {
         parse_unique_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &unique_id_)));
          set_has_unique_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bgs.protocol.club.v1.MemberId)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bgs.protocol.club.v1.MemberId)
  return false;
#undef DO_
}

void MemberId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bgs.protocol.club.v1.MemberId)
  // optional .bgs.protocol.account.v1.AccountId account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->account_id(), output);
  }

  // optional uint64 unique_id = 2;
  if (has_unique_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->unique_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bgs.protocol.club.v1.MemberId)
}

::google::protobuf::uint8* MemberId::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.MemberId)
  // optional .bgs.protocol.account.v1.AccountId account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->account_id(), target);
  }

  // optional uint64 unique_id = 2;
  if (has_unique_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->unique_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.MemberId)
  return target;
}

int MemberId::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .bgs.protocol.account.v1.AccountId account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->account_id());
    }

    // optional uint64 unique_id = 2;
    if (has_unique_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->unique_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MemberId::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MemberId* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MemberId*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MemberId::MergeFrom(const MemberId& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      mutable_account_id()->::bgs::protocol::account::v1::AccountId::MergeFrom(from.account_id());
    }
    if (from.has_unique_id()) {
      set_unique_id(from.unique_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MemberId::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemberId::CopyFrom(const MemberId& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemberId::IsInitialized() const {

  if (has_account_id()) {
    if (!this->account_id().IsInitialized()) return false;
  }
  return true;
}

void MemberId::Swap(MemberId* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(unique_id_, other->unique_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MemberId::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MemberId_descriptor_;
  metadata.reflection = MemberId_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace club
}  // namespace protocol
}  // namespace bgs

// @@protoc_insertion_point(global_scope)
