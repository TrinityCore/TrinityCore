// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: club_role.proto

#ifndef PROTOBUF_club_5frole_2eproto__INCLUDED
#define PROTOBUF_club_5frole_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "role_types.pb.h"
#include "Define.h" // for TC_PROTO_API
// @@protoc_insertion_point(includes)

namespace bgs {
namespace protocol {
namespace club {
namespace v1 {

// Internal implementation detail -- do not call these.
void TC_PROTO_API protobuf_AddDesc_club_5frole_2eproto();
void protobuf_AssignDesc_club_5frole_2eproto();
void protobuf_ShutdownFile_club_5frole_2eproto();

class ClubPrivilegeSet;
class ClubRole;
class ClubRoleSet;

// ===================================================================

class TC_PROTO_API ClubPrivilegeSet : public ::google::protobuf::Message {
 public:
  ClubPrivilegeSet();
  virtual ~ClubPrivilegeSet();

  ClubPrivilegeSet(const ClubPrivilegeSet& from);

  inline ClubPrivilegeSet& operator=(const ClubPrivilegeSet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClubPrivilegeSet& default_instance();

  void Swap(ClubPrivilegeSet* other);

  // implements Message ----------------------------------------------

  ClubPrivilegeSet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClubPrivilegeSet& from);
  void MergeFrom(const ClubPrivilegeSet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool can_destroy = 1;
  inline bool has_can_destroy() const;
  inline void clear_can_destroy();
  static const int kCanDestroyFieldNumber = 1;
  inline bool can_destroy() const;
  inline void set_can_destroy(bool value);

  // optional bool can_set_attribute = 10;
  inline bool has_can_set_attribute() const;
  inline void clear_can_set_attribute();
  static const int kCanSetAttributeFieldNumber = 10;
  inline bool can_set_attribute() const;
  inline void set_can_set_attribute(bool value);

  // optional bool can_set_name = 11;
  inline bool has_can_set_name() const;
  inline void clear_can_set_name();
  static const int kCanSetNameFieldNumber = 11;
  inline bool can_set_name() const;
  inline void set_can_set_name(bool value);

  // optional bool can_set_description = 12;
  inline bool has_can_set_description() const;
  inline void clear_can_set_description();
  static const int kCanSetDescriptionFieldNumber = 12;
  inline bool can_set_description() const;
  inline void set_can_set_description(bool value);

  // optional bool can_set_avatar = 13;
  inline bool has_can_set_avatar() const;
  inline void clear_can_set_avatar();
  static const int kCanSetAvatarFieldNumber = 13;
  inline bool can_set_avatar() const;
  inline void set_can_set_avatar(bool value);

  // optional bool can_set_broadcast = 14;
  inline bool has_can_set_broadcast() const;
  inline void clear_can_set_broadcast();
  static const int kCanSetBroadcastFieldNumber = 14;
  inline bool can_set_broadcast() const;
  inline void set_can_set_broadcast(bool value);

  // optional bool can_set_privacy_level = 15;
  inline bool has_can_set_privacy_level() const;
  inline void clear_can_set_privacy_level();
  static const int kCanSetPrivacyLevelFieldNumber = 15;
  inline bool can_set_privacy_level() const;
  inline void set_can_set_privacy_level(bool value);

  // optional bool can_add_member = 29;
  inline bool has_can_add_member() const;
  inline void clear_can_add_member();
  static const int kCanAddMemberFieldNumber = 29;
  inline bool can_add_member() const;
  inline void set_can_add_member(bool value);

  // optional bool can_kick_member = 30;
  inline bool has_can_kick_member() const;
  inline void clear_can_kick_member();
  static const int kCanKickMemberFieldNumber = 30;
  inline bool can_kick_member() const;
  inline void set_can_kick_member(bool value);

  // optional bool can_set_own_member_attribute = 31;
  inline bool has_can_set_own_member_attribute() const;
  inline void clear_can_set_own_member_attribute();
  static const int kCanSetOwnMemberAttributeFieldNumber = 31;
  inline bool can_set_own_member_attribute() const;
  inline void set_can_set_own_member_attribute(bool value);

  // optional bool can_set_other_member_attribute = 32;
  inline bool has_can_set_other_member_attribute() const;
  inline void clear_can_set_other_member_attribute();
  static const int kCanSetOtherMemberAttributeFieldNumber = 32;
  inline bool can_set_other_member_attribute() const;
  inline void set_can_set_other_member_attribute(bool value);

  // optional bool can_set_own_voice_state = 33;
  inline bool has_can_set_own_voice_state() const;
  inline void clear_can_set_own_voice_state();
  static const int kCanSetOwnVoiceStateFieldNumber = 33;
  inline bool can_set_own_voice_state() const;
  inline void set_can_set_own_voice_state(bool value);

  // optional bool can_set_own_presence_level = 34;
  inline bool has_can_set_own_presence_level() const;
  inline void clear_can_set_own_presence_level();
  static const int kCanSetOwnPresenceLevelFieldNumber = 34;
  inline bool can_set_own_presence_level() const;
  inline void set_can_set_own_presence_level(bool value);

  // optional bool can_set_own_whisper_level = 35;
  inline bool has_can_set_own_whisper_level() const;
  inline void clear_can_set_own_whisper_level();
  static const int kCanSetOwnWhisperLevelFieldNumber = 35;
  inline bool can_set_own_whisper_level() const;
  inline void set_can_set_own_whisper_level(bool value);

  // optional bool can_set_own_member_note = 36;
  inline bool has_can_set_own_member_note() const;
  inline void clear_can_set_own_member_note();
  static const int kCanSetOwnMemberNoteFieldNumber = 36;
  inline bool can_set_own_member_note() const;
  inline void set_can_set_own_member_note(bool value);

  // optional bool can_set_other_member_note = 37;
  inline bool has_can_set_other_member_note() const;
  inline void clear_can_set_other_member_note();
  static const int kCanSetOtherMemberNoteFieldNumber = 37;
  inline bool can_set_other_member_note() const;
  inline void set_can_set_other_member_note(bool value);

  // optional bool can_use_voice = 50;
  inline bool has_can_use_voice() const;
  inline void clear_can_use_voice();
  static const int kCanUseVoiceFieldNumber = 50;
  inline bool can_use_voice() const;
  inline void set_can_use_voice(bool value);

  // optional bool can_voice_mute_member_for_all = 51;
  inline bool has_can_voice_mute_member_for_all() const;
  inline void clear_can_voice_mute_member_for_all();
  static const int kCanVoiceMuteMemberForAllFieldNumber = 51;
  inline bool can_voice_mute_member_for_all() const;
  inline void set_can_voice_mute_member_for_all(bool value);

  // optional bool can_get_invitation = 70;
  inline bool has_can_get_invitation() const;
  inline void clear_can_get_invitation();
  static const int kCanGetInvitationFieldNumber = 70;
  inline bool can_get_invitation() const;
  inline void set_can_get_invitation(bool value);

  // optional bool can_send_invitation = 71;
  inline bool has_can_send_invitation() const;
  inline void clear_can_send_invitation();
  static const int kCanSendInvitationFieldNumber = 71;
  inline bool can_send_invitation() const;
  inline void set_can_send_invitation(bool value);

  // optional bool can_send_guest_invitation = 72;
  inline bool has_can_send_guest_invitation() const;
  inline void clear_can_send_guest_invitation();
  static const int kCanSendGuestInvitationFieldNumber = 72;
  inline bool can_send_guest_invitation() const;
  inline void set_can_send_guest_invitation(bool value);

  // optional bool can_revoke_own_invitation = 73;
  inline bool has_can_revoke_own_invitation() const;
  inline void clear_can_revoke_own_invitation();
  static const int kCanRevokeOwnInvitationFieldNumber = 73;
  inline bool can_revoke_own_invitation() const;
  inline void set_can_revoke_own_invitation(bool value);

  // optional bool can_revoke_other_invitation = 74;
  inline bool has_can_revoke_other_invitation() const;
  inline void clear_can_revoke_other_invitation();
  static const int kCanRevokeOtherInvitationFieldNumber = 74;
  inline bool can_revoke_other_invitation() const;
  inline void set_can_revoke_other_invitation(bool value);

  // optional bool can_get_suggestion = 90;
  inline bool has_can_get_suggestion() const;
  inline void clear_can_get_suggestion();
  static const int kCanGetSuggestionFieldNumber = 90;
  inline bool can_get_suggestion() const;
  inline void set_can_get_suggestion(bool value);

  // optional bool can_suggest_member = 91;
  inline bool has_can_suggest_member() const;
  inline void clear_can_suggest_member();
  static const int kCanSuggestMemberFieldNumber = 91;
  inline bool can_suggest_member() const;
  inline void set_can_suggest_member(bool value);

  // optional bool can_approve_member = 92;
  inline bool has_can_approve_member() const;
  inline void clear_can_approve_member();
  static const int kCanApproveMemberFieldNumber = 92;
  inline bool can_approve_member() const;
  inline void set_can_approve_member(bool value);

  // optional bool can_get_ticket = 110;
  inline bool has_can_get_ticket() const;
  inline void clear_can_get_ticket();
  static const int kCanGetTicketFieldNumber = 110;
  inline bool can_get_ticket() const;
  inline void set_can_get_ticket(bool value);

  // optional bool can_create_ticket = 111;
  inline bool has_can_create_ticket() const;
  inline void clear_can_create_ticket();
  static const int kCanCreateTicketFieldNumber = 111;
  inline bool can_create_ticket() const;
  inline void set_can_create_ticket(bool value);

  // optional bool can_destroy_ticket = 112;
  inline bool has_can_destroy_ticket() const;
  inline void clear_can_destroy_ticket();
  static const int kCanDestroyTicketFieldNumber = 112;
  inline bool can_destroy_ticket() const;
  inline void set_can_destroy_ticket(bool value);

  // optional bool can_get_ban = 130;
  inline bool has_can_get_ban() const;
  inline void clear_can_get_ban();
  static const int kCanGetBanFieldNumber = 130;
  inline bool can_get_ban() const;
  inline void set_can_get_ban(bool value);

  // optional bool can_add_ban = 131;
  inline bool has_can_add_ban() const;
  inline void clear_can_add_ban();
  static const int kCanAddBanFieldNumber = 131;
  inline bool can_add_ban() const;
  inline void set_can_add_ban(bool value);

  // optional bool can_remove_ban = 132;
  inline bool has_can_remove_ban() const;
  inline void clear_can_remove_ban();
  static const int kCanRemoveBanFieldNumber = 132;
  inline bool can_remove_ban() const;
  inline void set_can_remove_ban(bool value);

  // optional bool can_create_stream = 140;
  inline bool has_can_create_stream() const;
  inline void clear_can_create_stream();
  static const int kCanCreateStreamFieldNumber = 140;
  inline bool can_create_stream() const;
  inline void set_can_create_stream(bool value);

  // optional bool can_destroy_stream = 141;
  inline bool has_can_destroy_stream() const;
  inline void clear_can_destroy_stream();
  static const int kCanDestroyStreamFieldNumber = 141;
  inline bool can_destroy_stream() const;
  inline void set_can_destroy_stream(bool value);

  // optional bool can_set_stream_position = 142;
  inline bool has_can_set_stream_position() const;
  inline void clear_can_set_stream_position();
  static const int kCanSetStreamPositionFieldNumber = 142;
  inline bool can_set_stream_position() const;
  inline void set_can_set_stream_position(bool value);

  // optional bool can_set_stream_attribute = 143;
  inline bool has_can_set_stream_attribute() const;
  inline void clear_can_set_stream_attribute();
  static const int kCanSetStreamAttributeFieldNumber = 143;
  inline bool can_set_stream_attribute() const;
  inline void set_can_set_stream_attribute(bool value);

  // optional bool can_set_stream_name = 144;
  inline bool has_can_set_stream_name() const;
  inline void clear_can_set_stream_name();
  static const int kCanSetStreamNameFieldNumber = 144;
  inline bool can_set_stream_name() const;
  inline void set_can_set_stream_name(bool value);

  // optional bool can_set_stream_subject = 145;
  inline bool has_can_set_stream_subject() const;
  inline void clear_can_set_stream_subject();
  static const int kCanSetStreamSubjectFieldNumber = 145;
  inline bool can_set_stream_subject() const;
  inline void set_can_set_stream_subject(bool value);

  // optional bool can_set_stream_access = 146;
  inline bool has_can_set_stream_access() const;
  inline void clear_can_set_stream_access();
  static const int kCanSetStreamAccessFieldNumber = 146;
  inline bool can_set_stream_access() const;
  inline void set_can_set_stream_access(bool value);

  // optional bool can_set_stream_voice_level = 147;
  inline bool has_can_set_stream_voice_level() const;
  inline void clear_can_set_stream_voice_level();
  static const int kCanSetStreamVoiceLevelFieldNumber = 147;
  inline bool can_set_stream_voice_level() const;
  inline void set_can_set_stream_voice_level(bool value);

  // optional bool can_create_message = 180;
  inline bool has_can_create_message() const;
  inline void clear_can_create_message();
  static const int kCanCreateMessageFieldNumber = 180;
  inline bool can_create_message() const;
  inline void set_can_create_message(bool value);

  // optional bool can_destroy_own_message = 181;
  inline bool has_can_destroy_own_message() const;
  inline void clear_can_destroy_own_message();
  static const int kCanDestroyOwnMessageFieldNumber = 181;
  inline bool can_destroy_own_message() const;
  inline void set_can_destroy_own_message(bool value);

  // optional bool can_destroy_other_message = 182;
  inline bool has_can_destroy_other_message() const;
  inline void clear_can_destroy_other_message();
  static const int kCanDestroyOtherMessageFieldNumber = 182;
  inline bool can_destroy_other_message() const;
  inline void set_can_destroy_other_message(bool value);

  // optional bool can_edit_own_message = 183;
  inline bool has_can_edit_own_message() const;
  inline void clear_can_edit_own_message();
  static const int kCanEditOwnMessageFieldNumber = 183;
  inline bool can_edit_own_message() const;
  inline void set_can_edit_own_message(bool value);

  // optional bool can_pin_message = 184;
  inline bool has_can_pin_message() const;
  inline void clear_can_pin_message();
  static const int kCanPinMessageFieldNumber = 184;
  inline bool can_pin_message() const;
  inline void set_can_pin_message(bool value);

  // optional bool can_mention_all = 185;
  inline bool has_can_mention_all() const;
  inline void clear_can_mention_all();
  static const int kCanMentionAllFieldNumber = 185;
  inline bool can_mention_all() const;
  inline void set_can_mention_all(bool value);

  // optional bool can_mention_here = 186;
  inline bool has_can_mention_here() const;
  inline void clear_can_mention_here();
  static const int kCanMentionHereFieldNumber = 186;
  inline bool can_mention_here() const;
  inline void set_can_mention_here(bool value);

  // optional bool can_mention_member = 187;
  inline bool has_can_mention_member() const;
  inline void clear_can_mention_member();
  static const int kCanMentionMemberFieldNumber = 187;
  inline bool can_mention_member() const;
  inline void set_can_mention_member(bool value);

  // optional bool can_mention_role = 188;
  inline bool has_can_mention_role() const;
  inline void clear_can_mention_role();
  static const int kCanMentionRoleFieldNumber = 188;
  inline bool can_mention_role() const;
  inline void set_can_mention_role(bool value);

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.ClubPrivilegeSet)
 private:
  inline void set_has_can_destroy();
  inline void clear_has_can_destroy();
  inline void set_has_can_set_attribute();
  inline void clear_has_can_set_attribute();
  inline void set_has_can_set_name();
  inline void clear_has_can_set_name();
  inline void set_has_can_set_description();
  inline void clear_has_can_set_description();
  inline void set_has_can_set_avatar();
  inline void clear_has_can_set_avatar();
  inline void set_has_can_set_broadcast();
  inline void clear_has_can_set_broadcast();
  inline void set_has_can_set_privacy_level();
  inline void clear_has_can_set_privacy_level();
  inline void set_has_can_add_member();
  inline void clear_has_can_add_member();
  inline void set_has_can_kick_member();
  inline void clear_has_can_kick_member();
  inline void set_has_can_set_own_member_attribute();
  inline void clear_has_can_set_own_member_attribute();
  inline void set_has_can_set_other_member_attribute();
  inline void clear_has_can_set_other_member_attribute();
  inline void set_has_can_set_own_voice_state();
  inline void clear_has_can_set_own_voice_state();
  inline void set_has_can_set_own_presence_level();
  inline void clear_has_can_set_own_presence_level();
  inline void set_has_can_set_own_whisper_level();
  inline void clear_has_can_set_own_whisper_level();
  inline void set_has_can_set_own_member_note();
  inline void clear_has_can_set_own_member_note();
  inline void set_has_can_set_other_member_note();
  inline void clear_has_can_set_other_member_note();
  inline void set_has_can_use_voice();
  inline void clear_has_can_use_voice();
  inline void set_has_can_voice_mute_member_for_all();
  inline void clear_has_can_voice_mute_member_for_all();
  inline void set_has_can_get_invitation();
  inline void clear_has_can_get_invitation();
  inline void set_has_can_send_invitation();
  inline void clear_has_can_send_invitation();
  inline void set_has_can_send_guest_invitation();
  inline void clear_has_can_send_guest_invitation();
  inline void set_has_can_revoke_own_invitation();
  inline void clear_has_can_revoke_own_invitation();
  inline void set_has_can_revoke_other_invitation();
  inline void clear_has_can_revoke_other_invitation();
  inline void set_has_can_get_suggestion();
  inline void clear_has_can_get_suggestion();
  inline void set_has_can_suggest_member();
  inline void clear_has_can_suggest_member();
  inline void set_has_can_approve_member();
  inline void clear_has_can_approve_member();
  inline void set_has_can_get_ticket();
  inline void clear_has_can_get_ticket();
  inline void set_has_can_create_ticket();
  inline void clear_has_can_create_ticket();
  inline void set_has_can_destroy_ticket();
  inline void clear_has_can_destroy_ticket();
  inline void set_has_can_get_ban();
  inline void clear_has_can_get_ban();
  inline void set_has_can_add_ban();
  inline void clear_has_can_add_ban();
  inline void set_has_can_remove_ban();
  inline void clear_has_can_remove_ban();
  inline void set_has_can_create_stream();
  inline void clear_has_can_create_stream();
  inline void set_has_can_destroy_stream();
  inline void clear_has_can_destroy_stream();
  inline void set_has_can_set_stream_position();
  inline void clear_has_can_set_stream_position();
  inline void set_has_can_set_stream_attribute();
  inline void clear_has_can_set_stream_attribute();
  inline void set_has_can_set_stream_name();
  inline void clear_has_can_set_stream_name();
  inline void set_has_can_set_stream_subject();
  inline void clear_has_can_set_stream_subject();
  inline void set_has_can_set_stream_access();
  inline void clear_has_can_set_stream_access();
  inline void set_has_can_set_stream_voice_level();
  inline void clear_has_can_set_stream_voice_level();
  inline void set_has_can_create_message();
  inline void clear_has_can_create_message();
  inline void set_has_can_destroy_own_message();
  inline void clear_has_can_destroy_own_message();
  inline void set_has_can_destroy_other_message();
  inline void clear_has_can_destroy_other_message();
  inline void set_has_can_edit_own_message();
  inline void clear_has_can_edit_own_message();
  inline void set_has_can_pin_message();
  inline void clear_has_can_pin_message();
  inline void set_has_can_mention_all();
  inline void clear_has_can_mention_all();
  inline void set_has_can_mention_here();
  inline void clear_has_can_mention_here();
  inline void set_has_can_mention_member();
  inline void clear_has_can_mention_member();
  inline void set_has_can_mention_role();
  inline void clear_has_can_mention_role();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[2];
  bool can_destroy_;
  bool can_set_attribute_;
  bool can_set_name_;
  bool can_set_description_;
  bool can_set_avatar_;
  bool can_set_broadcast_;
  bool can_set_privacy_level_;
  bool can_add_member_;
  bool can_kick_member_;
  bool can_set_own_member_attribute_;
  bool can_set_other_member_attribute_;
  bool can_set_own_voice_state_;
  bool can_set_own_presence_level_;
  bool can_set_own_whisper_level_;
  bool can_set_own_member_note_;
  bool can_set_other_member_note_;
  bool can_use_voice_;
  bool can_voice_mute_member_for_all_;
  bool can_get_invitation_;
  bool can_send_invitation_;
  bool can_send_guest_invitation_;
  bool can_revoke_own_invitation_;
  bool can_revoke_other_invitation_;
  bool can_get_suggestion_;
  bool can_suggest_member_;
  bool can_approve_member_;
  bool can_get_ticket_;
  bool can_create_ticket_;
  bool can_destroy_ticket_;
  bool can_get_ban_;
  bool can_add_ban_;
  bool can_remove_ban_;
  bool can_create_stream_;
  bool can_destroy_stream_;
  bool can_set_stream_position_;
  bool can_set_stream_attribute_;
  bool can_set_stream_name_;
  bool can_set_stream_subject_;
  bool can_set_stream_access_;
  bool can_set_stream_voice_level_;
  bool can_create_message_;
  bool can_destroy_own_message_;
  bool can_destroy_other_message_;
  bool can_edit_own_message_;
  bool can_pin_message_;
  bool can_mention_all_;
  bool can_mention_here_;
  bool can_mention_member_;
  bool can_mention_role_;
  mutable int _cached_size_;
  friend void TC_PROTO_API protobuf_AddDesc_club_5frole_2eproto();
  friend void protobuf_AssignDesc_club_5frole_2eproto();
  friend void protobuf_ShutdownFile_club_5frole_2eproto();

  void InitAsDefaultInstance();
  static ClubPrivilegeSet* default_instance_;
};
// -------------------------------------------------------------------

class TC_PROTO_API ClubRole : public ::google::protobuf::Message {
 public:
  ClubRole();
  virtual ~ClubRole();

  ClubRole(const ClubRole& from);

  inline ClubRole& operator=(const ClubRole& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClubRole& default_instance();

  void Swap(ClubRole* other);

  // implements Message ----------------------------------------------

  ClubRole* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClubRole& from);
  void MergeFrom(const ClubRole& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional .bgs.protocol.RoleState state = 2;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 2;
  inline const ::bgs::protocol::RoleState& state() const;
  inline ::bgs::protocol::RoleState* mutable_state();
  inline ::bgs::protocol::RoleState* release_state();
  inline void set_allocated_state(::bgs::protocol::RoleState* state);

  // optional .bgs.protocol.club.v1.ClubPrivilegeSet privilege = 3;
  inline bool has_privilege() const;
  inline void clear_privilege();
  static const int kPrivilegeFieldNumber = 3;
  inline const ::bgs::protocol::club::v1::ClubPrivilegeSet& privilege() const;
  inline ::bgs::protocol::club::v1::ClubPrivilegeSet* mutable_privilege();
  inline ::bgs::protocol::club::v1::ClubPrivilegeSet* release_privilege();
  inline void set_allocated_privilege(::bgs::protocol::club::v1::ClubPrivilegeSet* privilege);

  // optional bool always_grant_stream_access = 4;
  inline bool has_always_grant_stream_access() const;
  inline void clear_always_grant_stream_access();
  static const int kAlwaysGrantStreamAccessFieldNumber = 4;
  inline bool always_grant_stream_access() const;
  inline void set_always_grant_stream_access(bool value);

  // optional bool allow_in_club_slot = 5;
  inline bool has_allow_in_club_slot() const;
  inline void clear_allow_in_club_slot();
  static const int kAllowInClubSlotFieldNumber = 5;
  inline bool allow_in_club_slot() const;
  inline void set_allow_in_club_slot(bool value);

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.ClubRole)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_privilege();
  inline void clear_has_privilege();
  inline void set_has_always_grant_stream_access();
  inline void clear_has_always_grant_stream_access();
  inline void set_has_allow_in_club_slot();
  inline void clear_has_allow_in_club_slot();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::bgs::protocol::RoleState* state_;
  ::bgs::protocol::club::v1::ClubPrivilegeSet* privilege_;
  ::google::protobuf::uint32 id_;
  bool always_grant_stream_access_;
  bool allow_in_club_slot_;
  friend void TC_PROTO_API protobuf_AddDesc_club_5frole_2eproto();
  friend void protobuf_AssignDesc_club_5frole_2eproto();
  friend void protobuf_ShutdownFile_club_5frole_2eproto();

  void InitAsDefaultInstance();
  static ClubRole* default_instance_;
};
// -------------------------------------------------------------------

class TC_PROTO_API ClubRoleSet : public ::google::protobuf::Message {
 public:
  ClubRoleSet();
  virtual ~ClubRoleSet();

  ClubRoleSet(const ClubRoleSet& from);

  inline ClubRoleSet& operator=(const ClubRoleSet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClubRoleSet& default_instance();

  void Swap(ClubRoleSet* other);

  // implements Message ----------------------------------------------

  ClubRoleSet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClubRoleSet& from);
  void MergeFrom(const ClubRoleSet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .bgs.protocol.club.v1.ClubRole role = 1;
  inline int role_size() const;
  inline void clear_role();
  static const int kRoleFieldNumber = 1;
  inline const ::bgs::protocol::club::v1::ClubRole& role(int index) const;
  inline ::bgs::protocol::club::v1::ClubRole* mutable_role(int index);
  inline ::bgs::protocol::club::v1::ClubRole* add_role();
  inline const ::google::protobuf::RepeatedPtrField< ::bgs::protocol::club::v1::ClubRole >&
      role() const;
  inline ::google::protobuf::RepeatedPtrField< ::bgs::protocol::club::v1::ClubRole >*
      mutable_role();

  // repeated uint32 default_role = 5 [packed = true];
  inline int default_role_size() const;
  inline void clear_default_role();
  static const int kDefaultRoleFieldNumber = 5;
  inline ::google::protobuf::uint32 default_role(int index) const;
  inline void set_default_role(int index, ::google::protobuf::uint32 value);
  inline void add_default_role(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      default_role() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_default_role();

  // optional bool assignment_respects_relegation_chain = 6;
  inline bool has_assignment_respects_relegation_chain() const;
  inline void clear_assignment_respects_relegation_chain();
  static const int kAssignmentRespectsRelegationChainFieldNumber = 6;
  inline bool assignment_respects_relegation_chain() const;
  inline void set_assignment_respects_relegation_chain(bool value);

  // optional string subtype = 7;
  inline bool has_subtype() const;
  inline void clear_subtype();
  static const int kSubtypeFieldNumber = 7;
  inline const ::std::string& subtype() const;
  inline void set_subtype(const ::std::string& value);
  inline void set_subtype(const char* value);
  inline void set_subtype(const char* value, size_t size);
  inline ::std::string* mutable_subtype();
  inline ::std::string* release_subtype();
  inline void set_allocated_subtype(::std::string* subtype);

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.ClubRoleSet)
 private:
  inline void set_has_assignment_respects_relegation_chain();
  inline void clear_has_assignment_respects_relegation_chain();
  inline void set_has_subtype();
  inline void clear_has_subtype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::bgs::protocol::club::v1::ClubRole > role_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > default_role_;
  mutable int _default_role_cached_byte_size_;
  ::std::string* subtype_;
  bool assignment_respects_relegation_chain_;
  friend void TC_PROTO_API protobuf_AddDesc_club_5frole_2eproto();
  friend void protobuf_AssignDesc_club_5frole_2eproto();
  friend void protobuf_ShutdownFile_club_5frole_2eproto();

  void InitAsDefaultInstance();
  static ClubRoleSet* default_instance_;
};
// ===================================================================

// ===================================================================

// ===================================================================

// ClubPrivilegeSet

// optional bool can_destroy = 1;
inline bool ClubPrivilegeSet::has_can_destroy() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClubPrivilegeSet::set_has_can_destroy() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClubPrivilegeSet::clear_has_can_destroy() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClubPrivilegeSet::clear_can_destroy() {
  can_destroy_ = false;
  clear_has_can_destroy();
}
inline bool ClubPrivilegeSet::can_destroy() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubPrivilegeSet.can_destroy)
  return can_destroy_;
}
inline void ClubPrivilegeSet::set_can_destroy(bool value) {
  set_has_can_destroy();
  can_destroy_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubPrivilegeSet.can_destroy)
}

// optional bool can_set_attribute = 10;
inline bool ClubPrivilegeSet::has_can_set_attribute() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClubPrivilegeSet::set_has_can_set_attribute() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ClubPrivilegeSet::clear_has_can_set_attribute() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ClubPrivilegeSet::clear_can_set_attribute() {
  can_set_attribute_ = false;
  clear_has_can_set_attribute();
}
inline bool ClubPrivilegeSet::can_set_attribute() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubPrivilegeSet.can_set_attribute)
  return can_set_attribute_;
}
inline void ClubPrivilegeSet::set_can_set_attribute(bool value) {
  set_has_can_set_attribute();
  can_set_attribute_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubPrivilegeSet.can_set_attribute)
}

// optional bool can_set_name = 11;
inline bool ClubPrivilegeSet::has_can_set_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ClubPrivilegeSet::set_has_can_set_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ClubPrivilegeSet::clear_has_can_set_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ClubPrivilegeSet::clear_can_set_name() {
  can_set_name_ = false;
  clear_has_can_set_name();
}
inline bool ClubPrivilegeSet::can_set_name() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubPrivilegeSet.can_set_name)
  return can_set_name_;
}
inline void ClubPrivilegeSet::set_can_set_name(bool value) {
  set_has_can_set_name();
  can_set_name_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubPrivilegeSet.can_set_name)
}

// optional bool can_set_description = 12;
inline bool ClubPrivilegeSet::has_can_set_description() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ClubPrivilegeSet::set_has_can_set_description() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ClubPrivilegeSet::clear_has_can_set_description() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ClubPrivilegeSet::clear_can_set_description() {
  can_set_description_ = false;
  clear_has_can_set_description();
}
inline bool ClubPrivilegeSet::can_set_description() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubPrivilegeSet.can_set_description)
  return can_set_description_;
}
inline void ClubPrivilegeSet::set_can_set_description(bool value) {
  set_has_can_set_description();
  can_set_description_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubPrivilegeSet.can_set_description)
}

// optional bool can_set_avatar = 13;
inline bool ClubPrivilegeSet::has_can_set_avatar() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ClubPrivilegeSet::set_has_can_set_avatar() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ClubPrivilegeSet::clear_has_can_set_avatar() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ClubPrivilegeSet::clear_can_set_avatar() {
  can_set_avatar_ = false;
  clear_has_can_set_avatar();
}
inline bool ClubPrivilegeSet::can_set_avatar() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubPrivilegeSet.can_set_avatar)
  return can_set_avatar_;
}
inline void ClubPrivilegeSet::set_can_set_avatar(bool value) {
  set_has_can_set_avatar();
  can_set_avatar_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubPrivilegeSet.can_set_avatar)
}

// optional bool can_set_broadcast = 14;
inline bool ClubPrivilegeSet::has_can_set_broadcast() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ClubPrivilegeSet::set_has_can_set_broadcast() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ClubPrivilegeSet::clear_has_can_set_broadcast() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ClubPrivilegeSet::clear_can_set_broadcast() {
  can_set_broadcast_ = false;
  clear_has_can_set_broadcast();
}
inline bool ClubPrivilegeSet::can_set_broadcast() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubPrivilegeSet.can_set_broadcast)
  return can_set_broadcast_;
}
inline void ClubPrivilegeSet::set_can_set_broadcast(bool value) {
  set_has_can_set_broadcast();
  can_set_broadcast_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubPrivilegeSet.can_set_broadcast)
}

// optional bool can_set_privacy_level = 15;
inline bool ClubPrivilegeSet::has_can_set_privacy_level() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ClubPrivilegeSet::set_has_can_set_privacy_level() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ClubPrivilegeSet::clear_has_can_set_privacy_level() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ClubPrivilegeSet::clear_can_set_privacy_level() {
  can_set_privacy_level_ = false;
  clear_has_can_set_privacy_level();
}
inline bool ClubPrivilegeSet::can_set_privacy_level() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubPrivilegeSet.can_set_privacy_level)
  return can_set_privacy_level_;
}
inline void ClubPrivilegeSet::set_can_set_privacy_level(bool value) {
  set_has_can_set_privacy_level();
  can_set_privacy_level_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubPrivilegeSet.can_set_privacy_level)
}

// optional bool can_add_member = 29;
inline bool ClubPrivilegeSet::has_can_add_member() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ClubPrivilegeSet::set_has_can_add_member() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ClubPrivilegeSet::clear_has_can_add_member() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ClubPrivilegeSet::clear_can_add_member() {
  can_add_member_ = false;
  clear_has_can_add_member();
}
inline bool ClubPrivilegeSet::can_add_member() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubPrivilegeSet.can_add_member)
  return can_add_member_;
}
inline void ClubPrivilegeSet::set_can_add_member(bool value) {
  set_has_can_add_member();
  can_add_member_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubPrivilegeSet.can_add_member)
}

// optional bool can_kick_member = 30;
inline bool ClubPrivilegeSet::has_can_kick_member() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ClubPrivilegeSet::set_has_can_kick_member() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ClubPrivilegeSet::clear_has_can_kick_member() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ClubPrivilegeSet::clear_can_kick_member() {
  can_kick_member_ = false;
  clear_has_can_kick_member();
}
inline bool ClubPrivilegeSet::can_kick_member() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubPrivilegeSet.can_kick_member)
  return can_kick_member_;
}
inline void ClubPrivilegeSet::set_can_kick_member(bool value) {
  set_has_can_kick_member();
  can_kick_member_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubPrivilegeSet.can_kick_member)
}

// optional bool can_set_own_member_attribute = 31;
inline bool ClubPrivilegeSet::has_can_set_own_member_attribute() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ClubPrivilegeSet::set_has_can_set_own_member_attribute() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ClubPrivilegeSet::clear_has_can_set_own_member_attribute() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ClubPrivilegeSet::clear_can_set_own_member_attribute() {
  can_set_own_member_attribute_ = false;
  clear_has_can_set_own_member_attribute();
}
inline bool ClubPrivilegeSet::can_set_own_member_attribute() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubPrivilegeSet.can_set_own_member_attribute)
  return can_set_own_member_attribute_;
}
inline void ClubPrivilegeSet::set_can_set_own_member_attribute(bool value) {
  set_has_can_set_own_member_attribute();
  can_set_own_member_attribute_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubPrivilegeSet.can_set_own_member_attribute)
}

// optional bool can_set_other_member_attribute = 32;
inline bool ClubPrivilegeSet::has_can_set_other_member_attribute() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ClubPrivilegeSet::set_has_can_set_other_member_attribute() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ClubPrivilegeSet::clear_has_can_set_other_member_attribute() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ClubPrivilegeSet::clear_can_set_other_member_attribute() {
  can_set_other_member_attribute_ = false;
  clear_has_can_set_other_member_attribute();
}
inline bool ClubPrivilegeSet::can_set_other_member_attribute() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubPrivilegeSet.can_set_other_member_attribute)
  return can_set_other_member_attribute_;
}
inline void ClubPrivilegeSet::set_can_set_other_member_attribute(bool value) {
  set_has_can_set_other_member_attribute();
  can_set_other_member_attribute_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubPrivilegeSet.can_set_other_member_attribute)
}

// optional bool can_set_own_voice_state = 33;
inline bool ClubPrivilegeSet::has_can_set_own_voice_state() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ClubPrivilegeSet::set_has_can_set_own_voice_state() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ClubPrivilegeSet::clear_has_can_set_own_voice_state() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ClubPrivilegeSet::clear_can_set_own_voice_state() {
  can_set_own_voice_state_ = false;
  clear_has_can_set_own_voice_state();
}
inline bool ClubPrivilegeSet::can_set_own_voice_state() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubPrivilegeSet.can_set_own_voice_state)
  return can_set_own_voice_state_;
}
inline void ClubPrivilegeSet::set_can_set_own_voice_state(bool value) {
  set_has_can_set_own_voice_state();
  can_set_own_voice_state_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubPrivilegeSet.can_set_own_voice_state)
}

// optional bool can_set_own_presence_level = 34;
inline bool ClubPrivilegeSet::has_can_set_own_presence_level() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ClubPrivilegeSet::set_has_can_set_own_presence_level() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ClubPrivilegeSet::clear_has_can_set_own_presence_level() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ClubPrivilegeSet::clear_can_set_own_presence_level() {
  can_set_own_presence_level_ = false;
  clear_has_can_set_own_presence_level();
}
inline bool ClubPrivilegeSet::can_set_own_presence_level() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubPrivilegeSet.can_set_own_presence_level)
  return can_set_own_presence_level_;
}
inline void ClubPrivilegeSet::set_can_set_own_presence_level(bool value) {
  set_has_can_set_own_presence_level();
  can_set_own_presence_level_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubPrivilegeSet.can_set_own_presence_level)
}

// optional bool can_set_own_whisper_level = 35;
inline bool ClubPrivilegeSet::has_can_set_own_whisper_level() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ClubPrivilegeSet::set_has_can_set_own_whisper_level() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ClubPrivilegeSet::clear_has_can_set_own_whisper_level() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ClubPrivilegeSet::clear_can_set_own_whisper_level() {
  can_set_own_whisper_level_ = false;
  clear_has_can_set_own_whisper_level();
}
inline bool ClubPrivilegeSet::can_set_own_whisper_level() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubPrivilegeSet.can_set_own_whisper_level)
  return can_set_own_whisper_level_;
}
inline void ClubPrivilegeSet::set_can_set_own_whisper_level(bool value) {
  set_has_can_set_own_whisper_level();
  can_set_own_whisper_level_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubPrivilegeSet.can_set_own_whisper_level)
}

// optional bool can_set_own_member_note = 36;
inline bool ClubPrivilegeSet::has_can_set_own_member_note() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ClubPrivilegeSet::set_has_can_set_own_member_note() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ClubPrivilegeSet::clear_has_can_set_own_member_note() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ClubPrivilegeSet::clear_can_set_own_member_note() {
  can_set_own_member_note_ = false;
  clear_has_can_set_own_member_note();
}
inline bool ClubPrivilegeSet::can_set_own_member_note() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubPrivilegeSet.can_set_own_member_note)
  return can_set_own_member_note_;
}
inline void ClubPrivilegeSet::set_can_set_own_member_note(bool value) {
  set_has_can_set_own_member_note();
  can_set_own_member_note_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubPrivilegeSet.can_set_own_member_note)
}

// optional bool can_set_other_member_note = 37;
inline bool ClubPrivilegeSet::has_can_set_other_member_note() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ClubPrivilegeSet::set_has_can_set_other_member_note() {
  _has_bits_[0] |= 0x00008000u;
}
inline void ClubPrivilegeSet::clear_has_can_set_other_member_note() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void ClubPrivilegeSet::clear_can_set_other_member_note() {
  can_set_other_member_note_ = false;
  clear_has_can_set_other_member_note();
}
inline bool ClubPrivilegeSet::can_set_other_member_note() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubPrivilegeSet.can_set_other_member_note)
  return can_set_other_member_note_;
}
inline void ClubPrivilegeSet::set_can_set_other_member_note(bool value) {
  set_has_can_set_other_member_note();
  can_set_other_member_note_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubPrivilegeSet.can_set_other_member_note)
}

// optional bool can_use_voice = 50;
inline bool ClubPrivilegeSet::has_can_use_voice() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ClubPrivilegeSet::set_has_can_use_voice() {
  _has_bits_[0] |= 0x00010000u;
}
inline void ClubPrivilegeSet::clear_has_can_use_voice() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void ClubPrivilegeSet::clear_can_use_voice() {
  can_use_voice_ = false;
  clear_has_can_use_voice();
}
inline bool ClubPrivilegeSet::can_use_voice() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubPrivilegeSet.can_use_voice)
  return can_use_voice_;
}
inline void ClubPrivilegeSet::set_can_use_voice(bool value) {
  set_has_can_use_voice();
  can_use_voice_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubPrivilegeSet.can_use_voice)
}

// optional bool can_voice_mute_member_for_all = 51;
inline bool ClubPrivilegeSet::has_can_voice_mute_member_for_all() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void ClubPrivilegeSet::set_has_can_voice_mute_member_for_all() {
  _has_bits_[0] |= 0x00020000u;
}
inline void ClubPrivilegeSet::clear_has_can_voice_mute_member_for_all() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void ClubPrivilegeSet::clear_can_voice_mute_member_for_all() {
  can_voice_mute_member_for_all_ = false;
  clear_has_can_voice_mute_member_for_all();
}
inline bool ClubPrivilegeSet::can_voice_mute_member_for_all() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubPrivilegeSet.can_voice_mute_member_for_all)
  return can_voice_mute_member_for_all_;
}
inline void ClubPrivilegeSet::set_can_voice_mute_member_for_all(bool value) {
  set_has_can_voice_mute_member_for_all();
  can_voice_mute_member_for_all_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubPrivilegeSet.can_voice_mute_member_for_all)
}

// optional bool can_get_invitation = 70;
inline bool ClubPrivilegeSet::has_can_get_invitation() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void ClubPrivilegeSet::set_has_can_get_invitation() {
  _has_bits_[0] |= 0x00040000u;
}
inline void ClubPrivilegeSet::clear_has_can_get_invitation() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void ClubPrivilegeSet::clear_can_get_invitation() {
  can_get_invitation_ = false;
  clear_has_can_get_invitation();
}
inline bool ClubPrivilegeSet::can_get_invitation() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubPrivilegeSet.can_get_invitation)
  return can_get_invitation_;
}
inline void ClubPrivilegeSet::set_can_get_invitation(bool value) {
  set_has_can_get_invitation();
  can_get_invitation_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubPrivilegeSet.can_get_invitation)
}

// optional bool can_send_invitation = 71;
inline bool ClubPrivilegeSet::has_can_send_invitation() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void ClubPrivilegeSet::set_has_can_send_invitation() {
  _has_bits_[0] |= 0x00080000u;
}
inline void ClubPrivilegeSet::clear_has_can_send_invitation() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void ClubPrivilegeSet::clear_can_send_invitation() {
  can_send_invitation_ = false;
  clear_has_can_send_invitation();
}
inline bool ClubPrivilegeSet::can_send_invitation() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubPrivilegeSet.can_send_invitation)
  return can_send_invitation_;
}
inline void ClubPrivilegeSet::set_can_send_invitation(bool value) {
  set_has_can_send_invitation();
  can_send_invitation_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubPrivilegeSet.can_send_invitation)
}

// optional bool can_send_guest_invitation = 72;
inline bool ClubPrivilegeSet::has_can_send_guest_invitation() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void ClubPrivilegeSet::set_has_can_send_guest_invitation() {
  _has_bits_[0] |= 0x00100000u;
}
inline void ClubPrivilegeSet::clear_has_can_send_guest_invitation() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void ClubPrivilegeSet::clear_can_send_guest_invitation() {
  can_send_guest_invitation_ = false;
  clear_has_can_send_guest_invitation();
}
inline bool ClubPrivilegeSet::can_send_guest_invitation() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubPrivilegeSet.can_send_guest_invitation)
  return can_send_guest_invitation_;
}
inline void ClubPrivilegeSet::set_can_send_guest_invitation(bool value) {
  set_has_can_send_guest_invitation();
  can_send_guest_invitation_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubPrivilegeSet.can_send_guest_invitation)
}

// optional bool can_revoke_own_invitation = 73;
inline bool ClubPrivilegeSet::has_can_revoke_own_invitation() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void ClubPrivilegeSet::set_has_can_revoke_own_invitation() {
  _has_bits_[0] |= 0x00200000u;
}
inline void ClubPrivilegeSet::clear_has_can_revoke_own_invitation() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void ClubPrivilegeSet::clear_can_revoke_own_invitation() {
  can_revoke_own_invitation_ = false;
  clear_has_can_revoke_own_invitation();
}
inline bool ClubPrivilegeSet::can_revoke_own_invitation() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubPrivilegeSet.can_revoke_own_invitation)
  return can_revoke_own_invitation_;
}
inline void ClubPrivilegeSet::set_can_revoke_own_invitation(bool value) {
  set_has_can_revoke_own_invitation();
  can_revoke_own_invitation_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubPrivilegeSet.can_revoke_own_invitation)
}

// optional bool can_revoke_other_invitation = 74;
inline bool ClubPrivilegeSet::has_can_revoke_other_invitation() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void ClubPrivilegeSet::set_has_can_revoke_other_invitation() {
  _has_bits_[0] |= 0x00400000u;
}
inline void ClubPrivilegeSet::clear_has_can_revoke_other_invitation() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void ClubPrivilegeSet::clear_can_revoke_other_invitation() {
  can_revoke_other_invitation_ = false;
  clear_has_can_revoke_other_invitation();
}
inline bool ClubPrivilegeSet::can_revoke_other_invitation() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubPrivilegeSet.can_revoke_other_invitation)
  return can_revoke_other_invitation_;
}
inline void ClubPrivilegeSet::set_can_revoke_other_invitation(bool value) {
  set_has_can_revoke_other_invitation();
  can_revoke_other_invitation_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubPrivilegeSet.can_revoke_other_invitation)
}

// optional bool can_get_suggestion = 90;
inline bool ClubPrivilegeSet::has_can_get_suggestion() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void ClubPrivilegeSet::set_has_can_get_suggestion() {
  _has_bits_[0] |= 0x00800000u;
}
inline void ClubPrivilegeSet::clear_has_can_get_suggestion() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void ClubPrivilegeSet::clear_can_get_suggestion() {
  can_get_suggestion_ = false;
  clear_has_can_get_suggestion();
}
inline bool ClubPrivilegeSet::can_get_suggestion() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubPrivilegeSet.can_get_suggestion)
  return can_get_suggestion_;
}
inline void ClubPrivilegeSet::set_can_get_suggestion(bool value) {
  set_has_can_get_suggestion();
  can_get_suggestion_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubPrivilegeSet.can_get_suggestion)
}

// optional bool can_suggest_member = 91;
inline bool ClubPrivilegeSet::has_can_suggest_member() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void ClubPrivilegeSet::set_has_can_suggest_member() {
  _has_bits_[0] |= 0x01000000u;
}
inline void ClubPrivilegeSet::clear_has_can_suggest_member() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void ClubPrivilegeSet::clear_can_suggest_member() {
  can_suggest_member_ = false;
  clear_has_can_suggest_member();
}
inline bool ClubPrivilegeSet::can_suggest_member() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubPrivilegeSet.can_suggest_member)
  return can_suggest_member_;
}
inline void ClubPrivilegeSet::set_can_suggest_member(bool value) {
  set_has_can_suggest_member();
  can_suggest_member_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubPrivilegeSet.can_suggest_member)
}

// optional bool can_approve_member = 92;
inline bool ClubPrivilegeSet::has_can_approve_member() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void ClubPrivilegeSet::set_has_can_approve_member() {
  _has_bits_[0] |= 0x02000000u;
}
inline void ClubPrivilegeSet::clear_has_can_approve_member() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void ClubPrivilegeSet::clear_can_approve_member() {
  can_approve_member_ = false;
  clear_has_can_approve_member();
}
inline bool ClubPrivilegeSet::can_approve_member() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubPrivilegeSet.can_approve_member)
  return can_approve_member_;
}
inline void ClubPrivilegeSet::set_can_approve_member(bool value) {
  set_has_can_approve_member();
  can_approve_member_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubPrivilegeSet.can_approve_member)
}

// optional bool can_get_ticket = 110;
inline bool ClubPrivilegeSet::has_can_get_ticket() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void ClubPrivilegeSet::set_has_can_get_ticket() {
  _has_bits_[0] |= 0x04000000u;
}
inline void ClubPrivilegeSet::clear_has_can_get_ticket() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void ClubPrivilegeSet::clear_can_get_ticket() {
  can_get_ticket_ = false;
  clear_has_can_get_ticket();
}
inline bool ClubPrivilegeSet::can_get_ticket() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubPrivilegeSet.can_get_ticket)
  return can_get_ticket_;
}
inline void ClubPrivilegeSet::set_can_get_ticket(bool value) {
  set_has_can_get_ticket();
  can_get_ticket_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubPrivilegeSet.can_get_ticket)
}

// optional bool can_create_ticket = 111;
inline bool ClubPrivilegeSet::has_can_create_ticket() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void ClubPrivilegeSet::set_has_can_create_ticket() {
  _has_bits_[0] |= 0x08000000u;
}
inline void ClubPrivilegeSet::clear_has_can_create_ticket() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void ClubPrivilegeSet::clear_can_create_ticket() {
  can_create_ticket_ = false;
  clear_has_can_create_ticket();
}
inline bool ClubPrivilegeSet::can_create_ticket() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubPrivilegeSet.can_create_ticket)
  return can_create_ticket_;
}
inline void ClubPrivilegeSet::set_can_create_ticket(bool value) {
  set_has_can_create_ticket();
  can_create_ticket_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubPrivilegeSet.can_create_ticket)
}

// optional bool can_destroy_ticket = 112;
inline bool ClubPrivilegeSet::has_can_destroy_ticket() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void ClubPrivilegeSet::set_has_can_destroy_ticket() {
  _has_bits_[0] |= 0x10000000u;
}
inline void ClubPrivilegeSet::clear_has_can_destroy_ticket() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void ClubPrivilegeSet::clear_can_destroy_ticket() {
  can_destroy_ticket_ = false;
  clear_has_can_destroy_ticket();
}
inline bool ClubPrivilegeSet::can_destroy_ticket() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubPrivilegeSet.can_destroy_ticket)
  return can_destroy_ticket_;
}
inline void ClubPrivilegeSet::set_can_destroy_ticket(bool value) {
  set_has_can_destroy_ticket();
  can_destroy_ticket_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubPrivilegeSet.can_destroy_ticket)
}

// optional bool can_get_ban = 130;
inline bool ClubPrivilegeSet::has_can_get_ban() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void ClubPrivilegeSet::set_has_can_get_ban() {
  _has_bits_[0] |= 0x20000000u;
}
inline void ClubPrivilegeSet::clear_has_can_get_ban() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void ClubPrivilegeSet::clear_can_get_ban() {
  can_get_ban_ = false;
  clear_has_can_get_ban();
}
inline bool ClubPrivilegeSet::can_get_ban() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubPrivilegeSet.can_get_ban)
  return can_get_ban_;
}
inline void ClubPrivilegeSet::set_can_get_ban(bool value) {
  set_has_can_get_ban();
  can_get_ban_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubPrivilegeSet.can_get_ban)
}

// optional bool can_add_ban = 131;
inline bool ClubPrivilegeSet::has_can_add_ban() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void ClubPrivilegeSet::set_has_can_add_ban() {
  _has_bits_[0] |= 0x40000000u;
}
inline void ClubPrivilegeSet::clear_has_can_add_ban() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void ClubPrivilegeSet::clear_can_add_ban() {
  can_add_ban_ = false;
  clear_has_can_add_ban();
}
inline bool ClubPrivilegeSet::can_add_ban() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubPrivilegeSet.can_add_ban)
  return can_add_ban_;
}
inline void ClubPrivilegeSet::set_can_add_ban(bool value) {
  set_has_can_add_ban();
  can_add_ban_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubPrivilegeSet.can_add_ban)
}

// optional bool can_remove_ban = 132;
inline bool ClubPrivilegeSet::has_can_remove_ban() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void ClubPrivilegeSet::set_has_can_remove_ban() {
  _has_bits_[0] |= 0x80000000u;
}
inline void ClubPrivilegeSet::clear_has_can_remove_ban() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void ClubPrivilegeSet::clear_can_remove_ban() {
  can_remove_ban_ = false;
  clear_has_can_remove_ban();
}
inline bool ClubPrivilegeSet::can_remove_ban() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubPrivilegeSet.can_remove_ban)
  return can_remove_ban_;
}
inline void ClubPrivilegeSet::set_can_remove_ban(bool value) {
  set_has_can_remove_ban();
  can_remove_ban_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubPrivilegeSet.can_remove_ban)
}

// optional bool can_create_stream = 140;
inline bool ClubPrivilegeSet::has_can_create_stream() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void ClubPrivilegeSet::set_has_can_create_stream() {
  _has_bits_[1] |= 0x00000001u;
}
inline void ClubPrivilegeSet::clear_has_can_create_stream() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void ClubPrivilegeSet::clear_can_create_stream() {
  can_create_stream_ = false;
  clear_has_can_create_stream();
}
inline bool ClubPrivilegeSet::can_create_stream() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubPrivilegeSet.can_create_stream)
  return can_create_stream_;
}
inline void ClubPrivilegeSet::set_can_create_stream(bool value) {
  set_has_can_create_stream();
  can_create_stream_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubPrivilegeSet.can_create_stream)
}

// optional bool can_destroy_stream = 141;
inline bool ClubPrivilegeSet::has_can_destroy_stream() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void ClubPrivilegeSet::set_has_can_destroy_stream() {
  _has_bits_[1] |= 0x00000002u;
}
inline void ClubPrivilegeSet::clear_has_can_destroy_stream() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void ClubPrivilegeSet::clear_can_destroy_stream() {
  can_destroy_stream_ = false;
  clear_has_can_destroy_stream();
}
inline bool ClubPrivilegeSet::can_destroy_stream() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubPrivilegeSet.can_destroy_stream)
  return can_destroy_stream_;
}
inline void ClubPrivilegeSet::set_can_destroy_stream(bool value) {
  set_has_can_destroy_stream();
  can_destroy_stream_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubPrivilegeSet.can_destroy_stream)
}

// optional bool can_set_stream_position = 142;
inline bool ClubPrivilegeSet::has_can_set_stream_position() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void ClubPrivilegeSet::set_has_can_set_stream_position() {
  _has_bits_[1] |= 0x00000004u;
}
inline void ClubPrivilegeSet::clear_has_can_set_stream_position() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void ClubPrivilegeSet::clear_can_set_stream_position() {
  can_set_stream_position_ = false;
  clear_has_can_set_stream_position();
}
inline bool ClubPrivilegeSet::can_set_stream_position() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubPrivilegeSet.can_set_stream_position)
  return can_set_stream_position_;
}
inline void ClubPrivilegeSet::set_can_set_stream_position(bool value) {
  set_has_can_set_stream_position();
  can_set_stream_position_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubPrivilegeSet.can_set_stream_position)
}

// optional bool can_set_stream_attribute = 143;
inline bool ClubPrivilegeSet::has_can_set_stream_attribute() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void ClubPrivilegeSet::set_has_can_set_stream_attribute() {
  _has_bits_[1] |= 0x00000008u;
}
inline void ClubPrivilegeSet::clear_has_can_set_stream_attribute() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void ClubPrivilegeSet::clear_can_set_stream_attribute() {
  can_set_stream_attribute_ = false;
  clear_has_can_set_stream_attribute();
}
inline bool ClubPrivilegeSet::can_set_stream_attribute() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubPrivilegeSet.can_set_stream_attribute)
  return can_set_stream_attribute_;
}
inline void ClubPrivilegeSet::set_can_set_stream_attribute(bool value) {
  set_has_can_set_stream_attribute();
  can_set_stream_attribute_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubPrivilegeSet.can_set_stream_attribute)
}

// optional bool can_set_stream_name = 144;
inline bool ClubPrivilegeSet::has_can_set_stream_name() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void ClubPrivilegeSet::set_has_can_set_stream_name() {
  _has_bits_[1] |= 0x00000010u;
}
inline void ClubPrivilegeSet::clear_has_can_set_stream_name() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void ClubPrivilegeSet::clear_can_set_stream_name() {
  can_set_stream_name_ = false;
  clear_has_can_set_stream_name();
}
inline bool ClubPrivilegeSet::can_set_stream_name() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubPrivilegeSet.can_set_stream_name)
  return can_set_stream_name_;
}
inline void ClubPrivilegeSet::set_can_set_stream_name(bool value) {
  set_has_can_set_stream_name();
  can_set_stream_name_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubPrivilegeSet.can_set_stream_name)
}

// optional bool can_set_stream_subject = 145;
inline bool ClubPrivilegeSet::has_can_set_stream_subject() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void ClubPrivilegeSet::set_has_can_set_stream_subject() {
  _has_bits_[1] |= 0x00000020u;
}
inline void ClubPrivilegeSet::clear_has_can_set_stream_subject() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void ClubPrivilegeSet::clear_can_set_stream_subject() {
  can_set_stream_subject_ = false;
  clear_has_can_set_stream_subject();
}
inline bool ClubPrivilegeSet::can_set_stream_subject() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubPrivilegeSet.can_set_stream_subject)
  return can_set_stream_subject_;
}
inline void ClubPrivilegeSet::set_can_set_stream_subject(bool value) {
  set_has_can_set_stream_subject();
  can_set_stream_subject_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubPrivilegeSet.can_set_stream_subject)
}

// optional bool can_set_stream_access = 146;
inline bool ClubPrivilegeSet::has_can_set_stream_access() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void ClubPrivilegeSet::set_has_can_set_stream_access() {
  _has_bits_[1] |= 0x00000040u;
}
inline void ClubPrivilegeSet::clear_has_can_set_stream_access() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void ClubPrivilegeSet::clear_can_set_stream_access() {
  can_set_stream_access_ = false;
  clear_has_can_set_stream_access();
}
inline bool ClubPrivilegeSet::can_set_stream_access() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubPrivilegeSet.can_set_stream_access)
  return can_set_stream_access_;
}
inline void ClubPrivilegeSet::set_can_set_stream_access(bool value) {
  set_has_can_set_stream_access();
  can_set_stream_access_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubPrivilegeSet.can_set_stream_access)
}

// optional bool can_set_stream_voice_level = 147;
inline bool ClubPrivilegeSet::has_can_set_stream_voice_level() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void ClubPrivilegeSet::set_has_can_set_stream_voice_level() {
  _has_bits_[1] |= 0x00000080u;
}
inline void ClubPrivilegeSet::clear_has_can_set_stream_voice_level() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void ClubPrivilegeSet::clear_can_set_stream_voice_level() {
  can_set_stream_voice_level_ = false;
  clear_has_can_set_stream_voice_level();
}
inline bool ClubPrivilegeSet::can_set_stream_voice_level() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubPrivilegeSet.can_set_stream_voice_level)
  return can_set_stream_voice_level_;
}
inline void ClubPrivilegeSet::set_can_set_stream_voice_level(bool value) {
  set_has_can_set_stream_voice_level();
  can_set_stream_voice_level_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubPrivilegeSet.can_set_stream_voice_level)
}

// optional bool can_create_message = 180;
inline bool ClubPrivilegeSet::has_can_create_message() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void ClubPrivilegeSet::set_has_can_create_message() {
  _has_bits_[1] |= 0x00000100u;
}
inline void ClubPrivilegeSet::clear_has_can_create_message() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void ClubPrivilegeSet::clear_can_create_message() {
  can_create_message_ = false;
  clear_has_can_create_message();
}
inline bool ClubPrivilegeSet::can_create_message() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubPrivilegeSet.can_create_message)
  return can_create_message_;
}
inline void ClubPrivilegeSet::set_can_create_message(bool value) {
  set_has_can_create_message();
  can_create_message_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubPrivilegeSet.can_create_message)
}

// optional bool can_destroy_own_message = 181;
inline bool ClubPrivilegeSet::has_can_destroy_own_message() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void ClubPrivilegeSet::set_has_can_destroy_own_message() {
  _has_bits_[1] |= 0x00000200u;
}
inline void ClubPrivilegeSet::clear_has_can_destroy_own_message() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void ClubPrivilegeSet::clear_can_destroy_own_message() {
  can_destroy_own_message_ = false;
  clear_has_can_destroy_own_message();
}
inline bool ClubPrivilegeSet::can_destroy_own_message() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubPrivilegeSet.can_destroy_own_message)
  return can_destroy_own_message_;
}
inline void ClubPrivilegeSet::set_can_destroy_own_message(bool value) {
  set_has_can_destroy_own_message();
  can_destroy_own_message_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubPrivilegeSet.can_destroy_own_message)
}

// optional bool can_destroy_other_message = 182;
inline bool ClubPrivilegeSet::has_can_destroy_other_message() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void ClubPrivilegeSet::set_has_can_destroy_other_message() {
  _has_bits_[1] |= 0x00000400u;
}
inline void ClubPrivilegeSet::clear_has_can_destroy_other_message() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void ClubPrivilegeSet::clear_can_destroy_other_message() {
  can_destroy_other_message_ = false;
  clear_has_can_destroy_other_message();
}
inline bool ClubPrivilegeSet::can_destroy_other_message() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubPrivilegeSet.can_destroy_other_message)
  return can_destroy_other_message_;
}
inline void ClubPrivilegeSet::set_can_destroy_other_message(bool value) {
  set_has_can_destroy_other_message();
  can_destroy_other_message_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubPrivilegeSet.can_destroy_other_message)
}

// optional bool can_edit_own_message = 183;
inline bool ClubPrivilegeSet::has_can_edit_own_message() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void ClubPrivilegeSet::set_has_can_edit_own_message() {
  _has_bits_[1] |= 0x00000800u;
}
inline void ClubPrivilegeSet::clear_has_can_edit_own_message() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void ClubPrivilegeSet::clear_can_edit_own_message() {
  can_edit_own_message_ = false;
  clear_has_can_edit_own_message();
}
inline bool ClubPrivilegeSet::can_edit_own_message() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubPrivilegeSet.can_edit_own_message)
  return can_edit_own_message_;
}
inline void ClubPrivilegeSet::set_can_edit_own_message(bool value) {
  set_has_can_edit_own_message();
  can_edit_own_message_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubPrivilegeSet.can_edit_own_message)
}

// optional bool can_pin_message = 184;
inline bool ClubPrivilegeSet::has_can_pin_message() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void ClubPrivilegeSet::set_has_can_pin_message() {
  _has_bits_[1] |= 0x00001000u;
}
inline void ClubPrivilegeSet::clear_has_can_pin_message() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void ClubPrivilegeSet::clear_can_pin_message() {
  can_pin_message_ = false;
  clear_has_can_pin_message();
}
inline bool ClubPrivilegeSet::can_pin_message() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubPrivilegeSet.can_pin_message)
  return can_pin_message_;
}
inline void ClubPrivilegeSet::set_can_pin_message(bool value) {
  set_has_can_pin_message();
  can_pin_message_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubPrivilegeSet.can_pin_message)
}

// optional bool can_mention_all = 185;
inline bool ClubPrivilegeSet::has_can_mention_all() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void ClubPrivilegeSet::set_has_can_mention_all() {
  _has_bits_[1] |= 0x00002000u;
}
inline void ClubPrivilegeSet::clear_has_can_mention_all() {
  _has_bits_[1] &= ~0x00002000u;
}
inline void ClubPrivilegeSet::clear_can_mention_all() {
  can_mention_all_ = false;
  clear_has_can_mention_all();
}
inline bool ClubPrivilegeSet::can_mention_all() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubPrivilegeSet.can_mention_all)
  return can_mention_all_;
}
inline void ClubPrivilegeSet::set_can_mention_all(bool value) {
  set_has_can_mention_all();
  can_mention_all_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubPrivilegeSet.can_mention_all)
}

// optional bool can_mention_here = 186;
inline bool ClubPrivilegeSet::has_can_mention_here() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void ClubPrivilegeSet::set_has_can_mention_here() {
  _has_bits_[1] |= 0x00004000u;
}
inline void ClubPrivilegeSet::clear_has_can_mention_here() {
  _has_bits_[1] &= ~0x00004000u;
}
inline void ClubPrivilegeSet::clear_can_mention_here() {
  can_mention_here_ = false;
  clear_has_can_mention_here();
}
inline bool ClubPrivilegeSet::can_mention_here() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubPrivilegeSet.can_mention_here)
  return can_mention_here_;
}
inline void ClubPrivilegeSet::set_can_mention_here(bool value) {
  set_has_can_mention_here();
  can_mention_here_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubPrivilegeSet.can_mention_here)
}

// optional bool can_mention_member = 187;
inline bool ClubPrivilegeSet::has_can_mention_member() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
inline void ClubPrivilegeSet::set_has_can_mention_member() {
  _has_bits_[1] |= 0x00008000u;
}
inline void ClubPrivilegeSet::clear_has_can_mention_member() {
  _has_bits_[1] &= ~0x00008000u;
}
inline void ClubPrivilegeSet::clear_can_mention_member() {
  can_mention_member_ = false;
  clear_has_can_mention_member();
}
inline bool ClubPrivilegeSet::can_mention_member() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubPrivilegeSet.can_mention_member)
  return can_mention_member_;
}
inline void ClubPrivilegeSet::set_can_mention_member(bool value) {
  set_has_can_mention_member();
  can_mention_member_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubPrivilegeSet.can_mention_member)
}

// optional bool can_mention_role = 188;
inline bool ClubPrivilegeSet::has_can_mention_role() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
inline void ClubPrivilegeSet::set_has_can_mention_role() {
  _has_bits_[1] |= 0x00010000u;
}
inline void ClubPrivilegeSet::clear_has_can_mention_role() {
  _has_bits_[1] &= ~0x00010000u;
}
inline void ClubPrivilegeSet::clear_can_mention_role() {
  can_mention_role_ = false;
  clear_has_can_mention_role();
}
inline bool ClubPrivilegeSet::can_mention_role() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubPrivilegeSet.can_mention_role)
  return can_mention_role_;
}
inline void ClubPrivilegeSet::set_can_mention_role(bool value) {
  set_has_can_mention_role();
  can_mention_role_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubPrivilegeSet.can_mention_role)
}

// -------------------------------------------------------------------

// ClubRole

// optional uint32 id = 1;
inline bool ClubRole::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClubRole::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClubRole::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClubRole::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 ClubRole::id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubRole.id)
  return id_;
}
inline void ClubRole::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubRole.id)
}

// optional .bgs.protocol.RoleState state = 2;
inline bool ClubRole::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClubRole::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ClubRole::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ClubRole::clear_state() {
  if (state_ != NULL) state_->::bgs::protocol::RoleState::Clear();
  clear_has_state();
}
inline const ::bgs::protocol::RoleState& ClubRole::state() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubRole.state)
  return state_ != NULL ? *state_ : *default_instance_->state_;
}
inline ::bgs::protocol::RoleState* ClubRole::mutable_state() {
  set_has_state();
  if (state_ == NULL) state_ = new ::bgs::protocol::RoleState;
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubRole.state)
  return state_;
}
inline ::bgs::protocol::RoleState* ClubRole::release_state() {
  clear_has_state();
  ::bgs::protocol::RoleState* temp = state_;
  state_ = NULL;
  return temp;
}
inline void ClubRole::set_allocated_state(::bgs::protocol::RoleState* state) {
  delete state_;
  state_ = state;
  if (state) {
    set_has_state();
  } else {
    clear_has_state();
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.ClubRole.state)
}

// optional .bgs.protocol.club.v1.ClubPrivilegeSet privilege = 3;
inline bool ClubRole::has_privilege() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ClubRole::set_has_privilege() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ClubRole::clear_has_privilege() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ClubRole::clear_privilege() {
  if (privilege_ != NULL) privilege_->::bgs::protocol::club::v1::ClubPrivilegeSet::Clear();
  clear_has_privilege();
}
inline const ::bgs::protocol::club::v1::ClubPrivilegeSet& ClubRole::privilege() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubRole.privilege)
  return privilege_ != NULL ? *privilege_ : *default_instance_->privilege_;
}
inline ::bgs::protocol::club::v1::ClubPrivilegeSet* ClubRole::mutable_privilege() {
  set_has_privilege();
  if (privilege_ == NULL) privilege_ = new ::bgs::protocol::club::v1::ClubPrivilegeSet;
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubRole.privilege)
  return privilege_;
}
inline ::bgs::protocol::club::v1::ClubPrivilegeSet* ClubRole::release_privilege() {
  clear_has_privilege();
  ::bgs::protocol::club::v1::ClubPrivilegeSet* temp = privilege_;
  privilege_ = NULL;
  return temp;
}
inline void ClubRole::set_allocated_privilege(::bgs::protocol::club::v1::ClubPrivilegeSet* privilege) {
  delete privilege_;
  privilege_ = privilege;
  if (privilege) {
    set_has_privilege();
  } else {
    clear_has_privilege();
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.ClubRole.privilege)
}

// optional bool always_grant_stream_access = 4;
inline bool ClubRole::has_always_grant_stream_access() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ClubRole::set_has_always_grant_stream_access() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ClubRole::clear_has_always_grant_stream_access() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ClubRole::clear_always_grant_stream_access() {
  always_grant_stream_access_ = false;
  clear_has_always_grant_stream_access();
}
inline bool ClubRole::always_grant_stream_access() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubRole.always_grant_stream_access)
  return always_grant_stream_access_;
}
inline void ClubRole::set_always_grant_stream_access(bool value) {
  set_has_always_grant_stream_access();
  always_grant_stream_access_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubRole.always_grant_stream_access)
}

// optional bool allow_in_club_slot = 5;
inline bool ClubRole::has_allow_in_club_slot() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ClubRole::set_has_allow_in_club_slot() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ClubRole::clear_has_allow_in_club_slot() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ClubRole::clear_allow_in_club_slot() {
  allow_in_club_slot_ = false;
  clear_has_allow_in_club_slot();
}
inline bool ClubRole::allow_in_club_slot() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubRole.allow_in_club_slot)
  return allow_in_club_slot_;
}
inline void ClubRole::set_allow_in_club_slot(bool value) {
  set_has_allow_in_club_slot();
  allow_in_club_slot_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubRole.allow_in_club_slot)
}

// -------------------------------------------------------------------

// ClubRoleSet

// repeated .bgs.protocol.club.v1.ClubRole role = 1;
inline int ClubRoleSet::role_size() const {
  return role_.size();
}
inline void ClubRoleSet::clear_role() {
  role_.Clear();
}
inline const ::bgs::protocol::club::v1::ClubRole& ClubRoleSet::role(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubRoleSet.role)
  return role_.Get(index);
}
inline ::bgs::protocol::club::v1::ClubRole* ClubRoleSet::mutable_role(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubRoleSet.role)
  return role_.Mutable(index);
}
inline ::bgs::protocol::club::v1::ClubRole* ClubRoleSet::add_role() {
  // @@protoc_insertion_point(field_add:bgs.protocol.club.v1.ClubRoleSet.role)
  return role_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bgs::protocol::club::v1::ClubRole >&
ClubRoleSet::role() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.club.v1.ClubRoleSet.role)
  return role_;
}
inline ::google::protobuf::RepeatedPtrField< ::bgs::protocol::club::v1::ClubRole >*
ClubRoleSet::mutable_role() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.club.v1.ClubRoleSet.role)
  return &role_;
}

// repeated uint32 default_role = 5 [packed = true];
inline int ClubRoleSet::default_role_size() const {
  return default_role_.size();
}
inline void ClubRoleSet::clear_default_role() {
  default_role_.Clear();
}
inline ::google::protobuf::uint32 ClubRoleSet::default_role(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubRoleSet.default_role)
  return default_role_.Get(index);
}
inline void ClubRoleSet::set_default_role(int index, ::google::protobuf::uint32 value) {
  default_role_.Set(index, value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubRoleSet.default_role)
}
inline void ClubRoleSet::add_default_role(::google::protobuf::uint32 value) {
  default_role_.Add(value);
  // @@protoc_insertion_point(field_add:bgs.protocol.club.v1.ClubRoleSet.default_role)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ClubRoleSet::default_role() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.club.v1.ClubRoleSet.default_role)
  return default_role_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ClubRoleSet::mutable_default_role() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.club.v1.ClubRoleSet.default_role)
  return &default_role_;
}

// optional bool assignment_respects_relegation_chain = 6;
inline bool ClubRoleSet::has_assignment_respects_relegation_chain() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ClubRoleSet::set_has_assignment_respects_relegation_chain() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ClubRoleSet::clear_has_assignment_respects_relegation_chain() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ClubRoleSet::clear_assignment_respects_relegation_chain() {
  assignment_respects_relegation_chain_ = false;
  clear_has_assignment_respects_relegation_chain();
}
inline bool ClubRoleSet::assignment_respects_relegation_chain() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubRoleSet.assignment_respects_relegation_chain)
  return assignment_respects_relegation_chain_;
}
inline void ClubRoleSet::set_assignment_respects_relegation_chain(bool value) {
  set_has_assignment_respects_relegation_chain();
  assignment_respects_relegation_chain_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubRoleSet.assignment_respects_relegation_chain)
}

// optional string subtype = 7;
inline bool ClubRoleSet::has_subtype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ClubRoleSet::set_has_subtype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ClubRoleSet::clear_has_subtype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ClubRoleSet::clear_subtype() {
  if (subtype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    subtype_->clear();
  }
  clear_has_subtype();
}
inline const ::std::string& ClubRoleSet::subtype() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubRoleSet.subtype)
  return *subtype_;
}
inline void ClubRoleSet::set_subtype(const ::std::string& value) {
  set_has_subtype();
  if (subtype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    subtype_ = new ::std::string;
  }
  subtype_->assign(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubRoleSet.subtype)
}
inline void ClubRoleSet::set_subtype(const char* value) {
  set_has_subtype();
  if (subtype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    subtype_ = new ::std::string;
  }
  subtype_->assign(value);
  // @@protoc_insertion_point(field_set_char:bgs.protocol.club.v1.ClubRoleSet.subtype)
}
inline void ClubRoleSet::set_subtype(const char* value, size_t size) {
  set_has_subtype();
  if (subtype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    subtype_ = new ::std::string;
  }
  subtype_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.club.v1.ClubRoleSet.subtype)
}
inline ::std::string* ClubRoleSet::mutable_subtype() {
  set_has_subtype();
  if (subtype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    subtype_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubRoleSet.subtype)
  return subtype_;
}
inline ::std::string* ClubRoleSet::release_subtype() {
  clear_has_subtype();
  if (subtype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = subtype_;
    subtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ClubRoleSet::set_allocated_subtype(::std::string* subtype) {
  if (subtype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete subtype_;
  }
  if (subtype) {
    set_has_subtype();
    subtype_ = subtype;
  } else {
    clear_has_subtype();
    subtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.ClubRoleSet.subtype)
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace club
}  // namespace protocol
}  // namespace bgs

#ifndef SWIG
namespace google {
namespace protobuf {
}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_club_5frole_2eproto__INCLUDED
