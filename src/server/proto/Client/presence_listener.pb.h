// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: presence_listener.proto

#ifndef PROTOBUF_presence_5flistener_2eproto__INCLUDED
#define PROTOBUF_presence_5flistener_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "presence_types.pb.h"
#include "account_types.pb.h"
#include "rpc_types.pb.h"
#include "ServiceBase.h"
#include "MessageBuffer.h"
#include <functional>
#include <type_traits>
// @@protoc_insertion_point(includes)

namespace bgs {
namespace protocol {
namespace presence {
namespace v1 {

// Internal implementation detail -- do not call these.
void TC_PROTO_API protobuf_AddDesc_presence_5flistener_2eproto();
void protobuf_AssignDesc_presence_5flistener_2eproto();
void protobuf_ShutdownFile_presence_5flistener_2eproto();

class SubscribeNotification;
class StateChangedNotification;

// ===================================================================

class TC_PROTO_API SubscribeNotification : public ::google::protobuf::Message {
 public:
  SubscribeNotification();
  virtual ~SubscribeNotification();

  SubscribeNotification(const SubscribeNotification& from);

  inline SubscribeNotification& operator=(const SubscribeNotification& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SubscribeNotification& default_instance();

  void Swap(SubscribeNotification* other);

  // implements Message ----------------------------------------------

  SubscribeNotification* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SubscribeNotification& from);
  void MergeFrom(const SubscribeNotification& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .bgs.protocol.account.v1.AccountId subscriber_id = 1;
  inline bool has_subscriber_id() const;
  inline void clear_subscriber_id();
  static const int kSubscriberIdFieldNumber = 1;
  inline const ::bgs::protocol::account::v1::AccountId& subscriber_id() const;
  inline ::bgs::protocol::account::v1::AccountId* mutable_subscriber_id();
  inline ::bgs::protocol::account::v1::AccountId* release_subscriber_id();
  inline void set_allocated_subscriber_id(::bgs::protocol::account::v1::AccountId* subscriber_id);

  // repeated .bgs.protocol.presence.v1.PresenceState state = 2;
  inline int state_size() const;
  inline void clear_state();
  static const int kStateFieldNumber = 2;
  inline const ::bgs::protocol::presence::v1::PresenceState& state(int index) const;
  inline ::bgs::protocol::presence::v1::PresenceState* mutable_state(int index);
  inline ::bgs::protocol::presence::v1::PresenceState* add_state();
  inline const ::google::protobuf::RepeatedPtrField< ::bgs::protocol::presence::v1::PresenceState >&
      state() const;
  inline ::google::protobuf::RepeatedPtrField< ::bgs::protocol::presence::v1::PresenceState >*
      mutable_state();

  // @@protoc_insertion_point(class_scope:bgs.protocol.presence.v1.SubscribeNotification)
 private:
  inline void set_has_subscriber_id();
  inline void clear_has_subscriber_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::bgs::protocol::account::v1::AccountId* subscriber_id_;
  ::google::protobuf::RepeatedPtrField< ::bgs::protocol::presence::v1::PresenceState > state_;
  friend void TC_PROTO_API protobuf_AddDesc_presence_5flistener_2eproto();
  friend void protobuf_AssignDesc_presence_5flistener_2eproto();
  friend void protobuf_ShutdownFile_presence_5flistener_2eproto();

  void InitAsDefaultInstance();
  static SubscribeNotification* default_instance_;
};
// -------------------------------------------------------------------

class TC_PROTO_API StateChangedNotification : public ::google::protobuf::Message {
 public:
  StateChangedNotification();
  virtual ~StateChangedNotification();

  StateChangedNotification(const StateChangedNotification& from);

  inline StateChangedNotification& operator=(const StateChangedNotification& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StateChangedNotification& default_instance();

  void Swap(StateChangedNotification* other);

  // implements Message ----------------------------------------------

  StateChangedNotification* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StateChangedNotification& from);
  void MergeFrom(const StateChangedNotification& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .bgs.protocol.account.v1.AccountId subscriber_id = 1;
  inline bool has_subscriber_id() const;
  inline void clear_subscriber_id();
  static const int kSubscriberIdFieldNumber = 1;
  inline const ::bgs::protocol::account::v1::AccountId& subscriber_id() const;
  inline ::bgs::protocol::account::v1::AccountId* mutable_subscriber_id();
  inline ::bgs::protocol::account::v1::AccountId* release_subscriber_id();
  inline void set_allocated_subscriber_id(::bgs::protocol::account::v1::AccountId* subscriber_id);

  // repeated .bgs.protocol.presence.v1.PresenceState state = 2;
  inline int state_size() const;
  inline void clear_state();
  static const int kStateFieldNumber = 2;
  inline const ::bgs::protocol::presence::v1::PresenceState& state(int index) const;
  inline ::bgs::protocol::presence::v1::PresenceState* mutable_state(int index);
  inline ::bgs::protocol::presence::v1::PresenceState* add_state();
  inline const ::google::protobuf::RepeatedPtrField< ::bgs::protocol::presence::v1::PresenceState >&
      state() const;
  inline ::google::protobuf::RepeatedPtrField< ::bgs::protocol::presence::v1::PresenceState >*
      mutable_state();

  // @@protoc_insertion_point(class_scope:bgs.protocol.presence.v1.StateChangedNotification)
 private:
  inline void set_has_subscriber_id();
  inline void clear_has_subscriber_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::bgs::protocol::account::v1::AccountId* subscriber_id_;
  ::google::protobuf::RepeatedPtrField< ::bgs::protocol::presence::v1::PresenceState > state_;
  friend void TC_PROTO_API protobuf_AddDesc_presence_5flistener_2eproto();
  friend void protobuf_AssignDesc_presence_5flistener_2eproto();
  friend void protobuf_ShutdownFile_presence_5flistener_2eproto();

  void InitAsDefaultInstance();
  static StateChangedNotification* default_instance_;
};
// ===================================================================

class TC_PROTO_API PresenceListener : public ServiceBase
{
 public:

  explicit PresenceListener(bool use_original_hash);
  virtual ~PresenceListener();

  typedef std::integral_constant<uint32, 0x890AB85Fu> OriginalHash;
  typedef std::integral_constant<uint32, 0xE8836F50u> NameHash;

  static google::protobuf::ServiceDescriptor const* descriptor();

  // client methods --------------------------------------------------
  void OnSubscribe(::bgs::protocol::presence::v1::SubscribeNotification const* request, bool client = false, bool server = false);
  void OnStateChanged(::bgs::protocol::presence::v1::StateChangedNotification const* request, bool client = false, bool server = false);

  void CallServerMethod(uint32 token, uint32 methodId, MessageBuffer buffer) final;

 private:
  uint32 service_hash_;

  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(PresenceListener);
};

// ===================================================================


// ===================================================================

// SubscribeNotification

// optional .bgs.protocol.account.v1.AccountId subscriber_id = 1;
inline bool SubscribeNotification::has_subscriber_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SubscribeNotification::set_has_subscriber_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SubscribeNotification::clear_has_subscriber_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SubscribeNotification::clear_subscriber_id() {
  if (subscriber_id_ != NULL) subscriber_id_->::bgs::protocol::account::v1::AccountId::Clear();
  clear_has_subscriber_id();
}
inline const ::bgs::protocol::account::v1::AccountId& SubscribeNotification::subscriber_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.presence.v1.SubscribeNotification.subscriber_id)
  return subscriber_id_ != NULL ? *subscriber_id_ : *default_instance_->subscriber_id_;
}
inline ::bgs::protocol::account::v1::AccountId* SubscribeNotification::mutable_subscriber_id() {
  set_has_subscriber_id();
  if (subscriber_id_ == NULL) subscriber_id_ = new ::bgs::protocol::account::v1::AccountId;
  // @@protoc_insertion_point(field_mutable:bgs.protocol.presence.v1.SubscribeNotification.subscriber_id)
  return subscriber_id_;
}
inline ::bgs::protocol::account::v1::AccountId* SubscribeNotification::release_subscriber_id() {
  clear_has_subscriber_id();
  ::bgs::protocol::account::v1::AccountId* temp = subscriber_id_;
  subscriber_id_ = NULL;
  return temp;
}
inline void SubscribeNotification::set_allocated_subscriber_id(::bgs::protocol::account::v1::AccountId* subscriber_id) {
  delete subscriber_id_;
  subscriber_id_ = subscriber_id;
  if (subscriber_id) {
    set_has_subscriber_id();
  } else {
    clear_has_subscriber_id();
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.presence.v1.SubscribeNotification.subscriber_id)
}

// repeated .bgs.protocol.presence.v1.PresenceState state = 2;
inline int SubscribeNotification::state_size() const {
  return state_.size();
}
inline void SubscribeNotification::clear_state() {
  state_.Clear();
}
inline const ::bgs::protocol::presence::v1::PresenceState& SubscribeNotification::state(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.presence.v1.SubscribeNotification.state)
  return state_.Get(index);
}
inline ::bgs::protocol::presence::v1::PresenceState* SubscribeNotification::mutable_state(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.presence.v1.SubscribeNotification.state)
  return state_.Mutable(index);
}
inline ::bgs::protocol::presence::v1::PresenceState* SubscribeNotification::add_state() {
  // @@protoc_insertion_point(field_add:bgs.protocol.presence.v1.SubscribeNotification.state)
  return state_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bgs::protocol::presence::v1::PresenceState >&
SubscribeNotification::state() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.presence.v1.SubscribeNotification.state)
  return state_;
}
inline ::google::protobuf::RepeatedPtrField< ::bgs::protocol::presence::v1::PresenceState >*
SubscribeNotification::mutable_state() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.presence.v1.SubscribeNotification.state)
  return &state_;
}

// -------------------------------------------------------------------

// StateChangedNotification

// optional .bgs.protocol.account.v1.AccountId subscriber_id = 1;
inline bool StateChangedNotification::has_subscriber_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StateChangedNotification::set_has_subscriber_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StateChangedNotification::clear_has_subscriber_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StateChangedNotification::clear_subscriber_id() {
  if (subscriber_id_ != NULL) subscriber_id_->::bgs::protocol::account::v1::AccountId::Clear();
  clear_has_subscriber_id();
}
inline const ::bgs::protocol::account::v1::AccountId& StateChangedNotification::subscriber_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.presence.v1.StateChangedNotification.subscriber_id)
  return subscriber_id_ != NULL ? *subscriber_id_ : *default_instance_->subscriber_id_;
}
inline ::bgs::protocol::account::v1::AccountId* StateChangedNotification::mutable_subscriber_id() {
  set_has_subscriber_id();
  if (subscriber_id_ == NULL) subscriber_id_ = new ::bgs::protocol::account::v1::AccountId;
  // @@protoc_insertion_point(field_mutable:bgs.protocol.presence.v1.StateChangedNotification.subscriber_id)
  return subscriber_id_;
}
inline ::bgs::protocol::account::v1::AccountId* StateChangedNotification::release_subscriber_id() {
  clear_has_subscriber_id();
  ::bgs::protocol::account::v1::AccountId* temp = subscriber_id_;
  subscriber_id_ = NULL;
  return temp;
}
inline void StateChangedNotification::set_allocated_subscriber_id(::bgs::protocol::account::v1::AccountId* subscriber_id) {
  delete subscriber_id_;
  subscriber_id_ = subscriber_id;
  if (subscriber_id) {
    set_has_subscriber_id();
  } else {
    clear_has_subscriber_id();
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.presence.v1.StateChangedNotification.subscriber_id)
}

// repeated .bgs.protocol.presence.v1.PresenceState state = 2;
inline int StateChangedNotification::state_size() const {
  return state_.size();
}
inline void StateChangedNotification::clear_state() {
  state_.Clear();
}
inline const ::bgs::protocol::presence::v1::PresenceState& StateChangedNotification::state(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.presence.v1.StateChangedNotification.state)
  return state_.Get(index);
}
inline ::bgs::protocol::presence::v1::PresenceState* StateChangedNotification::mutable_state(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.presence.v1.StateChangedNotification.state)
  return state_.Mutable(index);
}
inline ::bgs::protocol::presence::v1::PresenceState* StateChangedNotification::add_state() {
  // @@protoc_insertion_point(field_add:bgs.protocol.presence.v1.StateChangedNotification.state)
  return state_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bgs::protocol::presence::v1::PresenceState >&
StateChangedNotification::state() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.presence.v1.StateChangedNotification.state)
  return state_;
}
inline ::google::protobuf::RepeatedPtrField< ::bgs::protocol::presence::v1::PresenceState >*
StateChangedNotification::mutable_state() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.presence.v1.StateChangedNotification.state)
  return &state_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace presence
}  // namespace protocol
}  // namespace bgs

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_presence_5flistener_2eproto__INCLUDED
