// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpc_types.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rpc_types.pb.h"

#include <utility>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace bgs {
namespace protocol {

namespace {

const ::google::protobuf::Descriptor* NO_RESPONSE_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NO_RESPONSE_reflection_ = NULL;
const ::google::protobuf::Descriptor* Address_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Address_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProcessId_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProcessId_reflection_ = NULL;
const ::google::protobuf::Descriptor* ObjectAddress_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObjectAddress_reflection_ = NULL;
const ::google::protobuf::Descriptor* NoData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NoData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ErrorInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ErrorInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* FanoutTarget_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FanoutTarget_reflection_ = NULL;
const ::google::protobuf::Descriptor* Header_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Header_reflection_ = NULL;
const ::google::protobuf::Descriptor* KafkaHeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KafkaHeader_reflection_ = NULL;

}  // namespace

void protobuf_AssignDesc_rpc_5ftypes_2eproto() {
  protobuf_AddDesc_rpc_5ftypes_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rpc_types.proto");
  GOOGLE_CHECK(file != NULL);
  NO_RESPONSE_descriptor_ = file->message_type(0);
  static const int NO_RESPONSE_offsets_[1] = {
  };
  NO_RESPONSE_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NO_RESPONSE_descriptor_,
      NO_RESPONSE::default_instance_,
      NO_RESPONSE_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NO_RESPONSE, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NO_RESPONSE, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NO_RESPONSE));
  Address_descriptor_ = file->message_type(1);
  static const int Address_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Address, address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Address, port_),
  };
  Address_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Address_descriptor_,
      Address::default_instance_,
      Address_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Address, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Address, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Address));
  ProcessId_descriptor_ = file->message_type(2);
  static const int ProcessId_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessId, label_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessId, epoch_),
  };
  ProcessId_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProcessId_descriptor_,
      ProcessId::default_instance_,
      ProcessId_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessId, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessId, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProcessId));
  ObjectAddress_descriptor_ = file->message_type(3);
  static const int ObjectAddress_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectAddress, host_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectAddress, object_id_),
  };
  ObjectAddress_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ObjectAddress_descriptor_,
      ObjectAddress::default_instance_,
      ObjectAddress_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectAddress, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectAddress, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ObjectAddress));
  NoData_descriptor_ = file->message_type(4);
  static const int NoData_offsets_[1] = {
  };
  NoData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NoData_descriptor_,
      NoData::default_instance_,
      NoData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NoData));
  ErrorInfo_descriptor_ = file->message_type(5);
  static const int ErrorInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrorInfo, object_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrorInfo, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrorInfo, service_hash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrorInfo, method_id_),
  };
  ErrorInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ErrorInfo_descriptor_,
      ErrorInfo::default_instance_,
      ErrorInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrorInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrorInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ErrorInfo));
  FanoutTarget_descriptor_ = file->message_type(6);
  static const int FanoutTarget_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FanoutTarget, client_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FanoutTarget, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FanoutTarget, object_id_),
  };
  FanoutTarget_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FanoutTarget_descriptor_,
      FanoutTarget::default_instance_,
      FanoutTarget_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FanoutTarget, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FanoutTarget, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FanoutTarget));
  Header_descriptor_ = file->message_type(7);
  static const int Header_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, service_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, method_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, object_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, timeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, is_response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, forward_targets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, service_hash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, client_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, fanout_target_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, client_id_fanout_target_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, client_record_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, original_sender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, sender_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, router_label_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, error_reason_),
  };
  Header_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Header_descriptor_,
      Header::default_instance_,
      Header_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Header));
  KafkaHeader_descriptor_ = file->message_type(8);
  static const int KafkaHeader_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KafkaHeader, service_hash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KafkaHeader, method_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KafkaHeader, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KafkaHeader, object_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KafkaHeader, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KafkaHeader, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KafkaHeader, timeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KafkaHeader, forward_target_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KafkaHeader, return_topic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KafkaHeader, client_id_),
  };
  KafkaHeader_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KafkaHeader_descriptor_,
      KafkaHeader::default_instance_,
      KafkaHeader_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KafkaHeader, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KafkaHeader, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KafkaHeader));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rpc_5ftypes_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NO_RESPONSE_descriptor_, &NO_RESPONSE::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Address_descriptor_, &Address::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProcessId_descriptor_, &ProcessId::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ObjectAddress_descriptor_, &ObjectAddress::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NoData_descriptor_, &NoData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ErrorInfo_descriptor_, &ErrorInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FanoutTarget_descriptor_, &FanoutTarget::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Header_descriptor_, &Header::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KafkaHeader_descriptor_, &KafkaHeader::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rpc_5ftypes_2eproto() {
  delete NO_RESPONSE::default_instance_;
  delete NO_RESPONSE_reflection_;
  delete Address::default_instance_;
  delete Address_reflection_;
  delete ProcessId::default_instance_;
  delete ProcessId_reflection_;
  delete ObjectAddress::default_instance_;
  delete ObjectAddress_reflection_;
  delete NoData::default_instance_;
  delete NoData_reflection_;
  delete ErrorInfo::default_instance_;
  delete ErrorInfo_reflection_;
  delete FanoutTarget::default_instance_;
  delete FanoutTarget_reflection_;
  delete Header::default_instance_;
  delete Header_reflection_;
  delete KafkaHeader::default_instance_;
  delete KafkaHeader_reflection_;
}

void protobuf_AddDesc_rpc_5ftypes_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::bgs::protocol::protobuf_AddDesc_global_5fextensions_2ffield_5foptions_2eproto();
  ::bgs::protocol::protobuf_AddDesc_global_5fextensions_2fmethod_5foptions_2eproto();
  ::bgs::protocol::protobuf_AddDesc_global_5fextensions_2fmessage_5foptions_2eproto();
  ::bgs::protocol::protobuf_AddDesc_global_5fextensions_2fservice_5foptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017rpc_types.proto\022\014bgs.protocol\032%global_"
    "extensions/field_options.proto\032&global_e"
    "xtensions/method_options.proto\032\'global_e"
    "xtensions/message_options.proto\032\'global_"
    "extensions/service_options.proto\"\r\n\013NO_R"
    "ESPONSE\"(\n\007Address\022\017\n\007address\030\001 \002(\t\022\014\n\004p"
    "ort\030\002 \001(\r\"3\n\tProcessId\022\027\n\005label\030\001 \002(\rB\010\212"
    "\371+\004\022\002\020\000\022\r\n\005epoch\030\002 \002(\r\"L\n\rObjectAddress\022"
    "%\n\004host\030\001 \002(\0132\027.bgs.protocol.ProcessId\022\024"
    "\n\tobject_id\030\002 \001(\004:\0010\"\010\n\006NoData\"y\n\tErrorI"
    "nfo\0223\n\016object_address\030\001 \002(\0132\033.bgs.protoc"
    "ol.ObjectAddress\022\016\n\006status\030\002 \002(\r\022\024\n\014serv"
    "ice_hash\030\003 \002(\r\022\021\n\tmethod_id\030\004 \002(\r\"A\n\014Fan"
    "outTarget\022\021\n\tclient_id\030\001 \001(\t\022\013\n\003key\030\002 \001("
    "\014\022\021\n\tobject_id\030\003 \001(\004\"\347\003\n\006Header\022\022\n\nservi"
    "ce_id\030\001 \002(\r\022\021\n\tmethod_id\030\002 \001(\r\022\r\n\005token\030"
    "\003 \002(\r\022\024\n\tobject_id\030\004 \001(\004:\0010\022\017\n\004size\030\005 \001("
    "\r:\0010\022\021\n\006status\030\006 \001(\r:\0010\022&\n\005error\030\007 \003(\0132\027"
    ".bgs.protocol.ErrorInfo\022\017\n\007timeout\030\010 \001(\004"
    "\022\023\n\013is_response\030\t \001(\010\0220\n\017forward_targets"
    "\030\n \003(\0132\027.bgs.protocol.ProcessId\022\024\n\014servi"
    "ce_hash\030\013 \001(\007\022\021\n\tclient_id\030\r \001(\t\0221\n\rfano"
    "ut_target\030\016 \003(\0132\032.bgs.protocol.FanoutTar"
    "get\022\037\n\027client_id_fanout_target\030\017 \003(\t\022\025\n\r"
    "client_record\030\020 \001(\014\022\027\n\017original_sender\030\021"
    " \001(\014\022\024\n\014sender_token\030\022 \001(\r\022\024\n\014router_lab"
    "el\030\023 \001(\r\022\024\n\014error_reason\030\024 \001(\t\"\352\001\n\013Kafka"
    "Header\022\024\n\014service_hash\030\001 \001(\007\022\021\n\tmethod_i"
    "d\030\002 \001(\r\022\r\n\005token\030\003 \001(\r\022\024\n\tobject_id\030\004 \001("
    "\004:\0010\022\017\n\004size\030\005 \001(\r:\0010\022\021\n\006status\030\006 \001(\r:\0010"
    "\022\017\n\007timeout\030\007 \001(\004\022/\n\016forward_target\030\010 \001("
    "\0132\027.bgs.protocol.ProcessId\022\024\n\014return_top"
    "ic\030\t \001(\t\022\021\n\tclient_id\030\013 \001(\tB\033\n\rbnet.prot"
    "ocolB\010RpcProtoH\002P\000P\001P\002P\003", 1344);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rpc_types.proto", &protobuf_RegisterTypes);
  NO_RESPONSE::default_instance_ = new NO_RESPONSE();
  Address::default_instance_ = new Address();
  ProcessId::default_instance_ = new ProcessId();
  ObjectAddress::default_instance_ = new ObjectAddress();
  NoData::default_instance_ = new NoData();
  ErrorInfo::default_instance_ = new ErrorInfo();
  FanoutTarget::default_instance_ = new FanoutTarget();
  Header::default_instance_ = new Header();
  KafkaHeader::default_instance_ = new KafkaHeader();
  NO_RESPONSE::default_instance_->InitAsDefaultInstance();
  Address::default_instance_->InitAsDefaultInstance();
  ProcessId::default_instance_->InitAsDefaultInstance();
  ObjectAddress::default_instance_->InitAsDefaultInstance();
  NoData::default_instance_->InitAsDefaultInstance();
  ErrorInfo::default_instance_->InitAsDefaultInstance();
  FanoutTarget::default_instance_->InitAsDefaultInstance();
  Header::default_instance_->InitAsDefaultInstance();
  KafkaHeader::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rpc_5ftypes_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rpc_5ftypes_2eproto {
  StaticDescriptorInitializer_rpc_5ftypes_2eproto() {
    protobuf_AddDesc_rpc_5ftypes_2eproto();
  }
} static_descriptor_initializer_rpc_5ftypes_2eproto_;
// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

NO_RESPONSE::NO_RESPONSE()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.NO_RESPONSE)
}

void NO_RESPONSE::InitAsDefaultInstance() {
}

NO_RESPONSE::NO_RESPONSE(const NO_RESPONSE& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.NO_RESPONSE)
}

void NO_RESPONSE::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NO_RESPONSE::~NO_RESPONSE() {
  // @@protoc_insertion_point(destructor:bgs.protocol.NO_RESPONSE)
  SharedDtor();
}

void NO_RESPONSE::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NO_RESPONSE::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NO_RESPONSE::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NO_RESPONSE_descriptor_;
}

const NO_RESPONSE& NO_RESPONSE::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_5ftypes_2eproto();
  return *default_instance_;
}

NO_RESPONSE* NO_RESPONSE::default_instance_ = NULL;

NO_RESPONSE* NO_RESPONSE::New() const {
  return new NO_RESPONSE;
}

void NO_RESPONSE::Swap(NO_RESPONSE* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata NO_RESPONSE::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NO_RESPONSE_descriptor_;
  metadata.reflection = NO_RESPONSE_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int Address::kAddressFieldNumber;
const int Address::kPortFieldNumber;
#endif  // !_MSC_VER

Address::Address()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.Address)
}

void Address::InitAsDefaultInstance() {
}

Address::Address(const Address& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.Address)
}

void Address::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  address_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Address::~Address() {
  // @@protoc_insertion_point(destructor:bgs.protocol.Address)
  SharedDtor();
}

void Address::SharedDtor() {
  if (address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete address_;
  }
  if (this != default_instance_) {
  }
}

void Address::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Address::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Address_descriptor_;
}

const Address& Address::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_5ftypes_2eproto();
  return *default_instance_;
}

Address* Address::default_instance_ = NULL;

Address* Address::New() const {
  return new Address;
}

void Address::Swap(Address* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata Address::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Address_descriptor_;
  metadata.reflection = Address_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int ProcessId::kLabelFieldNumber;
const int ProcessId::kEpochFieldNumber;
#endif  // !_MSC_VER

ProcessId::ProcessId()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.ProcessId)
}

void ProcessId::InitAsDefaultInstance() {
}

ProcessId::ProcessId(const ProcessId& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.ProcessId)
}

void ProcessId::SharedCtor() {
  _cached_size_ = 0;
  label_ = 0u;
  epoch_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProcessId::~ProcessId() {
  // @@protoc_insertion_point(destructor:bgs.protocol.ProcessId)
  SharedDtor();
}

void ProcessId::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProcessId::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProcessId::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProcessId_descriptor_;
}

const ProcessId& ProcessId::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_5ftypes_2eproto();
  return *default_instance_;
}

ProcessId* ProcessId::default_instance_ = NULL;

ProcessId* ProcessId::New() const {
  return new ProcessId;
}

void ProcessId::Swap(ProcessId* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata ProcessId::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProcessId_descriptor_;
  metadata.reflection = ProcessId_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int ObjectAddress::kHostFieldNumber;
const int ObjectAddress::kObjectIdFieldNumber;
#endif  // !_MSC_VER

ObjectAddress::ObjectAddress()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.ObjectAddress)
}

void ObjectAddress::InitAsDefaultInstance() {
  host_ = const_cast< ::bgs::protocol::ProcessId*>(&::bgs::protocol::ProcessId::default_instance());
}

ObjectAddress::ObjectAddress(const ObjectAddress& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.ObjectAddress)
}

void ObjectAddress::SharedCtor() {
  _cached_size_ = 0;
  host_ = NULL;
  object_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ObjectAddress::~ObjectAddress() {
  // @@protoc_insertion_point(destructor:bgs.protocol.ObjectAddress)
  SharedDtor();
}

void ObjectAddress::SharedDtor() {
  if (this != default_instance_) {
    delete host_;
  }
}

void ObjectAddress::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectAddress::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObjectAddress_descriptor_;
}

const ObjectAddress& ObjectAddress::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_5ftypes_2eproto();
  return *default_instance_;
}

ObjectAddress* ObjectAddress::default_instance_ = NULL;

ObjectAddress* ObjectAddress::New() const {
  return new ObjectAddress;
}

void ObjectAddress::Swap(ObjectAddress* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata ObjectAddress::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObjectAddress_descriptor_;
  metadata.reflection = ObjectAddress_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

NoData::NoData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.NoData)
}

void NoData::InitAsDefaultInstance() {
}

NoData::NoData(const NoData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.NoData)
}

void NoData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NoData::~NoData() {
  // @@protoc_insertion_point(destructor:bgs.protocol.NoData)
  SharedDtor();
}

void NoData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NoData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NoData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NoData_descriptor_;
}

const NoData& NoData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_5ftypes_2eproto();
  return *default_instance_;
}

NoData* NoData::default_instance_ = NULL;

NoData* NoData::New() const {
  return new NoData;
}

void NoData::Swap(NoData* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata NoData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NoData_descriptor_;
  metadata.reflection = NoData_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int ErrorInfo::kObjectAddressFieldNumber;
const int ErrorInfo::kStatusFieldNumber;
const int ErrorInfo::kServiceHashFieldNumber;
const int ErrorInfo::kMethodIdFieldNumber;
#endif  // !_MSC_VER

ErrorInfo::ErrorInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.ErrorInfo)
}

void ErrorInfo::InitAsDefaultInstance() {
  object_address_ = const_cast< ::bgs::protocol::ObjectAddress*>(&::bgs::protocol::ObjectAddress::default_instance());
}

ErrorInfo::ErrorInfo(const ErrorInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.ErrorInfo)
}

void ErrorInfo::SharedCtor() {
  _cached_size_ = 0;
  object_address_ = NULL;
  status_ = 0u;
  service_hash_ = 0u;
  method_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ErrorInfo::~ErrorInfo() {
  // @@protoc_insertion_point(destructor:bgs.protocol.ErrorInfo)
  SharedDtor();
}

void ErrorInfo::SharedDtor() {
  if (this != default_instance_) {
    delete object_address_;
  }
}

void ErrorInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ErrorInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ErrorInfo_descriptor_;
}

const ErrorInfo& ErrorInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_5ftypes_2eproto();
  return *default_instance_;
}

ErrorInfo* ErrorInfo::default_instance_ = NULL;

ErrorInfo* ErrorInfo::New() const {
  return new ErrorInfo;
}

void ErrorInfo::Swap(ErrorInfo* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata ErrorInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ErrorInfo_descriptor_;
  metadata.reflection = ErrorInfo_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int FanoutTarget::kClientIdFieldNumber;
const int FanoutTarget::kKeyFieldNumber;
const int FanoutTarget::kObjectIdFieldNumber;
#endif  // !_MSC_VER

FanoutTarget::FanoutTarget()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.FanoutTarget)
}

void FanoutTarget::InitAsDefaultInstance() {
}

FanoutTarget::FanoutTarget(const FanoutTarget& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.FanoutTarget)
}

void FanoutTarget::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  client_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  object_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FanoutTarget::~FanoutTarget() {
  // @@protoc_insertion_point(destructor:bgs.protocol.FanoutTarget)
  SharedDtor();
}

void FanoutTarget::SharedDtor() {
  if (client_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete client_id_;
  }
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (this != default_instance_) {
  }
}

void FanoutTarget::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FanoutTarget::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FanoutTarget_descriptor_;
}

const FanoutTarget& FanoutTarget::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_5ftypes_2eproto();
  return *default_instance_;
}

FanoutTarget* FanoutTarget::default_instance_ = NULL;

FanoutTarget* FanoutTarget::New() const {
  return new FanoutTarget;
}

void FanoutTarget::Swap(FanoutTarget* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata FanoutTarget::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FanoutTarget_descriptor_;
  metadata.reflection = FanoutTarget_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int Header::kServiceIdFieldNumber;
const int Header::kMethodIdFieldNumber;
const int Header::kTokenFieldNumber;
const int Header::kObjectIdFieldNumber;
const int Header::kSizeFieldNumber;
const int Header::kStatusFieldNumber;
const int Header::kErrorFieldNumber;
const int Header::kTimeoutFieldNumber;
const int Header::kIsResponseFieldNumber;
const int Header::kForwardTargetsFieldNumber;
const int Header::kServiceHashFieldNumber;
const int Header::kClientIdFieldNumber;
const int Header::kFanoutTargetFieldNumber;
const int Header::kClientIdFanoutTargetFieldNumber;
const int Header::kClientRecordFieldNumber;
const int Header::kOriginalSenderFieldNumber;
const int Header::kSenderTokenFieldNumber;
const int Header::kRouterLabelFieldNumber;
const int Header::kErrorReasonFieldNumber;
#endif  // !_MSC_VER

Header::Header()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.Header)
}

void Header::InitAsDefaultInstance() {
}

Header::Header(const Header& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.Header)
}

void Header::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  service_id_ = 0u;
  method_id_ = 0u;
  token_ = 0u;
  object_id_ = GOOGLE_ULONGLONG(0);
  size_ = 0u;
  status_ = 0u;
  timeout_ = GOOGLE_ULONGLONG(0);
  is_response_ = false;
  service_hash_ = 0u;
  client_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_record_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  original_sender_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sender_token_ = 0u;
  router_label_ = 0u;
  error_reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Header::~Header() {
  // @@protoc_insertion_point(destructor:bgs.protocol.Header)
  SharedDtor();
}

void Header::SharedDtor() {
  if (client_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete client_id_;
  }
  if (client_record_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete client_record_;
  }
  if (original_sender_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete original_sender_;
  }
  if (error_reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete error_reason_;
  }
  if (this != default_instance_) {
  }
}

void Header::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Header::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Header_descriptor_;
}

const Header& Header::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_5ftypes_2eproto();
  return *default_instance_;
}

Header* Header::default_instance_ = NULL;

Header* Header::New() const {
  return new Header;
}

void Header::Swap(Header* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata Header::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Header_descriptor_;
  metadata.reflection = Header_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int KafkaHeader::kServiceHashFieldNumber;
const int KafkaHeader::kMethodIdFieldNumber;
const int KafkaHeader::kTokenFieldNumber;
const int KafkaHeader::kObjectIdFieldNumber;
const int KafkaHeader::kSizeFieldNumber;
const int KafkaHeader::kStatusFieldNumber;
const int KafkaHeader::kTimeoutFieldNumber;
const int KafkaHeader::kForwardTargetFieldNumber;
const int KafkaHeader::kReturnTopicFieldNumber;
const int KafkaHeader::kClientIdFieldNumber;
#endif  // !_MSC_VER

KafkaHeader::KafkaHeader()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.KafkaHeader)
}

void KafkaHeader::InitAsDefaultInstance() {
  forward_target_ = const_cast< ::bgs::protocol::ProcessId*>(&::bgs::protocol::ProcessId::default_instance());
}

KafkaHeader::KafkaHeader(const KafkaHeader& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.KafkaHeader)
}

void KafkaHeader::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  service_hash_ = 0u;
  method_id_ = 0u;
  token_ = 0u;
  object_id_ = GOOGLE_ULONGLONG(0);
  size_ = 0u;
  status_ = 0u;
  timeout_ = GOOGLE_ULONGLONG(0);
  forward_target_ = NULL;
  return_topic_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KafkaHeader::~KafkaHeader() {
  // @@protoc_insertion_point(destructor:bgs.protocol.KafkaHeader)
  SharedDtor();
}

void KafkaHeader::SharedDtor() {
  if (return_topic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete return_topic_;
  }
  if (client_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete client_id_;
  }
  if (this != default_instance_) {
    delete forward_target_;
  }
}

void KafkaHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KafkaHeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KafkaHeader_descriptor_;
}

const KafkaHeader& KafkaHeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_5ftypes_2eproto();
  return *default_instance_;
}

KafkaHeader* KafkaHeader::default_instance_ = NULL;

KafkaHeader* KafkaHeader::New() const {
  return new KafkaHeader;
}

void KafkaHeader::Swap(KafkaHeader* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata KafkaHeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KafkaHeader_descriptor_;
  metadata.reflection = KafkaHeader_reflection_;
  return metadata;
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace bgs

// @@protoc_insertion_point(global_scope)
