// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: notification_service.proto

#ifndef PROTOBUF_notification_5fservice_2eproto__INCLUDED
#define PROTOBUF_notification_5fservice_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "rpc_types.pb.h"
#include "notification_types.pb.h"
#include "ServiceBase.h"
#include "MessageBuffer.h"
#include <functional>
#include <type_traits>
// @@protoc_insertion_point(includes)

namespace bgs {
namespace protocol {
namespace notification {
namespace v1 {

// Internal implementation detail -- do not call these.
void TC_PROTO_API protobuf_AddDesc_notification_5fservice_2eproto();
void protobuf_AssignDesc_notification_5fservice_2eproto();
void protobuf_ShutdownFile_notification_5fservice_2eproto();

class SubscribeRequest;
class UnsubscribeRequest;
class PublishRequest;

// ===================================================================

class TC_PROTO_API SubscribeRequest : public ::google::protobuf::Message {
 public:
  SubscribeRequest();
  virtual ~SubscribeRequest();

  SubscribeRequest(const SubscribeRequest& from);

  inline SubscribeRequest& operator=(const SubscribeRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SubscribeRequest& default_instance();

  void Swap(SubscribeRequest* other);

  // implements Message ----------------------------------------------

  SubscribeRequest* New() const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .bgs.protocol.notification.v1.Subscription subscription = 1;
  inline bool has_subscription() const;
  inline void clear_subscription();
  static const int kSubscriptionFieldNumber = 1;
  inline const ::bgs::protocol::notification::v1::Subscription& subscription() const;
  inline ::bgs::protocol::notification::v1::Subscription* mutable_subscription();
  inline ::bgs::protocol::notification::v1::Subscription* release_subscription();
  inline void set_allocated_subscription(::bgs::protocol::notification::v1::Subscription* subscription);

  // @@protoc_insertion_point(class_scope:bgs.protocol.notification.v1.SubscribeRequest)
 private:
  inline void set_has_subscription();
  inline void clear_has_subscription();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::bgs::protocol::notification::v1::Subscription* subscription_;
  friend void TC_PROTO_API protobuf_AddDesc_notification_5fservice_2eproto();
  friend void protobuf_AssignDesc_notification_5fservice_2eproto();
  friend void protobuf_ShutdownFile_notification_5fservice_2eproto();

  void InitAsDefaultInstance();
  static SubscribeRequest* default_instance_;
};
// -------------------------------------------------------------------

class TC_PROTO_API UnsubscribeRequest : public ::google::protobuf::Message {
 public:
  UnsubscribeRequest();
  virtual ~UnsubscribeRequest();

  UnsubscribeRequest(const UnsubscribeRequest& from);

  inline UnsubscribeRequest& operator=(const UnsubscribeRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UnsubscribeRequest& default_instance();

  void Swap(UnsubscribeRequest* other);

  // implements Message ----------------------------------------------

  UnsubscribeRequest* New() const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .bgs.protocol.notification.v1.Subscription subscription = 1;
  inline bool has_subscription() const;
  inline void clear_subscription();
  static const int kSubscriptionFieldNumber = 1;
  inline const ::bgs::protocol::notification::v1::Subscription& subscription() const;
  inline ::bgs::protocol::notification::v1::Subscription* mutable_subscription();
  inline ::bgs::protocol::notification::v1::Subscription* release_subscription();
  inline void set_allocated_subscription(::bgs::protocol::notification::v1::Subscription* subscription);

  // @@protoc_insertion_point(class_scope:bgs.protocol.notification.v1.UnsubscribeRequest)
 private:
  inline void set_has_subscription();
  inline void clear_has_subscription();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::bgs::protocol::notification::v1::Subscription* subscription_;
  friend void TC_PROTO_API protobuf_AddDesc_notification_5fservice_2eproto();
  friend void protobuf_AssignDesc_notification_5fservice_2eproto();
  friend void protobuf_ShutdownFile_notification_5fservice_2eproto();

  void InitAsDefaultInstance();
  static UnsubscribeRequest* default_instance_;
};
// -------------------------------------------------------------------

class TC_PROTO_API PublishRequest : public ::google::protobuf::Message {
 public:
  PublishRequest();
  virtual ~PublishRequest();

  PublishRequest(const PublishRequest& from);

  inline PublishRequest& operator=(const PublishRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PublishRequest& default_instance();

  void Swap(PublishRequest* other);

  // implements Message ----------------------------------------------

  PublishRequest* New() const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .bgs.protocol.notification.v1.Target target = 1;
  inline bool has_target() const;
  inline void clear_target();
  static const int kTargetFieldNumber = 1;
  inline const ::bgs::protocol::notification::v1::Target& target() const;
  inline ::bgs::protocol::notification::v1::Target* mutable_target();
  inline ::bgs::protocol::notification::v1::Target* release_target();
  inline void set_allocated_target(::bgs::protocol::notification::v1::Target* target);

  // optional .bgs.protocol.notification.v1.Notification notification = 2;
  inline bool has_notification() const;
  inline void clear_notification();
  static const int kNotificationFieldNumber = 2;
  inline const ::bgs::protocol::notification::v1::Notification& notification() const;
  inline ::bgs::protocol::notification::v1::Notification* mutable_notification();
  inline ::bgs::protocol::notification::v1::Notification* release_notification();
  inline void set_allocated_notification(::bgs::protocol::notification::v1::Notification* notification);

  // @@protoc_insertion_point(class_scope:bgs.protocol.notification.v1.PublishRequest)
 private:
  inline void set_has_target();
  inline void clear_has_target();
  inline void set_has_notification();
  inline void clear_has_notification();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::bgs::protocol::notification::v1::Target* target_;
  ::bgs::protocol::notification::v1::Notification* notification_;
  friend void TC_PROTO_API protobuf_AddDesc_notification_5fservice_2eproto();
  friend void protobuf_AssignDesc_notification_5fservice_2eproto();
  friend void protobuf_ShutdownFile_notification_5fservice_2eproto();

  void InitAsDefaultInstance();
  static PublishRequest* default_instance_;
};
// ===================================================================

class TC_PROTO_API NotificationService : public ServiceBase
{
 public:

  explicit NotificationService(bool use_original_hash);
  NotificationService(NotificationService const&) = delete;
  NotificationService(NotificationService&&) = delete;
  NotificationService& operator=(NotificationService const&) = delete;
  NotificationService& operator=(NotificationService&&) = delete;
  virtual ~NotificationService();

  typedef std::integral_constant<uint32, 0xCBE3C43u> OriginalHash;
  typedef std::integral_constant<uint32, 0x53C8C253u> NameHash;

  static google::protobuf::ServiceDescriptor const* descriptor();

  void CallServerMethod(uint32 token, uint32 methodId, MessageBuffer buffer) final;

 protected:
  // server methods --------------------------------------------------
  virtual uint32 HandleSendNotification(::bgs::protocol::notification::v1::Notification const* request, ::bgs::protocol::NoData* response, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& continuation);
  virtual uint32 HandleSubscribe(::bgs::protocol::notification::v1::SubscribeRequest const* request, ::bgs::protocol::NoData* response, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& continuation);
  virtual uint32 HandleUnsubscribe(::bgs::protocol::notification::v1::UnsubscribeRequest const* request, ::bgs::protocol::NoData* response, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& continuation);
  virtual uint32 HandlePublish(::bgs::protocol::notification::v1::PublishRequest const* request, ::bgs::protocol::NoData* response, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& continuation);

 private:
  void ParseAndHandleSendNotification(uint32 token, uint32 methodId, MessageBuffer& buffer);
  void ParseAndHandleSubscribe(uint32 token, uint32 methodId, MessageBuffer& buffer);
  void ParseAndHandleUnsubscribe(uint32 token, uint32 methodId, MessageBuffer& buffer);
  void ParseAndHandlePublish(uint32 token, uint32 methodId, MessageBuffer& buffer);
};

// -------------------------------------------------------------------

class TC_PROTO_API NotificationListener : public ServiceBase
{
 public:

  explicit NotificationListener(bool use_original_hash);
  NotificationListener(NotificationListener const&) = delete;
  NotificationListener(NotificationListener&&) = delete;
  NotificationListener& operator=(NotificationListener const&) = delete;
  NotificationListener& operator=(NotificationListener&&) = delete;
  virtual ~NotificationListener();

  typedef std::integral_constant<uint32, 0xE1CB2EA8u> OriginalHash;
  typedef std::integral_constant<uint32, 0xC1490E58u> NameHash;

  static google::protobuf::ServiceDescriptor const* descriptor();

  // client methods --------------------------------------------------
  void OnNotificationReceived(::bgs::protocol::notification::v1::Notification const* request, bool client = false, bool server = false);

  void CallServerMethod(uint32 token, uint32 methodId, MessageBuffer buffer) final;
};

// ===================================================================

// ===================================================================

// SubscribeRequest

// optional .bgs.protocol.notification.v1.Subscription subscription = 1;
inline bool SubscribeRequest::has_subscription() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SubscribeRequest::set_has_subscription() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SubscribeRequest::clear_has_subscription() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SubscribeRequest::clear_subscription() {
  if (subscription_ != NULL) subscription_->::bgs::protocol::notification::v1::Subscription::Clear();
  clear_has_subscription();
}
inline const ::bgs::protocol::notification::v1::Subscription& SubscribeRequest::subscription() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.notification.v1.SubscribeRequest.subscription)
  return subscription_ != NULL ? *subscription_ : *default_instance_->subscription_;
}
inline ::bgs::protocol::notification::v1::Subscription* SubscribeRequest::mutable_subscription() {
  set_has_subscription();
  if (subscription_ == NULL) subscription_ = new ::bgs::protocol::notification::v1::Subscription;
  // @@protoc_insertion_point(field_mutable:bgs.protocol.notification.v1.SubscribeRequest.subscription)
  return subscription_;
}
inline ::bgs::protocol::notification::v1::Subscription* SubscribeRequest::release_subscription() {
  clear_has_subscription();
  ::bgs::protocol::notification::v1::Subscription* temp = subscription_;
  subscription_ = NULL;
  return temp;
}
inline void SubscribeRequest::set_allocated_subscription(::bgs::protocol::notification::v1::Subscription* subscription) {
  delete subscription_;
  subscription_ = subscription;
  if (subscription) {
    set_has_subscription();
  } else {
    clear_has_subscription();
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.notification.v1.SubscribeRequest.subscription)
}

// -------------------------------------------------------------------

// UnsubscribeRequest

// optional .bgs.protocol.notification.v1.Subscription subscription = 1;
inline bool UnsubscribeRequest::has_subscription() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UnsubscribeRequest::set_has_subscription() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UnsubscribeRequest::clear_has_subscription() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UnsubscribeRequest::clear_subscription() {
  if (subscription_ != NULL) subscription_->::bgs::protocol::notification::v1::Subscription::Clear();
  clear_has_subscription();
}
inline const ::bgs::protocol::notification::v1::Subscription& UnsubscribeRequest::subscription() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.notification.v1.UnsubscribeRequest.subscription)
  return subscription_ != NULL ? *subscription_ : *default_instance_->subscription_;
}
inline ::bgs::protocol::notification::v1::Subscription* UnsubscribeRequest::mutable_subscription() {
  set_has_subscription();
  if (subscription_ == NULL) subscription_ = new ::bgs::protocol::notification::v1::Subscription;
  // @@protoc_insertion_point(field_mutable:bgs.protocol.notification.v1.UnsubscribeRequest.subscription)
  return subscription_;
}
inline ::bgs::protocol::notification::v1::Subscription* UnsubscribeRequest::release_subscription() {
  clear_has_subscription();
  ::bgs::protocol::notification::v1::Subscription* temp = subscription_;
  subscription_ = NULL;
  return temp;
}
inline void UnsubscribeRequest::set_allocated_subscription(::bgs::protocol::notification::v1::Subscription* subscription) {
  delete subscription_;
  subscription_ = subscription;
  if (subscription) {
    set_has_subscription();
  } else {
    clear_has_subscription();
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.notification.v1.UnsubscribeRequest.subscription)
}

// -------------------------------------------------------------------

// PublishRequest

// optional .bgs.protocol.notification.v1.Target target = 1;
inline bool PublishRequest::has_target() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PublishRequest::set_has_target() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PublishRequest::clear_has_target() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PublishRequest::clear_target() {
  if (target_ != NULL) target_->::bgs::protocol::notification::v1::Target::Clear();
  clear_has_target();
}
inline const ::bgs::protocol::notification::v1::Target& PublishRequest::target() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.notification.v1.PublishRequest.target)
  return target_ != NULL ? *target_ : *default_instance_->target_;
}
inline ::bgs::protocol::notification::v1::Target* PublishRequest::mutable_target() {
  set_has_target();
  if (target_ == NULL) target_ = new ::bgs::protocol::notification::v1::Target;
  // @@protoc_insertion_point(field_mutable:bgs.protocol.notification.v1.PublishRequest.target)
  return target_;
}
inline ::bgs::protocol::notification::v1::Target* PublishRequest::release_target() {
  clear_has_target();
  ::bgs::protocol::notification::v1::Target* temp = target_;
  target_ = NULL;
  return temp;
}
inline void PublishRequest::set_allocated_target(::bgs::protocol::notification::v1::Target* target) {
  delete target_;
  target_ = target;
  if (target) {
    set_has_target();
  } else {
    clear_has_target();
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.notification.v1.PublishRequest.target)
}

// optional .bgs.protocol.notification.v1.Notification notification = 2;
inline bool PublishRequest::has_notification() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PublishRequest::set_has_notification() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PublishRequest::clear_has_notification() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PublishRequest::clear_notification() {
  if (notification_ != NULL) notification_->::bgs::protocol::notification::v1::Notification::Clear();
  clear_has_notification();
}
inline const ::bgs::protocol::notification::v1::Notification& PublishRequest::notification() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.notification.v1.PublishRequest.notification)
  return notification_ != NULL ? *notification_ : *default_instance_->notification_;
}
inline ::bgs::protocol::notification::v1::Notification* PublishRequest::mutable_notification() {
  set_has_notification();
  if (notification_ == NULL) notification_ = new ::bgs::protocol::notification::v1::Notification;
  // @@protoc_insertion_point(field_mutable:bgs.protocol.notification.v1.PublishRequest.notification)
  return notification_;
}
inline ::bgs::protocol::notification::v1::Notification* PublishRequest::release_notification() {
  clear_has_notification();
  ::bgs::protocol::notification::v1::Notification* temp = notification_;
  notification_ = NULL;
  return temp;
}
inline void PublishRequest::set_allocated_notification(::bgs::protocol::notification::v1::Notification* notification) {
  delete notification_;
  notification_ = notification;
  if (notification) {
    set_has_notification();
  } else {
    clear_has_notification();
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.notification.v1.PublishRequest.notification)
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace notification
}  // namespace protocol
}  // namespace bgs

#ifndef SWIG
namespace google {
namespace protobuf {
}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_notification_5fservice_2eproto__INCLUDED
