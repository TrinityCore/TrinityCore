// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: club_name_generator.proto

#ifndef PROTOBUF_club_5fname_5fgenerator_2eproto__INCLUDED
#define PROTOBUF_club_5fname_5fgenerator_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "club_type.pb.h"  // IWYU pragma: export
#include "Define.h" // for TC_PROTO_API
// @@protoc_insertion_point(includes)

namespace bgs {
namespace protocol {
namespace club {
namespace v1 {

// Internal implementation detail -- do not call these.
void TC_PROTO_API protobuf_AddDesc_club_5fname_5fgenerator_2eproto();
void protobuf_AssignDesc_club_5fname_5fgenerator_2eproto();
void protobuf_ShutdownFile_club_5fname_5fgenerator_2eproto();

class NameGeneratorConfig;
class NameGeneratorScorecard;
class NameGenerator;
class NameGeneratorReplacement;

// ===================================================================

class TC_PROTO_API NameGeneratorConfig : public ::google::protobuf::Message {
 public:
  NameGeneratorConfig();
  virtual ~NameGeneratorConfig();

  NameGeneratorConfig(const NameGeneratorConfig& from);

  inline NameGeneratorConfig& operator=(const NameGeneratorConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NameGeneratorConfig& default_instance();

  void Swap(NameGeneratorConfig* other);

  // implements Message ----------------------------------------------

  NameGeneratorConfig* New() const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .bgs.protocol.club.v1.NameGenerator name_generators = 1;
  inline int name_generators_size() const;
  inline void clear_name_generators();
  static const int kNameGeneratorsFieldNumber = 1;
  inline const ::bgs::protocol::club::v1::NameGenerator& name_generators(int index) const;
  inline ::bgs::protocol::club::v1::NameGenerator* mutable_name_generators(int index);
  inline ::bgs::protocol::club::v1::NameGenerator* add_name_generators();
  inline const ::google::protobuf::RepeatedPtrField< ::bgs::protocol::club::v1::NameGenerator >&
      name_generators() const;
  inline ::google::protobuf::RepeatedPtrField< ::bgs::protocol::club::v1::NameGenerator >*
      mutable_name_generators();

  // optional .bgs.protocol.club.v1.NameGeneratorScorecard club_type_scorecard = 2;
  inline bool has_club_type_scorecard() const;
  inline void clear_club_type_scorecard();
  static const int kClubTypeScorecardFieldNumber = 2;
  inline const ::bgs::protocol::club::v1::NameGeneratorScorecard& club_type_scorecard() const;
  inline ::bgs::protocol::club::v1::NameGeneratorScorecard* mutable_club_type_scorecard();
  inline ::bgs::protocol::club::v1::NameGeneratorScorecard* release_club_type_scorecard();
  inline void set_allocated_club_type_scorecard(::bgs::protocol::club::v1::NameGeneratorScorecard* club_type_scorecard);

  // optional .bgs.protocol.club.v1.NameGeneratorScorecard locale_scorecard = 3;
  inline bool has_locale_scorecard() const;
  inline void clear_locale_scorecard();
  static const int kLocaleScorecardFieldNumber = 3;
  inline const ::bgs::protocol::club::v1::NameGeneratorScorecard& locale_scorecard() const;
  inline ::bgs::protocol::club::v1::NameGeneratorScorecard* mutable_locale_scorecard();
  inline ::bgs::protocol::club::v1::NameGeneratorScorecard* release_locale_scorecard();
  inline void set_allocated_locale_scorecard(::bgs::protocol::club::v1::NameGeneratorScorecard* locale_scorecard);

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.NameGeneratorConfig)
 private:
  inline void set_has_club_type_scorecard();
  inline void clear_has_club_type_scorecard();
  inline void set_has_locale_scorecard();
  inline void clear_has_locale_scorecard();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::bgs::protocol::club::v1::NameGenerator > name_generators_;
  ::bgs::protocol::club::v1::NameGeneratorScorecard* club_type_scorecard_;
  ::bgs::protocol::club::v1::NameGeneratorScorecard* locale_scorecard_;
  friend void TC_PROTO_API protobuf_AddDesc_club_5fname_5fgenerator_2eproto();
  friend void protobuf_AssignDesc_club_5fname_5fgenerator_2eproto();
  friend void protobuf_ShutdownFile_club_5fname_5fgenerator_2eproto();

  void InitAsDefaultInstance();
  static NameGeneratorConfig* default_instance_;
};
// -------------------------------------------------------------------

class TC_PROTO_API NameGeneratorScorecard : public ::google::protobuf::Message {
 public:
  NameGeneratorScorecard();
  virtual ~NameGeneratorScorecard();

  NameGeneratorScorecard(const NameGeneratorScorecard& from);

  inline NameGeneratorScorecard& operator=(const NameGeneratorScorecard& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NameGeneratorScorecard& default_instance();

  void Swap(NameGeneratorScorecard* other);

  // implements Message ----------------------------------------------

  NameGeneratorScorecard* New() const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool is_required = 1;
  inline bool has_is_required() const;
  inline void clear_is_required();
  static const int kIsRequiredFieldNumber = 1;
  inline bool is_required() const;
  inline void set_is_required(bool value);

  // optional uint32 full_match = 2;
  inline bool has_full_match() const;
  inline void clear_full_match();
  static const int kFullMatchFieldNumber = 2;
  inline ::google::protobuf::uint32 full_match() const;
  inline void set_full_match(::google::protobuf::uint32 value);

  // optional uint32 partial_match = 3;
  inline bool has_partial_match() const;
  inline void clear_partial_match();
  static const int kPartialMatchFieldNumber = 3;
  inline ::google::protobuf::uint32 partial_match() const;
  inline void set_partial_match(::google::protobuf::uint32 value);

  // optional uint32 partial_fallback = 4;
  inline bool has_partial_fallback() const;
  inline void clear_partial_fallback();
  static const int kPartialFallbackFieldNumber = 4;
  inline ::google::protobuf::uint32 partial_fallback() const;
  inline void set_partial_fallback(::google::protobuf::uint32 value);

  // optional uint32 full_fallback = 5;
  inline bool has_full_fallback() const;
  inline void clear_full_fallback();
  static const int kFullFallbackFieldNumber = 5;
  inline ::google::protobuf::uint32 full_fallback() const;
  inline void set_full_fallback(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.NameGeneratorScorecard)
 private:
  inline void set_has_is_required();
  inline void clear_has_is_required();
  inline void set_has_full_match();
  inline void clear_has_full_match();
  inline void set_has_partial_match();
  inline void clear_has_partial_match();
  inline void set_has_partial_fallback();
  inline void clear_has_partial_fallback();
  inline void set_has_full_fallback();
  inline void clear_has_full_fallback();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool is_required_;
  ::google::protobuf::uint32 full_match_;
  ::google::protobuf::uint32 partial_match_;
  ::google::protobuf::uint32 partial_fallback_;
  ::google::protobuf::uint32 full_fallback_;
  friend void TC_PROTO_API protobuf_AddDesc_club_5fname_5fgenerator_2eproto();
  friend void protobuf_AssignDesc_club_5fname_5fgenerator_2eproto();
  friend void protobuf_ShutdownFile_club_5fname_5fgenerator_2eproto();

  void InitAsDefaultInstance();
  static NameGeneratorScorecard* default_instance_;
};
// -------------------------------------------------------------------

class TC_PROTO_API NameGenerator : public ::google::protobuf::Message {
 public:
  NameGenerator();
  virtual ~NameGenerator();

  NameGenerator(const NameGenerator& from);

  inline NameGenerator& operator=(const NameGenerator& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NameGenerator& default_instance();

  void Swap(NameGenerator* other);

  // implements Message ----------------------------------------------

  NameGenerator* New() const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string names = 1;
  inline int names_size() const;
  inline void clear_names();
  static const int kNamesFieldNumber = 1;
  inline const ::std::string& names(int index) const;
  inline ::std::string* mutable_names(int index);
  inline void set_names(int index, const ::std::string& value);
  inline void set_names(int index, const char* value);
  inline void set_names(int index, const char* value, size_t size);
  inline ::std::string* add_names();
  inline void add_names(const ::std::string& value);
  inline void add_names(const char* value);
  inline void add_names(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& names() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_names();

  // repeated .bgs.protocol.club.v1.NameGeneratorReplacement replacements = 2;
  inline int replacements_size() const;
  inline void clear_replacements();
  static const int kReplacementsFieldNumber = 2;
  inline const ::bgs::protocol::club::v1::NameGeneratorReplacement& replacements(int index) const;
  inline ::bgs::protocol::club::v1::NameGeneratorReplacement* mutable_replacements(int index);
  inline ::bgs::protocol::club::v1::NameGeneratorReplacement* add_replacements();
  inline const ::google::protobuf::RepeatedPtrField< ::bgs::protocol::club::v1::NameGeneratorReplacement >&
      replacements() const;
  inline ::google::protobuf::RepeatedPtrField< ::bgs::protocol::club::v1::NameGeneratorReplacement >*
      mutable_replacements();

  // repeated .bgs.protocol.club.v1.UniqueClubType club_types = 3;
  inline int club_types_size() const;
  inline void clear_club_types();
  static const int kClubTypesFieldNumber = 3;
  inline const ::bgs::protocol::club::v1::UniqueClubType& club_types(int index) const;
  inline ::bgs::protocol::club::v1::UniqueClubType* mutable_club_types(int index);
  inline ::bgs::protocol::club::v1::UniqueClubType* add_club_types();
  inline const ::google::protobuf::RepeatedPtrField< ::bgs::protocol::club::v1::UniqueClubType >&
      club_types() const;
  inline ::google::protobuf::RepeatedPtrField< ::bgs::protocol::club::v1::UniqueClubType >*
      mutable_club_types();

  // repeated string locales = 4;
  inline int locales_size() const;
  inline void clear_locales();
  static const int kLocalesFieldNumber = 4;
  inline const ::std::string& locales(int index) const;
  inline ::std::string* mutable_locales(int index);
  inline void set_locales(int index, const ::std::string& value);
  inline void set_locales(int index, const char* value);
  inline void set_locales(int index, const char* value, size_t size);
  inline ::std::string* add_locales();
  inline void add_locales(const ::std::string& value);
  inline void add_locales(const char* value);
  inline void add_locales(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& locales() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_locales();

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.NameGenerator)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> names_;
  ::google::protobuf::RepeatedPtrField< ::bgs::protocol::club::v1::NameGeneratorReplacement > replacements_;
  ::google::protobuf::RepeatedPtrField< ::bgs::protocol::club::v1::UniqueClubType > club_types_;
  ::google::protobuf::RepeatedPtrField< ::std::string> locales_;
  friend void TC_PROTO_API protobuf_AddDesc_club_5fname_5fgenerator_2eproto();
  friend void protobuf_AssignDesc_club_5fname_5fgenerator_2eproto();
  friend void protobuf_ShutdownFile_club_5fname_5fgenerator_2eproto();

  void InitAsDefaultInstance();
  static NameGenerator* default_instance_;
};
// -------------------------------------------------------------------

class TC_PROTO_API NameGeneratorReplacement : public ::google::protobuf::Message {
 public:
  NameGeneratorReplacement();
  virtual ~NameGeneratorReplacement();

  NameGeneratorReplacement(const NameGeneratorReplacement& from);

  inline NameGeneratorReplacement& operator=(const NameGeneratorReplacement& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NameGeneratorReplacement& default_instance();

  void Swap(NameGeneratorReplacement* other);

  // implements Message ----------------------------------------------

  NameGeneratorReplacement* New() const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // repeated string options = 2;
  inline int options_size() const;
  inline void clear_options();
  static const int kOptionsFieldNumber = 2;
  inline const ::std::string& options(int index) const;
  inline ::std::string* mutable_options(int index);
  inline void set_options(int index, const ::std::string& value);
  inline void set_options(int index, const char* value);
  inline void set_options(int index, const char* value, size_t size);
  inline ::std::string* add_options();
  inline void add_options(const ::std::string& value);
  inline void add_options(const char* value);
  inline void add_options(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& options() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_options();

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.NameGeneratorReplacement)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* id_;
  ::google::protobuf::RepeatedPtrField< ::std::string> options_;
  friend void TC_PROTO_API protobuf_AddDesc_club_5fname_5fgenerator_2eproto();
  friend void protobuf_AssignDesc_club_5fname_5fgenerator_2eproto();
  friend void protobuf_ShutdownFile_club_5fname_5fgenerator_2eproto();

  void InitAsDefaultInstance();
  static NameGeneratorReplacement* default_instance_;
};
// ===================================================================

// ===================================================================

// ===================================================================

// NameGeneratorConfig

// repeated .bgs.protocol.club.v1.NameGenerator name_generators = 1;
inline int NameGeneratorConfig::name_generators_size() const {
  return name_generators_.size();
}
inline void NameGeneratorConfig::clear_name_generators() {
  name_generators_.Clear();
}
inline const ::bgs::protocol::club::v1::NameGenerator& NameGeneratorConfig::name_generators(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.NameGeneratorConfig.name_generators)
  return name_generators_.Get(index);
}
inline ::bgs::protocol::club::v1::NameGenerator* NameGeneratorConfig::mutable_name_generators(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.NameGeneratorConfig.name_generators)
  return name_generators_.Mutable(index);
}
inline ::bgs::protocol::club::v1::NameGenerator* NameGeneratorConfig::add_name_generators() {
  // @@protoc_insertion_point(field_add:bgs.protocol.club.v1.NameGeneratorConfig.name_generators)
  return name_generators_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bgs::protocol::club::v1::NameGenerator >&
NameGeneratorConfig::name_generators() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.club.v1.NameGeneratorConfig.name_generators)
  return name_generators_;
}
inline ::google::protobuf::RepeatedPtrField< ::bgs::protocol::club::v1::NameGenerator >*
NameGeneratorConfig::mutable_name_generators() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.club.v1.NameGeneratorConfig.name_generators)
  return &name_generators_;
}

// optional .bgs.protocol.club.v1.NameGeneratorScorecard club_type_scorecard = 2;
inline bool NameGeneratorConfig::has_club_type_scorecard() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NameGeneratorConfig::set_has_club_type_scorecard() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NameGeneratorConfig::clear_has_club_type_scorecard() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NameGeneratorConfig::clear_club_type_scorecard() {
  if (club_type_scorecard_ != NULL) club_type_scorecard_->::bgs::protocol::club::v1::NameGeneratorScorecard::Clear();
  clear_has_club_type_scorecard();
}
inline const ::bgs::protocol::club::v1::NameGeneratorScorecard& NameGeneratorConfig::club_type_scorecard() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.NameGeneratorConfig.club_type_scorecard)
  return club_type_scorecard_ != NULL ? *club_type_scorecard_ : *default_instance_->club_type_scorecard_;
}
inline ::bgs::protocol::club::v1::NameGeneratorScorecard* NameGeneratorConfig::mutable_club_type_scorecard() {
  set_has_club_type_scorecard();
  if (club_type_scorecard_ == NULL) club_type_scorecard_ = new ::bgs::protocol::club::v1::NameGeneratorScorecard;
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.NameGeneratorConfig.club_type_scorecard)
  return club_type_scorecard_;
}
inline ::bgs::protocol::club::v1::NameGeneratorScorecard* NameGeneratorConfig::release_club_type_scorecard() {
  clear_has_club_type_scorecard();
  ::bgs::protocol::club::v1::NameGeneratorScorecard* temp = club_type_scorecard_;
  club_type_scorecard_ = NULL;
  return temp;
}
inline void NameGeneratorConfig::set_allocated_club_type_scorecard(::bgs::protocol::club::v1::NameGeneratorScorecard* club_type_scorecard) {
  delete club_type_scorecard_;
  club_type_scorecard_ = club_type_scorecard;
  if (club_type_scorecard) {
    set_has_club_type_scorecard();
  } else {
    clear_has_club_type_scorecard();
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.NameGeneratorConfig.club_type_scorecard)
}

// optional .bgs.protocol.club.v1.NameGeneratorScorecard locale_scorecard = 3;
inline bool NameGeneratorConfig::has_locale_scorecard() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NameGeneratorConfig::set_has_locale_scorecard() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NameGeneratorConfig::clear_has_locale_scorecard() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NameGeneratorConfig::clear_locale_scorecard() {
  if (locale_scorecard_ != NULL) locale_scorecard_->::bgs::protocol::club::v1::NameGeneratorScorecard::Clear();
  clear_has_locale_scorecard();
}
inline const ::bgs::protocol::club::v1::NameGeneratorScorecard& NameGeneratorConfig::locale_scorecard() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.NameGeneratorConfig.locale_scorecard)
  return locale_scorecard_ != NULL ? *locale_scorecard_ : *default_instance_->locale_scorecard_;
}
inline ::bgs::protocol::club::v1::NameGeneratorScorecard* NameGeneratorConfig::mutable_locale_scorecard() {
  set_has_locale_scorecard();
  if (locale_scorecard_ == NULL) locale_scorecard_ = new ::bgs::protocol::club::v1::NameGeneratorScorecard;
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.NameGeneratorConfig.locale_scorecard)
  return locale_scorecard_;
}
inline ::bgs::protocol::club::v1::NameGeneratorScorecard* NameGeneratorConfig::release_locale_scorecard() {
  clear_has_locale_scorecard();
  ::bgs::protocol::club::v1::NameGeneratorScorecard* temp = locale_scorecard_;
  locale_scorecard_ = NULL;
  return temp;
}
inline void NameGeneratorConfig::set_allocated_locale_scorecard(::bgs::protocol::club::v1::NameGeneratorScorecard* locale_scorecard) {
  delete locale_scorecard_;
  locale_scorecard_ = locale_scorecard;
  if (locale_scorecard) {
    set_has_locale_scorecard();
  } else {
    clear_has_locale_scorecard();
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.NameGeneratorConfig.locale_scorecard)
}

// -------------------------------------------------------------------

// NameGeneratorScorecard

// optional bool is_required = 1;
inline bool NameGeneratorScorecard::has_is_required() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NameGeneratorScorecard::set_has_is_required() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NameGeneratorScorecard::clear_has_is_required() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NameGeneratorScorecard::clear_is_required() {
  is_required_ = false;
  clear_has_is_required();
}
inline bool NameGeneratorScorecard::is_required() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.NameGeneratorScorecard.is_required)
  return is_required_;
}
inline void NameGeneratorScorecard::set_is_required(bool value) {
  set_has_is_required();
  is_required_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.NameGeneratorScorecard.is_required)
}

// optional uint32 full_match = 2;
inline bool NameGeneratorScorecard::has_full_match() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NameGeneratorScorecard::set_has_full_match() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NameGeneratorScorecard::clear_has_full_match() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NameGeneratorScorecard::clear_full_match() {
  full_match_ = 0u;
  clear_has_full_match();
}
inline ::google::protobuf::uint32 NameGeneratorScorecard::full_match() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.NameGeneratorScorecard.full_match)
  return full_match_;
}
inline void NameGeneratorScorecard::set_full_match(::google::protobuf::uint32 value) {
  set_has_full_match();
  full_match_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.NameGeneratorScorecard.full_match)
}

// optional uint32 partial_match = 3;
inline bool NameGeneratorScorecard::has_partial_match() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NameGeneratorScorecard::set_has_partial_match() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NameGeneratorScorecard::clear_has_partial_match() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NameGeneratorScorecard::clear_partial_match() {
  partial_match_ = 0u;
  clear_has_partial_match();
}
inline ::google::protobuf::uint32 NameGeneratorScorecard::partial_match() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.NameGeneratorScorecard.partial_match)
  return partial_match_;
}
inline void NameGeneratorScorecard::set_partial_match(::google::protobuf::uint32 value) {
  set_has_partial_match();
  partial_match_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.NameGeneratorScorecard.partial_match)
}

// optional uint32 partial_fallback = 4;
inline bool NameGeneratorScorecard::has_partial_fallback() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NameGeneratorScorecard::set_has_partial_fallback() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NameGeneratorScorecard::clear_has_partial_fallback() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NameGeneratorScorecard::clear_partial_fallback() {
  partial_fallback_ = 0u;
  clear_has_partial_fallback();
}
inline ::google::protobuf::uint32 NameGeneratorScorecard::partial_fallback() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.NameGeneratorScorecard.partial_fallback)
  return partial_fallback_;
}
inline void NameGeneratorScorecard::set_partial_fallback(::google::protobuf::uint32 value) {
  set_has_partial_fallback();
  partial_fallback_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.NameGeneratorScorecard.partial_fallback)
}

// optional uint32 full_fallback = 5;
inline bool NameGeneratorScorecard::has_full_fallback() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NameGeneratorScorecard::set_has_full_fallback() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NameGeneratorScorecard::clear_has_full_fallback() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NameGeneratorScorecard::clear_full_fallback() {
  full_fallback_ = 0u;
  clear_has_full_fallback();
}
inline ::google::protobuf::uint32 NameGeneratorScorecard::full_fallback() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.NameGeneratorScorecard.full_fallback)
  return full_fallback_;
}
inline void NameGeneratorScorecard::set_full_fallback(::google::protobuf::uint32 value) {
  set_has_full_fallback();
  full_fallback_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.NameGeneratorScorecard.full_fallback)
}

// -------------------------------------------------------------------

// NameGenerator

// repeated string names = 1;
inline int NameGenerator::names_size() const {
  return names_.size();
}
inline void NameGenerator::clear_names() {
  names_.Clear();
}
inline const ::std::string& NameGenerator::names(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.NameGenerator.names)
  return names_.Get(index);
}
inline ::std::string* NameGenerator::mutable_names(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.NameGenerator.names)
  return names_.Mutable(index);
}
inline void NameGenerator::set_names(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.NameGenerator.names)
  names_.Mutable(index)->assign(value);
}
inline void NameGenerator::set_names(int index, const char* value) {
  names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:bgs.protocol.club.v1.NameGenerator.names)
}
inline void NameGenerator::set_names(int index, const char* value, size_t size) {
  names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.club.v1.NameGenerator.names)
}
inline ::std::string* NameGenerator::add_names() {
  return names_.Add();
}
inline void NameGenerator::add_names(const ::std::string& value) {
  names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:bgs.protocol.club.v1.NameGenerator.names)
}
inline void NameGenerator::add_names(const char* value) {
  names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:bgs.protocol.club.v1.NameGenerator.names)
}
inline void NameGenerator::add_names(const char* value, size_t size) {
  names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:bgs.protocol.club.v1.NameGenerator.names)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
NameGenerator::names() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.club.v1.NameGenerator.names)
  return names_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
NameGenerator::mutable_names() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.club.v1.NameGenerator.names)
  return &names_;
}

// repeated .bgs.protocol.club.v1.NameGeneratorReplacement replacements = 2;
inline int NameGenerator::replacements_size() const {
  return replacements_.size();
}
inline void NameGenerator::clear_replacements() {
  replacements_.Clear();
}
inline const ::bgs::protocol::club::v1::NameGeneratorReplacement& NameGenerator::replacements(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.NameGenerator.replacements)
  return replacements_.Get(index);
}
inline ::bgs::protocol::club::v1::NameGeneratorReplacement* NameGenerator::mutable_replacements(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.NameGenerator.replacements)
  return replacements_.Mutable(index);
}
inline ::bgs::protocol::club::v1::NameGeneratorReplacement* NameGenerator::add_replacements() {
  // @@protoc_insertion_point(field_add:bgs.protocol.club.v1.NameGenerator.replacements)
  return replacements_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bgs::protocol::club::v1::NameGeneratorReplacement >&
NameGenerator::replacements() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.club.v1.NameGenerator.replacements)
  return replacements_;
}
inline ::google::protobuf::RepeatedPtrField< ::bgs::protocol::club::v1::NameGeneratorReplacement >*
NameGenerator::mutable_replacements() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.club.v1.NameGenerator.replacements)
  return &replacements_;
}

// repeated .bgs.protocol.club.v1.UniqueClubType club_types = 3;
inline int NameGenerator::club_types_size() const {
  return club_types_.size();
}
inline void NameGenerator::clear_club_types() {
  club_types_.Clear();
}
inline const ::bgs::protocol::club::v1::UniqueClubType& NameGenerator::club_types(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.NameGenerator.club_types)
  return club_types_.Get(index);
}
inline ::bgs::protocol::club::v1::UniqueClubType* NameGenerator::mutable_club_types(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.NameGenerator.club_types)
  return club_types_.Mutable(index);
}
inline ::bgs::protocol::club::v1::UniqueClubType* NameGenerator::add_club_types() {
  // @@protoc_insertion_point(field_add:bgs.protocol.club.v1.NameGenerator.club_types)
  return club_types_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bgs::protocol::club::v1::UniqueClubType >&
NameGenerator::club_types() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.club.v1.NameGenerator.club_types)
  return club_types_;
}
inline ::google::protobuf::RepeatedPtrField< ::bgs::protocol::club::v1::UniqueClubType >*
NameGenerator::mutable_club_types() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.club.v1.NameGenerator.club_types)
  return &club_types_;
}

// repeated string locales = 4;
inline int NameGenerator::locales_size() const {
  return locales_.size();
}
inline void NameGenerator::clear_locales() {
  locales_.Clear();
}
inline const ::std::string& NameGenerator::locales(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.NameGenerator.locales)
  return locales_.Get(index);
}
inline ::std::string* NameGenerator::mutable_locales(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.NameGenerator.locales)
  return locales_.Mutable(index);
}
inline void NameGenerator::set_locales(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.NameGenerator.locales)
  locales_.Mutable(index)->assign(value);
}
inline void NameGenerator::set_locales(int index, const char* value) {
  locales_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:bgs.protocol.club.v1.NameGenerator.locales)
}
inline void NameGenerator::set_locales(int index, const char* value, size_t size) {
  locales_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.club.v1.NameGenerator.locales)
}
inline ::std::string* NameGenerator::add_locales() {
  return locales_.Add();
}
inline void NameGenerator::add_locales(const ::std::string& value) {
  locales_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:bgs.protocol.club.v1.NameGenerator.locales)
}
inline void NameGenerator::add_locales(const char* value) {
  locales_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:bgs.protocol.club.v1.NameGenerator.locales)
}
inline void NameGenerator::add_locales(const char* value, size_t size) {
  locales_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:bgs.protocol.club.v1.NameGenerator.locales)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
NameGenerator::locales() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.club.v1.NameGenerator.locales)
  return locales_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
NameGenerator::mutable_locales() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.club.v1.NameGenerator.locales)
  return &locales_;
}

// -------------------------------------------------------------------

// NameGeneratorReplacement

// optional string id = 1;
inline bool NameGeneratorReplacement::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NameGeneratorReplacement::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NameGeneratorReplacement::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NameGeneratorReplacement::clear_id() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& NameGeneratorReplacement::id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.NameGeneratorReplacement.id)
  return *id_;
}
inline void NameGeneratorReplacement::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.NameGeneratorReplacement.id)
}
inline void NameGeneratorReplacement::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set_char:bgs.protocol.club.v1.NameGeneratorReplacement.id)
}
inline void NameGeneratorReplacement::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.club.v1.NameGeneratorReplacement.id)
}
inline ::std::string* NameGeneratorReplacement::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.NameGeneratorReplacement.id)
  return id_;
}
inline ::std::string* NameGeneratorReplacement::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void NameGeneratorReplacement::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.NameGeneratorReplacement.id)
}

// repeated string options = 2;
inline int NameGeneratorReplacement::options_size() const {
  return options_.size();
}
inline void NameGeneratorReplacement::clear_options() {
  options_.Clear();
}
inline const ::std::string& NameGeneratorReplacement::options(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.NameGeneratorReplacement.options)
  return options_.Get(index);
}
inline ::std::string* NameGeneratorReplacement::mutable_options(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.NameGeneratorReplacement.options)
  return options_.Mutable(index);
}
inline void NameGeneratorReplacement::set_options(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.NameGeneratorReplacement.options)
  options_.Mutable(index)->assign(value);
}
inline void NameGeneratorReplacement::set_options(int index, const char* value) {
  options_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:bgs.protocol.club.v1.NameGeneratorReplacement.options)
}
inline void NameGeneratorReplacement::set_options(int index, const char* value, size_t size) {
  options_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.club.v1.NameGeneratorReplacement.options)
}
inline ::std::string* NameGeneratorReplacement::add_options() {
  return options_.Add();
}
inline void NameGeneratorReplacement::add_options(const ::std::string& value) {
  options_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:bgs.protocol.club.v1.NameGeneratorReplacement.options)
}
inline void NameGeneratorReplacement::add_options(const char* value) {
  options_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:bgs.protocol.club.v1.NameGeneratorReplacement.options)
}
inline void NameGeneratorReplacement::add_options(const char* value, size_t size) {
  options_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:bgs.protocol.club.v1.NameGeneratorReplacement.options)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
NameGeneratorReplacement::options() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.club.v1.NameGeneratorReplacement.options)
  return options_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
NameGeneratorReplacement::mutable_options() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.club.v1.NameGeneratorReplacement.options)
  return &options_;
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace club
}  // namespace protocol
}  // namespace bgs

#ifndef SWIG
namespace google {
namespace protobuf {
}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_club_5fname_5fgenerator_2eproto__INCLUDED
