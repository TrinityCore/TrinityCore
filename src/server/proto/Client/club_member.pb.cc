// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: club_member.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "club_member.pb.h"

#include <algorithm>
#include <utility>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
#include "Log.h"
// @@protoc_insertion_point(includes)

namespace bgs {
namespace protocol {
namespace club {
namespace v1 {

namespace {

const ::google::protobuf::Descriptor* Member_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Member_reflection_ = NULL;
const ::google::protobuf::Descriptor* MemberResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MemberResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* RemoveMemberOptions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RemoveMemberOptions_reflection_ = NULL;
const ::google::protobuf::Descriptor* MemberRemovedAssignment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MemberRemovedAssignment_reflection_ = NULL;
const ::google::protobuf::Descriptor* MemberVoiceOptions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MemberVoiceOptions_reflection_ = NULL;
const ::google::protobuf::Descriptor* MemberVoiceState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MemberVoiceState_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateMemberOptions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateMemberOptions_reflection_ = NULL;
const ::google::protobuf::Descriptor* MemberDescription_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MemberDescription_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleOptions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleOptions_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleAssignment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleAssignment_reflection_ = NULL;
const ::google::protobuf::Descriptor* MemberAttributeAssignment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MemberAttributeAssignment_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubscriberStateOptions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubscriberStateOptions_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubscriberStateAssignment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubscriberStateAssignment_reflection_ = NULL;
const ::google::protobuf::Descriptor* MemberStateOptions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MemberStateOptions_reflection_ = NULL;
const ::google::protobuf::Descriptor* MemberStateAssignment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MemberStateAssignment_reflection_ = NULL;

}  // namespace

void protobuf_AssignDesc_club_5fmember_2eproto() {
  protobuf_AddDesc_club_5fmember_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "club_member.proto");
  GOOGLE_CHECK(file != NULL);
  Member_descriptor_ = file->message_type(0);
  static const int Member_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Member, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Member, battle_tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Member, role_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Member, attribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Member, join_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Member, presence_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Member, moderator_mute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Member, whisper_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Member, note_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Member, active_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Member, voice_),
  };
  Member_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Member_descriptor_,
      Member::default_instance_,
      Member_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Member, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Member, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Member));
  MemberResult_descriptor_ = file->message_type(1);
  static const int MemberResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberResult, member_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberResult, status_),
  };
  MemberResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MemberResult_descriptor_,
      MemberResult::default_instance_,
      MemberResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MemberResult));
  RemoveMemberOptions_descriptor_ = file->message_type(2);
  static const int RemoveMemberOptions_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveMemberOptions, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveMemberOptions, reason_),
  };
  RemoveMemberOptions_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RemoveMemberOptions_descriptor_,
      RemoveMemberOptions::default_instance_,
      RemoveMemberOptions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveMemberOptions, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveMemberOptions, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RemoveMemberOptions));
  MemberRemovedAssignment_descriptor_ = file->message_type(3);
  static const int MemberRemovedAssignment_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberRemovedAssignment, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberRemovedAssignment, reason_),
  };
  MemberRemovedAssignment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MemberRemovedAssignment_descriptor_,
      MemberRemovedAssignment::default_instance_,
      MemberRemovedAssignment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberRemovedAssignment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberRemovedAssignment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MemberRemovedAssignment));
  MemberVoiceOptions_descriptor_ = file->message_type(4);
  static const int MemberVoiceOptions_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberVoiceOptions, stream_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberVoiceOptions, joined_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberVoiceOptions, microphone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberVoiceOptions, active_),
  };
  MemberVoiceOptions_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MemberVoiceOptions_descriptor_,
      MemberVoiceOptions::default_instance_,
      MemberVoiceOptions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberVoiceOptions, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberVoiceOptions, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MemberVoiceOptions));
  MemberVoiceState_descriptor_ = file->message_type(5);
  static const int MemberVoiceState_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberVoiceState, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberVoiceState, stream_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberVoiceState, joined_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberVoiceState, microphone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberVoiceState, active_),
  };
  MemberVoiceState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MemberVoiceState_descriptor_,
      MemberVoiceState::default_instance_,
      MemberVoiceState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberVoiceState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberVoiceState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MemberVoiceState));
  CreateMemberOptions_descriptor_ = file->message_type(6);
  static const int CreateMemberOptions_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateMemberOptions, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateMemberOptions, attribute_),
  };
  CreateMemberOptions_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateMemberOptions_descriptor_,
      CreateMemberOptions::default_instance_,
      CreateMemberOptions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateMemberOptions, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateMemberOptions, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateMemberOptions));
  MemberDescription_descriptor_ = file->message_type(7);
  static const int MemberDescription_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberDescription, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberDescription, battle_tag_),
  };
  MemberDescription_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MemberDescription_descriptor_,
      MemberDescription::default_instance_,
      MemberDescription_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberDescription, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberDescription, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MemberDescription));
  RoleOptions_descriptor_ = file->message_type(8);
  static const int RoleOptions_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleOptions, member_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleOptions, role_),
  };
  RoleOptions_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleOptions_descriptor_,
      RoleOptions::default_instance_,
      RoleOptions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleOptions, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleOptions, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleOptions));
  RoleAssignment_descriptor_ = file->message_type(9);
  static const int RoleAssignment_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleAssignment, member_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleAssignment, role_),
  };
  RoleAssignment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleAssignment_descriptor_,
      RoleAssignment::default_instance_,
      RoleAssignment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleAssignment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleAssignment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleAssignment));
  MemberAttributeAssignment_descriptor_ = file->message_type(10);
  static const int MemberAttributeAssignment_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberAttributeAssignment, member_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberAttributeAssignment, attribute_),
  };
  MemberAttributeAssignment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MemberAttributeAssignment_descriptor_,
      MemberAttributeAssignment::default_instance_,
      MemberAttributeAssignment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberAttributeAssignment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberAttributeAssignment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MemberAttributeAssignment));
  SubscriberStateOptions_descriptor_ = file->message_type(11);
  static const int SubscriberStateOptions_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscriberStateOptions, voice_),
  };
  SubscriberStateOptions_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SubscriberStateOptions_descriptor_,
      SubscriberStateOptions::default_instance_,
      SubscriberStateOptions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscriberStateOptions, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscriberStateOptions, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SubscriberStateOptions));
  SubscriberStateAssignment_descriptor_ = file->message_type(12);
  static const int SubscriberStateAssignment_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscriberStateAssignment, member_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscriberStateAssignment, active_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscriberStateAssignment, voice_),
  };
  SubscriberStateAssignment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SubscriberStateAssignment_descriptor_,
      SubscriberStateAssignment::default_instance_,
      SubscriberStateAssignment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscriberStateAssignment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscriberStateAssignment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SubscriberStateAssignment));
  MemberStateOptions_descriptor_ = file->message_type(13);
  static const int MemberStateOptions_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberStateOptions, attribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberStateOptions, presence_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberStateOptions, moderator_mute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberStateOptions, whisper_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberStateOptions, note_),
  };
  MemberStateOptions_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MemberStateOptions_descriptor_,
      MemberStateOptions::default_instance_,
      MemberStateOptions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberStateOptions, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberStateOptions, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MemberStateOptions));
  MemberStateAssignment_descriptor_ = file->message_type(14);
  static const int MemberStateAssignment_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberStateAssignment, member_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberStateAssignment, attribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberStateAssignment, presence_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberStateAssignment, moderator_mute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberStateAssignment, whisper_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberStateAssignment, note_),
  };
  MemberStateAssignment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MemberStateAssignment_descriptor_,
      MemberStateAssignment::default_instance_,
      MemberStateAssignment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberStateAssignment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberStateAssignment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MemberStateAssignment));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_club_5fmember_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Member_descriptor_, &Member::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MemberResult_descriptor_, &MemberResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RemoveMemberOptions_descriptor_, &RemoveMemberOptions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MemberRemovedAssignment_descriptor_, &MemberRemovedAssignment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MemberVoiceOptions_descriptor_, &MemberVoiceOptions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MemberVoiceState_descriptor_, &MemberVoiceState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateMemberOptions_descriptor_, &CreateMemberOptions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MemberDescription_descriptor_, &MemberDescription::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleOptions_descriptor_, &RoleOptions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleAssignment_descriptor_, &RoleAssignment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MemberAttributeAssignment_descriptor_, &MemberAttributeAssignment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SubscriberStateOptions_descriptor_, &SubscriberStateOptions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SubscriberStateAssignment_descriptor_, &SubscriberStateAssignment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MemberStateOptions_descriptor_, &MemberStateOptions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MemberStateAssignment_descriptor_, &MemberStateAssignment::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_club_5fmember_2eproto() {
  delete Member::default_instance_;
  delete Member_reflection_;
  delete MemberResult::default_instance_;
  delete MemberResult_reflection_;
  delete RemoveMemberOptions::default_instance_;
  delete RemoveMemberOptions_reflection_;
  delete MemberRemovedAssignment::default_instance_;
  delete MemberRemovedAssignment_reflection_;
  delete MemberVoiceOptions::default_instance_;
  delete MemberVoiceOptions_reflection_;
  delete MemberVoiceState::default_instance_;
  delete MemberVoiceState_reflection_;
  delete CreateMemberOptions::default_instance_;
  delete CreateMemberOptions_reflection_;
  delete MemberDescription::default_instance_;
  delete MemberDescription_reflection_;
  delete RoleOptions::default_instance_;
  delete RoleOptions_reflection_;
  delete RoleAssignment::default_instance_;
  delete RoleAssignment_reflection_;
  delete MemberAttributeAssignment::default_instance_;
  delete MemberAttributeAssignment_reflection_;
  delete SubscriberStateOptions::default_instance_;
  delete SubscriberStateOptions_reflection_;
  delete SubscriberStateAssignment::default_instance_;
  delete SubscriberStateAssignment_reflection_;
  delete MemberStateOptions::default_instance_;
  delete MemberStateOptions_reflection_;
  delete MemberStateAssignment::default_instance_;
  delete MemberStateAssignment_reflection_;
}

void protobuf_AddDesc_club_5fmember_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::bgs::protocol::club::v1::protobuf_AddDesc_club_5fmember_5fid_2eproto();
  ::bgs::protocol::protobuf_AddDesc_global_5fextensions_2fmessage_5foptions_2eproto();
  ::bgs::protocol::v2::protobuf_AddDesc_api_2fclient_2fv2_2fattribute_5ftypes_2eproto();
  ::bgs::protocol::club::v1::protobuf_AddDesc_club_5fenum_2eproto();
  ::bgs::protocol::protobuf_AddDesc_rpc_5ftypes_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021club_member.proto\022\024bgs.protocol.club.v"
    "1\032\024club_member_id.proto\032\'global_extensio"
    "ns/message_options.proto\032#api/client/v2/"
    "attribute_types.proto\032\017club_enum.proto\032\017"
    "rpc_types.proto\"\211\003\n\006Member\022*\n\002id\030\001 \001(\0132\036"
    ".bgs.protocol.club.v1.MemberId\022\032\n\nbattle"
    "_tag\030\002 \001(\tB\006\202\371+\002\010\001\022\020\n\004role\030\003 \003(\rB\002\020\001\022-\n\t"
    "attribute\030\004 \003(\0132\032.bgs.protocol.v2.Attrib"
    "ute\022\021\n\tjoin_time\030\005 \001(\004\022;\n\016presence_level"
    "\030\006 \001(\0162#.bgs.protocol.club.v1.PresenceLe"
    "vel\022\026\n\016moderator_mute\030\007 \001(\010\0229\n\rwhisper_l"
    "evel\030\010 \001(\0162\".bgs.protocol.club.v1.Whispe"
    "rLevel\022\014\n\004note\030\t \001(\t\022\016\n\006active\0302 \001(\010\0225\n\005"
    "voice\0303 \001(\0132&.bgs.protocol.club.v1.Membe"
    "rVoiceState\"Q\n\014MemberResult\0221\n\tmember_id"
    "\030\001 \001(\0132\036.bgs.protocol.club.v1.MemberId\022\016"
    "\n\006status\030\002 \001(\r\"z\n\023RemoveMemberOptions\022*\n"
    "\002id\030\001 \001(\0132\036.bgs.protocol.club.v1.MemberI"
    "d\0227\n\006reason\030\002 \001(\0162\'.bgs.protocol.club.v1"
    ".ClubRemovedReason\"~\n\027MemberRemovedAssig"
    "nment\022*\n\002id\030\001 \001(\0132\036.bgs.protocol.club.v1"
    ".MemberId\0227\n\006reason\030\002 \001(\0162\'.bgs.protocol"
    ".club.v1.ClubRemovedReason\"\207\001\n\022MemberVoi"
    "ceOptions\022\021\n\tstream_id\030\001 \001(\004\022\016\n\006joined\030\002"
    " \001(\010\022>\n\nmicrophone\030\003 \001(\0162*.bgs.protocol."
    "club.v1.VoiceMicrophoneState\022\016\n\006active\030\004"
    " \001(\010\"\221\001\n\020MemberVoiceState\022\n\n\002id\030\001 \001(\t\022\021\n"
    "\tstream_id\030\002 \001(\004\022\016\n\006joined\030\003 \001(\010\022>\n\nmicr"
    "ophone\030\004 \001(\0162*.bgs.protocol.club.v1.Voic"
    "eMicrophoneState\022\016\n\006active\030\005 \001(\010\"p\n\023Crea"
    "teMemberOptions\022*\n\002id\030\001 \001(\0132\036.bgs.protoc"
    "ol.club.v1.MemberId\022-\n\tattribute\030\002 \003(\0132\032"
    ".bgs.protocol.v2.Attribute\"[\n\021MemberDesc"
    "ription\022*\n\002id\030\001 \001(\0132\036.bgs.protocol.club."
    "v1.MemberId\022\032\n\nbattle_tag\030\002 \001(\tB\006\202\371+\002\010\001\""
    "^\n\013RoleOptions\0221\n\tmember_id\030\001 \001(\0132\036.bgs."
    "protocol.club.v1.MemberId\022\034\n\004role\030\002 \003(\rB"
    "\016\020\001\212\371+\010*\006\n\004\010\001\020\001\"U\n\016RoleAssignment\0221\n\tmem"
    "ber_id\030\001 \001(\0132\036.bgs.protocol.club.v1.Memb"
    "erId\022\020\n\004role\030\002 \003(\rB\002\020\001\"}\n\031MemberAttribut"
    "eAssignment\0221\n\tmember_id\030\001 \001(\0132\036.bgs.pro"
    "tocol.club.v1.MemberId\022-\n\tattribute\030\002 \003("
    "\0132\032.bgs.protocol.v2.Attribute\"Q\n\026Subscri"
    "berStateOptions\0227\n\005voice\030\001 \001(\0132(.bgs.pro"
    "tocol.club.v1.MemberVoiceOptions\"\225\001\n\031Sub"
    "scriberStateAssignment\0221\n\tmember_id\030\001 \001("
    "\0132\036.bgs.protocol.club.v1.MemberId\022\016\n\006act"
    "ive\030\002 \001(\010\0225\n\005voice\030\003 \001(\0132&.bgs.protocol."
    "club.v1.MemberVoiceState\"\341\001\n\022MemberState"
    "Options\022-\n\tattribute\030\001 \003(\0132\032.bgs.protoco"
    "l.v2.Attribute\022;\n\016presence_level\030\002 \001(\0162#"
    ".bgs.protocol.club.v1.PresenceLevel\022\026\n\016m"
    "oderator_mute\030\003 \001(\010\0229\n\rwhisper_level\030\004 \001"
    "(\0162\".bgs.protocol.club.v1.WhisperLevel\022\014"
    "\n\004note\030\005 \001(\t\"\227\002\n\025MemberStateAssignment\0221"
    "\n\tmember_id\030\001 \001(\0132\036.bgs.protocol.club.v1"
    ".MemberId\022-\n\tattribute\030\002 \003(\0132\032.bgs.proto"
    "col.v2.Attribute\022;\n\016presence_level\030\003 \001(\016"
    "2#.bgs.protocol.club.v1.PresenceLevel\022\026\n"
    "\016moderator_mute\030\004 \001(\010\0229\n\rwhisper_level\030\005"
    " \001(\0162\".bgs.protocol.club.v1.WhisperLevel"
    "\022\014\n\004note\030\006 \001(\tB\002H\001P\000", 2460);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "club_member.proto", &protobuf_RegisterTypes);
  Member::default_instance_ = new Member();
  MemberResult::default_instance_ = new MemberResult();
  RemoveMemberOptions::default_instance_ = new RemoveMemberOptions();
  MemberRemovedAssignment::default_instance_ = new MemberRemovedAssignment();
  MemberVoiceOptions::default_instance_ = new MemberVoiceOptions();
  MemberVoiceState::default_instance_ = new MemberVoiceState();
  CreateMemberOptions::default_instance_ = new CreateMemberOptions();
  MemberDescription::default_instance_ = new MemberDescription();
  RoleOptions::default_instance_ = new RoleOptions();
  RoleAssignment::default_instance_ = new RoleAssignment();
  MemberAttributeAssignment::default_instance_ = new MemberAttributeAssignment();
  SubscriberStateOptions::default_instance_ = new SubscriberStateOptions();
  SubscriberStateAssignment::default_instance_ = new SubscriberStateAssignment();
  MemberStateOptions::default_instance_ = new MemberStateOptions();
  MemberStateAssignment::default_instance_ = new MemberStateAssignment();
  Member::default_instance_->InitAsDefaultInstance();
  MemberResult::default_instance_->InitAsDefaultInstance();
  RemoveMemberOptions::default_instance_->InitAsDefaultInstance();
  MemberRemovedAssignment::default_instance_->InitAsDefaultInstance();
  MemberVoiceOptions::default_instance_->InitAsDefaultInstance();
  MemberVoiceState::default_instance_->InitAsDefaultInstance();
  CreateMemberOptions::default_instance_->InitAsDefaultInstance();
  MemberDescription::default_instance_->InitAsDefaultInstance();
  RoleOptions::default_instance_->InitAsDefaultInstance();
  RoleAssignment::default_instance_->InitAsDefaultInstance();
  MemberAttributeAssignment::default_instance_->InitAsDefaultInstance();
  SubscriberStateOptions::default_instance_->InitAsDefaultInstance();
  SubscriberStateAssignment::default_instance_->InitAsDefaultInstance();
  MemberStateOptions::default_instance_->InitAsDefaultInstance();
  MemberStateAssignment::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_club_5fmember_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_club_5fmember_2eproto {
  StaticDescriptorInitializer_club_5fmember_2eproto() {
    protobuf_AddDesc_club_5fmember_2eproto();
  }
} static_descriptor_initializer_club_5fmember_2eproto_;
// ===================================================================

#ifndef _MSC_VER
const int Member::kIdFieldNumber;
const int Member::kBattleTagFieldNumber;
const int Member::kRoleFieldNumber;
const int Member::kAttributeFieldNumber;
const int Member::kJoinTimeFieldNumber;
const int Member::kPresenceLevelFieldNumber;
const int Member::kModeratorMuteFieldNumber;
const int Member::kWhisperLevelFieldNumber;
const int Member::kNoteFieldNumber;
const int Member::kActiveFieldNumber;
const int Member::kVoiceFieldNumber;
#endif  // !_MSC_VER

Member::Member()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.Member)
}

void Member::InitAsDefaultInstance() {
  id_ = const_cast< ::bgs::protocol::club::v1::MemberId*>(&::bgs::protocol::club::v1::MemberId::default_instance());
  voice_ = const_cast< ::bgs::protocol::club::v1::MemberVoiceState*>(&::bgs::protocol::club::v1::MemberVoiceState::default_instance());
}

Member::Member(const Member& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.Member)
}

void Member::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = NULL;
  battle_tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _role_cached_byte_size_ = 0;
  join_time_ = GOOGLE_ULONGLONG(0);
  presence_level_ = 0;
  moderator_mute_ = false;
  whisper_level_ = 0;
  note_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  active_ = false;
  voice_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Member::~Member() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.Member)
  SharedDtor();
}

void Member::SharedDtor() {
  if (battle_tag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete battle_tag_;
  }
  if (note_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete note_;
  }
  if (this != default_instance_) {
    delete id_;
    delete voice_;
  }
}

void Member::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Member::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Member_descriptor_;
}

const Member& Member::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_club_5fmember_2eproto();
  return *default_instance_;
}

Member* Member::default_instance_ = NULL;

Member* Member::New() const {
  return new Member;
}

void Member::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Member*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 243) {
    ZR_(join_time_, whisper_level_);
    if (has_id()) {
      if (id_ != NULL) id_->::bgs::protocol::club::v1::MemberId::Clear();
    }
    if (has_battle_tag()) {
      if (battle_tag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        battle_tag_->clear();
      }
    }
    moderator_mute_ = false;
  }
  if (_has_bits_[8 / 32] & 1792) {
    if (has_note()) {
      if (note_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        note_->clear();
      }
    }
    active_ = false;
    if (has_voice()) {
      if (voice_ != NULL) voice_->::bgs::protocol::club::v1::MemberVoiceState::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  role_.Clear();
  attribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Member::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bgs.protocol.club.v1.Member)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .bgs.protocol.club.v1.MemberId id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_battle_tag;
        break;
      }

      // optional string battle_tag = 2;
      case 2: {
        if (tag == 18) {
         parse_battle_tag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_battle_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->battle_tag().data(), this->battle_tag().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "battle_tag");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_role;
        break;
      }

      // repeated uint32 role = 3 [packed = true];
      case 3: {
        if (tag == 26) {
         parse_role:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_role())));
        } else if (tag == 24) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 26, input, this->mutable_role())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_attribute;
        break;
      }

      // repeated .bgs.protocol.v2.Attribute attribute = 4;
      case 4: {
        if (tag == 34) {
         parse_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attribute()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_attribute;
        if (input->ExpectTag(40)) goto parse_join_time;
        break;
      }

      // optional uint64 join_time = 5;
      case 5: {
        if (tag == 40) {
         parse_join_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &join_time_)));
          set_has_join_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_presence_level;
        break;
      }

      // optional .bgs.protocol.club.v1.PresenceLevel presence_level = 6;
      case 6: {
        if (tag == 48) {
         parse_presence_level:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::bgs::protocol::club::v1::PresenceLevel_IsValid(value)) {
            set_presence_level(static_cast< ::bgs::protocol::club::v1::PresenceLevel >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_moderator_mute;
        break;
      }

      // optional bool moderator_mute = 7;
      case 7: {
        if (tag == 56) {
         parse_moderator_mute:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &moderator_mute_)));
          set_has_moderator_mute();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_whisper_level;
        break;
      }

      // optional .bgs.protocol.club.v1.WhisperLevel whisper_level = 8;
      case 8: {
        if (tag == 64) {
         parse_whisper_level:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::bgs::protocol::club::v1::WhisperLevel_IsValid(value)) {
            set_whisper_level(static_cast< ::bgs::protocol::club::v1::WhisperLevel >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_note;
        break;
      }

      // optional string note = 9;
      case 9: {
        if (tag == 74) {
         parse_note:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_note()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->note().data(), this->note().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "note");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(400)) goto parse_active;
        break;
      }

      // optional bool active = 50;
      case 50: {
        if (tag == 400) {
         parse_active:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_)));
          set_has_active();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(410)) goto parse_voice;
        break;
      }

      // optional .bgs.protocol.club.v1.MemberVoiceState voice = 51;
      case 51: {
        if (tag == 410) {
         parse_voice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_voice()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bgs.protocol.club.v1.Member)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bgs.protocol.club.v1.Member)
  return false;
#undef DO_
}

void Member::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bgs.protocol.club.v1.Member)
  // optional .bgs.protocol.club.v1.MemberId id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->id(), output);
  }

  // optional string battle_tag = 2;
  if (has_battle_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->battle_tag().data(), this->battle_tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "battle_tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->battle_tag(), output);
  }

  // repeated uint32 role = 3 [packed = true];
  if (this->role_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_role_cached_byte_size_);
  }
  for (int i = 0; i < this->role_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->role(i), output);
  }

  // repeated .bgs.protocol.v2.Attribute attribute = 4;
  for (int i = 0; i < this->attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->attribute(i), output);
  }

  // optional uint64 join_time = 5;
  if (has_join_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->join_time(), output);
  }

  // optional .bgs.protocol.club.v1.PresenceLevel presence_level = 6;
  if (has_presence_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->presence_level(), output);
  }

  // optional bool moderator_mute = 7;
  if (has_moderator_mute()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->moderator_mute(), output);
  }

  // optional .bgs.protocol.club.v1.WhisperLevel whisper_level = 8;
  if (has_whisper_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->whisper_level(), output);
  }

  // optional string note = 9;
  if (has_note()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->note().data(), this->note().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "note");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->note(), output);
  }

  // optional bool active = 50;
  if (has_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(50, this->active(), output);
  }

  // optional .bgs.protocol.club.v1.MemberVoiceState voice = 51;
  if (has_voice()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      51, this->voice(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bgs.protocol.club.v1.Member)
}

::google::protobuf::uint8* Member::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.Member)
  // optional .bgs.protocol.club.v1.MemberId id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->id(), target);
  }

  // optional string battle_tag = 2;
  if (has_battle_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->battle_tag().data(), this->battle_tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "battle_tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->battle_tag(), target);
  }

  // repeated uint32 role = 3 [packed = true];
  if (this->role_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _role_cached_byte_size_, target);
  }
  for (int i = 0; i < this->role_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->role(i), target);
  }

  // repeated .bgs.protocol.v2.Attribute attribute = 4;
  for (int i = 0; i < this->attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->attribute(i), target);
  }

  // optional uint64 join_time = 5;
  if (has_join_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->join_time(), target);
  }

  // optional .bgs.protocol.club.v1.PresenceLevel presence_level = 6;
  if (has_presence_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->presence_level(), target);
  }

  // optional bool moderator_mute = 7;
  if (has_moderator_mute()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->moderator_mute(), target);
  }

  // optional .bgs.protocol.club.v1.WhisperLevel whisper_level = 8;
  if (has_whisper_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->whisper_level(), target);
  }

  // optional string note = 9;
  if (has_note()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->note().data(), this->note().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "note");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->note(), target);
  }

  // optional bool active = 50;
  if (has_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(50, this->active(), target);
  }

  // optional .bgs.protocol.club.v1.MemberVoiceState voice = 51;
  if (has_voice()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        51, this->voice(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.Member)
  return target;
}

int Member::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .bgs.protocol.club.v1.MemberId id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->id());
    }

    // optional string battle_tag = 2;
    if (has_battle_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->battle_tag());
    }

    // optional uint64 join_time = 5;
    if (has_join_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->join_time());
    }

    // optional .bgs.protocol.club.v1.PresenceLevel presence_level = 6;
    if (has_presence_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->presence_level());
    }

    // optional bool moderator_mute = 7;
    if (has_moderator_mute()) {
      total_size += 1 + 1;
    }

    // optional .bgs.protocol.club.v1.WhisperLevel whisper_level = 8;
    if (has_whisper_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->whisper_level());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string note = 9;
    if (has_note()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->note());
    }

    // optional bool active = 50;
    if (has_active()) {
      total_size += 2 + 1;
    }

    // optional .bgs.protocol.club.v1.MemberVoiceState voice = 51;
    if (has_voice()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->voice());
    }

  }
  // repeated uint32 role = 3 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->role_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->role(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _role_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .bgs.protocol.v2.Attribute attribute = 4;
  total_size += 1 * this->attribute_size();
  for (int i = 0; i < this->attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attribute(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Member::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Member* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Member*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Member::MergeFrom(const Member& from) {
  GOOGLE_CHECK_NE(&from, this);
  role_.MergeFrom(from.role_);
  attribute_.MergeFrom(from.attribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      mutable_id()->::bgs::protocol::club::v1::MemberId::MergeFrom(from.id());
    }
    if (from.has_battle_tag()) {
      set_battle_tag(from.battle_tag());
    }
    if (from.has_join_time()) {
      set_join_time(from.join_time());
    }
    if (from.has_presence_level()) {
      set_presence_level(from.presence_level());
    }
    if (from.has_moderator_mute()) {
      set_moderator_mute(from.moderator_mute());
    }
    if (from.has_whisper_level()) {
      set_whisper_level(from.whisper_level());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_note()) {
      set_note(from.note());
    }
    if (from.has_active()) {
      set_active(from.active());
    }
    if (from.has_voice()) {
      mutable_voice()->::bgs::protocol::club::v1::MemberVoiceState::MergeFrom(from.voice());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Member::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Member::CopyFrom(const Member& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Member::IsInitialized() const {
  if (has_id()) {
    if (!this->id().IsInitialized()) return false;
  }
  return true;
}

void Member::Swap(Member* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(battle_tag_, other->battle_tag_);
    role_.Swap(&other->role_);
    attribute_.Swap(&other->attribute_);
    std::swap(join_time_, other->join_time_);
    std::swap(presence_level_, other->presence_level_);
    std::swap(moderator_mute_, other->moderator_mute_);
    std::swap(whisper_level_, other->whisper_level_);
    std::swap(note_, other->note_);
    std::swap(active_, other->active_);
    std::swap(voice_, other->voice_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Member::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Member_descriptor_;
  metadata.reflection = Member_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int MemberResult::kMemberIdFieldNumber;
const int MemberResult::kStatusFieldNumber;
#endif  // !_MSC_VER

MemberResult::MemberResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.MemberResult)
}

void MemberResult::InitAsDefaultInstance() {
  member_id_ = const_cast< ::bgs::protocol::club::v1::MemberId*>(&::bgs::protocol::club::v1::MemberId::default_instance());
}

MemberResult::MemberResult(const MemberResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.MemberResult)
}

void MemberResult::SharedCtor() {
  _cached_size_ = 0;
  member_id_ = NULL;
  status_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MemberResult::~MemberResult() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.MemberResult)
  SharedDtor();
}

void MemberResult::SharedDtor() {
  if (this != default_instance_) {
    delete member_id_;
  }
}

void MemberResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MemberResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MemberResult_descriptor_;
}

const MemberResult& MemberResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_club_5fmember_2eproto();
  return *default_instance_;
}

MemberResult* MemberResult::default_instance_ = NULL;

MemberResult* MemberResult::New() const {
  return new MemberResult;
}

void MemberResult::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_member_id()) {
      if (member_id_ != NULL) member_id_->::bgs::protocol::club::v1::MemberId::Clear();
    }
    status_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MemberResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bgs.protocol.club.v1.MemberResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .bgs.protocol.club.v1.MemberId member_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_member_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // optional uint32 status = 2;
      case 2: {
        if (tag == 16) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bgs.protocol.club.v1.MemberResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bgs.protocol.club.v1.MemberResult)
  return false;
#undef DO_
}

void MemberResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bgs.protocol.club.v1.MemberResult)
  // optional .bgs.protocol.club.v1.MemberId member_id = 1;
  if (has_member_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->member_id(), output);
  }

  // optional uint32 status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bgs.protocol.club.v1.MemberResult)
}

::google::protobuf::uint8* MemberResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.MemberResult)
  // optional .bgs.protocol.club.v1.MemberId member_id = 1;
  if (has_member_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->member_id(), target);
  }

  // optional uint32 status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.MemberResult)
  return target;
}

int MemberResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .bgs.protocol.club.v1.MemberId member_id = 1;
    if (has_member_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->member_id());
    }

    // optional uint32 status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MemberResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MemberResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MemberResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MemberResult::MergeFrom(const MemberResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_member_id()) {
      mutable_member_id()->::bgs::protocol::club::v1::MemberId::MergeFrom(from.member_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MemberResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemberResult::CopyFrom(const MemberResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemberResult::IsInitialized() const {
  if (has_member_id()) {
    if (!this->member_id().IsInitialized()) return false;
  }
  return true;
}

void MemberResult::Swap(MemberResult* other) {
  if (other != this) {
    std::swap(member_id_, other->member_id_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MemberResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MemberResult_descriptor_;
  metadata.reflection = MemberResult_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int RemoveMemberOptions::kIdFieldNumber;
const int RemoveMemberOptions::kReasonFieldNumber;
#endif  // !_MSC_VER

RemoveMemberOptions::RemoveMemberOptions()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.RemoveMemberOptions)
}

void RemoveMemberOptions::InitAsDefaultInstance() {
  id_ = const_cast< ::bgs::protocol::club::v1::MemberId*>(&::bgs::protocol::club::v1::MemberId::default_instance());
}

RemoveMemberOptions::RemoveMemberOptions(const RemoveMemberOptions& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.RemoveMemberOptions)
}

void RemoveMemberOptions::SharedCtor() {
  _cached_size_ = 0;
  id_ = NULL;
  reason_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RemoveMemberOptions::~RemoveMemberOptions() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.RemoveMemberOptions)
  SharedDtor();
}

void RemoveMemberOptions::SharedDtor() {
  if (this != default_instance_) {
    delete id_;
  }
}

void RemoveMemberOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RemoveMemberOptions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RemoveMemberOptions_descriptor_;
}

const RemoveMemberOptions& RemoveMemberOptions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_club_5fmember_2eproto();
  return *default_instance_;
}

RemoveMemberOptions* RemoveMemberOptions::default_instance_ = NULL;

RemoveMemberOptions* RemoveMemberOptions::New() const {
  return new RemoveMemberOptions;
}

void RemoveMemberOptions::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_id()) {
      if (id_ != NULL) id_->::bgs::protocol::club::v1::MemberId::Clear();
    }
    reason_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RemoveMemberOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bgs.protocol.club.v1.RemoveMemberOptions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .bgs.protocol.club.v1.MemberId id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_reason;
        break;
      }

      // optional .bgs.protocol.club.v1.ClubRemovedReason reason = 2;
      case 2: {
        if (tag == 16) {
         parse_reason:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::bgs::protocol::club::v1::ClubRemovedReason_IsValid(value)) {
            set_reason(static_cast< ::bgs::protocol::club::v1::ClubRemovedReason >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bgs.protocol.club.v1.RemoveMemberOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bgs.protocol.club.v1.RemoveMemberOptions)
  return false;
#undef DO_
}

void RemoveMemberOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bgs.protocol.club.v1.RemoveMemberOptions)
  // optional .bgs.protocol.club.v1.MemberId id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->id(), output);
  }

  // optional .bgs.protocol.club.v1.ClubRemovedReason reason = 2;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->reason(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bgs.protocol.club.v1.RemoveMemberOptions)
}

::google::protobuf::uint8* RemoveMemberOptions::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.RemoveMemberOptions)
  // optional .bgs.protocol.club.v1.MemberId id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->id(), target);
  }

  // optional .bgs.protocol.club.v1.ClubRemovedReason reason = 2;
  if (has_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->reason(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.RemoveMemberOptions)
  return target;
}

int RemoveMemberOptions::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .bgs.protocol.club.v1.MemberId id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->id());
    }

    // optional .bgs.protocol.club.v1.ClubRemovedReason reason = 2;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->reason());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemoveMemberOptions::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RemoveMemberOptions* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RemoveMemberOptions*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RemoveMemberOptions::MergeFrom(const RemoveMemberOptions& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      mutable_id()->::bgs::protocol::club::v1::MemberId::MergeFrom(from.id());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RemoveMemberOptions::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveMemberOptions::CopyFrom(const RemoveMemberOptions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveMemberOptions::IsInitialized() const {
  if (has_id()) {
    if (!this->id().IsInitialized()) return false;
  }
  return true;
}

void RemoveMemberOptions::Swap(RemoveMemberOptions* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(reason_, other->reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RemoveMemberOptions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RemoveMemberOptions_descriptor_;
  metadata.reflection = RemoveMemberOptions_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int MemberRemovedAssignment::kIdFieldNumber;
const int MemberRemovedAssignment::kReasonFieldNumber;
#endif  // !_MSC_VER

MemberRemovedAssignment::MemberRemovedAssignment()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.MemberRemovedAssignment)
}

void MemberRemovedAssignment::InitAsDefaultInstance() {
  id_ = const_cast< ::bgs::protocol::club::v1::MemberId*>(&::bgs::protocol::club::v1::MemberId::default_instance());
}

MemberRemovedAssignment::MemberRemovedAssignment(const MemberRemovedAssignment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.MemberRemovedAssignment)
}

void MemberRemovedAssignment::SharedCtor() {
  _cached_size_ = 0;
  id_ = NULL;
  reason_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MemberRemovedAssignment::~MemberRemovedAssignment() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.MemberRemovedAssignment)
  SharedDtor();
}

void MemberRemovedAssignment::SharedDtor() {
  if (this != default_instance_) {
    delete id_;
  }
}

void MemberRemovedAssignment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MemberRemovedAssignment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MemberRemovedAssignment_descriptor_;
}

const MemberRemovedAssignment& MemberRemovedAssignment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_club_5fmember_2eproto();
  return *default_instance_;
}

MemberRemovedAssignment* MemberRemovedAssignment::default_instance_ = NULL;

MemberRemovedAssignment* MemberRemovedAssignment::New() const {
  return new MemberRemovedAssignment;
}

void MemberRemovedAssignment::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_id()) {
      if (id_ != NULL) id_->::bgs::protocol::club::v1::MemberId::Clear();
    }
    reason_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MemberRemovedAssignment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bgs.protocol.club.v1.MemberRemovedAssignment)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .bgs.protocol.club.v1.MemberId id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_reason;
        break;
      }

      // optional .bgs.protocol.club.v1.ClubRemovedReason reason = 2;
      case 2: {
        if (tag == 16) {
         parse_reason:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::bgs::protocol::club::v1::ClubRemovedReason_IsValid(value)) {
            set_reason(static_cast< ::bgs::protocol::club::v1::ClubRemovedReason >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bgs.protocol.club.v1.MemberRemovedAssignment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bgs.protocol.club.v1.MemberRemovedAssignment)
  return false;
#undef DO_
}

void MemberRemovedAssignment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bgs.protocol.club.v1.MemberRemovedAssignment)
  // optional .bgs.protocol.club.v1.MemberId id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->id(), output);
  }

  // optional .bgs.protocol.club.v1.ClubRemovedReason reason = 2;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->reason(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bgs.protocol.club.v1.MemberRemovedAssignment)
}

::google::protobuf::uint8* MemberRemovedAssignment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.MemberRemovedAssignment)
  // optional .bgs.protocol.club.v1.MemberId id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->id(), target);
  }

  // optional .bgs.protocol.club.v1.ClubRemovedReason reason = 2;
  if (has_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->reason(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.MemberRemovedAssignment)
  return target;
}

int MemberRemovedAssignment::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .bgs.protocol.club.v1.MemberId id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->id());
    }

    // optional .bgs.protocol.club.v1.ClubRemovedReason reason = 2;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->reason());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MemberRemovedAssignment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MemberRemovedAssignment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MemberRemovedAssignment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MemberRemovedAssignment::MergeFrom(const MemberRemovedAssignment& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      mutable_id()->::bgs::protocol::club::v1::MemberId::MergeFrom(from.id());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MemberRemovedAssignment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemberRemovedAssignment::CopyFrom(const MemberRemovedAssignment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemberRemovedAssignment::IsInitialized() const {
  if (has_id()) {
    if (!this->id().IsInitialized()) return false;
  }
  return true;
}

void MemberRemovedAssignment::Swap(MemberRemovedAssignment* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(reason_, other->reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MemberRemovedAssignment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MemberRemovedAssignment_descriptor_;
  metadata.reflection = MemberRemovedAssignment_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int MemberVoiceOptions::kStreamIdFieldNumber;
const int MemberVoiceOptions::kJoinedFieldNumber;
const int MemberVoiceOptions::kMicrophoneFieldNumber;
const int MemberVoiceOptions::kActiveFieldNumber;
#endif  // !_MSC_VER

MemberVoiceOptions::MemberVoiceOptions()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.MemberVoiceOptions)
}

void MemberVoiceOptions::InitAsDefaultInstance() {
}

MemberVoiceOptions::MemberVoiceOptions(const MemberVoiceOptions& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.MemberVoiceOptions)
}

void MemberVoiceOptions::SharedCtor() {
  _cached_size_ = 0;
  stream_id_ = GOOGLE_ULONGLONG(0);
  joined_ = false;
  microphone_ = 0;
  active_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MemberVoiceOptions::~MemberVoiceOptions() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.MemberVoiceOptions)
  SharedDtor();
}

void MemberVoiceOptions::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MemberVoiceOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MemberVoiceOptions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MemberVoiceOptions_descriptor_;
}

const MemberVoiceOptions& MemberVoiceOptions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_club_5fmember_2eproto();
  return *default_instance_;
}

MemberVoiceOptions* MemberVoiceOptions::default_instance_ = NULL;

MemberVoiceOptions* MemberVoiceOptions::New() const {
  return new MemberVoiceOptions;
}

void MemberVoiceOptions::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MemberVoiceOptions*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(stream_id_, active_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MemberVoiceOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bgs.protocol.club.v1.MemberVoiceOptions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 stream_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &stream_id_)));
          set_has_stream_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_joined;
        break;
      }

      // optional bool joined = 2;
      case 2: {
        if (tag == 16) {
         parse_joined:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &joined_)));
          set_has_joined();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_microphone;
        break;
      }

      // optional .bgs.protocol.club.v1.VoiceMicrophoneState microphone = 3;
      case 3: {
        if (tag == 24) {
         parse_microphone:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::bgs::protocol::club::v1::VoiceMicrophoneState_IsValid(value)) {
            set_microphone(static_cast< ::bgs::protocol::club::v1::VoiceMicrophoneState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_active;
        break;
      }

      // optional bool active = 4;
      case 4: {
        if (tag == 32) {
         parse_active:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_)));
          set_has_active();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bgs.protocol.club.v1.MemberVoiceOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bgs.protocol.club.v1.MemberVoiceOptions)
  return false;
#undef DO_
}

void MemberVoiceOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bgs.protocol.club.v1.MemberVoiceOptions)
  // optional uint64 stream_id = 1;
  if (has_stream_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->stream_id(), output);
  }

  // optional bool joined = 2;
  if (has_joined()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->joined(), output);
  }

  // optional .bgs.protocol.club.v1.VoiceMicrophoneState microphone = 3;
  if (has_microphone()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->microphone(), output);
  }

  // optional bool active = 4;
  if (has_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->active(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bgs.protocol.club.v1.MemberVoiceOptions)
}

::google::protobuf::uint8* MemberVoiceOptions::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.MemberVoiceOptions)
  // optional uint64 stream_id = 1;
  if (has_stream_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->stream_id(), target);
  }

  // optional bool joined = 2;
  if (has_joined()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->joined(), target);
  }

  // optional .bgs.protocol.club.v1.VoiceMicrophoneState microphone = 3;
  if (has_microphone()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->microphone(), target);
  }

  // optional bool active = 4;
  if (has_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->active(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.MemberVoiceOptions)
  return target;
}

int MemberVoiceOptions::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 stream_id = 1;
    if (has_stream_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->stream_id());
    }

    // optional bool joined = 2;
    if (has_joined()) {
      total_size += 1 + 1;
    }

    // optional .bgs.protocol.club.v1.VoiceMicrophoneState microphone = 3;
    if (has_microphone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->microphone());
    }

    // optional bool active = 4;
    if (has_active()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MemberVoiceOptions::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MemberVoiceOptions* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MemberVoiceOptions*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MemberVoiceOptions::MergeFrom(const MemberVoiceOptions& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stream_id()) {
      set_stream_id(from.stream_id());
    }
    if (from.has_joined()) {
      set_joined(from.joined());
    }
    if (from.has_microphone()) {
      set_microphone(from.microphone());
    }
    if (from.has_active()) {
      set_active(from.active());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MemberVoiceOptions::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemberVoiceOptions::CopyFrom(const MemberVoiceOptions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemberVoiceOptions::IsInitialized() const {
  return true;
}

void MemberVoiceOptions::Swap(MemberVoiceOptions* other) {
  if (other != this) {
    std::swap(stream_id_, other->stream_id_);
    std::swap(joined_, other->joined_);
    std::swap(microphone_, other->microphone_);
    std::swap(active_, other->active_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MemberVoiceOptions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MemberVoiceOptions_descriptor_;
  metadata.reflection = MemberVoiceOptions_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int MemberVoiceState::kIdFieldNumber;
const int MemberVoiceState::kStreamIdFieldNumber;
const int MemberVoiceState::kJoinedFieldNumber;
const int MemberVoiceState::kMicrophoneFieldNumber;
const int MemberVoiceState::kActiveFieldNumber;
#endif  // !_MSC_VER

MemberVoiceState::MemberVoiceState()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.MemberVoiceState)
}

void MemberVoiceState::InitAsDefaultInstance() {
}

MemberVoiceState::MemberVoiceState(const MemberVoiceState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.MemberVoiceState)
}

void MemberVoiceState::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stream_id_ = GOOGLE_ULONGLONG(0);
  joined_ = false;
  microphone_ = 0;
  active_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MemberVoiceState::~MemberVoiceState() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.MemberVoiceState)
  SharedDtor();
}

void MemberVoiceState::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void MemberVoiceState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MemberVoiceState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MemberVoiceState_descriptor_;
}

const MemberVoiceState& MemberVoiceState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_club_5fmember_2eproto();
  return *default_instance_;
}

MemberVoiceState* MemberVoiceState::default_instance_ = NULL;

MemberVoiceState* MemberVoiceState::New() const {
  return new MemberVoiceState;
}

void MemberVoiceState::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MemberVoiceState*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(stream_id_, active_);
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MemberVoiceState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bgs.protocol.club.v1.MemberVoiceState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_stream_id;
        break;
      }

      // optional uint64 stream_id = 2;
      case 2: {
        if (tag == 16) {
         parse_stream_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &stream_id_)));
          set_has_stream_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_joined;
        break;
      }

      // optional bool joined = 3;
      case 3: {
        if (tag == 24) {
         parse_joined:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &joined_)));
          set_has_joined();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_microphone;
        break;
      }

      // optional .bgs.protocol.club.v1.VoiceMicrophoneState microphone = 4;
      case 4: {
        if (tag == 32) {
         parse_microphone:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::bgs::protocol::club::v1::VoiceMicrophoneState_IsValid(value)) {
            set_microphone(static_cast< ::bgs::protocol::club::v1::VoiceMicrophoneState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_active;
        break;
      }

      // optional bool active = 5;
      case 5: {
        if (tag == 40) {
         parse_active:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_)));
          set_has_active();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bgs.protocol.club.v1.MemberVoiceState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bgs.protocol.club.v1.MemberVoiceState)
  return false;
#undef DO_
}

void MemberVoiceState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bgs.protocol.club.v1.MemberVoiceState)
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional uint64 stream_id = 2;
  if (has_stream_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->stream_id(), output);
  }

  // optional bool joined = 3;
  if (has_joined()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->joined(), output);
  }

  // optional .bgs.protocol.club.v1.VoiceMicrophoneState microphone = 4;
  if (has_microphone()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->microphone(), output);
  }

  // optional bool active = 5;
  if (has_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->active(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bgs.protocol.club.v1.MemberVoiceState)
}

::google::protobuf::uint8* MemberVoiceState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.MemberVoiceState)
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional uint64 stream_id = 2;
  if (has_stream_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->stream_id(), target);
  }

  // optional bool joined = 3;
  if (has_joined()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->joined(), target);
  }

  // optional .bgs.protocol.club.v1.VoiceMicrophoneState microphone = 4;
  if (has_microphone()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->microphone(), target);
  }

  // optional bool active = 5;
  if (has_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->active(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.MemberVoiceState)
  return target;
}

int MemberVoiceState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional uint64 stream_id = 2;
    if (has_stream_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->stream_id());
    }

    // optional bool joined = 3;
    if (has_joined()) {
      total_size += 1 + 1;
    }

    // optional .bgs.protocol.club.v1.VoiceMicrophoneState microphone = 4;
    if (has_microphone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->microphone());
    }

    // optional bool active = 5;
    if (has_active()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MemberVoiceState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MemberVoiceState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MemberVoiceState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MemberVoiceState::MergeFrom(const MemberVoiceState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_stream_id()) {
      set_stream_id(from.stream_id());
    }
    if (from.has_joined()) {
      set_joined(from.joined());
    }
    if (from.has_microphone()) {
      set_microphone(from.microphone());
    }
    if (from.has_active()) {
      set_active(from.active());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MemberVoiceState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemberVoiceState::CopyFrom(const MemberVoiceState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemberVoiceState::IsInitialized() const {
  return true;
}

void MemberVoiceState::Swap(MemberVoiceState* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(stream_id_, other->stream_id_);
    std::swap(joined_, other->joined_);
    std::swap(microphone_, other->microphone_);
    std::swap(active_, other->active_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MemberVoiceState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MemberVoiceState_descriptor_;
  metadata.reflection = MemberVoiceState_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int CreateMemberOptions::kIdFieldNumber;
const int CreateMemberOptions::kAttributeFieldNumber;
#endif  // !_MSC_VER

CreateMemberOptions::CreateMemberOptions()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.CreateMemberOptions)
}

void CreateMemberOptions::InitAsDefaultInstance() {
  id_ = const_cast< ::bgs::protocol::club::v1::MemberId*>(&::bgs::protocol::club::v1::MemberId::default_instance());
}

CreateMemberOptions::CreateMemberOptions(const CreateMemberOptions& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.CreateMemberOptions)
}

void CreateMemberOptions::SharedCtor() {
  _cached_size_ = 0;
  id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateMemberOptions::~CreateMemberOptions() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.CreateMemberOptions)
  SharedDtor();
}

void CreateMemberOptions::SharedDtor() {
  if (this != default_instance_) {
    delete id_;
  }
}

void CreateMemberOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateMemberOptions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateMemberOptions_descriptor_;
}

const CreateMemberOptions& CreateMemberOptions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_club_5fmember_2eproto();
  return *default_instance_;
}

CreateMemberOptions* CreateMemberOptions::default_instance_ = NULL;

CreateMemberOptions* CreateMemberOptions::New() const {
  return new CreateMemberOptions;
}

void CreateMemberOptions::Clear() {
  if (has_id()) {
    if (id_ != NULL) id_->::bgs::protocol::club::v1::MemberId::Clear();
  }
  attribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateMemberOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bgs.protocol.club.v1.CreateMemberOptions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .bgs.protocol.club.v1.MemberId id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_attribute;
        break;
      }

      // repeated .bgs.protocol.v2.Attribute attribute = 2;
      case 2: {
        if (tag == 18) {
         parse_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attribute()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_attribute;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bgs.protocol.club.v1.CreateMemberOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bgs.protocol.club.v1.CreateMemberOptions)
  return false;
#undef DO_
}

void CreateMemberOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bgs.protocol.club.v1.CreateMemberOptions)
  // optional .bgs.protocol.club.v1.MemberId id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->id(), output);
  }

  // repeated .bgs.protocol.v2.Attribute attribute = 2;
  for (int i = 0; i < this->attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->attribute(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bgs.protocol.club.v1.CreateMemberOptions)
}

::google::protobuf::uint8* CreateMemberOptions::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.CreateMemberOptions)
  // optional .bgs.protocol.club.v1.MemberId id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->id(), target);
  }

  // repeated .bgs.protocol.v2.Attribute attribute = 2;
  for (int i = 0; i < this->attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->attribute(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.CreateMemberOptions)
  return target;
}

int CreateMemberOptions::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .bgs.protocol.club.v1.MemberId id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->id());
    }

  }
  // repeated .bgs.protocol.v2.Attribute attribute = 2;
  total_size += 1 * this->attribute_size();
  for (int i = 0; i < this->attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attribute(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateMemberOptions::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateMemberOptions* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateMemberOptions*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateMemberOptions::MergeFrom(const CreateMemberOptions& from) {
  GOOGLE_CHECK_NE(&from, this);
  attribute_.MergeFrom(from.attribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      mutable_id()->::bgs::protocol::club::v1::MemberId::MergeFrom(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateMemberOptions::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateMemberOptions::CopyFrom(const CreateMemberOptions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateMemberOptions::IsInitialized() const {
  if (has_id()) {
    if (!this->id().IsInitialized()) return false;
  }
  return true;
}

void CreateMemberOptions::Swap(CreateMemberOptions* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    attribute_.Swap(&other->attribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateMemberOptions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateMemberOptions_descriptor_;
  metadata.reflection = CreateMemberOptions_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int MemberDescription::kIdFieldNumber;
const int MemberDescription::kBattleTagFieldNumber;
#endif  // !_MSC_VER

MemberDescription::MemberDescription()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.MemberDescription)
}

void MemberDescription::InitAsDefaultInstance() {
  id_ = const_cast< ::bgs::protocol::club::v1::MemberId*>(&::bgs::protocol::club::v1::MemberId::default_instance());
}

MemberDescription::MemberDescription(const MemberDescription& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.MemberDescription)
}

void MemberDescription::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = NULL;
  battle_tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MemberDescription::~MemberDescription() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.MemberDescription)
  SharedDtor();
}

void MemberDescription::SharedDtor() {
  if (battle_tag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete battle_tag_;
  }
  if (this != default_instance_) {
    delete id_;
  }
}

void MemberDescription::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MemberDescription::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MemberDescription_descriptor_;
}

const MemberDescription& MemberDescription::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_club_5fmember_2eproto();
  return *default_instance_;
}

MemberDescription* MemberDescription::default_instance_ = NULL;

MemberDescription* MemberDescription::New() const {
  return new MemberDescription;
}

void MemberDescription::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_id()) {
      if (id_ != NULL) id_->::bgs::protocol::club::v1::MemberId::Clear();
    }
    if (has_battle_tag()) {
      if (battle_tag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        battle_tag_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MemberDescription::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bgs.protocol.club.v1.MemberDescription)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .bgs.protocol.club.v1.MemberId id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_battle_tag;
        break;
      }

      // optional string battle_tag = 2;
      case 2: {
        if (tag == 18) {
         parse_battle_tag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_battle_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->battle_tag().data(), this->battle_tag().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "battle_tag");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bgs.protocol.club.v1.MemberDescription)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bgs.protocol.club.v1.MemberDescription)
  return false;
#undef DO_
}

void MemberDescription::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bgs.protocol.club.v1.MemberDescription)
  // optional .bgs.protocol.club.v1.MemberId id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->id(), output);
  }

  // optional string battle_tag = 2;
  if (has_battle_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->battle_tag().data(), this->battle_tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "battle_tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->battle_tag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bgs.protocol.club.v1.MemberDescription)
}

::google::protobuf::uint8* MemberDescription::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.MemberDescription)
  // optional .bgs.protocol.club.v1.MemberId id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->id(), target);
  }

  // optional string battle_tag = 2;
  if (has_battle_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->battle_tag().data(), this->battle_tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "battle_tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->battle_tag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.MemberDescription)
  return target;
}

int MemberDescription::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .bgs.protocol.club.v1.MemberId id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->id());
    }

    // optional string battle_tag = 2;
    if (has_battle_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->battle_tag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MemberDescription::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MemberDescription* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MemberDescription*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MemberDescription::MergeFrom(const MemberDescription& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      mutable_id()->::bgs::protocol::club::v1::MemberId::MergeFrom(from.id());
    }
    if (from.has_battle_tag()) {
      set_battle_tag(from.battle_tag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MemberDescription::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemberDescription::CopyFrom(const MemberDescription& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemberDescription::IsInitialized() const {
  if (has_id()) {
    if (!this->id().IsInitialized()) return false;
  }
  return true;
}

void MemberDescription::Swap(MemberDescription* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(battle_tag_, other->battle_tag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MemberDescription::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MemberDescription_descriptor_;
  metadata.reflection = MemberDescription_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int RoleOptions::kMemberIdFieldNumber;
const int RoleOptions::kRoleFieldNumber;
#endif  // !_MSC_VER

RoleOptions::RoleOptions()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.RoleOptions)
}

void RoleOptions::InitAsDefaultInstance() {
  member_id_ = const_cast< ::bgs::protocol::club::v1::MemberId*>(&::bgs::protocol::club::v1::MemberId::default_instance());
}

RoleOptions::RoleOptions(const RoleOptions& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.RoleOptions)
}

void RoleOptions::SharedCtor() {
  _cached_size_ = 0;
  member_id_ = NULL;
  _role_cached_byte_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleOptions::~RoleOptions() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.RoleOptions)
  SharedDtor();
}

void RoleOptions::SharedDtor() {
  if (this != default_instance_) {
    delete member_id_;
  }
}

void RoleOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleOptions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleOptions_descriptor_;
}

const RoleOptions& RoleOptions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_club_5fmember_2eproto();
  return *default_instance_;
}

RoleOptions* RoleOptions::default_instance_ = NULL;

RoleOptions* RoleOptions::New() const {
  return new RoleOptions;
}

void RoleOptions::Clear() {
  if (has_member_id()) {
    if (member_id_ != NULL) member_id_->::bgs::protocol::club::v1::MemberId::Clear();
  }
  role_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bgs.protocol.club.v1.RoleOptions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .bgs.protocol.club.v1.MemberId member_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_member_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_role;
        break;
      }

      // repeated uint32 role = 2 [packed = true];
      case 2: {
        if (tag == 18) {
         parse_role:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_role())));
        } else if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 18, input, this->mutable_role())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bgs.protocol.club.v1.RoleOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bgs.protocol.club.v1.RoleOptions)
  return false;
#undef DO_
}

void RoleOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bgs.protocol.club.v1.RoleOptions)
  // optional .bgs.protocol.club.v1.MemberId member_id = 1;
  if (has_member_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->member_id(), output);
  }

  // repeated uint32 role = 2 [packed = true];
  if (this->role_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_role_cached_byte_size_);
  }
  for (int i = 0; i < this->role_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->role(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bgs.protocol.club.v1.RoleOptions)
}

::google::protobuf::uint8* RoleOptions::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.RoleOptions)
  // optional .bgs.protocol.club.v1.MemberId member_id = 1;
  if (has_member_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->member_id(), target);
  }

  // repeated uint32 role = 2 [packed = true];
  if (this->role_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _role_cached_byte_size_, target);
  }
  for (int i = 0; i < this->role_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->role(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.RoleOptions)
  return target;
}

int RoleOptions::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .bgs.protocol.club.v1.MemberId member_id = 1;
    if (has_member_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->member_id());
    }

  }
  // repeated uint32 role = 2 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->role_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->role(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _role_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleOptions::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleOptions* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleOptions*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleOptions::MergeFrom(const RoleOptions& from) {
  GOOGLE_CHECK_NE(&from, this);
  role_.MergeFrom(from.role_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_member_id()) {
      mutable_member_id()->::bgs::protocol::club::v1::MemberId::MergeFrom(from.member_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleOptions::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleOptions::CopyFrom(const RoleOptions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleOptions::IsInitialized() const {
  if (has_member_id()) {
    if (!this->member_id().IsInitialized()) return false;
  }
  return true;
}

void RoleOptions::Swap(RoleOptions* other) {
  if (other != this) {
    std::swap(member_id_, other->member_id_);
    role_.Swap(&other->role_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleOptions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleOptions_descriptor_;
  metadata.reflection = RoleOptions_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int RoleAssignment::kMemberIdFieldNumber;
const int RoleAssignment::kRoleFieldNumber;
#endif  // !_MSC_VER

RoleAssignment::RoleAssignment()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.RoleAssignment)
}

void RoleAssignment::InitAsDefaultInstance() {
  member_id_ = const_cast< ::bgs::protocol::club::v1::MemberId*>(&::bgs::protocol::club::v1::MemberId::default_instance());
}

RoleAssignment::RoleAssignment(const RoleAssignment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.RoleAssignment)
}

void RoleAssignment::SharedCtor() {
  _cached_size_ = 0;
  member_id_ = NULL;
  _role_cached_byte_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleAssignment::~RoleAssignment() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.RoleAssignment)
  SharedDtor();
}

void RoleAssignment::SharedDtor() {
  if (this != default_instance_) {
    delete member_id_;
  }
}

void RoleAssignment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleAssignment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleAssignment_descriptor_;
}

const RoleAssignment& RoleAssignment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_club_5fmember_2eproto();
  return *default_instance_;
}

RoleAssignment* RoleAssignment::default_instance_ = NULL;

RoleAssignment* RoleAssignment::New() const {
  return new RoleAssignment;
}

void RoleAssignment::Clear() {
  if (has_member_id()) {
    if (member_id_ != NULL) member_id_->::bgs::protocol::club::v1::MemberId::Clear();
  }
  role_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleAssignment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bgs.protocol.club.v1.RoleAssignment)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .bgs.protocol.club.v1.MemberId member_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_member_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_role;
        break;
      }

      // repeated uint32 role = 2 [packed = true];
      case 2: {
        if (tag == 18) {
         parse_role:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_role())));
        } else if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 18, input, this->mutable_role())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bgs.protocol.club.v1.RoleAssignment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bgs.protocol.club.v1.RoleAssignment)
  return false;
#undef DO_
}

void RoleAssignment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bgs.protocol.club.v1.RoleAssignment)
  // optional .bgs.protocol.club.v1.MemberId member_id = 1;
  if (has_member_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->member_id(), output);
  }

  // repeated uint32 role = 2 [packed = true];
  if (this->role_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_role_cached_byte_size_);
  }
  for (int i = 0; i < this->role_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->role(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bgs.protocol.club.v1.RoleAssignment)
}

::google::protobuf::uint8* RoleAssignment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.RoleAssignment)
  // optional .bgs.protocol.club.v1.MemberId member_id = 1;
  if (has_member_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->member_id(), target);
  }

  // repeated uint32 role = 2 [packed = true];
  if (this->role_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _role_cached_byte_size_, target);
  }
  for (int i = 0; i < this->role_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->role(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.RoleAssignment)
  return target;
}

int RoleAssignment::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .bgs.protocol.club.v1.MemberId member_id = 1;
    if (has_member_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->member_id());
    }

  }
  // repeated uint32 role = 2 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->role_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->role(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _role_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleAssignment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleAssignment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleAssignment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleAssignment::MergeFrom(const RoleAssignment& from) {
  GOOGLE_CHECK_NE(&from, this);
  role_.MergeFrom(from.role_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_member_id()) {
      mutable_member_id()->::bgs::protocol::club::v1::MemberId::MergeFrom(from.member_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleAssignment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleAssignment::CopyFrom(const RoleAssignment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleAssignment::IsInitialized() const {
  if (has_member_id()) {
    if (!this->member_id().IsInitialized()) return false;
  }
  return true;
}

void RoleAssignment::Swap(RoleAssignment* other) {
  if (other != this) {
    std::swap(member_id_, other->member_id_);
    role_.Swap(&other->role_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleAssignment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleAssignment_descriptor_;
  metadata.reflection = RoleAssignment_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int MemberAttributeAssignment::kMemberIdFieldNumber;
const int MemberAttributeAssignment::kAttributeFieldNumber;
#endif  // !_MSC_VER

MemberAttributeAssignment::MemberAttributeAssignment()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.MemberAttributeAssignment)
}

void MemberAttributeAssignment::InitAsDefaultInstance() {
  member_id_ = const_cast< ::bgs::protocol::club::v1::MemberId*>(&::bgs::protocol::club::v1::MemberId::default_instance());
}

MemberAttributeAssignment::MemberAttributeAssignment(const MemberAttributeAssignment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.MemberAttributeAssignment)
}

void MemberAttributeAssignment::SharedCtor() {
  _cached_size_ = 0;
  member_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MemberAttributeAssignment::~MemberAttributeAssignment() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.MemberAttributeAssignment)
  SharedDtor();
}

void MemberAttributeAssignment::SharedDtor() {
  if (this != default_instance_) {
    delete member_id_;
  }
}

void MemberAttributeAssignment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MemberAttributeAssignment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MemberAttributeAssignment_descriptor_;
}

const MemberAttributeAssignment& MemberAttributeAssignment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_club_5fmember_2eproto();
  return *default_instance_;
}

MemberAttributeAssignment* MemberAttributeAssignment::default_instance_ = NULL;

MemberAttributeAssignment* MemberAttributeAssignment::New() const {
  return new MemberAttributeAssignment;
}

void MemberAttributeAssignment::Clear() {
  if (has_member_id()) {
    if (member_id_ != NULL) member_id_->::bgs::protocol::club::v1::MemberId::Clear();
  }
  attribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MemberAttributeAssignment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bgs.protocol.club.v1.MemberAttributeAssignment)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .bgs.protocol.club.v1.MemberId member_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_member_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_attribute;
        break;
      }

      // repeated .bgs.protocol.v2.Attribute attribute = 2;
      case 2: {
        if (tag == 18) {
         parse_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attribute()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_attribute;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bgs.protocol.club.v1.MemberAttributeAssignment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bgs.protocol.club.v1.MemberAttributeAssignment)
  return false;
#undef DO_
}

void MemberAttributeAssignment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bgs.protocol.club.v1.MemberAttributeAssignment)
  // optional .bgs.protocol.club.v1.MemberId member_id = 1;
  if (has_member_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->member_id(), output);
  }

  // repeated .bgs.protocol.v2.Attribute attribute = 2;
  for (int i = 0; i < this->attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->attribute(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bgs.protocol.club.v1.MemberAttributeAssignment)
}

::google::protobuf::uint8* MemberAttributeAssignment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.MemberAttributeAssignment)
  // optional .bgs.protocol.club.v1.MemberId member_id = 1;
  if (has_member_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->member_id(), target);
  }

  // repeated .bgs.protocol.v2.Attribute attribute = 2;
  for (int i = 0; i < this->attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->attribute(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.MemberAttributeAssignment)
  return target;
}

int MemberAttributeAssignment::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .bgs.protocol.club.v1.MemberId member_id = 1;
    if (has_member_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->member_id());
    }

  }
  // repeated .bgs.protocol.v2.Attribute attribute = 2;
  total_size += 1 * this->attribute_size();
  for (int i = 0; i < this->attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attribute(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MemberAttributeAssignment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MemberAttributeAssignment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MemberAttributeAssignment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MemberAttributeAssignment::MergeFrom(const MemberAttributeAssignment& from) {
  GOOGLE_CHECK_NE(&from, this);
  attribute_.MergeFrom(from.attribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_member_id()) {
      mutable_member_id()->::bgs::protocol::club::v1::MemberId::MergeFrom(from.member_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MemberAttributeAssignment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemberAttributeAssignment::CopyFrom(const MemberAttributeAssignment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemberAttributeAssignment::IsInitialized() const {
  if (has_member_id()) {
    if (!this->member_id().IsInitialized()) return false;
  }
  return true;
}

void MemberAttributeAssignment::Swap(MemberAttributeAssignment* other) {
  if (other != this) {
    std::swap(member_id_, other->member_id_);
    attribute_.Swap(&other->attribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MemberAttributeAssignment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MemberAttributeAssignment_descriptor_;
  metadata.reflection = MemberAttributeAssignment_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int SubscriberStateOptions::kVoiceFieldNumber;
#endif  // !_MSC_VER

SubscriberStateOptions::SubscriberStateOptions()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.SubscriberStateOptions)
}

void SubscriberStateOptions::InitAsDefaultInstance() {
  voice_ = const_cast< ::bgs::protocol::club::v1::MemberVoiceOptions*>(&::bgs::protocol::club::v1::MemberVoiceOptions::default_instance());
}

SubscriberStateOptions::SubscriberStateOptions(const SubscriberStateOptions& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.SubscriberStateOptions)
}

void SubscriberStateOptions::SharedCtor() {
  _cached_size_ = 0;
  voice_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubscriberStateOptions::~SubscriberStateOptions() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.SubscriberStateOptions)
  SharedDtor();
}

void SubscriberStateOptions::SharedDtor() {
  if (this != default_instance_) {
    delete voice_;
  }
}

void SubscriberStateOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubscriberStateOptions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubscriberStateOptions_descriptor_;
}

const SubscriberStateOptions& SubscriberStateOptions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_club_5fmember_2eproto();
  return *default_instance_;
}

SubscriberStateOptions* SubscriberStateOptions::default_instance_ = NULL;

SubscriberStateOptions* SubscriberStateOptions::New() const {
  return new SubscriberStateOptions;
}

void SubscriberStateOptions::Clear() {
  if (has_voice()) {
    if (voice_ != NULL) voice_->::bgs::protocol::club::v1::MemberVoiceOptions::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SubscriberStateOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bgs.protocol.club.v1.SubscriberStateOptions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .bgs.protocol.club.v1.MemberVoiceOptions voice = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_voice()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bgs.protocol.club.v1.SubscriberStateOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bgs.protocol.club.v1.SubscriberStateOptions)
  return false;
#undef DO_
}

void SubscriberStateOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bgs.protocol.club.v1.SubscriberStateOptions)
  // optional .bgs.protocol.club.v1.MemberVoiceOptions voice = 1;
  if (has_voice()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->voice(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bgs.protocol.club.v1.SubscriberStateOptions)
}

::google::protobuf::uint8* SubscriberStateOptions::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.SubscriberStateOptions)
  // optional .bgs.protocol.club.v1.MemberVoiceOptions voice = 1;
  if (has_voice()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->voice(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.SubscriberStateOptions)
  return target;
}

int SubscriberStateOptions::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .bgs.protocol.club.v1.MemberVoiceOptions voice = 1;
    if (has_voice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->voice());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubscriberStateOptions::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SubscriberStateOptions* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SubscriberStateOptions*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SubscriberStateOptions::MergeFrom(const SubscriberStateOptions& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_voice()) {
      mutable_voice()->::bgs::protocol::club::v1::MemberVoiceOptions::MergeFrom(from.voice());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SubscriberStateOptions::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscriberStateOptions::CopyFrom(const SubscriberStateOptions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscriberStateOptions::IsInitialized() const {
  return true;
}

void SubscriberStateOptions::Swap(SubscriberStateOptions* other) {
  if (other != this) {
    std::swap(voice_, other->voice_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SubscriberStateOptions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubscriberStateOptions_descriptor_;
  metadata.reflection = SubscriberStateOptions_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int SubscriberStateAssignment::kMemberIdFieldNumber;
const int SubscriberStateAssignment::kActiveFieldNumber;
const int SubscriberStateAssignment::kVoiceFieldNumber;
#endif  // !_MSC_VER

SubscriberStateAssignment::SubscriberStateAssignment()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.SubscriberStateAssignment)
}

void SubscriberStateAssignment::InitAsDefaultInstance() {
  member_id_ = const_cast< ::bgs::protocol::club::v1::MemberId*>(&::bgs::protocol::club::v1::MemberId::default_instance());
  voice_ = const_cast< ::bgs::protocol::club::v1::MemberVoiceState*>(&::bgs::protocol::club::v1::MemberVoiceState::default_instance());
}

SubscriberStateAssignment::SubscriberStateAssignment(const SubscriberStateAssignment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.SubscriberStateAssignment)
}

void SubscriberStateAssignment::SharedCtor() {
  _cached_size_ = 0;
  member_id_ = NULL;
  active_ = false;
  voice_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubscriberStateAssignment::~SubscriberStateAssignment() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.SubscriberStateAssignment)
  SharedDtor();
}

void SubscriberStateAssignment::SharedDtor() {
  if (this != default_instance_) {
    delete member_id_;
    delete voice_;
  }
}

void SubscriberStateAssignment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubscriberStateAssignment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubscriberStateAssignment_descriptor_;
}

const SubscriberStateAssignment& SubscriberStateAssignment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_club_5fmember_2eproto();
  return *default_instance_;
}

SubscriberStateAssignment* SubscriberStateAssignment::default_instance_ = NULL;

SubscriberStateAssignment* SubscriberStateAssignment::New() const {
  return new SubscriberStateAssignment;
}

void SubscriberStateAssignment::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_member_id()) {
      if (member_id_ != NULL) member_id_->::bgs::protocol::club::v1::MemberId::Clear();
    }
    active_ = false;
    if (has_voice()) {
      if (voice_ != NULL) voice_->::bgs::protocol::club::v1::MemberVoiceState::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SubscriberStateAssignment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bgs.protocol.club.v1.SubscriberStateAssignment)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .bgs.protocol.club.v1.MemberId member_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_member_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_active;
        break;
      }

      // optional bool active = 2;
      case 2: {
        if (tag == 16) {
         parse_active:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_)));
          set_has_active();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_voice;
        break;
      }

      // optional .bgs.protocol.club.v1.MemberVoiceState voice = 3;
      case 3: {
        if (tag == 26) {
         parse_voice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_voice()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bgs.protocol.club.v1.SubscriberStateAssignment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bgs.protocol.club.v1.SubscriberStateAssignment)
  return false;
#undef DO_
}

void SubscriberStateAssignment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bgs.protocol.club.v1.SubscriberStateAssignment)
  // optional .bgs.protocol.club.v1.MemberId member_id = 1;
  if (has_member_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->member_id(), output);
  }

  // optional bool active = 2;
  if (has_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->active(), output);
  }

  // optional .bgs.protocol.club.v1.MemberVoiceState voice = 3;
  if (has_voice()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->voice(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bgs.protocol.club.v1.SubscriberStateAssignment)
}

::google::protobuf::uint8* SubscriberStateAssignment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.SubscriberStateAssignment)
  // optional .bgs.protocol.club.v1.MemberId member_id = 1;
  if (has_member_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->member_id(), target);
  }

  // optional bool active = 2;
  if (has_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->active(), target);
  }

  // optional .bgs.protocol.club.v1.MemberVoiceState voice = 3;
  if (has_voice()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->voice(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.SubscriberStateAssignment)
  return target;
}

int SubscriberStateAssignment::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .bgs.protocol.club.v1.MemberId member_id = 1;
    if (has_member_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->member_id());
    }

    // optional bool active = 2;
    if (has_active()) {
      total_size += 1 + 1;
    }

    // optional .bgs.protocol.club.v1.MemberVoiceState voice = 3;
    if (has_voice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->voice());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubscriberStateAssignment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SubscriberStateAssignment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SubscriberStateAssignment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SubscriberStateAssignment::MergeFrom(const SubscriberStateAssignment& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_member_id()) {
      mutable_member_id()->::bgs::protocol::club::v1::MemberId::MergeFrom(from.member_id());
    }
    if (from.has_active()) {
      set_active(from.active());
    }
    if (from.has_voice()) {
      mutable_voice()->::bgs::protocol::club::v1::MemberVoiceState::MergeFrom(from.voice());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SubscriberStateAssignment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscriberStateAssignment::CopyFrom(const SubscriberStateAssignment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscriberStateAssignment::IsInitialized() const {
  if (has_member_id()) {
    if (!this->member_id().IsInitialized()) return false;
  }
  return true;
}

void SubscriberStateAssignment::Swap(SubscriberStateAssignment* other) {
  if (other != this) {
    std::swap(member_id_, other->member_id_);
    std::swap(active_, other->active_);
    std::swap(voice_, other->voice_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SubscriberStateAssignment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubscriberStateAssignment_descriptor_;
  metadata.reflection = SubscriberStateAssignment_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int MemberStateOptions::kAttributeFieldNumber;
const int MemberStateOptions::kPresenceLevelFieldNumber;
const int MemberStateOptions::kModeratorMuteFieldNumber;
const int MemberStateOptions::kWhisperLevelFieldNumber;
const int MemberStateOptions::kNoteFieldNumber;
#endif  // !_MSC_VER

MemberStateOptions::MemberStateOptions()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.MemberStateOptions)
}

void MemberStateOptions::InitAsDefaultInstance() {
}

MemberStateOptions::MemberStateOptions(const MemberStateOptions& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.MemberStateOptions)
}

void MemberStateOptions::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  presence_level_ = 0;
  moderator_mute_ = false;
  whisper_level_ = 0;
  note_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MemberStateOptions::~MemberStateOptions() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.MemberStateOptions)
  SharedDtor();
}

void MemberStateOptions::SharedDtor() {
  if (note_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete note_;
  }
  if (this != default_instance_) {
  }
}

void MemberStateOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MemberStateOptions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MemberStateOptions_descriptor_;
}

const MemberStateOptions& MemberStateOptions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_club_5fmember_2eproto();
  return *default_instance_;
}

MemberStateOptions* MemberStateOptions::default_instance_ = NULL;

MemberStateOptions* MemberStateOptions::New() const {
  return new MemberStateOptions;
}

void MemberStateOptions::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MemberStateOptions*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 30) {
    ZR_(presence_level_, moderator_mute_);
    whisper_level_ = 0;
    if (has_note()) {
      if (note_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        note_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  attribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MemberStateOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bgs.protocol.club.v1.MemberStateOptions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .bgs.protocol.v2.Attribute attribute = 1;
      case 1: {
        if (tag == 10) {
         parse_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attribute()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_attribute;
        if (input->ExpectTag(16)) goto parse_presence_level;
        break;
      }

      // optional .bgs.protocol.club.v1.PresenceLevel presence_level = 2;
      case 2: {
        if (tag == 16) {
         parse_presence_level:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::bgs::protocol::club::v1::PresenceLevel_IsValid(value)) {
            set_presence_level(static_cast< ::bgs::protocol::club::v1::PresenceLevel >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_moderator_mute;
        break;
      }

      // optional bool moderator_mute = 3;
      case 3: {
        if (tag == 24) {
         parse_moderator_mute:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &moderator_mute_)));
          set_has_moderator_mute();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_whisper_level;
        break;
      }

      // optional .bgs.protocol.club.v1.WhisperLevel whisper_level = 4;
      case 4: {
        if (tag == 32) {
         parse_whisper_level:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::bgs::protocol::club::v1::WhisperLevel_IsValid(value)) {
            set_whisper_level(static_cast< ::bgs::protocol::club::v1::WhisperLevel >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_note;
        break;
      }

      // optional string note = 5;
      case 5: {
        if (tag == 42) {
         parse_note:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_note()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->note().data(), this->note().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "note");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bgs.protocol.club.v1.MemberStateOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bgs.protocol.club.v1.MemberStateOptions)
  return false;
#undef DO_
}

void MemberStateOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bgs.protocol.club.v1.MemberStateOptions)
  // repeated .bgs.protocol.v2.Attribute attribute = 1;
  for (int i = 0; i < this->attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->attribute(i), output);
  }

  // optional .bgs.protocol.club.v1.PresenceLevel presence_level = 2;
  if (has_presence_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->presence_level(), output);
  }

  // optional bool moderator_mute = 3;
  if (has_moderator_mute()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->moderator_mute(), output);
  }

  // optional .bgs.protocol.club.v1.WhisperLevel whisper_level = 4;
  if (has_whisper_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->whisper_level(), output);
  }

  // optional string note = 5;
  if (has_note()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->note().data(), this->note().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "note");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->note(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bgs.protocol.club.v1.MemberStateOptions)
}

::google::protobuf::uint8* MemberStateOptions::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.MemberStateOptions)
  // repeated .bgs.protocol.v2.Attribute attribute = 1;
  for (int i = 0; i < this->attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->attribute(i), target);
  }

  // optional .bgs.protocol.club.v1.PresenceLevel presence_level = 2;
  if (has_presence_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->presence_level(), target);
  }

  // optional bool moderator_mute = 3;
  if (has_moderator_mute()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->moderator_mute(), target);
  }

  // optional .bgs.protocol.club.v1.WhisperLevel whisper_level = 4;
  if (has_whisper_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->whisper_level(), target);
  }

  // optional string note = 5;
  if (has_note()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->note().data(), this->note().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "note");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->note(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.MemberStateOptions)
  return target;
}

int MemberStateOptions::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .bgs.protocol.club.v1.PresenceLevel presence_level = 2;
    if (has_presence_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->presence_level());
    }

    // optional bool moderator_mute = 3;
    if (has_moderator_mute()) {
      total_size += 1 + 1;
    }

    // optional .bgs.protocol.club.v1.WhisperLevel whisper_level = 4;
    if (has_whisper_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->whisper_level());
    }

    // optional string note = 5;
    if (has_note()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->note());
    }

  }
  // repeated .bgs.protocol.v2.Attribute attribute = 1;
  total_size += 1 * this->attribute_size();
  for (int i = 0; i < this->attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attribute(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MemberStateOptions::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MemberStateOptions* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MemberStateOptions*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MemberStateOptions::MergeFrom(const MemberStateOptions& from) {
  GOOGLE_CHECK_NE(&from, this);
  attribute_.MergeFrom(from.attribute_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_presence_level()) {
      set_presence_level(from.presence_level());
    }
    if (from.has_moderator_mute()) {
      set_moderator_mute(from.moderator_mute());
    }
    if (from.has_whisper_level()) {
      set_whisper_level(from.whisper_level());
    }
    if (from.has_note()) {
      set_note(from.note());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MemberStateOptions::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemberStateOptions::CopyFrom(const MemberStateOptions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemberStateOptions::IsInitialized() const {
  return true;
}

void MemberStateOptions::Swap(MemberStateOptions* other) {
  if (other != this) {
    attribute_.Swap(&other->attribute_);
    std::swap(presence_level_, other->presence_level_);
    std::swap(moderator_mute_, other->moderator_mute_);
    std::swap(whisper_level_, other->whisper_level_);
    std::swap(note_, other->note_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MemberStateOptions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MemberStateOptions_descriptor_;
  metadata.reflection = MemberStateOptions_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int MemberStateAssignment::kMemberIdFieldNumber;
const int MemberStateAssignment::kAttributeFieldNumber;
const int MemberStateAssignment::kPresenceLevelFieldNumber;
const int MemberStateAssignment::kModeratorMuteFieldNumber;
const int MemberStateAssignment::kWhisperLevelFieldNumber;
const int MemberStateAssignment::kNoteFieldNumber;
#endif  // !_MSC_VER

MemberStateAssignment::MemberStateAssignment()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.MemberStateAssignment)
}

void MemberStateAssignment::InitAsDefaultInstance() {
  member_id_ = const_cast< ::bgs::protocol::club::v1::MemberId*>(&::bgs::protocol::club::v1::MemberId::default_instance());
}

MemberStateAssignment::MemberStateAssignment(const MemberStateAssignment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.MemberStateAssignment)
}

void MemberStateAssignment::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  member_id_ = NULL;
  presence_level_ = 0;
  moderator_mute_ = false;
  whisper_level_ = 0;
  note_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MemberStateAssignment::~MemberStateAssignment() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.MemberStateAssignment)
  SharedDtor();
}

void MemberStateAssignment::SharedDtor() {
  if (note_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete note_;
  }
  if (this != default_instance_) {
    delete member_id_;
  }
}

void MemberStateAssignment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MemberStateAssignment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MemberStateAssignment_descriptor_;
}

const MemberStateAssignment& MemberStateAssignment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_club_5fmember_2eproto();
  return *default_instance_;
}

MemberStateAssignment* MemberStateAssignment::default_instance_ = NULL;

MemberStateAssignment* MemberStateAssignment::New() const {
  return new MemberStateAssignment;
}

void MemberStateAssignment::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MemberStateAssignment*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 61) {
    ZR_(presence_level_, moderator_mute_);
    if (has_member_id()) {
      if (member_id_ != NULL) member_id_->::bgs::protocol::club::v1::MemberId::Clear();
    }
    whisper_level_ = 0;
    if (has_note()) {
      if (note_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        note_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  attribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MemberStateAssignment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bgs.protocol.club.v1.MemberStateAssignment)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .bgs.protocol.club.v1.MemberId member_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_member_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_attribute;
        break;
      }

      // repeated .bgs.protocol.v2.Attribute attribute = 2;
      case 2: {
        if (tag == 18) {
         parse_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attribute()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_attribute;
        if (input->ExpectTag(24)) goto parse_presence_level;
        break;
      }

      // optional .bgs.protocol.club.v1.PresenceLevel presence_level = 3;
      case 3: {
        if (tag == 24) {
         parse_presence_level:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::bgs::protocol::club::v1::PresenceLevel_IsValid(value)) {
            set_presence_level(static_cast< ::bgs::protocol::club::v1::PresenceLevel >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_moderator_mute;
        break;
      }

      // optional bool moderator_mute = 4;
      case 4: {
        if (tag == 32) {
         parse_moderator_mute:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &moderator_mute_)));
          set_has_moderator_mute();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_whisper_level;
        break;
      }

      // optional .bgs.protocol.club.v1.WhisperLevel whisper_level = 5;
      case 5: {
        if (tag == 40) {
         parse_whisper_level:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::bgs::protocol::club::v1::WhisperLevel_IsValid(value)) {
            set_whisper_level(static_cast< ::bgs::protocol::club::v1::WhisperLevel >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_note;
        break;
      }

      // optional string note = 6;
      case 6: {
        if (tag == 50) {
         parse_note:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_note()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->note().data(), this->note().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "note");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bgs.protocol.club.v1.MemberStateAssignment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bgs.protocol.club.v1.MemberStateAssignment)
  return false;
#undef DO_
}

void MemberStateAssignment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bgs.protocol.club.v1.MemberStateAssignment)
  // optional .bgs.protocol.club.v1.MemberId member_id = 1;
  if (has_member_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->member_id(), output);
  }

  // repeated .bgs.protocol.v2.Attribute attribute = 2;
  for (int i = 0; i < this->attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->attribute(i), output);
  }

  // optional .bgs.protocol.club.v1.PresenceLevel presence_level = 3;
  if (has_presence_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->presence_level(), output);
  }

  // optional bool moderator_mute = 4;
  if (has_moderator_mute()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->moderator_mute(), output);
  }

  // optional .bgs.protocol.club.v1.WhisperLevel whisper_level = 5;
  if (has_whisper_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->whisper_level(), output);
  }

  // optional string note = 6;
  if (has_note()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->note().data(), this->note().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "note");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->note(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bgs.protocol.club.v1.MemberStateAssignment)
}

::google::protobuf::uint8* MemberStateAssignment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.MemberStateAssignment)
  // optional .bgs.protocol.club.v1.MemberId member_id = 1;
  if (has_member_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->member_id(), target);
  }

  // repeated .bgs.protocol.v2.Attribute attribute = 2;
  for (int i = 0; i < this->attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->attribute(i), target);
  }

  // optional .bgs.protocol.club.v1.PresenceLevel presence_level = 3;
  if (has_presence_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->presence_level(), target);
  }

  // optional bool moderator_mute = 4;
  if (has_moderator_mute()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->moderator_mute(), target);
  }

  // optional .bgs.protocol.club.v1.WhisperLevel whisper_level = 5;
  if (has_whisper_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->whisper_level(), target);
  }

  // optional string note = 6;
  if (has_note()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->note().data(), this->note().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "note");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->note(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.MemberStateAssignment)
  return target;
}

int MemberStateAssignment::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .bgs.protocol.club.v1.MemberId member_id = 1;
    if (has_member_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->member_id());
    }

    // optional .bgs.protocol.club.v1.PresenceLevel presence_level = 3;
    if (has_presence_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->presence_level());
    }

    // optional bool moderator_mute = 4;
    if (has_moderator_mute()) {
      total_size += 1 + 1;
    }

    // optional .bgs.protocol.club.v1.WhisperLevel whisper_level = 5;
    if (has_whisper_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->whisper_level());
    }

    // optional string note = 6;
    if (has_note()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->note());
    }

  }
  // repeated .bgs.protocol.v2.Attribute attribute = 2;
  total_size += 1 * this->attribute_size();
  for (int i = 0; i < this->attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attribute(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MemberStateAssignment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MemberStateAssignment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MemberStateAssignment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MemberStateAssignment::MergeFrom(const MemberStateAssignment& from) {
  GOOGLE_CHECK_NE(&from, this);
  attribute_.MergeFrom(from.attribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_member_id()) {
      mutable_member_id()->::bgs::protocol::club::v1::MemberId::MergeFrom(from.member_id());
    }
    if (from.has_presence_level()) {
      set_presence_level(from.presence_level());
    }
    if (from.has_moderator_mute()) {
      set_moderator_mute(from.moderator_mute());
    }
    if (from.has_whisper_level()) {
      set_whisper_level(from.whisper_level());
    }
    if (from.has_note()) {
      set_note(from.note());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MemberStateAssignment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemberStateAssignment::CopyFrom(const MemberStateAssignment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemberStateAssignment::IsInitialized() const {
  if (has_member_id()) {
    if (!this->member_id().IsInitialized()) return false;
  }
  return true;
}

void MemberStateAssignment::Swap(MemberStateAssignment* other) {
  if (other != this) {
    std::swap(member_id_, other->member_id_);
    attribute_.Swap(&other->attribute_);
    std::swap(presence_level_, other->presence_level_);
    std::swap(moderator_mute_, other->moderator_mute_);
    std::swap(whisper_level_, other->whisper_level_);
    std::swap(note_, other->note_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MemberStateAssignment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MemberStateAssignment_descriptor_;
  metadata.reflection = MemberStateAssignment_reflection_;
  return metadata;
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace club
}  // namespace protocol
}  // namespace bgs

// @@protoc_insertion_point(global_scope)
