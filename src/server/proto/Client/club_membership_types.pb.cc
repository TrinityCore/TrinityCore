// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: club_membership_types.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "club_membership_types.pb.h"

#include <algorithm>
#include <utility>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
#include "Log.h"
// @@protoc_insertion_point(includes)

namespace bgs {
namespace protocol {
namespace club {
namespace v1 {

namespace {

const ::google::protobuf::Descriptor* ClubMembershipFilter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClubMembershipFilter_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClubMembershipSubscribeOptions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClubMembershipSubscribeOptions_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClubMembershipGetStateOptions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClubMembershipGetStateOptions_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClubMembershipDescription_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClubMembershipDescription_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClubMembershipState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClubMembershipState_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClubPosition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClubPosition_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClubSharedSettings_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClubSharedSettings_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClubSharedSettingsOptions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClubSharedSettingsOptions_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClubSharedSettingsAssignment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClubSharedSettingsAssignment_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_club_5fmembership_5ftypes_2eproto() {
  protobuf_AddDesc_club_5fmembership_5ftypes_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "club_membership_types.proto");
  GOOGLE_CHECK(file != NULL);
  ClubMembershipFilter_descriptor_ = file->message_type(0);
  static const int ClubMembershipFilter_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubMembershipFilter, member_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubMembershipFilter, type_),
  };
  ClubMembershipFilter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClubMembershipFilter_descriptor_,
      ClubMembershipFilter::default_instance_,
      ClubMembershipFilter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubMembershipFilter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubMembershipFilter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClubMembershipFilter));
  ClubMembershipSubscribeOptions_descriptor_ = file->message_type(1);
  static const int ClubMembershipSubscribeOptions_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubMembershipSubscribeOptions, filter_),
  };
  ClubMembershipSubscribeOptions_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClubMembershipSubscribeOptions_descriptor_,
      ClubMembershipSubscribeOptions::default_instance_,
      ClubMembershipSubscribeOptions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubMembershipSubscribeOptions, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubMembershipSubscribeOptions, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClubMembershipSubscribeOptions));
  ClubMembershipGetStateOptions_descriptor_ = file->message_type(2);
  static const int ClubMembershipGetStateOptions_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubMembershipGetStateOptions, filter_),
  };
  ClubMembershipGetStateOptions_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClubMembershipGetStateOptions_descriptor_,
      ClubMembershipGetStateOptions::default_instance_,
      ClubMembershipGetStateOptions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubMembershipGetStateOptions, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubMembershipGetStateOptions, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClubMembershipGetStateOptions));
  ClubMembershipDescription_descriptor_ = file->message_type(3);
  static const int ClubMembershipDescription_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubMembershipDescription, member_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubMembershipDescription, club_),
  };
  ClubMembershipDescription_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClubMembershipDescription_descriptor_,
      ClubMembershipDescription::default_instance_,
      ClubMembershipDescription_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubMembershipDescription, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubMembershipDescription, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClubMembershipDescription));
  ClubMembershipState_descriptor_ = file->message_type(4);
  static const int ClubMembershipState_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubMembershipState, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubMembershipState, invitation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubMembershipState, setting_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubMembershipState, mention_view_),
  };
  ClubMembershipState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClubMembershipState_descriptor_,
      ClubMembershipState::default_instance_,
      ClubMembershipState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubMembershipState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubMembershipState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClubMembershipState));
  ClubPosition_descriptor_ = file->message_type(5);
  static const int ClubPosition_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubPosition, club_id_),
  };
  ClubPosition_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClubPosition_descriptor_,
      ClubPosition::default_instance_,
      ClubPosition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubPosition, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubPosition, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClubPosition));
  ClubSharedSettings_descriptor_ = file->message_type(6);
  static const int ClubSharedSettings_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubSharedSettings, club_position_),
  };
  ClubSharedSettings_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClubSharedSettings_descriptor_,
      ClubSharedSettings::default_instance_,
      ClubSharedSettings_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubSharedSettings, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubSharedSettings, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClubSharedSettings));
  ClubSharedSettingsOptions_descriptor_ = file->message_type(7);
  static const int ClubSharedSettingsOptions_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubSharedSettingsOptions, club_position_),
  };
  ClubSharedSettingsOptions_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClubSharedSettingsOptions_descriptor_,
      ClubSharedSettingsOptions::default_instance_,
      ClubSharedSettingsOptions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubSharedSettingsOptions, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubSharedSettingsOptions, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClubSharedSettingsOptions));
  ClubSharedSettingsAssignment_descriptor_ = file->message_type(8);
  static const int ClubSharedSettingsAssignment_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubSharedSettingsAssignment, club_position_),
  };
  ClubSharedSettingsAssignment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClubSharedSettingsAssignment_descriptor_,
      ClubSharedSettingsAssignment::default_instance_,
      ClubSharedSettingsAssignment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubSharedSettingsAssignment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubSharedSettingsAssignment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClubSharedSettingsAssignment));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_club_5fmembership_5ftypes_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClubMembershipFilter_descriptor_, &ClubMembershipFilter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClubMembershipSubscribeOptions_descriptor_, &ClubMembershipSubscribeOptions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClubMembershipGetStateOptions_descriptor_, &ClubMembershipGetStateOptions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClubMembershipDescription_descriptor_, &ClubMembershipDescription::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClubMembershipState_descriptor_, &ClubMembershipState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClubPosition_descriptor_, &ClubPosition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClubSharedSettings_descriptor_, &ClubSharedSettings::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClubSharedSettingsOptions_descriptor_, &ClubSharedSettingsOptions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClubSharedSettingsAssignment_descriptor_, &ClubSharedSettingsAssignment::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_club_5fmembership_5ftypes_2eproto() {
  delete ClubMembershipFilter::default_instance_;
  delete ClubMembershipFilter_reflection_;
  delete ClubMembershipSubscribeOptions::default_instance_;
  delete ClubMembershipSubscribeOptions_reflection_;
  delete ClubMembershipGetStateOptions::default_instance_;
  delete ClubMembershipGetStateOptions_reflection_;
  delete ClubMembershipDescription::default_instance_;
  delete ClubMembershipDescription_reflection_;
  delete ClubMembershipState::default_instance_;
  delete ClubMembershipState_reflection_;
  delete ClubPosition::default_instance_;
  delete ClubPosition_reflection_;
  delete ClubSharedSettings::default_instance_;
  delete ClubSharedSettings_reflection_;
  delete ClubSharedSettingsOptions::default_instance_;
  delete ClubSharedSettingsOptions_reflection_;
  delete ClubSharedSettingsAssignment::default_instance_;
  delete ClubSharedSettingsAssignment_reflection_;
}

void protobuf_AddDesc_club_5fmembership_5ftypes_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::bgs::protocol::club::v1::protobuf_AddDesc_club_5fcore_2eproto();
  ::bgs::protocol::club::v1::protobuf_AddDesc_club_5fmember_2eproto();
  ::bgs::protocol::club::v1::protobuf_AddDesc_club_5finvitation_2eproto();
  ::bgs::protocol::protobuf_AddDesc_event_5fview_5ftypes_2eproto();
  ::bgs::protocol::protobuf_AddDesc_rpc_5ftypes_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\033club_membership_types.proto\022\024bgs.proto"
    "col.club.v1\032\017club_core.proto\032\021club_membe"
    "r.proto\032\025club_invitation.proto\032\026event_vi"
    "ew_types.proto\032\017rpc_types.proto\"}\n\024ClubM"
    "embershipFilter\0221\n\tmember_id\030\001 \001(\0132\036.bgs"
    ".protocol.club.v1.MemberId\0222\n\004type\030\002 \001(\013"
    "2$.bgs.protocol.club.v1.UniqueClubType\"j"
    "\n\036ClubMembershipSubscribeOptions\022H\n\006filt"
    "er\030\001 \003(\0132*.bgs.protocol.club.v1.ClubMemb"
    "ershipFilterB\014\212\371+\010*\006\n\004\010\000\020\031\"i\n\035ClubMember"
    "shipGetStateOptions\022H\n\006filter\030\001 \003(\0132*.bg"
    "s.protocol.club.v1.ClubMembershipFilterB"
    "\014\212\371+\010*\006\n\004\010\000\020\031\"\203\001\n\031ClubMembershipDescript"
    "ion\0221\n\tmember_id\030\001 \001(\0132\036.bgs.protocol.cl"
    "ub.v1.MemberId\0223\n\004club\030\002 \001(\0132%.bgs.proto"
    "col.club.v1.ClubDescription\"\200\002\n\023ClubMemb"
    "ershipState\022D\n\013description\030\001 \003(\0132/.bgs.p"
    "rotocol.club.v1.ClubMembershipDescriptio"
    "n\0228\n\ninvitation\030\002 \003(\0132$.bgs.protocol.clu"
    "b.v1.ClubInvitation\0229\n\007setting\030\003 \001(\0132(.b"
    "gs.protocol.club.v1.ClubSharedSettings\022."
    "\n\014mention_view\030\004 \001(\0132\030.bgs.protocol.View"
    "Marker\"#\n\014ClubPosition\022\023\n\007club_id\030\001 \003(\004B"
    "\002\020\001\"O\n\022ClubSharedSettings\0229\n\rclub_positi"
    "on\030\001 \001(\0132\".bgs.protocol.club.v1.ClubPosi"
    "tion\"V\n\031ClubSharedSettingsOptions\0229\n\rclu"
    "b_position\030\001 \001(\0132\".bgs.protocol.club.v1."
    "ClubPosition\"Y\n\034ClubSharedSettingsAssign"
    "ment\0229\n\rclub_position\030\001 \001(\0132\".bgs.protoc"
    "ol.club.v1.ClubPositionB\002H\001", 1187);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "club_membership_types.proto", &protobuf_RegisterTypes);
  ClubMembershipFilter::default_instance_ = new ClubMembershipFilter();
  ClubMembershipSubscribeOptions::default_instance_ = new ClubMembershipSubscribeOptions();
  ClubMembershipGetStateOptions::default_instance_ = new ClubMembershipGetStateOptions();
  ClubMembershipDescription::default_instance_ = new ClubMembershipDescription();
  ClubMembershipState::default_instance_ = new ClubMembershipState();
  ClubPosition::default_instance_ = new ClubPosition();
  ClubSharedSettings::default_instance_ = new ClubSharedSettings();
  ClubSharedSettingsOptions::default_instance_ = new ClubSharedSettingsOptions();
  ClubSharedSettingsAssignment::default_instance_ = new ClubSharedSettingsAssignment();
  ClubMembershipFilter::default_instance_->InitAsDefaultInstance();
  ClubMembershipSubscribeOptions::default_instance_->InitAsDefaultInstance();
  ClubMembershipGetStateOptions::default_instance_->InitAsDefaultInstance();
  ClubMembershipDescription::default_instance_->InitAsDefaultInstance();
  ClubMembershipState::default_instance_->InitAsDefaultInstance();
  ClubPosition::default_instance_->InitAsDefaultInstance();
  ClubSharedSettings::default_instance_->InitAsDefaultInstance();
  ClubSharedSettingsOptions::default_instance_->InitAsDefaultInstance();
  ClubSharedSettingsAssignment::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_club_5fmembership_5ftypes_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_club_5fmembership_5ftypes_2eproto {
  StaticDescriptorInitializer_club_5fmembership_5ftypes_2eproto() {
    protobuf_AddDesc_club_5fmembership_5ftypes_2eproto();
  }
} static_descriptor_initializer_club_5fmembership_5ftypes_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ClubMembershipFilter::kMemberIdFieldNumber;
const int ClubMembershipFilter::kTypeFieldNumber;
#endif  // !_MSC_VER

ClubMembershipFilter::ClubMembershipFilter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.ClubMembershipFilter)
}

void ClubMembershipFilter::InitAsDefaultInstance() {
  member_id_ = const_cast< ::bgs::protocol::club::v1::MemberId*>(&::bgs::protocol::club::v1::MemberId::default_instance());
  type_ = const_cast< ::bgs::protocol::club::v1::UniqueClubType*>(&::bgs::protocol::club::v1::UniqueClubType::default_instance());
}

ClubMembershipFilter::ClubMembershipFilter(const ClubMembershipFilter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.ClubMembershipFilter)
}

void ClubMembershipFilter::SharedCtor() {
  _cached_size_ = 0;
  member_id_ = NULL;
  type_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClubMembershipFilter::~ClubMembershipFilter() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.ClubMembershipFilter)
  SharedDtor();
}

void ClubMembershipFilter::SharedDtor() {
  if (this != default_instance_) {
    delete member_id_;
    delete type_;
  }
}

void ClubMembershipFilter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClubMembershipFilter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClubMembershipFilter_descriptor_;
}

const ClubMembershipFilter& ClubMembershipFilter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_club_5fmembership_5ftypes_2eproto();
  return *default_instance_;
}

ClubMembershipFilter* ClubMembershipFilter::default_instance_ = NULL;

ClubMembershipFilter* ClubMembershipFilter::New() const {
  return new ClubMembershipFilter;
}

void ClubMembershipFilter::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_member_id()) {
      if (member_id_ != NULL) member_id_->::bgs::protocol::club::v1::MemberId::Clear();
    }
    if (has_type()) {
      if (type_ != NULL) type_->::bgs::protocol::club::v1::UniqueClubType::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClubMembershipFilter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bgs.protocol.club.v1.ClubMembershipFilter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .bgs.protocol.club.v1.MemberId member_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_member_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_type;
        break;
      }

      // optional .bgs.protocol.club.v1.UniqueClubType type = 2;
      case 2: {
        if (tag == 18) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_type()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bgs.protocol.club.v1.ClubMembershipFilter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bgs.protocol.club.v1.ClubMembershipFilter)
  return false;
#undef DO_
}

void ClubMembershipFilter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bgs.protocol.club.v1.ClubMembershipFilter)
  // optional .bgs.protocol.club.v1.MemberId member_id = 1;
  if (has_member_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->member_id(), output);
  }

  // optional .bgs.protocol.club.v1.UniqueClubType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bgs.protocol.club.v1.ClubMembershipFilter)
}

::google::protobuf::uint8* ClubMembershipFilter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.ClubMembershipFilter)
  // optional .bgs.protocol.club.v1.MemberId member_id = 1;
  if (has_member_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->member_id(), target);
  }

  // optional .bgs.protocol.club.v1.UniqueClubType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.ClubMembershipFilter)
  return target;
}

int ClubMembershipFilter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .bgs.protocol.club.v1.MemberId member_id = 1;
    if (has_member_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->member_id());
    }

    // optional .bgs.protocol.club.v1.UniqueClubType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClubMembershipFilter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClubMembershipFilter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClubMembershipFilter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClubMembershipFilter::MergeFrom(const ClubMembershipFilter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_member_id()) {
      mutable_member_id()->::bgs::protocol::club::v1::MemberId::MergeFrom(from.member_id());
    }
    if (from.has_type()) {
      mutable_type()->::bgs::protocol::club::v1::UniqueClubType::MergeFrom(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClubMembershipFilter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClubMembershipFilter::CopyFrom(const ClubMembershipFilter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClubMembershipFilter::IsInitialized() const {

  if (has_member_id()) {
    if (!this->member_id().IsInitialized()) return false;
  }
  return true;
}

void ClubMembershipFilter::Swap(ClubMembershipFilter* other) {
  if (other != this) {
    std::swap(member_id_, other->member_id_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClubMembershipFilter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClubMembershipFilter_descriptor_;
  metadata.reflection = ClubMembershipFilter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClubMembershipSubscribeOptions::kFilterFieldNumber;
#endif  // !_MSC_VER

ClubMembershipSubscribeOptions::ClubMembershipSubscribeOptions()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.ClubMembershipSubscribeOptions)
}

void ClubMembershipSubscribeOptions::InitAsDefaultInstance() {
}

ClubMembershipSubscribeOptions::ClubMembershipSubscribeOptions(const ClubMembershipSubscribeOptions& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.ClubMembershipSubscribeOptions)
}

void ClubMembershipSubscribeOptions::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClubMembershipSubscribeOptions::~ClubMembershipSubscribeOptions() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.ClubMembershipSubscribeOptions)
  SharedDtor();
}

void ClubMembershipSubscribeOptions::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClubMembershipSubscribeOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClubMembershipSubscribeOptions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClubMembershipSubscribeOptions_descriptor_;
}

const ClubMembershipSubscribeOptions& ClubMembershipSubscribeOptions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_club_5fmembership_5ftypes_2eproto();
  return *default_instance_;
}

ClubMembershipSubscribeOptions* ClubMembershipSubscribeOptions::default_instance_ = NULL;

ClubMembershipSubscribeOptions* ClubMembershipSubscribeOptions::New() const {
  return new ClubMembershipSubscribeOptions;
}

void ClubMembershipSubscribeOptions::Clear() {
  filter_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClubMembershipSubscribeOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bgs.protocol.club.v1.ClubMembershipSubscribeOptions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .bgs.protocol.club.v1.ClubMembershipFilter filter = 1;
      case 1: {
        if (tag == 10) {
         parse_filter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_filter()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_filter;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bgs.protocol.club.v1.ClubMembershipSubscribeOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bgs.protocol.club.v1.ClubMembershipSubscribeOptions)
  return false;
#undef DO_
}

void ClubMembershipSubscribeOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bgs.protocol.club.v1.ClubMembershipSubscribeOptions)
  // repeated .bgs.protocol.club.v1.ClubMembershipFilter filter = 1;
  for (int i = 0; i < this->filter_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->filter(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bgs.protocol.club.v1.ClubMembershipSubscribeOptions)
}

::google::protobuf::uint8* ClubMembershipSubscribeOptions::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.ClubMembershipSubscribeOptions)
  // repeated .bgs.protocol.club.v1.ClubMembershipFilter filter = 1;
  for (int i = 0; i < this->filter_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->filter(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.ClubMembershipSubscribeOptions)
  return target;
}

int ClubMembershipSubscribeOptions::ByteSize() const {
  int total_size = 0;

  // repeated .bgs.protocol.club.v1.ClubMembershipFilter filter = 1;
  total_size += 1 * this->filter_size();
  for (int i = 0; i < this->filter_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->filter(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClubMembershipSubscribeOptions::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClubMembershipSubscribeOptions* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClubMembershipSubscribeOptions*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClubMembershipSubscribeOptions::MergeFrom(const ClubMembershipSubscribeOptions& from) {
  GOOGLE_CHECK_NE(&from, this);
  filter_.MergeFrom(from.filter_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClubMembershipSubscribeOptions::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClubMembershipSubscribeOptions::CopyFrom(const ClubMembershipSubscribeOptions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClubMembershipSubscribeOptions::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->filter())) return false;
  return true;
}

void ClubMembershipSubscribeOptions::Swap(ClubMembershipSubscribeOptions* other) {
  if (other != this) {
    filter_.Swap(&other->filter_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClubMembershipSubscribeOptions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClubMembershipSubscribeOptions_descriptor_;
  metadata.reflection = ClubMembershipSubscribeOptions_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClubMembershipGetStateOptions::kFilterFieldNumber;
#endif  // !_MSC_VER

ClubMembershipGetStateOptions::ClubMembershipGetStateOptions()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.ClubMembershipGetStateOptions)
}

void ClubMembershipGetStateOptions::InitAsDefaultInstance() {
}

ClubMembershipGetStateOptions::ClubMembershipGetStateOptions(const ClubMembershipGetStateOptions& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.ClubMembershipGetStateOptions)
}

void ClubMembershipGetStateOptions::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClubMembershipGetStateOptions::~ClubMembershipGetStateOptions() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.ClubMembershipGetStateOptions)
  SharedDtor();
}

void ClubMembershipGetStateOptions::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClubMembershipGetStateOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClubMembershipGetStateOptions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClubMembershipGetStateOptions_descriptor_;
}

const ClubMembershipGetStateOptions& ClubMembershipGetStateOptions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_club_5fmembership_5ftypes_2eproto();
  return *default_instance_;
}

ClubMembershipGetStateOptions* ClubMembershipGetStateOptions::default_instance_ = NULL;

ClubMembershipGetStateOptions* ClubMembershipGetStateOptions::New() const {
  return new ClubMembershipGetStateOptions;
}

void ClubMembershipGetStateOptions::Clear() {
  filter_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClubMembershipGetStateOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bgs.protocol.club.v1.ClubMembershipGetStateOptions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .bgs.protocol.club.v1.ClubMembershipFilter filter = 1;
      case 1: {
        if (tag == 10) {
         parse_filter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_filter()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_filter;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bgs.protocol.club.v1.ClubMembershipGetStateOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bgs.protocol.club.v1.ClubMembershipGetStateOptions)
  return false;
#undef DO_
}

void ClubMembershipGetStateOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bgs.protocol.club.v1.ClubMembershipGetStateOptions)
  // repeated .bgs.protocol.club.v1.ClubMembershipFilter filter = 1;
  for (int i = 0; i < this->filter_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->filter(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bgs.protocol.club.v1.ClubMembershipGetStateOptions)
}

::google::protobuf::uint8* ClubMembershipGetStateOptions::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.ClubMembershipGetStateOptions)
  // repeated .bgs.protocol.club.v1.ClubMembershipFilter filter = 1;
  for (int i = 0; i < this->filter_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->filter(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.ClubMembershipGetStateOptions)
  return target;
}

int ClubMembershipGetStateOptions::ByteSize() const {
  int total_size = 0;

  // repeated .bgs.protocol.club.v1.ClubMembershipFilter filter = 1;
  total_size += 1 * this->filter_size();
  for (int i = 0; i < this->filter_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->filter(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClubMembershipGetStateOptions::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClubMembershipGetStateOptions* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClubMembershipGetStateOptions*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClubMembershipGetStateOptions::MergeFrom(const ClubMembershipGetStateOptions& from) {
  GOOGLE_CHECK_NE(&from, this);
  filter_.MergeFrom(from.filter_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClubMembershipGetStateOptions::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClubMembershipGetStateOptions::CopyFrom(const ClubMembershipGetStateOptions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClubMembershipGetStateOptions::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->filter())) return false;
  return true;
}

void ClubMembershipGetStateOptions::Swap(ClubMembershipGetStateOptions* other) {
  if (other != this) {
    filter_.Swap(&other->filter_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClubMembershipGetStateOptions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClubMembershipGetStateOptions_descriptor_;
  metadata.reflection = ClubMembershipGetStateOptions_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClubMembershipDescription::kMemberIdFieldNumber;
const int ClubMembershipDescription::kClubFieldNumber;
#endif  // !_MSC_VER

ClubMembershipDescription::ClubMembershipDescription()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.ClubMembershipDescription)
}

void ClubMembershipDescription::InitAsDefaultInstance() {
  member_id_ = const_cast< ::bgs::protocol::club::v1::MemberId*>(&::bgs::protocol::club::v1::MemberId::default_instance());
  club_ = const_cast< ::bgs::protocol::club::v1::ClubDescription*>(&::bgs::protocol::club::v1::ClubDescription::default_instance());
}

ClubMembershipDescription::ClubMembershipDescription(const ClubMembershipDescription& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.ClubMembershipDescription)
}

void ClubMembershipDescription::SharedCtor() {
  _cached_size_ = 0;
  member_id_ = NULL;
  club_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClubMembershipDescription::~ClubMembershipDescription() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.ClubMembershipDescription)
  SharedDtor();
}

void ClubMembershipDescription::SharedDtor() {
  if (this != default_instance_) {
    delete member_id_;
    delete club_;
  }
}

void ClubMembershipDescription::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClubMembershipDescription::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClubMembershipDescription_descriptor_;
}

const ClubMembershipDescription& ClubMembershipDescription::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_club_5fmembership_5ftypes_2eproto();
  return *default_instance_;
}

ClubMembershipDescription* ClubMembershipDescription::default_instance_ = NULL;

ClubMembershipDescription* ClubMembershipDescription::New() const {
  return new ClubMembershipDescription;
}

void ClubMembershipDescription::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_member_id()) {
      if (member_id_ != NULL) member_id_->::bgs::protocol::club::v1::MemberId::Clear();
    }
    if (has_club()) {
      if (club_ != NULL) club_->::bgs::protocol::club::v1::ClubDescription::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClubMembershipDescription::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bgs.protocol.club.v1.ClubMembershipDescription)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .bgs.protocol.club.v1.MemberId member_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_member_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_club;
        break;
      }

      // optional .bgs.protocol.club.v1.ClubDescription club = 2;
      case 2: {
        if (tag == 18) {
         parse_club:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_club()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bgs.protocol.club.v1.ClubMembershipDescription)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bgs.protocol.club.v1.ClubMembershipDescription)
  return false;
#undef DO_
}

void ClubMembershipDescription::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bgs.protocol.club.v1.ClubMembershipDescription)
  // optional .bgs.protocol.club.v1.MemberId member_id = 1;
  if (has_member_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->member_id(), output);
  }

  // optional .bgs.protocol.club.v1.ClubDescription club = 2;
  if (has_club()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->club(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bgs.protocol.club.v1.ClubMembershipDescription)
}

::google::protobuf::uint8* ClubMembershipDescription::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.ClubMembershipDescription)
  // optional .bgs.protocol.club.v1.MemberId member_id = 1;
  if (has_member_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->member_id(), target);
  }

  // optional .bgs.protocol.club.v1.ClubDescription club = 2;
  if (has_club()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->club(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.ClubMembershipDescription)
  return target;
}

int ClubMembershipDescription::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .bgs.protocol.club.v1.MemberId member_id = 1;
    if (has_member_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->member_id());
    }

    // optional .bgs.protocol.club.v1.ClubDescription club = 2;
    if (has_club()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->club());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClubMembershipDescription::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClubMembershipDescription* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClubMembershipDescription*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClubMembershipDescription::MergeFrom(const ClubMembershipDescription& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_member_id()) {
      mutable_member_id()->::bgs::protocol::club::v1::MemberId::MergeFrom(from.member_id());
    }
    if (from.has_club()) {
      mutable_club()->::bgs::protocol::club::v1::ClubDescription::MergeFrom(from.club());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClubMembershipDescription::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClubMembershipDescription::CopyFrom(const ClubMembershipDescription& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClubMembershipDescription::IsInitialized() const {

  if (has_member_id()) {
    if (!this->member_id().IsInitialized()) return false;
  }
  if (has_club()) {
    if (!this->club().IsInitialized()) return false;
  }
  return true;
}

void ClubMembershipDescription::Swap(ClubMembershipDescription* other) {
  if (other != this) {
    std::swap(member_id_, other->member_id_);
    std::swap(club_, other->club_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClubMembershipDescription::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClubMembershipDescription_descriptor_;
  metadata.reflection = ClubMembershipDescription_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClubMembershipState::kDescriptionFieldNumber;
const int ClubMembershipState::kInvitationFieldNumber;
const int ClubMembershipState::kSettingFieldNumber;
const int ClubMembershipState::kMentionViewFieldNumber;
#endif  // !_MSC_VER

ClubMembershipState::ClubMembershipState()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.ClubMembershipState)
}

void ClubMembershipState::InitAsDefaultInstance() {
  setting_ = const_cast< ::bgs::protocol::club::v1::ClubSharedSettings*>(&::bgs::protocol::club::v1::ClubSharedSettings::default_instance());
  mention_view_ = const_cast< ::bgs::protocol::ViewMarker*>(&::bgs::protocol::ViewMarker::default_instance());
}

ClubMembershipState::ClubMembershipState(const ClubMembershipState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.ClubMembershipState)
}

void ClubMembershipState::SharedCtor() {
  _cached_size_ = 0;
  setting_ = NULL;
  mention_view_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClubMembershipState::~ClubMembershipState() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.ClubMembershipState)
  SharedDtor();
}

void ClubMembershipState::SharedDtor() {
  if (this != default_instance_) {
    delete setting_;
    delete mention_view_;
  }
}

void ClubMembershipState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClubMembershipState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClubMembershipState_descriptor_;
}

const ClubMembershipState& ClubMembershipState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_club_5fmembership_5ftypes_2eproto();
  return *default_instance_;
}

ClubMembershipState* ClubMembershipState::default_instance_ = NULL;

ClubMembershipState* ClubMembershipState::New() const {
  return new ClubMembershipState;
}

void ClubMembershipState::Clear() {
  if (_has_bits_[0 / 32] & 12) {
    if (has_setting()) {
      if (setting_ != NULL) setting_->::bgs::protocol::club::v1::ClubSharedSettings::Clear();
    }
    if (has_mention_view()) {
      if (mention_view_ != NULL) mention_view_->::bgs::protocol::ViewMarker::Clear();
    }
  }
  description_.Clear();
  invitation_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClubMembershipState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bgs.protocol.club.v1.ClubMembershipState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .bgs.protocol.club.v1.ClubMembershipDescription description = 1;
      case 1: {
        if (tag == 10) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_description()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_description;
        if (input->ExpectTag(18)) goto parse_invitation;
        break;
      }

      // repeated .bgs.protocol.club.v1.ClubInvitation invitation = 2;
      case 2: {
        if (tag == 18) {
         parse_invitation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_invitation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_invitation;
        if (input->ExpectTag(26)) goto parse_setting;
        break;
      }

      // optional .bgs.protocol.club.v1.ClubSharedSettings setting = 3;
      case 3: {
        if (tag == 26) {
         parse_setting:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_setting()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_mention_view;
        break;
      }

      // optional .bgs.protocol.ViewMarker mention_view = 4;
      case 4: {
        if (tag == 34) {
         parse_mention_view:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mention_view()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bgs.protocol.club.v1.ClubMembershipState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bgs.protocol.club.v1.ClubMembershipState)
  return false;
#undef DO_
}

void ClubMembershipState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bgs.protocol.club.v1.ClubMembershipState)
  // repeated .bgs.protocol.club.v1.ClubMembershipDescription description = 1;
  for (int i = 0; i < this->description_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->description(i), output);
  }

  // repeated .bgs.protocol.club.v1.ClubInvitation invitation = 2;
  for (int i = 0; i < this->invitation_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->invitation(i), output);
  }

  // optional .bgs.protocol.club.v1.ClubSharedSettings setting = 3;
  if (has_setting()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->setting(), output);
  }

  // optional .bgs.protocol.ViewMarker mention_view = 4;
  if (has_mention_view()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->mention_view(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bgs.protocol.club.v1.ClubMembershipState)
}

::google::protobuf::uint8* ClubMembershipState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.ClubMembershipState)
  // repeated .bgs.protocol.club.v1.ClubMembershipDescription description = 1;
  for (int i = 0; i < this->description_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->description(i), target);
  }

  // repeated .bgs.protocol.club.v1.ClubInvitation invitation = 2;
  for (int i = 0; i < this->invitation_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->invitation(i), target);
  }

  // optional .bgs.protocol.club.v1.ClubSharedSettings setting = 3;
  if (has_setting()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->setting(), target);
  }

  // optional .bgs.protocol.ViewMarker mention_view = 4;
  if (has_mention_view()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->mention_view(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.ClubMembershipState)
  return target;
}

int ClubMembershipState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional .bgs.protocol.club.v1.ClubSharedSettings setting = 3;
    if (has_setting()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->setting());
    }

    // optional .bgs.protocol.ViewMarker mention_view = 4;
    if (has_mention_view()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mention_view());
    }

  }
  // repeated .bgs.protocol.club.v1.ClubMembershipDescription description = 1;
  total_size += 1 * this->description_size();
  for (int i = 0; i < this->description_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->description(i));
  }

  // repeated .bgs.protocol.club.v1.ClubInvitation invitation = 2;
  total_size += 1 * this->invitation_size();
  for (int i = 0; i < this->invitation_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->invitation(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClubMembershipState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClubMembershipState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClubMembershipState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClubMembershipState::MergeFrom(const ClubMembershipState& from) {
  GOOGLE_CHECK_NE(&from, this);
  description_.MergeFrom(from.description_);
  invitation_.MergeFrom(from.invitation_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_setting()) {
      mutable_setting()->::bgs::protocol::club::v1::ClubSharedSettings::MergeFrom(from.setting());
    }
    if (from.has_mention_view()) {
      mutable_mention_view()->::bgs::protocol::ViewMarker::MergeFrom(from.mention_view());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClubMembershipState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClubMembershipState::CopyFrom(const ClubMembershipState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClubMembershipState::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->description())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->invitation())) return false;
  return true;
}

void ClubMembershipState::Swap(ClubMembershipState* other) {
  if (other != this) {
    description_.Swap(&other->description_);
    invitation_.Swap(&other->invitation_);
    std::swap(setting_, other->setting_);
    std::swap(mention_view_, other->mention_view_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClubMembershipState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClubMembershipState_descriptor_;
  metadata.reflection = ClubMembershipState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClubPosition::kClubIdFieldNumber;
#endif  // !_MSC_VER

ClubPosition::ClubPosition()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.ClubPosition)
}

void ClubPosition::InitAsDefaultInstance() {
}

ClubPosition::ClubPosition(const ClubPosition& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.ClubPosition)
}

void ClubPosition::SharedCtor() {
  _cached_size_ = 0;
  _club_id_cached_byte_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClubPosition::~ClubPosition() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.ClubPosition)
  SharedDtor();
}

void ClubPosition::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClubPosition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClubPosition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClubPosition_descriptor_;
}

const ClubPosition& ClubPosition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_club_5fmembership_5ftypes_2eproto();
  return *default_instance_;
}

ClubPosition* ClubPosition::default_instance_ = NULL;

ClubPosition* ClubPosition::New() const {
  return new ClubPosition;
}

void ClubPosition::Clear() {
  club_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClubPosition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bgs.protocol.club.v1.ClubPosition)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 club_id = 1 [packed = true];
      case 1: {
        if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_club_id())));
        } else if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 10, input, this->mutable_club_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bgs.protocol.club.v1.ClubPosition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bgs.protocol.club.v1.ClubPosition)
  return false;
#undef DO_
}

void ClubPosition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bgs.protocol.club.v1.ClubPosition)
  // repeated uint64 club_id = 1 [packed = true];
  if (this->club_id_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_club_id_cached_byte_size_);
  }
  for (int i = 0; i < this->club_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->club_id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bgs.protocol.club.v1.ClubPosition)
}

::google::protobuf::uint8* ClubPosition::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.ClubPosition)
  // repeated uint64 club_id = 1 [packed = true];
  if (this->club_id_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _club_id_cached_byte_size_, target);
  }
  for (int i = 0; i < this->club_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->club_id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.ClubPosition)
  return target;
}

int ClubPosition::ByteSize() const {
  int total_size = 0;

  // repeated uint64 club_id = 1 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->club_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->club_id(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _club_id_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClubPosition::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClubPosition* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClubPosition*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClubPosition::MergeFrom(const ClubPosition& from) {
  GOOGLE_CHECK_NE(&from, this);
  club_id_.MergeFrom(from.club_id_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClubPosition::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClubPosition::CopyFrom(const ClubPosition& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClubPosition::IsInitialized() const {

  return true;
}

void ClubPosition::Swap(ClubPosition* other) {
  if (other != this) {
    club_id_.Swap(&other->club_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClubPosition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClubPosition_descriptor_;
  metadata.reflection = ClubPosition_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClubSharedSettings::kClubPositionFieldNumber;
#endif  // !_MSC_VER

ClubSharedSettings::ClubSharedSettings()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.ClubSharedSettings)
}

void ClubSharedSettings::InitAsDefaultInstance() {
  club_position_ = const_cast< ::bgs::protocol::club::v1::ClubPosition*>(&::bgs::protocol::club::v1::ClubPosition::default_instance());
}

ClubSharedSettings::ClubSharedSettings(const ClubSharedSettings& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.ClubSharedSettings)
}

void ClubSharedSettings::SharedCtor() {
  _cached_size_ = 0;
  club_position_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClubSharedSettings::~ClubSharedSettings() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.ClubSharedSettings)
  SharedDtor();
}

void ClubSharedSettings::SharedDtor() {
  if (this != default_instance_) {
    delete club_position_;
  }
}

void ClubSharedSettings::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClubSharedSettings::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClubSharedSettings_descriptor_;
}

const ClubSharedSettings& ClubSharedSettings::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_club_5fmembership_5ftypes_2eproto();
  return *default_instance_;
}

ClubSharedSettings* ClubSharedSettings::default_instance_ = NULL;

ClubSharedSettings* ClubSharedSettings::New() const {
  return new ClubSharedSettings;
}

void ClubSharedSettings::Clear() {
  if (has_club_position()) {
    if (club_position_ != NULL) club_position_->::bgs::protocol::club::v1::ClubPosition::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClubSharedSettings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bgs.protocol.club.v1.ClubSharedSettings)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .bgs.protocol.club.v1.ClubPosition club_position = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_club_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bgs.protocol.club.v1.ClubSharedSettings)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bgs.protocol.club.v1.ClubSharedSettings)
  return false;
#undef DO_
}

void ClubSharedSettings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bgs.protocol.club.v1.ClubSharedSettings)
  // optional .bgs.protocol.club.v1.ClubPosition club_position = 1;
  if (has_club_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->club_position(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bgs.protocol.club.v1.ClubSharedSettings)
}

::google::protobuf::uint8* ClubSharedSettings::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.ClubSharedSettings)
  // optional .bgs.protocol.club.v1.ClubPosition club_position = 1;
  if (has_club_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->club_position(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.ClubSharedSettings)
  return target;
}

int ClubSharedSettings::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .bgs.protocol.club.v1.ClubPosition club_position = 1;
    if (has_club_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->club_position());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClubSharedSettings::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClubSharedSettings* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClubSharedSettings*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClubSharedSettings::MergeFrom(const ClubSharedSettings& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_club_position()) {
      mutable_club_position()->::bgs::protocol::club::v1::ClubPosition::MergeFrom(from.club_position());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClubSharedSettings::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClubSharedSettings::CopyFrom(const ClubSharedSettings& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClubSharedSettings::IsInitialized() const {

  return true;
}

void ClubSharedSettings::Swap(ClubSharedSettings* other) {
  if (other != this) {
    std::swap(club_position_, other->club_position_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClubSharedSettings::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClubSharedSettings_descriptor_;
  metadata.reflection = ClubSharedSettings_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClubSharedSettingsOptions::kClubPositionFieldNumber;
#endif  // !_MSC_VER

ClubSharedSettingsOptions::ClubSharedSettingsOptions()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.ClubSharedSettingsOptions)
}

void ClubSharedSettingsOptions::InitAsDefaultInstance() {
  club_position_ = const_cast< ::bgs::protocol::club::v1::ClubPosition*>(&::bgs::protocol::club::v1::ClubPosition::default_instance());
}

ClubSharedSettingsOptions::ClubSharedSettingsOptions(const ClubSharedSettingsOptions& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.ClubSharedSettingsOptions)
}

void ClubSharedSettingsOptions::SharedCtor() {
  _cached_size_ = 0;
  club_position_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClubSharedSettingsOptions::~ClubSharedSettingsOptions() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.ClubSharedSettingsOptions)
  SharedDtor();
}

void ClubSharedSettingsOptions::SharedDtor() {
  if (this != default_instance_) {
    delete club_position_;
  }
}

void ClubSharedSettingsOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClubSharedSettingsOptions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClubSharedSettingsOptions_descriptor_;
}

const ClubSharedSettingsOptions& ClubSharedSettingsOptions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_club_5fmembership_5ftypes_2eproto();
  return *default_instance_;
}

ClubSharedSettingsOptions* ClubSharedSettingsOptions::default_instance_ = NULL;

ClubSharedSettingsOptions* ClubSharedSettingsOptions::New() const {
  return new ClubSharedSettingsOptions;
}

void ClubSharedSettingsOptions::Clear() {
  if (has_club_position()) {
    if (club_position_ != NULL) club_position_->::bgs::protocol::club::v1::ClubPosition::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClubSharedSettingsOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bgs.protocol.club.v1.ClubSharedSettingsOptions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .bgs.protocol.club.v1.ClubPosition club_position = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_club_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bgs.protocol.club.v1.ClubSharedSettingsOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bgs.protocol.club.v1.ClubSharedSettingsOptions)
  return false;
#undef DO_
}

void ClubSharedSettingsOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bgs.protocol.club.v1.ClubSharedSettingsOptions)
  // optional .bgs.protocol.club.v1.ClubPosition club_position = 1;
  if (has_club_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->club_position(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bgs.protocol.club.v1.ClubSharedSettingsOptions)
}

::google::protobuf::uint8* ClubSharedSettingsOptions::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.ClubSharedSettingsOptions)
  // optional .bgs.protocol.club.v1.ClubPosition club_position = 1;
  if (has_club_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->club_position(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.ClubSharedSettingsOptions)
  return target;
}

int ClubSharedSettingsOptions::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .bgs.protocol.club.v1.ClubPosition club_position = 1;
    if (has_club_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->club_position());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClubSharedSettingsOptions::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClubSharedSettingsOptions* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClubSharedSettingsOptions*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClubSharedSettingsOptions::MergeFrom(const ClubSharedSettingsOptions& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_club_position()) {
      mutable_club_position()->::bgs::protocol::club::v1::ClubPosition::MergeFrom(from.club_position());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClubSharedSettingsOptions::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClubSharedSettingsOptions::CopyFrom(const ClubSharedSettingsOptions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClubSharedSettingsOptions::IsInitialized() const {

  return true;
}

void ClubSharedSettingsOptions::Swap(ClubSharedSettingsOptions* other) {
  if (other != this) {
    std::swap(club_position_, other->club_position_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClubSharedSettingsOptions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClubSharedSettingsOptions_descriptor_;
  metadata.reflection = ClubSharedSettingsOptions_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClubSharedSettingsAssignment::kClubPositionFieldNumber;
#endif  // !_MSC_VER

ClubSharedSettingsAssignment::ClubSharedSettingsAssignment()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.ClubSharedSettingsAssignment)
}

void ClubSharedSettingsAssignment::InitAsDefaultInstance() {
  club_position_ = const_cast< ::bgs::protocol::club::v1::ClubPosition*>(&::bgs::protocol::club::v1::ClubPosition::default_instance());
}

ClubSharedSettingsAssignment::ClubSharedSettingsAssignment(const ClubSharedSettingsAssignment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.ClubSharedSettingsAssignment)
}

void ClubSharedSettingsAssignment::SharedCtor() {
  _cached_size_ = 0;
  club_position_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClubSharedSettingsAssignment::~ClubSharedSettingsAssignment() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.ClubSharedSettingsAssignment)
  SharedDtor();
}

void ClubSharedSettingsAssignment::SharedDtor() {
  if (this != default_instance_) {
    delete club_position_;
  }
}

void ClubSharedSettingsAssignment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClubSharedSettingsAssignment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClubSharedSettingsAssignment_descriptor_;
}

const ClubSharedSettingsAssignment& ClubSharedSettingsAssignment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_club_5fmembership_5ftypes_2eproto();
  return *default_instance_;
}

ClubSharedSettingsAssignment* ClubSharedSettingsAssignment::default_instance_ = NULL;

ClubSharedSettingsAssignment* ClubSharedSettingsAssignment::New() const {
  return new ClubSharedSettingsAssignment;
}

void ClubSharedSettingsAssignment::Clear() {
  if (has_club_position()) {
    if (club_position_ != NULL) club_position_->::bgs::protocol::club::v1::ClubPosition::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClubSharedSettingsAssignment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bgs.protocol.club.v1.ClubSharedSettingsAssignment)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .bgs.protocol.club.v1.ClubPosition club_position = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_club_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bgs.protocol.club.v1.ClubSharedSettingsAssignment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bgs.protocol.club.v1.ClubSharedSettingsAssignment)
  return false;
#undef DO_
}

void ClubSharedSettingsAssignment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bgs.protocol.club.v1.ClubSharedSettingsAssignment)
  // optional .bgs.protocol.club.v1.ClubPosition club_position = 1;
  if (has_club_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->club_position(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bgs.protocol.club.v1.ClubSharedSettingsAssignment)
}

::google::protobuf::uint8* ClubSharedSettingsAssignment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.ClubSharedSettingsAssignment)
  // optional .bgs.protocol.club.v1.ClubPosition club_position = 1;
  if (has_club_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->club_position(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.ClubSharedSettingsAssignment)
  return target;
}

int ClubSharedSettingsAssignment::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .bgs.protocol.club.v1.ClubPosition club_position = 1;
    if (has_club_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->club_position());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClubSharedSettingsAssignment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClubSharedSettingsAssignment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClubSharedSettingsAssignment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClubSharedSettingsAssignment::MergeFrom(const ClubSharedSettingsAssignment& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_club_position()) {
      mutable_club_position()->::bgs::protocol::club::v1::ClubPosition::MergeFrom(from.club_position());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClubSharedSettingsAssignment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClubSharedSettingsAssignment::CopyFrom(const ClubSharedSettingsAssignment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClubSharedSettingsAssignment::IsInitialized() const {

  return true;
}

void ClubSharedSettingsAssignment::Swap(ClubSharedSettingsAssignment* other) {
  if (other != this) {
    std::swap(club_position_, other->club_position_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClubSharedSettingsAssignment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClubSharedSettingsAssignment_descriptor_;
  metadata.reflection = ClubSharedSettingsAssignment_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace club
}  // namespace protocol
}  // namespace bgs

// @@protoc_insertion_point(global_scope)
