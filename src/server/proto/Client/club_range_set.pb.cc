// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: club_range_set.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "club_range_set.pb.h"

#include <algorithm>
#include <utility>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
#include "Log.h"
// @@protoc_insertion_point(includes)

namespace bgs {
namespace protocol {
namespace club {
namespace v1 {

namespace {

const ::google::protobuf::Descriptor* ClubTypeRangeSet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClubTypeRangeSet_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClubMemberRangeSet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClubMemberRangeSet_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClubStreamRangeSet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClubStreamRangeSet_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClubInvitationRangeSet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClubInvitationRangeSet_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClubSuggestionRangeSet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClubSuggestionRangeSet_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClubTicketRangeSet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClubTicketRangeSet_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClubBanRangeSet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClubBanRangeSet_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_club_5frange_5fset_2eproto() {
  protobuf_AddDesc_club_5frange_5fset_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "club_range_set.proto");
  GOOGLE_CHECK(file != NULL);
  ClubTypeRangeSet_descriptor_ = file->message_type(0);
  static const int ClubTypeRangeSet_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubTypeRangeSet, name_range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubTypeRangeSet, description_range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubTypeRangeSet, broadcast_range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubTypeRangeSet, short_name_range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubTypeRangeSet, member_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubTypeRangeSet, stream_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubTypeRangeSet, invitation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubTypeRangeSet, suggestion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubTypeRangeSet, ticket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubTypeRangeSet, ban_),
  };
  ClubTypeRangeSet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClubTypeRangeSet_descriptor_,
      ClubTypeRangeSet::default_instance_,
      ClubTypeRangeSet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubTypeRangeSet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubTypeRangeSet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClubTypeRangeSet));
  ClubMemberRangeSet_descriptor_ = file->message_type(1);
  static const int ClubMemberRangeSet_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubMemberRangeSet, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubMemberRangeSet, voice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubMemberRangeSet, stream_subscriptions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubMemberRangeSet, note_range_),
  };
  ClubMemberRangeSet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClubMemberRangeSet_descriptor_,
      ClubMemberRangeSet::default_instance_,
      ClubMemberRangeSet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubMemberRangeSet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubMemberRangeSet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClubMemberRangeSet));
  ClubStreamRangeSet_descriptor_ = file->message_type(2);
  static const int ClubStreamRangeSet_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubStreamRangeSet, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubStreamRangeSet, name_range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubStreamRangeSet, subject_range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubStreamRangeSet, message_range_),
  };
  ClubStreamRangeSet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClubStreamRangeSet_descriptor_,
      ClubStreamRangeSet::default_instance_,
      ClubStreamRangeSet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubStreamRangeSet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubStreamRangeSet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClubStreamRangeSet));
  ClubInvitationRangeSet_descriptor_ = file->message_type(3);
  static const int ClubInvitationRangeSet_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubInvitationRangeSet, count_),
  };
  ClubInvitationRangeSet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClubInvitationRangeSet_descriptor_,
      ClubInvitationRangeSet::default_instance_,
      ClubInvitationRangeSet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubInvitationRangeSet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubInvitationRangeSet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClubInvitationRangeSet));
  ClubSuggestionRangeSet_descriptor_ = file->message_type(4);
  static const int ClubSuggestionRangeSet_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubSuggestionRangeSet, count_),
  };
  ClubSuggestionRangeSet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClubSuggestionRangeSet_descriptor_,
      ClubSuggestionRangeSet::default_instance_,
      ClubSuggestionRangeSet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubSuggestionRangeSet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubSuggestionRangeSet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClubSuggestionRangeSet));
  ClubTicketRangeSet_descriptor_ = file->message_type(5);
  static const int ClubTicketRangeSet_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubTicketRangeSet, count_),
  };
  ClubTicketRangeSet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClubTicketRangeSet_descriptor_,
      ClubTicketRangeSet::default_instance_,
      ClubTicketRangeSet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubTicketRangeSet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubTicketRangeSet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClubTicketRangeSet));
  ClubBanRangeSet_descriptor_ = file->message_type(6);
  static const int ClubBanRangeSet_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubBanRangeSet, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubBanRangeSet, reason_range_),
  };
  ClubBanRangeSet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClubBanRangeSet_descriptor_,
      ClubBanRangeSet::default_instance_,
      ClubBanRangeSet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubBanRangeSet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubBanRangeSet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClubBanRangeSet));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_club_5frange_5fset_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClubTypeRangeSet_descriptor_, &ClubTypeRangeSet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClubMemberRangeSet_descriptor_, &ClubMemberRangeSet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClubStreamRangeSet_descriptor_, &ClubStreamRangeSet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClubInvitationRangeSet_descriptor_, &ClubInvitationRangeSet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClubSuggestionRangeSet_descriptor_, &ClubSuggestionRangeSet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClubTicketRangeSet_descriptor_, &ClubTicketRangeSet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClubBanRangeSet_descriptor_, &ClubBanRangeSet::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_club_5frange_5fset_2eproto() {
  delete ClubTypeRangeSet::default_instance_;
  delete ClubTypeRangeSet_reflection_;
  delete ClubMemberRangeSet::default_instance_;
  delete ClubMemberRangeSet_reflection_;
  delete ClubStreamRangeSet::default_instance_;
  delete ClubStreamRangeSet_reflection_;
  delete ClubInvitationRangeSet::default_instance_;
  delete ClubInvitationRangeSet_reflection_;
  delete ClubSuggestionRangeSet::default_instance_;
  delete ClubSuggestionRangeSet_reflection_;
  delete ClubTicketRangeSet::default_instance_;
  delete ClubTicketRangeSet_reflection_;
  delete ClubBanRangeSet::default_instance_;
  delete ClubBanRangeSet_reflection_;
}

void protobuf_AddDesc_club_5frange_5fset_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::bgs::protocol::protobuf_AddDesc_global_5fextensions_2frange_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024club_range_set.proto\022\024bgs.protocol.clu"
    "b.v1\032\035global_extensions/range.proto\"\332\004\n\020"
    "ClubTypeRangeSet\0222\n\nname_range\030\002 \001(\0132\036.b"
    "gs.protocol.UnsignedIntRange\0229\n\021descript"
    "ion_range\030\003 \001(\0132\036.bgs.protocol.UnsignedI"
    "ntRange\0227\n\017broadcast_range\030\004 \001(\0132\036.bgs.p"
    "rotocol.UnsignedIntRange\0228\n\020short_name_r"
    "ange\030\007 \001(\0132\036.bgs.protocol.UnsignedIntRan"
    "ge\0228\n\006member\030\031 \001(\0132(.bgs.protocol.club.v"
    "1.ClubMemberRangeSet\0228\n\006stream\030\032 \001(\0132(.b"
    "gs.protocol.club.v1.ClubStreamRangeSet\022@"
    "\n\ninvitation\030\033 \001(\0132,.bgs.protocol.club.v"
    "1.ClubInvitationRangeSet\022@\n\nsuggestion\030\034"
    " \001(\0132,.bgs.protocol.club.v1.ClubSuggesti"
    "onRangeSet\0228\n\006ticket\030\035 \001(\0132(.bgs.protoco"
    "l.club.v1.ClubTicketRangeSet\0222\n\003ban\030\036 \001("
    "\0132%.bgs.protocol.club.v1.ClubBanRangeSet"
    "\"\344\001\n\022ClubMemberRangeSet\022-\n\005count\030\001 \001(\0132\036"
    ".bgs.protocol.UnsignedIntRange\022-\n\005voice\030"
    "\003 \001(\0132\036.bgs.protocol.UnsignedIntRange\022<\n"
    "\024stream_subscriptions\030\005 \001(\0132\036.bgs.protoc"
    "ol.UnsignedIntRange\0222\n\nnote_range\030\007 \001(\0132"
    "\036.bgs.protocol.UnsignedIntRange\"\345\001\n\022Club"
    "StreamRangeSet\022-\n\005count\030\001 \001(\0132\036.bgs.prot"
    "ocol.UnsignedIntRange\0222\n\nname_range\030\003 \001("
    "\0132\036.bgs.protocol.UnsignedIntRange\0225\n\rsub"
    "ject_range\030\004 \001(\0132\036.bgs.protocol.Unsigned"
    "IntRange\0225\n\rmessage_range\030\005 \001(\0132\036.bgs.pr"
    "otocol.UnsignedIntRange\"G\n\026ClubInvitatio"
    "nRangeSet\022-\n\005count\030\001 \001(\0132\036.bgs.protocol."
    "UnsignedIntRange\"G\n\026ClubSuggestionRangeS"
    "et\022-\n\005count\030\001 \001(\0132\036.bgs.protocol.Unsigne"
    "dIntRange\"C\n\022ClubTicketRangeSet\022-\n\005count"
    "\030\001 \001(\0132\036.bgs.protocol.UnsignedIntRange\"v"
    "\n\017ClubBanRangeSet\022-\n\005count\030\001 \001(\0132\036.bgs.p"
    "rotocol.UnsignedIntRange\0224\n\014reason_range"
    "\030\003 \001(\0132\036.bgs.protocol.UnsignedIntRangeB\002"
    "H\001", 1482);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "club_range_set.proto", &protobuf_RegisterTypes);
  ClubTypeRangeSet::default_instance_ = new ClubTypeRangeSet();
  ClubMemberRangeSet::default_instance_ = new ClubMemberRangeSet();
  ClubStreamRangeSet::default_instance_ = new ClubStreamRangeSet();
  ClubInvitationRangeSet::default_instance_ = new ClubInvitationRangeSet();
  ClubSuggestionRangeSet::default_instance_ = new ClubSuggestionRangeSet();
  ClubTicketRangeSet::default_instance_ = new ClubTicketRangeSet();
  ClubBanRangeSet::default_instance_ = new ClubBanRangeSet();
  ClubTypeRangeSet::default_instance_->InitAsDefaultInstance();
  ClubMemberRangeSet::default_instance_->InitAsDefaultInstance();
  ClubStreamRangeSet::default_instance_->InitAsDefaultInstance();
  ClubInvitationRangeSet::default_instance_->InitAsDefaultInstance();
  ClubSuggestionRangeSet::default_instance_->InitAsDefaultInstance();
  ClubTicketRangeSet::default_instance_->InitAsDefaultInstance();
  ClubBanRangeSet::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_club_5frange_5fset_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_club_5frange_5fset_2eproto {
  StaticDescriptorInitializer_club_5frange_5fset_2eproto() {
    protobuf_AddDesc_club_5frange_5fset_2eproto();
  }
} static_descriptor_initializer_club_5frange_5fset_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ClubTypeRangeSet::kNameRangeFieldNumber;
const int ClubTypeRangeSet::kDescriptionRangeFieldNumber;
const int ClubTypeRangeSet::kBroadcastRangeFieldNumber;
const int ClubTypeRangeSet::kShortNameRangeFieldNumber;
const int ClubTypeRangeSet::kMemberFieldNumber;
const int ClubTypeRangeSet::kStreamFieldNumber;
const int ClubTypeRangeSet::kInvitationFieldNumber;
const int ClubTypeRangeSet::kSuggestionFieldNumber;
const int ClubTypeRangeSet::kTicketFieldNumber;
const int ClubTypeRangeSet::kBanFieldNumber;
#endif  // !_MSC_VER

ClubTypeRangeSet::ClubTypeRangeSet()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.ClubTypeRangeSet)
}

void ClubTypeRangeSet::InitAsDefaultInstance() {
  name_range_ = const_cast< ::bgs::protocol::UnsignedIntRange*>(&::bgs::protocol::UnsignedIntRange::default_instance());
  description_range_ = const_cast< ::bgs::protocol::UnsignedIntRange*>(&::bgs::protocol::UnsignedIntRange::default_instance());
  broadcast_range_ = const_cast< ::bgs::protocol::UnsignedIntRange*>(&::bgs::protocol::UnsignedIntRange::default_instance());
  short_name_range_ = const_cast< ::bgs::protocol::UnsignedIntRange*>(&::bgs::protocol::UnsignedIntRange::default_instance());
  member_ = const_cast< ::bgs::protocol::club::v1::ClubMemberRangeSet*>(&::bgs::protocol::club::v1::ClubMemberRangeSet::default_instance());
  stream_ = const_cast< ::bgs::protocol::club::v1::ClubStreamRangeSet*>(&::bgs::protocol::club::v1::ClubStreamRangeSet::default_instance());
  invitation_ = const_cast< ::bgs::protocol::club::v1::ClubInvitationRangeSet*>(&::bgs::protocol::club::v1::ClubInvitationRangeSet::default_instance());
  suggestion_ = const_cast< ::bgs::protocol::club::v1::ClubSuggestionRangeSet*>(&::bgs::protocol::club::v1::ClubSuggestionRangeSet::default_instance());
  ticket_ = const_cast< ::bgs::protocol::club::v1::ClubTicketRangeSet*>(&::bgs::protocol::club::v1::ClubTicketRangeSet::default_instance());
  ban_ = const_cast< ::bgs::protocol::club::v1::ClubBanRangeSet*>(&::bgs::protocol::club::v1::ClubBanRangeSet::default_instance());
}

ClubTypeRangeSet::ClubTypeRangeSet(const ClubTypeRangeSet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.ClubTypeRangeSet)
}

void ClubTypeRangeSet::SharedCtor() {
  _cached_size_ = 0;
  name_range_ = NULL;
  description_range_ = NULL;
  broadcast_range_ = NULL;
  short_name_range_ = NULL;
  member_ = NULL;
  stream_ = NULL;
  invitation_ = NULL;
  suggestion_ = NULL;
  ticket_ = NULL;
  ban_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClubTypeRangeSet::~ClubTypeRangeSet() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.ClubTypeRangeSet)
  SharedDtor();
}

void ClubTypeRangeSet::SharedDtor() {
  if (this != default_instance_) {
    delete name_range_;
    delete description_range_;
    delete broadcast_range_;
    delete short_name_range_;
    delete member_;
    delete stream_;
    delete invitation_;
    delete suggestion_;
    delete ticket_;
    delete ban_;
  }
}

void ClubTypeRangeSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClubTypeRangeSet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClubTypeRangeSet_descriptor_;
}

const ClubTypeRangeSet& ClubTypeRangeSet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_club_5frange_5fset_2eproto();
  return *default_instance_;
}

ClubTypeRangeSet* ClubTypeRangeSet::default_instance_ = NULL;

ClubTypeRangeSet* ClubTypeRangeSet::New() const {
  return new ClubTypeRangeSet;
}

void ClubTypeRangeSet::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    if (has_name_range()) {
      if (name_range_ != NULL) name_range_->::bgs::protocol::UnsignedIntRange::Clear();
    }
    if (has_description_range()) {
      if (description_range_ != NULL) description_range_->::bgs::protocol::UnsignedIntRange::Clear();
    }
    if (has_broadcast_range()) {
      if (broadcast_range_ != NULL) broadcast_range_->::bgs::protocol::UnsignedIntRange::Clear();
    }
    if (has_short_name_range()) {
      if (short_name_range_ != NULL) short_name_range_->::bgs::protocol::UnsignedIntRange::Clear();
    }
    if (has_member()) {
      if (member_ != NULL) member_->::bgs::protocol::club::v1::ClubMemberRangeSet::Clear();
    }
    if (has_stream()) {
      if (stream_ != NULL) stream_->::bgs::protocol::club::v1::ClubStreamRangeSet::Clear();
    }
    if (has_invitation()) {
      if (invitation_ != NULL) invitation_->::bgs::protocol::club::v1::ClubInvitationRangeSet::Clear();
    }
    if (has_suggestion()) {
      if (suggestion_ != NULL) suggestion_->::bgs::protocol::club::v1::ClubSuggestionRangeSet::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 768) {
    if (has_ticket()) {
      if (ticket_ != NULL) ticket_->::bgs::protocol::club::v1::ClubTicketRangeSet::Clear();
    }
    if (has_ban()) {
      if (ban_ != NULL) ban_->::bgs::protocol::club::v1::ClubBanRangeSet::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClubTypeRangeSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bgs.protocol.club.v1.ClubTypeRangeSet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .bgs.protocol.UnsignedIntRange name_range = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_name_range()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_description_range;
        break;
      }

      // optional .bgs.protocol.UnsignedIntRange description_range = 3;
      case 3: {
        if (tag == 26) {
         parse_description_range:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_description_range()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_broadcast_range;
        break;
      }

      // optional .bgs.protocol.UnsignedIntRange broadcast_range = 4;
      case 4: {
        if (tag == 34) {
         parse_broadcast_range:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_broadcast_range()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_short_name_range;
        break;
      }

      // optional .bgs.protocol.UnsignedIntRange short_name_range = 7;
      case 7: {
        if (tag == 58) {
         parse_short_name_range:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_short_name_range()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(202)) goto parse_member;
        break;
      }

      // optional .bgs.protocol.club.v1.ClubMemberRangeSet member = 25;
      case 25: {
        if (tag == 202) {
         parse_member:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_member()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(210)) goto parse_stream;
        break;
      }

      // optional .bgs.protocol.club.v1.ClubStreamRangeSet stream = 26;
      case 26: {
        if (tag == 210) {
         parse_stream:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stream()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(218)) goto parse_invitation;
        break;
      }

      // optional .bgs.protocol.club.v1.ClubInvitationRangeSet invitation = 27;
      case 27: {
        if (tag == 218) {
         parse_invitation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_invitation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(226)) goto parse_suggestion;
        break;
      }

      // optional .bgs.protocol.club.v1.ClubSuggestionRangeSet suggestion = 28;
      case 28: {
        if (tag == 226) {
         parse_suggestion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_suggestion()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(234)) goto parse_ticket;
        break;
      }

      // optional .bgs.protocol.club.v1.ClubTicketRangeSet ticket = 29;
      case 29: {
        if (tag == 234) {
         parse_ticket:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ticket()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(242)) goto parse_ban;
        break;
      }

      // optional .bgs.protocol.club.v1.ClubBanRangeSet ban = 30;
      case 30: {
        if (tag == 242) {
         parse_ban:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ban()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bgs.protocol.club.v1.ClubTypeRangeSet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bgs.protocol.club.v1.ClubTypeRangeSet)
  return false;
#undef DO_
}

void ClubTypeRangeSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bgs.protocol.club.v1.ClubTypeRangeSet)
  // optional .bgs.protocol.UnsignedIntRange name_range = 2;
  if (has_name_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->name_range(), output);
  }

  // optional .bgs.protocol.UnsignedIntRange description_range = 3;
  if (has_description_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->description_range(), output);
  }

  // optional .bgs.protocol.UnsignedIntRange broadcast_range = 4;
  if (has_broadcast_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->broadcast_range(), output);
  }

  // optional .bgs.protocol.UnsignedIntRange short_name_range = 7;
  if (has_short_name_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->short_name_range(), output);
  }

  // optional .bgs.protocol.club.v1.ClubMemberRangeSet member = 25;
  if (has_member()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, this->member(), output);
  }

  // optional .bgs.protocol.club.v1.ClubStreamRangeSet stream = 26;
  if (has_stream()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, this->stream(), output);
  }

  // optional .bgs.protocol.club.v1.ClubInvitationRangeSet invitation = 27;
  if (has_invitation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, this->invitation(), output);
  }

  // optional .bgs.protocol.club.v1.ClubSuggestionRangeSet suggestion = 28;
  if (has_suggestion()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      28, this->suggestion(), output);
  }

  // optional .bgs.protocol.club.v1.ClubTicketRangeSet ticket = 29;
  if (has_ticket()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, this->ticket(), output);
  }

  // optional .bgs.protocol.club.v1.ClubBanRangeSet ban = 30;
  if (has_ban()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->ban(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bgs.protocol.club.v1.ClubTypeRangeSet)
}

::google::protobuf::uint8* ClubTypeRangeSet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.ClubTypeRangeSet)
  // optional .bgs.protocol.UnsignedIntRange name_range = 2;
  if (has_name_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->name_range(), target);
  }

  // optional .bgs.protocol.UnsignedIntRange description_range = 3;
  if (has_description_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->description_range(), target);
  }

  // optional .bgs.protocol.UnsignedIntRange broadcast_range = 4;
  if (has_broadcast_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->broadcast_range(), target);
  }

  // optional .bgs.protocol.UnsignedIntRange short_name_range = 7;
  if (has_short_name_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->short_name_range(), target);
  }

  // optional .bgs.protocol.club.v1.ClubMemberRangeSet member = 25;
  if (has_member()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        25, this->member(), target);
  }

  // optional .bgs.protocol.club.v1.ClubStreamRangeSet stream = 26;
  if (has_stream()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        26, this->stream(), target);
  }

  // optional .bgs.protocol.club.v1.ClubInvitationRangeSet invitation = 27;
  if (has_invitation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        27, this->invitation(), target);
  }

  // optional .bgs.protocol.club.v1.ClubSuggestionRangeSet suggestion = 28;
  if (has_suggestion()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        28, this->suggestion(), target);
  }

  // optional .bgs.protocol.club.v1.ClubTicketRangeSet ticket = 29;
  if (has_ticket()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        29, this->ticket(), target);
  }

  // optional .bgs.protocol.club.v1.ClubBanRangeSet ban = 30;
  if (has_ban()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        30, this->ban(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.ClubTypeRangeSet)
  return target;
}

int ClubTypeRangeSet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .bgs.protocol.UnsignedIntRange name_range = 2;
    if (has_name_range()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->name_range());
    }

    // optional .bgs.protocol.UnsignedIntRange description_range = 3;
    if (has_description_range()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->description_range());
    }

    // optional .bgs.protocol.UnsignedIntRange broadcast_range = 4;
    if (has_broadcast_range()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->broadcast_range());
    }

    // optional .bgs.protocol.UnsignedIntRange short_name_range = 7;
    if (has_short_name_range()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->short_name_range());
    }

    // optional .bgs.protocol.club.v1.ClubMemberRangeSet member = 25;
    if (has_member()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->member());
    }

    // optional .bgs.protocol.club.v1.ClubStreamRangeSet stream = 26;
    if (has_stream()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stream());
    }

    // optional .bgs.protocol.club.v1.ClubInvitationRangeSet invitation = 27;
    if (has_invitation()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->invitation());
    }

    // optional .bgs.protocol.club.v1.ClubSuggestionRangeSet suggestion = 28;
    if (has_suggestion()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->suggestion());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .bgs.protocol.club.v1.ClubTicketRangeSet ticket = 29;
    if (has_ticket()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ticket());
    }

    // optional .bgs.protocol.club.v1.ClubBanRangeSet ban = 30;
    if (has_ban()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ban());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClubTypeRangeSet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClubTypeRangeSet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClubTypeRangeSet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClubTypeRangeSet::MergeFrom(const ClubTypeRangeSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name_range()) {
      mutable_name_range()->::bgs::protocol::UnsignedIntRange::MergeFrom(from.name_range());
    }
    if (from.has_description_range()) {
      mutable_description_range()->::bgs::protocol::UnsignedIntRange::MergeFrom(from.description_range());
    }
    if (from.has_broadcast_range()) {
      mutable_broadcast_range()->::bgs::protocol::UnsignedIntRange::MergeFrom(from.broadcast_range());
    }
    if (from.has_short_name_range()) {
      mutable_short_name_range()->::bgs::protocol::UnsignedIntRange::MergeFrom(from.short_name_range());
    }
    if (from.has_member()) {
      mutable_member()->::bgs::protocol::club::v1::ClubMemberRangeSet::MergeFrom(from.member());
    }
    if (from.has_stream()) {
      mutable_stream()->::bgs::protocol::club::v1::ClubStreamRangeSet::MergeFrom(from.stream());
    }
    if (from.has_invitation()) {
      mutable_invitation()->::bgs::protocol::club::v1::ClubInvitationRangeSet::MergeFrom(from.invitation());
    }
    if (from.has_suggestion()) {
      mutable_suggestion()->::bgs::protocol::club::v1::ClubSuggestionRangeSet::MergeFrom(from.suggestion());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ticket()) {
      mutable_ticket()->::bgs::protocol::club::v1::ClubTicketRangeSet::MergeFrom(from.ticket());
    }
    if (from.has_ban()) {
      mutable_ban()->::bgs::protocol::club::v1::ClubBanRangeSet::MergeFrom(from.ban());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClubTypeRangeSet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClubTypeRangeSet::CopyFrom(const ClubTypeRangeSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClubTypeRangeSet::IsInitialized() const {

  return true;
}

void ClubTypeRangeSet::Swap(ClubTypeRangeSet* other) {
  if (other != this) {
    std::swap(name_range_, other->name_range_);
    std::swap(description_range_, other->description_range_);
    std::swap(broadcast_range_, other->broadcast_range_);
    std::swap(short_name_range_, other->short_name_range_);
    std::swap(member_, other->member_);
    std::swap(stream_, other->stream_);
    std::swap(invitation_, other->invitation_);
    std::swap(suggestion_, other->suggestion_);
    std::swap(ticket_, other->ticket_);
    std::swap(ban_, other->ban_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClubTypeRangeSet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClubTypeRangeSet_descriptor_;
  metadata.reflection = ClubTypeRangeSet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClubMemberRangeSet::kCountFieldNumber;
const int ClubMemberRangeSet::kVoiceFieldNumber;
const int ClubMemberRangeSet::kStreamSubscriptionsFieldNumber;
const int ClubMemberRangeSet::kNoteRangeFieldNumber;
#endif  // !_MSC_VER

ClubMemberRangeSet::ClubMemberRangeSet()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.ClubMemberRangeSet)
}

void ClubMemberRangeSet::InitAsDefaultInstance() {
  count_ = const_cast< ::bgs::protocol::UnsignedIntRange*>(&::bgs::protocol::UnsignedIntRange::default_instance());
  voice_ = const_cast< ::bgs::protocol::UnsignedIntRange*>(&::bgs::protocol::UnsignedIntRange::default_instance());
  stream_subscriptions_ = const_cast< ::bgs::protocol::UnsignedIntRange*>(&::bgs::protocol::UnsignedIntRange::default_instance());
  note_range_ = const_cast< ::bgs::protocol::UnsignedIntRange*>(&::bgs::protocol::UnsignedIntRange::default_instance());
}

ClubMemberRangeSet::ClubMemberRangeSet(const ClubMemberRangeSet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.ClubMemberRangeSet)
}

void ClubMemberRangeSet::SharedCtor() {
  _cached_size_ = 0;
  count_ = NULL;
  voice_ = NULL;
  stream_subscriptions_ = NULL;
  note_range_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClubMemberRangeSet::~ClubMemberRangeSet() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.ClubMemberRangeSet)
  SharedDtor();
}

void ClubMemberRangeSet::SharedDtor() {
  if (this != default_instance_) {
    delete count_;
    delete voice_;
    delete stream_subscriptions_;
    delete note_range_;
  }
}

void ClubMemberRangeSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClubMemberRangeSet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClubMemberRangeSet_descriptor_;
}

const ClubMemberRangeSet& ClubMemberRangeSet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_club_5frange_5fset_2eproto();
  return *default_instance_;
}

ClubMemberRangeSet* ClubMemberRangeSet::default_instance_ = NULL;

ClubMemberRangeSet* ClubMemberRangeSet::New() const {
  return new ClubMemberRangeSet;
}

void ClubMemberRangeSet::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_count()) {
      if (count_ != NULL) count_->::bgs::protocol::UnsignedIntRange::Clear();
    }
    if (has_voice()) {
      if (voice_ != NULL) voice_->::bgs::protocol::UnsignedIntRange::Clear();
    }
    if (has_stream_subscriptions()) {
      if (stream_subscriptions_ != NULL) stream_subscriptions_->::bgs::protocol::UnsignedIntRange::Clear();
    }
    if (has_note_range()) {
      if (note_range_ != NULL) note_range_->::bgs::protocol::UnsignedIntRange::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClubMemberRangeSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bgs.protocol.club.v1.ClubMemberRangeSet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .bgs.protocol.UnsignedIntRange count = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_count()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_voice;
        break;
      }

      // optional .bgs.protocol.UnsignedIntRange voice = 3;
      case 3: {
        if (tag == 26) {
         parse_voice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_voice()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_stream_subscriptions;
        break;
      }

      // optional .bgs.protocol.UnsignedIntRange stream_subscriptions = 5;
      case 5: {
        if (tag == 42) {
         parse_stream_subscriptions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stream_subscriptions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_note_range;
        break;
      }

      // optional .bgs.protocol.UnsignedIntRange note_range = 7;
      case 7: {
        if (tag == 58) {
         parse_note_range:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_note_range()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bgs.protocol.club.v1.ClubMemberRangeSet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bgs.protocol.club.v1.ClubMemberRangeSet)
  return false;
#undef DO_
}

void ClubMemberRangeSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bgs.protocol.club.v1.ClubMemberRangeSet)
  // optional .bgs.protocol.UnsignedIntRange count = 1;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->count(), output);
  }

  // optional .bgs.protocol.UnsignedIntRange voice = 3;
  if (has_voice()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->voice(), output);
  }

  // optional .bgs.protocol.UnsignedIntRange stream_subscriptions = 5;
  if (has_stream_subscriptions()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->stream_subscriptions(), output);
  }

  // optional .bgs.protocol.UnsignedIntRange note_range = 7;
  if (has_note_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->note_range(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bgs.protocol.club.v1.ClubMemberRangeSet)
}

::google::protobuf::uint8* ClubMemberRangeSet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.ClubMemberRangeSet)
  // optional .bgs.protocol.UnsignedIntRange count = 1;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->count(), target);
  }

  // optional .bgs.protocol.UnsignedIntRange voice = 3;
  if (has_voice()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->voice(), target);
  }

  // optional .bgs.protocol.UnsignedIntRange stream_subscriptions = 5;
  if (has_stream_subscriptions()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->stream_subscriptions(), target);
  }

  // optional .bgs.protocol.UnsignedIntRange note_range = 7;
  if (has_note_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->note_range(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.ClubMemberRangeSet)
  return target;
}

int ClubMemberRangeSet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .bgs.protocol.UnsignedIntRange count = 1;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->count());
    }

    // optional .bgs.protocol.UnsignedIntRange voice = 3;
    if (has_voice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->voice());
    }

    // optional .bgs.protocol.UnsignedIntRange stream_subscriptions = 5;
    if (has_stream_subscriptions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stream_subscriptions());
    }

    // optional .bgs.protocol.UnsignedIntRange note_range = 7;
    if (has_note_range()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->note_range());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClubMemberRangeSet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClubMemberRangeSet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClubMemberRangeSet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClubMemberRangeSet::MergeFrom(const ClubMemberRangeSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_count()) {
      mutable_count()->::bgs::protocol::UnsignedIntRange::MergeFrom(from.count());
    }
    if (from.has_voice()) {
      mutable_voice()->::bgs::protocol::UnsignedIntRange::MergeFrom(from.voice());
    }
    if (from.has_stream_subscriptions()) {
      mutable_stream_subscriptions()->::bgs::protocol::UnsignedIntRange::MergeFrom(from.stream_subscriptions());
    }
    if (from.has_note_range()) {
      mutable_note_range()->::bgs::protocol::UnsignedIntRange::MergeFrom(from.note_range());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClubMemberRangeSet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClubMemberRangeSet::CopyFrom(const ClubMemberRangeSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClubMemberRangeSet::IsInitialized() const {

  return true;
}

void ClubMemberRangeSet::Swap(ClubMemberRangeSet* other) {
  if (other != this) {
    std::swap(count_, other->count_);
    std::swap(voice_, other->voice_);
    std::swap(stream_subscriptions_, other->stream_subscriptions_);
    std::swap(note_range_, other->note_range_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClubMemberRangeSet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClubMemberRangeSet_descriptor_;
  metadata.reflection = ClubMemberRangeSet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClubStreamRangeSet::kCountFieldNumber;
const int ClubStreamRangeSet::kNameRangeFieldNumber;
const int ClubStreamRangeSet::kSubjectRangeFieldNumber;
const int ClubStreamRangeSet::kMessageRangeFieldNumber;
#endif  // !_MSC_VER

ClubStreamRangeSet::ClubStreamRangeSet()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.ClubStreamRangeSet)
}

void ClubStreamRangeSet::InitAsDefaultInstance() {
  count_ = const_cast< ::bgs::protocol::UnsignedIntRange*>(&::bgs::protocol::UnsignedIntRange::default_instance());
  name_range_ = const_cast< ::bgs::protocol::UnsignedIntRange*>(&::bgs::protocol::UnsignedIntRange::default_instance());
  subject_range_ = const_cast< ::bgs::protocol::UnsignedIntRange*>(&::bgs::protocol::UnsignedIntRange::default_instance());
  message_range_ = const_cast< ::bgs::protocol::UnsignedIntRange*>(&::bgs::protocol::UnsignedIntRange::default_instance());
}

ClubStreamRangeSet::ClubStreamRangeSet(const ClubStreamRangeSet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.ClubStreamRangeSet)
}

void ClubStreamRangeSet::SharedCtor() {
  _cached_size_ = 0;
  count_ = NULL;
  name_range_ = NULL;
  subject_range_ = NULL;
  message_range_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClubStreamRangeSet::~ClubStreamRangeSet() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.ClubStreamRangeSet)
  SharedDtor();
}

void ClubStreamRangeSet::SharedDtor() {
  if (this != default_instance_) {
    delete count_;
    delete name_range_;
    delete subject_range_;
    delete message_range_;
  }
}

void ClubStreamRangeSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClubStreamRangeSet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClubStreamRangeSet_descriptor_;
}

const ClubStreamRangeSet& ClubStreamRangeSet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_club_5frange_5fset_2eproto();
  return *default_instance_;
}

ClubStreamRangeSet* ClubStreamRangeSet::default_instance_ = NULL;

ClubStreamRangeSet* ClubStreamRangeSet::New() const {
  return new ClubStreamRangeSet;
}

void ClubStreamRangeSet::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_count()) {
      if (count_ != NULL) count_->::bgs::protocol::UnsignedIntRange::Clear();
    }
    if (has_name_range()) {
      if (name_range_ != NULL) name_range_->::bgs::protocol::UnsignedIntRange::Clear();
    }
    if (has_subject_range()) {
      if (subject_range_ != NULL) subject_range_->::bgs::protocol::UnsignedIntRange::Clear();
    }
    if (has_message_range()) {
      if (message_range_ != NULL) message_range_->::bgs::protocol::UnsignedIntRange::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClubStreamRangeSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bgs.protocol.club.v1.ClubStreamRangeSet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .bgs.protocol.UnsignedIntRange count = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_count()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name_range;
        break;
      }

      // optional .bgs.protocol.UnsignedIntRange name_range = 3;
      case 3: {
        if (tag == 26) {
         parse_name_range:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_name_range()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_subject_range;
        break;
      }

      // optional .bgs.protocol.UnsignedIntRange subject_range = 4;
      case 4: {
        if (tag == 34) {
         parse_subject_range:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_subject_range()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_message_range;
        break;
      }

      // optional .bgs.protocol.UnsignedIntRange message_range = 5;
      case 5: {
        if (tag == 42) {
         parse_message_range:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_message_range()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bgs.protocol.club.v1.ClubStreamRangeSet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bgs.protocol.club.v1.ClubStreamRangeSet)
  return false;
#undef DO_
}

void ClubStreamRangeSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bgs.protocol.club.v1.ClubStreamRangeSet)
  // optional .bgs.protocol.UnsignedIntRange count = 1;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->count(), output);
  }

  // optional .bgs.protocol.UnsignedIntRange name_range = 3;
  if (has_name_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->name_range(), output);
  }

  // optional .bgs.protocol.UnsignedIntRange subject_range = 4;
  if (has_subject_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->subject_range(), output);
  }

  // optional .bgs.protocol.UnsignedIntRange message_range = 5;
  if (has_message_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->message_range(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bgs.protocol.club.v1.ClubStreamRangeSet)
}

::google::protobuf::uint8* ClubStreamRangeSet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.ClubStreamRangeSet)
  // optional .bgs.protocol.UnsignedIntRange count = 1;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->count(), target);
  }

  // optional .bgs.protocol.UnsignedIntRange name_range = 3;
  if (has_name_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->name_range(), target);
  }

  // optional .bgs.protocol.UnsignedIntRange subject_range = 4;
  if (has_subject_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->subject_range(), target);
  }

  // optional .bgs.protocol.UnsignedIntRange message_range = 5;
  if (has_message_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->message_range(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.ClubStreamRangeSet)
  return target;
}

int ClubStreamRangeSet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .bgs.protocol.UnsignedIntRange count = 1;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->count());
    }

    // optional .bgs.protocol.UnsignedIntRange name_range = 3;
    if (has_name_range()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->name_range());
    }

    // optional .bgs.protocol.UnsignedIntRange subject_range = 4;
    if (has_subject_range()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->subject_range());
    }

    // optional .bgs.protocol.UnsignedIntRange message_range = 5;
    if (has_message_range()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->message_range());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClubStreamRangeSet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClubStreamRangeSet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClubStreamRangeSet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClubStreamRangeSet::MergeFrom(const ClubStreamRangeSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_count()) {
      mutable_count()->::bgs::protocol::UnsignedIntRange::MergeFrom(from.count());
    }
    if (from.has_name_range()) {
      mutable_name_range()->::bgs::protocol::UnsignedIntRange::MergeFrom(from.name_range());
    }
    if (from.has_subject_range()) {
      mutable_subject_range()->::bgs::protocol::UnsignedIntRange::MergeFrom(from.subject_range());
    }
    if (from.has_message_range()) {
      mutable_message_range()->::bgs::protocol::UnsignedIntRange::MergeFrom(from.message_range());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClubStreamRangeSet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClubStreamRangeSet::CopyFrom(const ClubStreamRangeSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClubStreamRangeSet::IsInitialized() const {

  return true;
}

void ClubStreamRangeSet::Swap(ClubStreamRangeSet* other) {
  if (other != this) {
    std::swap(count_, other->count_);
    std::swap(name_range_, other->name_range_);
    std::swap(subject_range_, other->subject_range_);
    std::swap(message_range_, other->message_range_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClubStreamRangeSet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClubStreamRangeSet_descriptor_;
  metadata.reflection = ClubStreamRangeSet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClubInvitationRangeSet::kCountFieldNumber;
#endif  // !_MSC_VER

ClubInvitationRangeSet::ClubInvitationRangeSet()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.ClubInvitationRangeSet)
}

void ClubInvitationRangeSet::InitAsDefaultInstance() {
  count_ = const_cast< ::bgs::protocol::UnsignedIntRange*>(&::bgs::protocol::UnsignedIntRange::default_instance());
}

ClubInvitationRangeSet::ClubInvitationRangeSet(const ClubInvitationRangeSet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.ClubInvitationRangeSet)
}

void ClubInvitationRangeSet::SharedCtor() {
  _cached_size_ = 0;
  count_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClubInvitationRangeSet::~ClubInvitationRangeSet() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.ClubInvitationRangeSet)
  SharedDtor();
}

void ClubInvitationRangeSet::SharedDtor() {
  if (this != default_instance_) {
    delete count_;
  }
}

void ClubInvitationRangeSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClubInvitationRangeSet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClubInvitationRangeSet_descriptor_;
}

const ClubInvitationRangeSet& ClubInvitationRangeSet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_club_5frange_5fset_2eproto();
  return *default_instance_;
}

ClubInvitationRangeSet* ClubInvitationRangeSet::default_instance_ = NULL;

ClubInvitationRangeSet* ClubInvitationRangeSet::New() const {
  return new ClubInvitationRangeSet;
}

void ClubInvitationRangeSet::Clear() {
  if (has_count()) {
    if (count_ != NULL) count_->::bgs::protocol::UnsignedIntRange::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClubInvitationRangeSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bgs.protocol.club.v1.ClubInvitationRangeSet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .bgs.protocol.UnsignedIntRange count = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_count()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bgs.protocol.club.v1.ClubInvitationRangeSet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bgs.protocol.club.v1.ClubInvitationRangeSet)
  return false;
#undef DO_
}

void ClubInvitationRangeSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bgs.protocol.club.v1.ClubInvitationRangeSet)
  // optional .bgs.protocol.UnsignedIntRange count = 1;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bgs.protocol.club.v1.ClubInvitationRangeSet)
}

::google::protobuf::uint8* ClubInvitationRangeSet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.ClubInvitationRangeSet)
  // optional .bgs.protocol.UnsignedIntRange count = 1;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.ClubInvitationRangeSet)
  return target;
}

int ClubInvitationRangeSet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .bgs.protocol.UnsignedIntRange count = 1;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClubInvitationRangeSet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClubInvitationRangeSet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClubInvitationRangeSet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClubInvitationRangeSet::MergeFrom(const ClubInvitationRangeSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_count()) {
      mutable_count()->::bgs::protocol::UnsignedIntRange::MergeFrom(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClubInvitationRangeSet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClubInvitationRangeSet::CopyFrom(const ClubInvitationRangeSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClubInvitationRangeSet::IsInitialized() const {

  return true;
}

void ClubInvitationRangeSet::Swap(ClubInvitationRangeSet* other) {
  if (other != this) {
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClubInvitationRangeSet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClubInvitationRangeSet_descriptor_;
  metadata.reflection = ClubInvitationRangeSet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClubSuggestionRangeSet::kCountFieldNumber;
#endif  // !_MSC_VER

ClubSuggestionRangeSet::ClubSuggestionRangeSet()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.ClubSuggestionRangeSet)
}

void ClubSuggestionRangeSet::InitAsDefaultInstance() {
  count_ = const_cast< ::bgs::protocol::UnsignedIntRange*>(&::bgs::protocol::UnsignedIntRange::default_instance());
}

ClubSuggestionRangeSet::ClubSuggestionRangeSet(const ClubSuggestionRangeSet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.ClubSuggestionRangeSet)
}

void ClubSuggestionRangeSet::SharedCtor() {
  _cached_size_ = 0;
  count_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClubSuggestionRangeSet::~ClubSuggestionRangeSet() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.ClubSuggestionRangeSet)
  SharedDtor();
}

void ClubSuggestionRangeSet::SharedDtor() {
  if (this != default_instance_) {
    delete count_;
  }
}

void ClubSuggestionRangeSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClubSuggestionRangeSet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClubSuggestionRangeSet_descriptor_;
}

const ClubSuggestionRangeSet& ClubSuggestionRangeSet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_club_5frange_5fset_2eproto();
  return *default_instance_;
}

ClubSuggestionRangeSet* ClubSuggestionRangeSet::default_instance_ = NULL;

ClubSuggestionRangeSet* ClubSuggestionRangeSet::New() const {
  return new ClubSuggestionRangeSet;
}

void ClubSuggestionRangeSet::Clear() {
  if (has_count()) {
    if (count_ != NULL) count_->::bgs::protocol::UnsignedIntRange::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClubSuggestionRangeSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bgs.protocol.club.v1.ClubSuggestionRangeSet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .bgs.protocol.UnsignedIntRange count = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_count()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bgs.protocol.club.v1.ClubSuggestionRangeSet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bgs.protocol.club.v1.ClubSuggestionRangeSet)
  return false;
#undef DO_
}

void ClubSuggestionRangeSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bgs.protocol.club.v1.ClubSuggestionRangeSet)
  // optional .bgs.protocol.UnsignedIntRange count = 1;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bgs.protocol.club.v1.ClubSuggestionRangeSet)
}

::google::protobuf::uint8* ClubSuggestionRangeSet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.ClubSuggestionRangeSet)
  // optional .bgs.protocol.UnsignedIntRange count = 1;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.ClubSuggestionRangeSet)
  return target;
}

int ClubSuggestionRangeSet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .bgs.protocol.UnsignedIntRange count = 1;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClubSuggestionRangeSet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClubSuggestionRangeSet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClubSuggestionRangeSet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClubSuggestionRangeSet::MergeFrom(const ClubSuggestionRangeSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_count()) {
      mutable_count()->::bgs::protocol::UnsignedIntRange::MergeFrom(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClubSuggestionRangeSet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClubSuggestionRangeSet::CopyFrom(const ClubSuggestionRangeSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClubSuggestionRangeSet::IsInitialized() const {

  return true;
}

void ClubSuggestionRangeSet::Swap(ClubSuggestionRangeSet* other) {
  if (other != this) {
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClubSuggestionRangeSet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClubSuggestionRangeSet_descriptor_;
  metadata.reflection = ClubSuggestionRangeSet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClubTicketRangeSet::kCountFieldNumber;
#endif  // !_MSC_VER

ClubTicketRangeSet::ClubTicketRangeSet()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.ClubTicketRangeSet)
}

void ClubTicketRangeSet::InitAsDefaultInstance() {
  count_ = const_cast< ::bgs::protocol::UnsignedIntRange*>(&::bgs::protocol::UnsignedIntRange::default_instance());
}

ClubTicketRangeSet::ClubTicketRangeSet(const ClubTicketRangeSet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.ClubTicketRangeSet)
}

void ClubTicketRangeSet::SharedCtor() {
  _cached_size_ = 0;
  count_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClubTicketRangeSet::~ClubTicketRangeSet() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.ClubTicketRangeSet)
  SharedDtor();
}

void ClubTicketRangeSet::SharedDtor() {
  if (this != default_instance_) {
    delete count_;
  }
}

void ClubTicketRangeSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClubTicketRangeSet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClubTicketRangeSet_descriptor_;
}

const ClubTicketRangeSet& ClubTicketRangeSet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_club_5frange_5fset_2eproto();
  return *default_instance_;
}

ClubTicketRangeSet* ClubTicketRangeSet::default_instance_ = NULL;

ClubTicketRangeSet* ClubTicketRangeSet::New() const {
  return new ClubTicketRangeSet;
}

void ClubTicketRangeSet::Clear() {
  if (has_count()) {
    if (count_ != NULL) count_->::bgs::protocol::UnsignedIntRange::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClubTicketRangeSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bgs.protocol.club.v1.ClubTicketRangeSet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .bgs.protocol.UnsignedIntRange count = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_count()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bgs.protocol.club.v1.ClubTicketRangeSet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bgs.protocol.club.v1.ClubTicketRangeSet)
  return false;
#undef DO_
}

void ClubTicketRangeSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bgs.protocol.club.v1.ClubTicketRangeSet)
  // optional .bgs.protocol.UnsignedIntRange count = 1;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bgs.protocol.club.v1.ClubTicketRangeSet)
}

::google::protobuf::uint8* ClubTicketRangeSet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.ClubTicketRangeSet)
  // optional .bgs.protocol.UnsignedIntRange count = 1;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.ClubTicketRangeSet)
  return target;
}

int ClubTicketRangeSet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .bgs.protocol.UnsignedIntRange count = 1;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClubTicketRangeSet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClubTicketRangeSet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClubTicketRangeSet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClubTicketRangeSet::MergeFrom(const ClubTicketRangeSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_count()) {
      mutable_count()->::bgs::protocol::UnsignedIntRange::MergeFrom(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClubTicketRangeSet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClubTicketRangeSet::CopyFrom(const ClubTicketRangeSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClubTicketRangeSet::IsInitialized() const {

  return true;
}

void ClubTicketRangeSet::Swap(ClubTicketRangeSet* other) {
  if (other != this) {
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClubTicketRangeSet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClubTicketRangeSet_descriptor_;
  metadata.reflection = ClubTicketRangeSet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClubBanRangeSet::kCountFieldNumber;
const int ClubBanRangeSet::kReasonRangeFieldNumber;
#endif  // !_MSC_VER

ClubBanRangeSet::ClubBanRangeSet()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.ClubBanRangeSet)
}

void ClubBanRangeSet::InitAsDefaultInstance() {
  count_ = const_cast< ::bgs::protocol::UnsignedIntRange*>(&::bgs::protocol::UnsignedIntRange::default_instance());
  reason_range_ = const_cast< ::bgs::protocol::UnsignedIntRange*>(&::bgs::protocol::UnsignedIntRange::default_instance());
}

ClubBanRangeSet::ClubBanRangeSet(const ClubBanRangeSet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.ClubBanRangeSet)
}

void ClubBanRangeSet::SharedCtor() {
  _cached_size_ = 0;
  count_ = NULL;
  reason_range_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClubBanRangeSet::~ClubBanRangeSet() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.ClubBanRangeSet)
  SharedDtor();
}

void ClubBanRangeSet::SharedDtor() {
  if (this != default_instance_) {
    delete count_;
    delete reason_range_;
  }
}

void ClubBanRangeSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClubBanRangeSet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClubBanRangeSet_descriptor_;
}

const ClubBanRangeSet& ClubBanRangeSet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_club_5frange_5fset_2eproto();
  return *default_instance_;
}

ClubBanRangeSet* ClubBanRangeSet::default_instance_ = NULL;

ClubBanRangeSet* ClubBanRangeSet::New() const {
  return new ClubBanRangeSet;
}

void ClubBanRangeSet::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_count()) {
      if (count_ != NULL) count_->::bgs::protocol::UnsignedIntRange::Clear();
    }
    if (has_reason_range()) {
      if (reason_range_ != NULL) reason_range_->::bgs::protocol::UnsignedIntRange::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClubBanRangeSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bgs.protocol.club.v1.ClubBanRangeSet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .bgs.protocol.UnsignedIntRange count = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_count()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_reason_range;
        break;
      }

      // optional .bgs.protocol.UnsignedIntRange reason_range = 3;
      case 3: {
        if (tag == 26) {
         parse_reason_range:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reason_range()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bgs.protocol.club.v1.ClubBanRangeSet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bgs.protocol.club.v1.ClubBanRangeSet)
  return false;
#undef DO_
}

void ClubBanRangeSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bgs.protocol.club.v1.ClubBanRangeSet)
  // optional .bgs.protocol.UnsignedIntRange count = 1;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->count(), output);
  }

  // optional .bgs.protocol.UnsignedIntRange reason_range = 3;
  if (has_reason_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->reason_range(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bgs.protocol.club.v1.ClubBanRangeSet)
}

::google::protobuf::uint8* ClubBanRangeSet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.ClubBanRangeSet)
  // optional .bgs.protocol.UnsignedIntRange count = 1;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->count(), target);
  }

  // optional .bgs.protocol.UnsignedIntRange reason_range = 3;
  if (has_reason_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->reason_range(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.ClubBanRangeSet)
  return target;
}

int ClubBanRangeSet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .bgs.protocol.UnsignedIntRange count = 1;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->count());
    }

    // optional .bgs.protocol.UnsignedIntRange reason_range = 3;
    if (has_reason_range()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reason_range());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClubBanRangeSet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClubBanRangeSet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClubBanRangeSet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClubBanRangeSet::MergeFrom(const ClubBanRangeSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_count()) {
      mutable_count()->::bgs::protocol::UnsignedIntRange::MergeFrom(from.count());
    }
    if (from.has_reason_range()) {
      mutable_reason_range()->::bgs::protocol::UnsignedIntRange::MergeFrom(from.reason_range());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClubBanRangeSet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClubBanRangeSet::CopyFrom(const ClubBanRangeSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClubBanRangeSet::IsInitialized() const {

  return true;
}

void ClubBanRangeSet::Swap(ClubBanRangeSet* other) {
  if (other != this) {
    std::swap(count_, other->count_);
    std::swap(reason_range_, other->reason_range_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClubBanRangeSet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClubBanRangeSet_descriptor_;
  metadata.reflection = ClubBanRangeSet_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace club
}  // namespace protocol
}  // namespace bgs

// @@protoc_insertion_point(global_scope)
