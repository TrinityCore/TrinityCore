// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: club_stream.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "club_stream.pb.h"

#include <algorithm>
#include <utility>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
#include "Log.h"
// @@protoc_insertion_point(includes)

namespace bgs {
namespace protocol {
namespace club {
namespace v1 {

namespace {

const ::google::protobuf::Descriptor* StreamPosition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StreamPosition_reflection_ = NULL;
const ::google::protobuf::Descriptor* StreamAccess_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StreamAccess_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateStreamOptions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateStreamOptions_reflection_ = NULL;
const ::google::protobuf::Descriptor* Stream_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Stream_reflection_ = NULL;
const ::google::protobuf::Descriptor* StreamDescription_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StreamDescription_reflection_ = NULL;
const ::google::protobuf::Descriptor* MentionContent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MentionContent_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateMessageOptions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateMessageOptions_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClubStreamMessageContainer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClubStreamMessageContainer_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContentChain_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContentChain_reflection_ = NULL;
const ::google::protobuf::Descriptor* StreamMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StreamMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* StreamMention_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StreamMention_reflection_ = NULL;
const ::google::protobuf::Descriptor* StreamView_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StreamView_reflection_ = NULL;
const ::google::protobuf::Descriptor* StreamAdvanceViewTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StreamAdvanceViewTime_reflection_ = NULL;
const ::google::protobuf::Descriptor* StreamEventTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StreamEventTime_reflection_ = NULL;
const ::google::protobuf::Descriptor* StreamMentionView_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StreamMentionView_reflection_ = NULL;
const ::google::protobuf::Descriptor* StreamStateOptions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StreamStateOptions_reflection_ = NULL;
const ::google::protobuf::Descriptor* StreamStateAssignment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StreamStateAssignment_reflection_ = NULL;
const ::google::protobuf::Descriptor* StreamTypingIndicator_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StreamTypingIndicator_reflection_ = NULL;

}  // namespace

void protobuf_AssignDesc_club_5fstream_2eproto() {
  protobuf_AddDesc_club_5fstream_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "club_stream.proto");
  GOOGLE_CHECK(file != NULL);
  StreamPosition_descriptor_ = file->message_type(0);
  static const int StreamPosition_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamPosition, stream_id_),
  };
  StreamPosition_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StreamPosition_descriptor_,
      StreamPosition::default_instance_,
      StreamPosition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamPosition, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamPosition, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StreamPosition));
  StreamAccess_descriptor_ = file->message_type(1);
  static const int StreamAccess_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamAccess, role_),
  };
  StreamAccess_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StreamAccess_descriptor_,
      StreamAccess::default_instance_,
      StreamAccess_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamAccess, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamAccess, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StreamAccess));
  CreateStreamOptions_descriptor_ = file->message_type(2);
  static const int CreateStreamOptions_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateStreamOptions, attribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateStreamOptions, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateStreamOptions, subject_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateStreamOptions, access_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateStreamOptions, voice_level_),
  };
  CreateStreamOptions_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateStreamOptions_descriptor_,
      CreateStreamOptions::default_instance_,
      CreateStreamOptions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateStreamOptions, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateStreamOptions, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateStreamOptions));
  Stream_descriptor_ = file->message_type(3);
  static const int Stream_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stream, club_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stream, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stream, attribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stream, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stream, subject_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stream, access_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stream, voice_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stream, creation_time_),
  };
  Stream_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Stream_descriptor_,
      Stream::default_instance_,
      Stream_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stream, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stream, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Stream));
  StreamDescription_descriptor_ = file->message_type(4);
  static const int StreamDescription_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamDescription, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamDescription, name_),
  };
  StreamDescription_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StreamDescription_descriptor_,
      StreamDescription::default_instance_,
      StreamDescription_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamDescription, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamDescription, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StreamDescription));
  MentionContent_descriptor_ = file->message_type(5);
  static const int MentionContent_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MentionContent, all_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MentionContent, here_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MentionContent, member_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MentionContent, role_),
  };
  MentionContent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MentionContent_descriptor_,
      MentionContent::default_instance_,
      MentionContent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MentionContent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MentionContent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MentionContent));
  CreateMessageOptions_descriptor_ = file->message_type(6);
  static const int CreateMessageOptions_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateMessageOptions, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateMessageOptions, mention_),
  };
  CreateMessageOptions_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateMessageOptions_descriptor_,
      CreateMessageOptions::default_instance_,
      CreateMessageOptions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateMessageOptions, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateMessageOptions, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateMessageOptions));
  ClubStreamMessageContainer_descriptor_ = file->message_type(7);
  static const int ClubStreamMessageContainer_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubStreamMessageContainer, message_),
  };
  ClubStreamMessageContainer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClubStreamMessageContainer_descriptor_,
      ClubStreamMessageContainer::default_instance_,
      ClubStreamMessageContainer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubStreamMessageContainer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubStreamMessageContainer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClubStreamMessageContainer));
  ContentChain_descriptor_ = file->message_type(8);
  static const int ContentChain_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentChain, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentChain, embed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentChain, mention_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentChain, edit_time_),
  };
  ContentChain_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContentChain_descriptor_,
      ContentChain::default_instance_,
      ContentChain_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentChain, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentChain, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContentChain));
  StreamMessage_descriptor_ = file->message_type(9);
  static const int StreamMessage_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamMessage, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamMessage, author_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamMessage, content_chain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamMessage, destroyer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamMessage, destroyed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamMessage, destroy_time_),
  };
  StreamMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StreamMessage_descriptor_,
      StreamMessage::default_instance_,
      StreamMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StreamMessage));
  StreamMention_descriptor_ = file->message_type(10);
  static const int StreamMention_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamMention, club_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamMention, stream_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamMention, message_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamMention, author_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamMention, destroyed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamMention, mention_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamMention, member_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamMention, message_),
  };
  StreamMention_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StreamMention_descriptor_,
      StreamMention::default_instance_,
      StreamMention_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamMention, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamMention, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StreamMention));
  StreamView_descriptor_ = file->message_type(11);
  static const int StreamView_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamView, club_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamView, stream_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamView, marker_),
  };
  StreamView_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StreamView_descriptor_,
      StreamView::default_instance_,
      StreamView_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamView, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamView, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StreamView));
  StreamAdvanceViewTime_descriptor_ = file->message_type(12);
  static const int StreamAdvanceViewTime_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamAdvanceViewTime, stream_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamAdvanceViewTime, view_time_),
  };
  StreamAdvanceViewTime_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StreamAdvanceViewTime_descriptor_,
      StreamAdvanceViewTime::default_instance_,
      StreamAdvanceViewTime_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamAdvanceViewTime, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamAdvanceViewTime, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StreamAdvanceViewTime));
  StreamEventTime_descriptor_ = file->message_type(13);
  static const int StreamEventTime_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamEventTime, stream_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamEventTime, event_time_),
  };
  StreamEventTime_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StreamEventTime_descriptor_,
      StreamEventTime::default_instance_,
      StreamEventTime_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamEventTime, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamEventTime, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StreamEventTime));
  StreamMentionView_descriptor_ = file->message_type(14);
  static const int StreamMentionView_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamMentionView, club_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamMentionView, stream_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamMentionView, marker_),
  };
  StreamMentionView_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StreamMentionView_descriptor_,
      StreamMentionView::default_instance_,
      StreamMentionView_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamMentionView, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamMentionView, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StreamMentionView));
  StreamStateOptions_descriptor_ = file->message_type(15);
  static const int StreamStateOptions_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamStateOptions, attribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamStateOptions, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamStateOptions, subject_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamStateOptions, access_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamStateOptions, voice_level_),
  };
  StreamStateOptions_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StreamStateOptions_descriptor_,
      StreamStateOptions::default_instance_,
      StreamStateOptions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamStateOptions, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamStateOptions, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StreamStateOptions));
  StreamStateAssignment_descriptor_ = file->message_type(16);
  static const int StreamStateAssignment_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamStateAssignment, stream_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamStateAssignment, attribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamStateAssignment, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamStateAssignment, subject_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamStateAssignment, access_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamStateAssignment, stream_subscription_removed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamStateAssignment, voice_level_),
  };
  StreamStateAssignment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StreamStateAssignment_descriptor_,
      StreamStateAssignment::default_instance_,
      StreamStateAssignment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamStateAssignment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamStateAssignment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StreamStateAssignment));
  StreamTypingIndicator_descriptor_ = file->message_type(17);
  static const int StreamTypingIndicator_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamTypingIndicator, author_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamTypingIndicator, indicator_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamTypingIndicator, epoch_),
  };
  StreamTypingIndicator_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StreamTypingIndicator_descriptor_,
      StreamTypingIndicator::default_instance_,
      StreamTypingIndicator_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamTypingIndicator, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamTypingIndicator, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StreamTypingIndicator));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_club_5fstream_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StreamPosition_descriptor_, &StreamPosition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StreamAccess_descriptor_, &StreamAccess::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateStreamOptions_descriptor_, &CreateStreamOptions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Stream_descriptor_, &Stream::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StreamDescription_descriptor_, &StreamDescription::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MentionContent_descriptor_, &MentionContent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateMessageOptions_descriptor_, &CreateMessageOptions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClubStreamMessageContainer_descriptor_, &ClubStreamMessageContainer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContentChain_descriptor_, &ContentChain::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StreamMessage_descriptor_, &StreamMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StreamMention_descriptor_, &StreamMention::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StreamView_descriptor_, &StreamView::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StreamAdvanceViewTime_descriptor_, &StreamAdvanceViewTime::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StreamEventTime_descriptor_, &StreamEventTime::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StreamMentionView_descriptor_, &StreamMentionView::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StreamStateOptions_descriptor_, &StreamStateOptions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StreamStateAssignment_descriptor_, &StreamStateAssignment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StreamTypingIndicator_descriptor_, &StreamTypingIndicator::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_club_5fstream_2eproto() {
  delete StreamPosition::default_instance_;
  delete StreamPosition_reflection_;
  delete StreamAccess::default_instance_;
  delete StreamAccess_reflection_;
  delete CreateStreamOptions::default_instance_;
  delete CreateStreamOptions_reflection_;
  delete Stream::default_instance_;
  delete Stream_reflection_;
  delete StreamDescription::default_instance_;
  delete StreamDescription_reflection_;
  delete MentionContent::default_instance_;
  delete MentionContent_reflection_;
  delete CreateMessageOptions::default_instance_;
  delete CreateMessageOptions_reflection_;
  delete ClubStreamMessageContainer::default_instance_;
  delete ClubStreamMessageContainer_reflection_;
  delete ContentChain::default_instance_;
  delete ContentChain_reflection_;
  delete StreamMessage::default_instance_;
  delete StreamMessage_reflection_;
  delete StreamMention::default_instance_;
  delete StreamMention_reflection_;
  delete StreamView::default_instance_;
  delete StreamView_reflection_;
  delete StreamAdvanceViewTime::default_instance_;
  delete StreamAdvanceViewTime_reflection_;
  delete StreamEventTime::default_instance_;
  delete StreamEventTime_reflection_;
  delete StreamMentionView::default_instance_;
  delete StreamMentionView_reflection_;
  delete StreamStateOptions::default_instance_;
  delete StreamStateOptions_reflection_;
  delete StreamStateAssignment::default_instance_;
  delete StreamStateAssignment_reflection_;
  delete StreamTypingIndicator::default_instance_;
  delete StreamTypingIndicator_reflection_;
}

void protobuf_AddDesc_club_5fstream_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::bgs::protocol::club::v1::protobuf_AddDesc_club_5fenum_2eproto();
  ::bgs::protocol::club::v1::protobuf_AddDesc_club_5fmember_2eproto();
  ::bgs::protocol::v2::protobuf_AddDesc_api_2fclient_2fv2_2fattribute_5ftypes_2eproto();
  ::bgs::protocol::protobuf_AddDesc_embed_5ftypes_2eproto();
  ::bgs::protocol::protobuf_AddDesc_event_5fview_5ftypes_2eproto();
  ::bgs::protocol::protobuf_AddDesc_message_5ftypes_2eproto();
  ::bgs::protocol::protobuf_AddDesc_ets_5ftypes_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021club_stream.proto\022\024bgs.protocol.club.v"
    "1\032\017club_enum.proto\032\021club_member.proto\032#a"
    "pi/client/v2/attribute_types.proto\032\021embe"
    "d_types.proto\032\026event_view_types.proto\032\023m"
    "essage_types.proto\032\017ets_types.proto\"\'\n\016S"
    "treamPosition\022\025\n\tstream_id\030\001 \003(\004B\002\020\001\" \n\014"
    "StreamAccess\022\020\n\004role\030\001 \003(\rB\002\020\001\"\324\001\n\023Creat"
    "eStreamOptions\022-\n\tattribute\030\001 \003(\0132\032.bgs."
    "protocol.v2.Attribute\022\014\n\004name\030\002 \001(\t\022\017\n\007s"
    "ubject\030\003 \001(\t\0222\n\006access\030\004 \001(\0132\".bgs.proto"
    "col.club.v1.StreamAccess\022;\n\013voice_level\030"
    "\005 \001(\0162&.bgs.protocol.club.v1.StreamVoice"
    "Level\"\373\001\n\006Stream\022\017\n\007club_id\030\001 \001(\004\022\n\n\002id\030"
    "\002 \001(\004\022-\n\tattribute\030\003 \003(\0132\032.bgs.protocol."
    "v2.Attribute\022\014\n\004name\030\004 \001(\t\022\017\n\007subject\030\005 "
    "\001(\t\0222\n\006access\030\006 \001(\0132\".bgs.protocol.club."
    "v1.StreamAccess\022;\n\013voice_level\030\007 \001(\0162&.b"
    "gs.protocol.club.v1.StreamVoiceLevel\022\025\n\r"
    "creation_time\030\010 \001(\004\"-\n\021StreamDescription"
    "\022\n\n\002id\030\002 \001(\004\022\014\n\004name\030\004 \001(\t\"p\n\016MentionCon"
    "tent\022\013\n\003all\030\001 \001(\010\022\014\n\004here\030\002 \001(\010\0221\n\tmembe"
    "r_id\030\003 \003(\0132\036.bgs.protocol.club.v1.Member"
    "Id\022\020\n\004role\030\004 \003(\rB\002\020\001\"^\n\024CreateMessageOpt"
    "ions\022\017\n\007content\030\002 \001(\t\0225\n\007mention\030\003 \001(\0132$"
    ".bgs.protocol.club.v1.MentionContent\"R\n\032"
    "ClubStreamMessageContainer\0224\n\007message\030\001 "
    "\003(\0132#.bgs.protocol.club.v1.StreamMessage"
    "\"\221\001\n\014ContentChain\022\017\n\007content\030\005 \001(\t\022&\n\005em"
    "bed\030\006 \003(\0132\027.bgs.protocol.EmbedInfo\0225\n\007me"
    "ntion\030\007 \001(\0132$.bgs.protocol.club.v1.Menti"
    "onContent\022\021\n\tedit_time\030\010 \001(\004\"\215\002\n\rStreamM"
    "essage\022#\n\002id\030\003 \001(\0132\027.bgs.protocol.Messag"
    "eId\0227\n\006author\030\004 \001(\0132\'.bgs.protocol.club."
    "v1.MemberDescription\0229\n\rcontent_chain\030\006 "
    "\003(\0132\".bgs.protocol.club.v1.ContentChain\022"
    ":\n\tdestroyer\030\017 \001(\0132\'.bgs.protocol.club.v"
    "1.MemberDescription\022\021\n\tdestroyed\030\020 \001(\010\022\024"
    "\n\014destroy_time\030\021 \001(\004\"\305\002\n\rStreamMention\022\017"
    "\n\007club_id\030\001 \001(\004\022\021\n\tstream_id\030\002 \001(\004\022+\n\nme"
    "ssage_id\030\003 \001(\0132\027.bgs.protocol.MessageId\022"
    "7\n\006author\030\004 \001(\0132\'.bgs.protocol.club.v1.M"
    "emberDescription\022\021\n\tdestroyed\030\005 \001(\010\022.\n\nm"
    "ention_id\030\006 \001(\0132\032.bgs.protocol.TimeSerie"
    "sId\0221\n\tmember_id\030\007 \001(\0132\036.bgs.protocol.cl"
    "ub.v1.MemberId\0224\n\007message\030\010 \001(\0132#.bgs.pr"
    "otocol.club.v1.StreamMessage\"Z\n\nStreamVi"
    "ew\022\017\n\007club_id\030\001 \001(\004\022\021\n\tstream_id\030\002 \001(\004\022("
    "\n\006marker\030\003 \001(\0132\030.bgs.protocol.ViewMarker"
    "\"=\n\025StreamAdvanceViewTime\022\021\n\tstream_id\030\001"
    " \001(\004\022\021\n\tview_time\030\002 \001(\004\"8\n\017StreamEventTi"
    "me\022\021\n\tstream_id\030\001 \001(\004\022\022\n\nevent_time\030\002 \001("
    "\004\"a\n\021StreamMentionView\022\017\n\007club_id\030\001 \001(\004\022"
    "\021\n\tstream_id\030\002 \001(\004\022(\n\006marker\030\003 \001(\0132\030.bgs"
    ".protocol.ViewMarker\"\323\001\n\022StreamStateOpti"
    "ons\022-\n\tattribute\030\001 \003(\0132\032.bgs.protocol.v2"
    ".Attribute\022\014\n\004name\030\002 \001(\t\022\017\n\007subject\030\003 \001("
    "\t\0222\n\006access\030\004 \001(\0132\".bgs.protocol.club.v1"
    ".StreamAccess\022;\n\013voice_level\030\005 \001(\0162&.bgs"
    ".protocol.club.v1.StreamVoiceLevel\"\216\002\n\025S"
    "treamStateAssignment\022\021\n\tstream_id\030\001 \001(\004\022"
    "-\n\tattribute\030\002 \003(\0132\032.bgs.protocol.v2.Att"
    "ribute\022\014\n\004name\030\003 \001(\t\022\017\n\007subject\030\004 \001(\t\0222\n"
    "\006access\030\005 \001(\0132\".bgs.protocol.club.v1.Str"
    "eamAccess\022#\n\033stream_subscription_removed"
    "\030\006 \001(\010\022;\n\013voice_level\030\007 \001(\0162&.bgs.protoc"
    "ol.club.v1.StreamVoiceLevel\"\213\001\n\025StreamTy"
    "pingIndicator\0221\n\tauthor_id\030\001 \001(\0132\036.bgs.p"
    "rotocol.club.v1.MemberId\0220\n\tindicator\030\002 "
    "\001(\0162\035.bgs.protocol.TypingIndicator\022\r\n\005ep"
    "och\030\003 \001(\004B\002H\001", 2773);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "club_stream.proto", &protobuf_RegisterTypes);
  StreamPosition::default_instance_ = new StreamPosition();
  StreamAccess::default_instance_ = new StreamAccess();
  CreateStreamOptions::default_instance_ = new CreateStreamOptions();
  Stream::default_instance_ = new Stream();
  StreamDescription::default_instance_ = new StreamDescription();
  MentionContent::default_instance_ = new MentionContent();
  CreateMessageOptions::default_instance_ = new CreateMessageOptions();
  ClubStreamMessageContainer::default_instance_ = new ClubStreamMessageContainer();
  ContentChain::default_instance_ = new ContentChain();
  StreamMessage::default_instance_ = new StreamMessage();
  StreamMention::default_instance_ = new StreamMention();
  StreamView::default_instance_ = new StreamView();
  StreamAdvanceViewTime::default_instance_ = new StreamAdvanceViewTime();
  StreamEventTime::default_instance_ = new StreamEventTime();
  StreamMentionView::default_instance_ = new StreamMentionView();
  StreamStateOptions::default_instance_ = new StreamStateOptions();
  StreamStateAssignment::default_instance_ = new StreamStateAssignment();
  StreamTypingIndicator::default_instance_ = new StreamTypingIndicator();
  StreamPosition::default_instance_->InitAsDefaultInstance();
  StreamAccess::default_instance_->InitAsDefaultInstance();
  CreateStreamOptions::default_instance_->InitAsDefaultInstance();
  Stream::default_instance_->InitAsDefaultInstance();
  StreamDescription::default_instance_->InitAsDefaultInstance();
  MentionContent::default_instance_->InitAsDefaultInstance();
  CreateMessageOptions::default_instance_->InitAsDefaultInstance();
  ClubStreamMessageContainer::default_instance_->InitAsDefaultInstance();
  ContentChain::default_instance_->InitAsDefaultInstance();
  StreamMessage::default_instance_->InitAsDefaultInstance();
  StreamMention::default_instance_->InitAsDefaultInstance();
  StreamView::default_instance_->InitAsDefaultInstance();
  StreamAdvanceViewTime::default_instance_->InitAsDefaultInstance();
  StreamEventTime::default_instance_->InitAsDefaultInstance();
  StreamMentionView::default_instance_->InitAsDefaultInstance();
  StreamStateOptions::default_instance_->InitAsDefaultInstance();
  StreamStateAssignment::default_instance_->InitAsDefaultInstance();
  StreamTypingIndicator::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_club_5fstream_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_club_5fstream_2eproto {
  StaticDescriptorInitializer_club_5fstream_2eproto() {
    protobuf_AddDesc_club_5fstream_2eproto();
  }
} static_descriptor_initializer_club_5fstream_2eproto_;
// ===================================================================

#ifndef _MSC_VER
const int StreamPosition::kStreamIdFieldNumber;
#endif  // !_MSC_VER

StreamPosition::StreamPosition()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.StreamPosition)
}

void StreamPosition::InitAsDefaultInstance() {
}

StreamPosition::StreamPosition(const StreamPosition& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.StreamPosition)
}

void StreamPosition::SharedCtor() {
  _cached_size_ = 0;
  _stream_id_cached_byte_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StreamPosition::~StreamPosition() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.StreamPosition)
  SharedDtor();
}

void StreamPosition::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StreamPosition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreamPosition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StreamPosition_descriptor_;
}

const StreamPosition& StreamPosition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_club_5fstream_2eproto();
  return *default_instance_;
}

StreamPosition* StreamPosition::default_instance_ = NULL;

StreamPosition* StreamPosition::New() const {
  return new StreamPosition;
}

void StreamPosition::Clear() {
  stream_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StreamPosition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bgs.protocol.club.v1.StreamPosition)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 stream_id = 1 [packed = true];
      case 1: {
        if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_stream_id())));
        } else if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 10, input, this->mutable_stream_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bgs.protocol.club.v1.StreamPosition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bgs.protocol.club.v1.StreamPosition)
  return false;
#undef DO_
}

void StreamPosition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bgs.protocol.club.v1.StreamPosition)
  // repeated uint64 stream_id = 1 [packed = true];
  if (this->stream_id_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_stream_id_cached_byte_size_);
  }
  for (int i = 0; i < this->stream_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->stream_id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bgs.protocol.club.v1.StreamPosition)
}

::google::protobuf::uint8* StreamPosition::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.StreamPosition)
  // repeated uint64 stream_id = 1 [packed = true];
  if (this->stream_id_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _stream_id_cached_byte_size_, target);
  }
  for (int i = 0; i < this->stream_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->stream_id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.StreamPosition)
  return target;
}

int StreamPosition::ByteSize() const {
  int total_size = 0;

  // repeated uint64 stream_id = 1 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->stream_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->stream_id(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _stream_id_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StreamPosition::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StreamPosition* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StreamPosition*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StreamPosition::MergeFrom(const StreamPosition& from) {
  GOOGLE_CHECK_NE(&from, this);
  stream_id_.MergeFrom(from.stream_id_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StreamPosition::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamPosition::CopyFrom(const StreamPosition& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamPosition::IsInitialized() const {
  return true;
}

void StreamPosition::Swap(StreamPosition* other) {
  if (other != this) {
    stream_id_.Swap(&other->stream_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StreamPosition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StreamPosition_descriptor_;
  metadata.reflection = StreamPosition_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int StreamAccess::kRoleFieldNumber;
#endif  // !_MSC_VER

StreamAccess::StreamAccess()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.StreamAccess)
}

void StreamAccess::InitAsDefaultInstance() {
}

StreamAccess::StreamAccess(const StreamAccess& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.StreamAccess)
}

void StreamAccess::SharedCtor() {
  _cached_size_ = 0;
  _role_cached_byte_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StreamAccess::~StreamAccess() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.StreamAccess)
  SharedDtor();
}

void StreamAccess::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StreamAccess::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreamAccess::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StreamAccess_descriptor_;
}

const StreamAccess& StreamAccess::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_club_5fstream_2eproto();
  return *default_instance_;
}

StreamAccess* StreamAccess::default_instance_ = NULL;

StreamAccess* StreamAccess::New() const {
  return new StreamAccess;
}

void StreamAccess::Clear() {
  role_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StreamAccess::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bgs.protocol.club.v1.StreamAccess)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 role = 1 [packed = true];
      case 1: {
        if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_role())));
        } else if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 10, input, this->mutable_role())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bgs.protocol.club.v1.StreamAccess)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bgs.protocol.club.v1.StreamAccess)
  return false;
#undef DO_
}

void StreamAccess::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bgs.protocol.club.v1.StreamAccess)
  // repeated uint32 role = 1 [packed = true];
  if (this->role_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_role_cached_byte_size_);
  }
  for (int i = 0; i < this->role_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->role(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bgs.protocol.club.v1.StreamAccess)
}

::google::protobuf::uint8* StreamAccess::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.StreamAccess)
  // repeated uint32 role = 1 [packed = true];
  if (this->role_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _role_cached_byte_size_, target);
  }
  for (int i = 0; i < this->role_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->role(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.StreamAccess)
  return target;
}

int StreamAccess::ByteSize() const {
  int total_size = 0;

  // repeated uint32 role = 1 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->role_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->role(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _role_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StreamAccess::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StreamAccess* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StreamAccess*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StreamAccess::MergeFrom(const StreamAccess& from) {
  GOOGLE_CHECK_NE(&from, this);
  role_.MergeFrom(from.role_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StreamAccess::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamAccess::CopyFrom(const StreamAccess& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamAccess::IsInitialized() const {
  return true;
}

void StreamAccess::Swap(StreamAccess* other) {
  if (other != this) {
    role_.Swap(&other->role_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StreamAccess::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StreamAccess_descriptor_;
  metadata.reflection = StreamAccess_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int CreateStreamOptions::kAttributeFieldNumber;
const int CreateStreamOptions::kNameFieldNumber;
const int CreateStreamOptions::kSubjectFieldNumber;
const int CreateStreamOptions::kAccessFieldNumber;
const int CreateStreamOptions::kVoiceLevelFieldNumber;
#endif  // !_MSC_VER

CreateStreamOptions::CreateStreamOptions()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.CreateStreamOptions)
}

void CreateStreamOptions::InitAsDefaultInstance() {
  access_ = const_cast< ::bgs::protocol::club::v1::StreamAccess*>(&::bgs::protocol::club::v1::StreamAccess::default_instance());
}

CreateStreamOptions::CreateStreamOptions(const CreateStreamOptions& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.CreateStreamOptions)
}

void CreateStreamOptions::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  subject_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  access_ = NULL;
  voice_level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateStreamOptions::~CreateStreamOptions() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.CreateStreamOptions)
  SharedDtor();
}

void CreateStreamOptions::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (subject_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete subject_;
  }
  if (this != default_instance_) {
    delete access_;
  }
}

void CreateStreamOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateStreamOptions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateStreamOptions_descriptor_;
}

const CreateStreamOptions& CreateStreamOptions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_club_5fstream_2eproto();
  return *default_instance_;
}

CreateStreamOptions* CreateStreamOptions::default_instance_ = NULL;

CreateStreamOptions* CreateStreamOptions::New() const {
  return new CreateStreamOptions;
}

void CreateStreamOptions::Clear() {
  if (_has_bits_[0 / 32] & 30) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_subject()) {
      if (subject_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        subject_->clear();
      }
    }
    if (has_access()) {
      if (access_ != NULL) access_->::bgs::protocol::club::v1::StreamAccess::Clear();
    }
    voice_level_ = 0;
  }
  attribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateStreamOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bgs.protocol.club.v1.CreateStreamOptions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .bgs.protocol.v2.Attribute attribute = 1;
      case 1: {
        if (tag == 10) {
         parse_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attribute()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_attribute;
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_subject;
        break;
      }

      // optional string subject = 3;
      case 3: {
        if (tag == 26) {
         parse_subject:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subject()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->subject().data(), this->subject().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "subject");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_access;
        break;
      }

      // optional .bgs.protocol.club.v1.StreamAccess access = 4;
      case 4: {
        if (tag == 34) {
         parse_access:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_access()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_voice_level;
        break;
      }

      // optional .bgs.protocol.club.v1.StreamVoiceLevel voice_level = 5;
      case 5: {
        if (tag == 40) {
         parse_voice_level:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::bgs::protocol::club::v1::StreamVoiceLevel_IsValid(value)) {
            set_voice_level(static_cast< ::bgs::protocol::club::v1::StreamVoiceLevel >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bgs.protocol.club.v1.CreateStreamOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bgs.protocol.club.v1.CreateStreamOptions)
  return false;
#undef DO_
}

void CreateStreamOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bgs.protocol.club.v1.CreateStreamOptions)
  // repeated .bgs.protocol.v2.Attribute attribute = 1;
  for (int i = 0; i < this->attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->attribute(i), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional string subject = 3;
  if (has_subject()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->subject().data(), this->subject().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "subject");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->subject(), output);
  }

  // optional .bgs.protocol.club.v1.StreamAccess access = 4;
  if (has_access()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->access(), output);
  }

  // optional .bgs.protocol.club.v1.StreamVoiceLevel voice_level = 5;
  if (has_voice_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->voice_level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bgs.protocol.club.v1.CreateStreamOptions)
}

::google::protobuf::uint8* CreateStreamOptions::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.CreateStreamOptions)
  // repeated .bgs.protocol.v2.Attribute attribute = 1;
  for (int i = 0; i < this->attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->attribute(i), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string subject = 3;
  if (has_subject()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->subject().data(), this->subject().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "subject");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->subject(), target);
  }

  // optional .bgs.protocol.club.v1.StreamAccess access = 4;
  if (has_access()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->access(), target);
  }

  // optional .bgs.protocol.club.v1.StreamVoiceLevel voice_level = 5;
  if (has_voice_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->voice_level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.CreateStreamOptions)
  return target;
}

int CreateStreamOptions::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string subject = 3;
    if (has_subject()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->subject());
    }

    // optional .bgs.protocol.club.v1.StreamAccess access = 4;
    if (has_access()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->access());
    }

    // optional .bgs.protocol.club.v1.StreamVoiceLevel voice_level = 5;
    if (has_voice_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->voice_level());
    }

  }
  // repeated .bgs.protocol.v2.Attribute attribute = 1;
  total_size += 1 * this->attribute_size();
  for (int i = 0; i < this->attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attribute(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateStreamOptions::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateStreamOptions* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateStreamOptions*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateStreamOptions::MergeFrom(const CreateStreamOptions& from) {
  GOOGLE_CHECK_NE(&from, this);
  attribute_.MergeFrom(from.attribute_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_subject()) {
      set_subject(from.subject());
    }
    if (from.has_access()) {
      mutable_access()->::bgs::protocol::club::v1::StreamAccess::MergeFrom(from.access());
    }
    if (from.has_voice_level()) {
      set_voice_level(from.voice_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateStreamOptions::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateStreamOptions::CopyFrom(const CreateStreamOptions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateStreamOptions::IsInitialized() const {
  return true;
}

void CreateStreamOptions::Swap(CreateStreamOptions* other) {
  if (other != this) {
    attribute_.Swap(&other->attribute_);
    std::swap(name_, other->name_);
    std::swap(subject_, other->subject_);
    std::swap(access_, other->access_);
    std::swap(voice_level_, other->voice_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateStreamOptions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateStreamOptions_descriptor_;
  metadata.reflection = CreateStreamOptions_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int Stream::kClubIdFieldNumber;
const int Stream::kIdFieldNumber;
const int Stream::kAttributeFieldNumber;
const int Stream::kNameFieldNumber;
const int Stream::kSubjectFieldNumber;
const int Stream::kAccessFieldNumber;
const int Stream::kVoiceLevelFieldNumber;
const int Stream::kCreationTimeFieldNumber;
#endif  // !_MSC_VER

Stream::Stream()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.Stream)
}

void Stream::InitAsDefaultInstance() {
  access_ = const_cast< ::bgs::protocol::club::v1::StreamAccess*>(&::bgs::protocol::club::v1::StreamAccess::default_instance());
}

Stream::Stream(const Stream& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.Stream)
}

void Stream::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  club_id_ = GOOGLE_ULONGLONG(0);
  id_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  subject_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  access_ = NULL;
  voice_level_ = 0;
  creation_time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Stream::~Stream() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.Stream)
  SharedDtor();
}

void Stream::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (subject_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete subject_;
  }
  if (this != default_instance_) {
    delete access_;
  }
}

void Stream::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Stream::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Stream_descriptor_;
}

const Stream& Stream::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_club_5fstream_2eproto();
  return *default_instance_;
}

Stream* Stream::default_instance_ = NULL;

Stream* Stream::New() const {
  return new Stream;
}

void Stream::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Stream*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 251) {
    ZR_(club_id_, id_);
    ZR_(creation_time_, voice_level_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_subject()) {
      if (subject_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        subject_->clear();
      }
    }
    if (has_access()) {
      if (access_ != NULL) access_->::bgs::protocol::club::v1::StreamAccess::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  attribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Stream::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bgs.protocol.club.v1.Stream)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 club_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &club_id_)));
          set_has_club_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional uint64 id = 2;
      case 2: {
        if (tag == 16) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_attribute;
        break;
      }

      // repeated .bgs.protocol.v2.Attribute attribute = 3;
      case 3: {
        if (tag == 26) {
         parse_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attribute()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_attribute;
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // optional string name = 4;
      case 4: {
        if (tag == 34) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_subject;
        break;
      }

      // optional string subject = 5;
      case 5: {
        if (tag == 42) {
         parse_subject:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subject()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->subject().data(), this->subject().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "subject");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_access;
        break;
      }

      // optional .bgs.protocol.club.v1.StreamAccess access = 6;
      case 6: {
        if (tag == 50) {
         parse_access:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_access()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_voice_level;
        break;
      }

      // optional .bgs.protocol.club.v1.StreamVoiceLevel voice_level = 7;
      case 7: {
        if (tag == 56) {
         parse_voice_level:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::bgs::protocol::club::v1::StreamVoiceLevel_IsValid(value)) {
            set_voice_level(static_cast< ::bgs::protocol::club::v1::StreamVoiceLevel >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_creation_time;
        break;
      }

      // optional uint64 creation_time = 8;
      case 8: {
        if (tag == 64) {
         parse_creation_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &creation_time_)));
          set_has_creation_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bgs.protocol.club.v1.Stream)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bgs.protocol.club.v1.Stream)
  return false;
#undef DO_
}

void Stream::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bgs.protocol.club.v1.Stream)
  // optional uint64 club_id = 1;
  if (has_club_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->club_id(), output);
  }

  // optional uint64 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->id(), output);
  }

  // repeated .bgs.protocol.v2.Attribute attribute = 3;
  for (int i = 0; i < this->attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->attribute(i), output);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->name(), output);
  }

  // optional string subject = 5;
  if (has_subject()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->subject().data(), this->subject().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "subject");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->subject(), output);
  }

  // optional .bgs.protocol.club.v1.StreamAccess access = 6;
  if (has_access()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->access(), output);
  }

  // optional .bgs.protocol.club.v1.StreamVoiceLevel voice_level = 7;
  if (has_voice_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->voice_level(), output);
  }

  // optional uint64 creation_time = 8;
  if (has_creation_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->creation_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bgs.protocol.club.v1.Stream)
}

::google::protobuf::uint8* Stream::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.Stream)
  // optional uint64 club_id = 1;
  if (has_club_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->club_id(), target);
  }

  // optional uint64 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->id(), target);
  }

  // repeated .bgs.protocol.v2.Attribute attribute = 3;
  for (int i = 0; i < this->attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->attribute(i), target);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  // optional string subject = 5;
  if (has_subject()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->subject().data(), this->subject().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "subject");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->subject(), target);
  }

  // optional .bgs.protocol.club.v1.StreamAccess access = 6;
  if (has_access()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->access(), target);
  }

  // optional .bgs.protocol.club.v1.StreamVoiceLevel voice_level = 7;
  if (has_voice_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->voice_level(), target);
  }

  // optional uint64 creation_time = 8;
  if (has_creation_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->creation_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.Stream)
  return target;
}

int Stream::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 club_id = 1;
    if (has_club_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->club_id());
    }

    // optional uint64 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string subject = 5;
    if (has_subject()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->subject());
    }

    // optional .bgs.protocol.club.v1.StreamAccess access = 6;
    if (has_access()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->access());
    }

    // optional .bgs.protocol.club.v1.StreamVoiceLevel voice_level = 7;
    if (has_voice_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->voice_level());
    }

    // optional uint64 creation_time = 8;
    if (has_creation_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->creation_time());
    }

  }
  // repeated .bgs.protocol.v2.Attribute attribute = 3;
  total_size += 1 * this->attribute_size();
  for (int i = 0; i < this->attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attribute(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Stream::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Stream* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Stream*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Stream::MergeFrom(const Stream& from) {
  GOOGLE_CHECK_NE(&from, this);
  attribute_.MergeFrom(from.attribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_club_id()) {
      set_club_id(from.club_id());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_subject()) {
      set_subject(from.subject());
    }
    if (from.has_access()) {
      mutable_access()->::bgs::protocol::club::v1::StreamAccess::MergeFrom(from.access());
    }
    if (from.has_voice_level()) {
      set_voice_level(from.voice_level());
    }
    if (from.has_creation_time()) {
      set_creation_time(from.creation_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Stream::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Stream::CopyFrom(const Stream& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stream::IsInitialized() const {
  return true;
}

void Stream::Swap(Stream* other) {
  if (other != this) {
    std::swap(club_id_, other->club_id_);
    std::swap(id_, other->id_);
    attribute_.Swap(&other->attribute_);
    std::swap(name_, other->name_);
    std::swap(subject_, other->subject_);
    std::swap(access_, other->access_);
    std::swap(voice_level_, other->voice_level_);
    std::swap(creation_time_, other->creation_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Stream::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Stream_descriptor_;
  metadata.reflection = Stream_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int StreamDescription::kIdFieldNumber;
const int StreamDescription::kNameFieldNumber;
#endif  // !_MSC_VER

StreamDescription::StreamDescription()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.StreamDescription)
}

void StreamDescription::InitAsDefaultInstance() {
}

StreamDescription::StreamDescription(const StreamDescription& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.StreamDescription)
}

void StreamDescription::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StreamDescription::~StreamDescription() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.StreamDescription)
  SharedDtor();
}

void StreamDescription::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void StreamDescription::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreamDescription::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StreamDescription_descriptor_;
}

const StreamDescription& StreamDescription::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_club_5fstream_2eproto();
  return *default_instance_;
}

StreamDescription* StreamDescription::default_instance_ = NULL;

StreamDescription* StreamDescription::New() const {
  return new StreamDescription;
}

void StreamDescription::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    id_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StreamDescription::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bgs.protocol.club.v1.StreamDescription)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 2;
      case 2: {
        if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // optional string name = 4;
      case 4: {
        if (tag == 34) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bgs.protocol.club.v1.StreamDescription)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bgs.protocol.club.v1.StreamDescription)
  return false;
#undef DO_
}

void StreamDescription::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bgs.protocol.club.v1.StreamDescription)
  // optional uint64 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->id(), output);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bgs.protocol.club.v1.StreamDescription)
}

::google::protobuf::uint8* StreamDescription::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.StreamDescription)
  // optional uint64 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->id(), target);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.StreamDescription)
  return target;
}

int StreamDescription::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StreamDescription::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StreamDescription* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StreamDescription*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StreamDescription::MergeFrom(const StreamDescription& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StreamDescription::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamDescription::CopyFrom(const StreamDescription& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamDescription::IsInitialized() const {
  return true;
}

void StreamDescription::Swap(StreamDescription* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StreamDescription::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StreamDescription_descriptor_;
  metadata.reflection = StreamDescription_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int MentionContent::kAllFieldNumber;
const int MentionContent::kHereFieldNumber;
const int MentionContent::kMemberIdFieldNumber;
const int MentionContent::kRoleFieldNumber;
#endif  // !_MSC_VER

MentionContent::MentionContent()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.MentionContent)
}

void MentionContent::InitAsDefaultInstance() {
}

MentionContent::MentionContent(const MentionContent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.MentionContent)
}

void MentionContent::SharedCtor() {
  _cached_size_ = 0;
  all_ = false;
  here_ = false;
  _role_cached_byte_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MentionContent::~MentionContent() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.MentionContent)
  SharedDtor();
}

void MentionContent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MentionContent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MentionContent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MentionContent_descriptor_;
}

const MentionContent& MentionContent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_club_5fstream_2eproto();
  return *default_instance_;
}

MentionContent* MentionContent::default_instance_ = NULL;

MentionContent* MentionContent::New() const {
  return new MentionContent;
}

void MentionContent::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MentionContent*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(all_, here_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  member_id_.Clear();
  role_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MentionContent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bgs.protocol.club.v1.MentionContent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool all = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &all_)));
          set_has_all();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_here;
        break;
      }

      // optional bool here = 2;
      case 2: {
        if (tag == 16) {
         parse_here:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &here_)));
          set_has_here();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_member_id;
        break;
      }

      // repeated .bgs.protocol.club.v1.MemberId member_id = 3;
      case 3: {
        if (tag == 26) {
         parse_member_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_member_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_member_id;
        if (input->ExpectTag(34)) goto parse_role;
        break;
      }

      // repeated uint32 role = 4 [packed = true];
      case 4: {
        if (tag == 34) {
         parse_role:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_role())));
        } else if (tag == 32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 34, input, this->mutable_role())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bgs.protocol.club.v1.MentionContent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bgs.protocol.club.v1.MentionContent)
  return false;
#undef DO_
}

void MentionContent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bgs.protocol.club.v1.MentionContent)
  // optional bool all = 1;
  if (has_all()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->all(), output);
  }

  // optional bool here = 2;
  if (has_here()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->here(), output);
  }

  // repeated .bgs.protocol.club.v1.MemberId member_id = 3;
  for (int i = 0; i < this->member_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->member_id(i), output);
  }

  // repeated uint32 role = 4 [packed = true];
  if (this->role_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_role_cached_byte_size_);
  }
  for (int i = 0; i < this->role_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->role(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bgs.protocol.club.v1.MentionContent)
}

::google::protobuf::uint8* MentionContent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.MentionContent)
  // optional bool all = 1;
  if (has_all()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->all(), target);
  }

  // optional bool here = 2;
  if (has_here()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->here(), target);
  }

  // repeated .bgs.protocol.club.v1.MemberId member_id = 3;
  for (int i = 0; i < this->member_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->member_id(i), target);
  }

  // repeated uint32 role = 4 [packed = true];
  if (this->role_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _role_cached_byte_size_, target);
  }
  for (int i = 0; i < this->role_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->role(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.MentionContent)
  return target;
}

int MentionContent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool all = 1;
    if (has_all()) {
      total_size += 1 + 1;
    }

    // optional bool here = 2;
    if (has_here()) {
      total_size += 1 + 1;
    }

  }
  // repeated .bgs.protocol.club.v1.MemberId member_id = 3;
  total_size += 1 * this->member_id_size();
  for (int i = 0; i < this->member_id_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->member_id(i));
  }

  // repeated uint32 role = 4 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->role_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->role(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _role_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MentionContent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MentionContent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MentionContent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MentionContent::MergeFrom(const MentionContent& from) {
  GOOGLE_CHECK_NE(&from, this);
  member_id_.MergeFrom(from.member_id_);
  role_.MergeFrom(from.role_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_all()) {
      set_all(from.all());
    }
    if (from.has_here()) {
      set_here(from.here());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MentionContent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MentionContent::CopyFrom(const MentionContent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MentionContent::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->member_id())) return false;
  return true;
}

void MentionContent::Swap(MentionContent* other) {
  if (other != this) {
    std::swap(all_, other->all_);
    std::swap(here_, other->here_);
    member_id_.Swap(&other->member_id_);
    role_.Swap(&other->role_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MentionContent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MentionContent_descriptor_;
  metadata.reflection = MentionContent_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int CreateMessageOptions::kContentFieldNumber;
const int CreateMessageOptions::kMentionFieldNumber;
#endif  // !_MSC_VER

CreateMessageOptions::CreateMessageOptions()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.CreateMessageOptions)
}

void CreateMessageOptions::InitAsDefaultInstance() {
  mention_ = const_cast< ::bgs::protocol::club::v1::MentionContent*>(&::bgs::protocol::club::v1::MentionContent::default_instance());
}

CreateMessageOptions::CreateMessageOptions(const CreateMessageOptions& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.CreateMessageOptions)
}

void CreateMessageOptions::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mention_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateMessageOptions::~CreateMessageOptions() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.CreateMessageOptions)
  SharedDtor();
}

void CreateMessageOptions::SharedDtor() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (this != default_instance_) {
    delete mention_;
  }
}

void CreateMessageOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateMessageOptions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateMessageOptions_descriptor_;
}

const CreateMessageOptions& CreateMessageOptions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_club_5fstream_2eproto();
  return *default_instance_;
}

CreateMessageOptions* CreateMessageOptions::default_instance_ = NULL;

CreateMessageOptions* CreateMessageOptions::New() const {
  return new CreateMessageOptions;
}

void CreateMessageOptions::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        content_->clear();
      }
    }
    if (has_mention()) {
      if (mention_ != NULL) mention_->::bgs::protocol::club::v1::MentionContent::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateMessageOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bgs.protocol.club.v1.CreateMessageOptions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string content = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "content");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_mention;
        break;
      }

      // optional .bgs.protocol.club.v1.MentionContent mention = 3;
      case 3: {
        if (tag == 26) {
         parse_mention:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mention()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bgs.protocol.club.v1.CreateMessageOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bgs.protocol.club.v1.CreateMessageOptions)
  return false;
#undef DO_
}

void CreateMessageOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bgs.protocol.club.v1.CreateMessageOptions)
  // optional string content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->content(), output);
  }

  // optional .bgs.protocol.club.v1.MentionContent mention = 3;
  if (has_mention()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->mention(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bgs.protocol.club.v1.CreateMessageOptions)
}

::google::protobuf::uint8* CreateMessageOptions::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.CreateMessageOptions)
  // optional string content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->content(), target);
  }

  // optional .bgs.protocol.club.v1.MentionContent mention = 3;
  if (has_mention()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->mention(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.CreateMessageOptions)
  return target;
}

int CreateMessageOptions::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string content = 2;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional .bgs.protocol.club.v1.MentionContent mention = 3;
    if (has_mention()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mention());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateMessageOptions::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateMessageOptions* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateMessageOptions*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateMessageOptions::MergeFrom(const CreateMessageOptions& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_mention()) {
      mutable_mention()->::bgs::protocol::club::v1::MentionContent::MergeFrom(from.mention());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateMessageOptions::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateMessageOptions::CopyFrom(const CreateMessageOptions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateMessageOptions::IsInitialized() const {
  if (has_mention()) {
    if (!this->mention().IsInitialized()) return false;
  }
  return true;
}

void CreateMessageOptions::Swap(CreateMessageOptions* other) {
  if (other != this) {
    std::swap(content_, other->content_);
    std::swap(mention_, other->mention_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateMessageOptions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateMessageOptions_descriptor_;
  metadata.reflection = CreateMessageOptions_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int ClubStreamMessageContainer::kMessageFieldNumber;
#endif  // !_MSC_VER

ClubStreamMessageContainer::ClubStreamMessageContainer()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.ClubStreamMessageContainer)
}

void ClubStreamMessageContainer::InitAsDefaultInstance() {
}

ClubStreamMessageContainer::ClubStreamMessageContainer(const ClubStreamMessageContainer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.ClubStreamMessageContainer)
}

void ClubStreamMessageContainer::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClubStreamMessageContainer::~ClubStreamMessageContainer() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.ClubStreamMessageContainer)
  SharedDtor();
}

void ClubStreamMessageContainer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClubStreamMessageContainer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClubStreamMessageContainer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClubStreamMessageContainer_descriptor_;
}

const ClubStreamMessageContainer& ClubStreamMessageContainer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_club_5fstream_2eproto();
  return *default_instance_;
}

ClubStreamMessageContainer* ClubStreamMessageContainer::default_instance_ = NULL;

ClubStreamMessageContainer* ClubStreamMessageContainer::New() const {
  return new ClubStreamMessageContainer;
}

void ClubStreamMessageContainer::Clear() {
  message_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClubStreamMessageContainer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bgs.protocol.club.v1.ClubStreamMessageContainer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .bgs.protocol.club.v1.StreamMessage message = 1;
      case 1: {
        if (tag == 10) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_message()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_message;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bgs.protocol.club.v1.ClubStreamMessageContainer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bgs.protocol.club.v1.ClubStreamMessageContainer)
  return false;
#undef DO_
}

void ClubStreamMessageContainer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bgs.protocol.club.v1.ClubStreamMessageContainer)
  // repeated .bgs.protocol.club.v1.StreamMessage message = 1;
  for (int i = 0; i < this->message_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->message(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bgs.protocol.club.v1.ClubStreamMessageContainer)
}

::google::protobuf::uint8* ClubStreamMessageContainer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.ClubStreamMessageContainer)
  // repeated .bgs.protocol.club.v1.StreamMessage message = 1;
  for (int i = 0; i < this->message_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->message(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.ClubStreamMessageContainer)
  return target;
}

int ClubStreamMessageContainer::ByteSize() const {
  int total_size = 0;

  // repeated .bgs.protocol.club.v1.StreamMessage message = 1;
  total_size += 1 * this->message_size();
  for (int i = 0; i < this->message_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->message(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClubStreamMessageContainer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClubStreamMessageContainer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClubStreamMessageContainer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClubStreamMessageContainer::MergeFrom(const ClubStreamMessageContainer& from) {
  GOOGLE_CHECK_NE(&from, this);
  message_.MergeFrom(from.message_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClubStreamMessageContainer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClubStreamMessageContainer::CopyFrom(const ClubStreamMessageContainer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClubStreamMessageContainer::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->message())) return false;
  return true;
}

void ClubStreamMessageContainer::Swap(ClubStreamMessageContainer* other) {
  if (other != this) {
    message_.Swap(&other->message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClubStreamMessageContainer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClubStreamMessageContainer_descriptor_;
  metadata.reflection = ClubStreamMessageContainer_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int ContentChain::kContentFieldNumber;
const int ContentChain::kEmbedFieldNumber;
const int ContentChain::kMentionFieldNumber;
const int ContentChain::kEditTimeFieldNumber;
#endif  // !_MSC_VER

ContentChain::ContentChain()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.ContentChain)
}

void ContentChain::InitAsDefaultInstance() {
  mention_ = const_cast< ::bgs::protocol::club::v1::MentionContent*>(&::bgs::protocol::club::v1::MentionContent::default_instance());
}

ContentChain::ContentChain(const ContentChain& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.ContentChain)
}

void ContentChain::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mention_ = NULL;
  edit_time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContentChain::~ContentChain() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.ContentChain)
  SharedDtor();
}

void ContentChain::SharedDtor() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (this != default_instance_) {
    delete mention_;
  }
}

void ContentChain::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContentChain::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContentChain_descriptor_;
}

const ContentChain& ContentChain::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_club_5fstream_2eproto();
  return *default_instance_;
}

ContentChain* ContentChain::default_instance_ = NULL;

ContentChain* ContentChain::New() const {
  return new ContentChain;
}

void ContentChain::Clear() {
  if (_has_bits_[0 / 32] & 13) {
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        content_->clear();
      }
    }
    if (has_mention()) {
      if (mention_ != NULL) mention_->::bgs::protocol::club::v1::MentionContent::Clear();
    }
    edit_time_ = GOOGLE_ULONGLONG(0);
  }
  embed_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContentChain::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bgs.protocol.club.v1.ContentChain)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string content = 5;
      case 5: {
        if (tag == 42) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "content");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_embed;
        break;
      }

      // repeated .bgs.protocol.EmbedInfo embed = 6;
      case 6: {
        if (tag == 50) {
         parse_embed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_embed()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_embed;
        if (input->ExpectTag(58)) goto parse_mention;
        break;
      }

      // optional .bgs.protocol.club.v1.MentionContent mention = 7;
      case 7: {
        if (tag == 58) {
         parse_mention:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mention()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_edit_time;
        break;
      }

      // optional uint64 edit_time = 8;
      case 8: {
        if (tag == 64) {
         parse_edit_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &edit_time_)));
          set_has_edit_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bgs.protocol.club.v1.ContentChain)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bgs.protocol.club.v1.ContentChain)
  return false;
#undef DO_
}

void ContentChain::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bgs.protocol.club.v1.ContentChain)
  // optional string content = 5;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->content(), output);
  }

  // repeated .bgs.protocol.EmbedInfo embed = 6;
  for (int i = 0; i < this->embed_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->embed(i), output);
  }

  // optional .bgs.protocol.club.v1.MentionContent mention = 7;
  if (has_mention()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->mention(), output);
  }

  // optional uint64 edit_time = 8;
  if (has_edit_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->edit_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bgs.protocol.club.v1.ContentChain)
}

::google::protobuf::uint8* ContentChain::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.ContentChain)
  // optional string content = 5;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->content(), target);
  }

  // repeated .bgs.protocol.EmbedInfo embed = 6;
  for (int i = 0; i < this->embed_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->embed(i), target);
  }

  // optional .bgs.protocol.club.v1.MentionContent mention = 7;
  if (has_mention()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->mention(), target);
  }

  // optional uint64 edit_time = 8;
  if (has_edit_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->edit_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.ContentChain)
  return target;
}

int ContentChain::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string content = 5;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional .bgs.protocol.club.v1.MentionContent mention = 7;
    if (has_mention()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mention());
    }

    // optional uint64 edit_time = 8;
    if (has_edit_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->edit_time());
    }

  }
  // repeated .bgs.protocol.EmbedInfo embed = 6;
  total_size += 1 * this->embed_size();
  for (int i = 0; i < this->embed_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->embed(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContentChain::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContentChain* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContentChain*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContentChain::MergeFrom(const ContentChain& from) {
  GOOGLE_CHECK_NE(&from, this);
  embed_.MergeFrom(from.embed_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_mention()) {
      mutable_mention()->::bgs::protocol::club::v1::MentionContent::MergeFrom(from.mention());
    }
    if (from.has_edit_time()) {
      set_edit_time(from.edit_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContentChain::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContentChain::CopyFrom(const ContentChain& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContentChain::IsInitialized() const {
  if (has_mention()) {
    if (!this->mention().IsInitialized()) return false;
  }
  return true;
}

void ContentChain::Swap(ContentChain* other) {
  if (other != this) {
    std::swap(content_, other->content_);
    embed_.Swap(&other->embed_);
    std::swap(mention_, other->mention_);
    std::swap(edit_time_, other->edit_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContentChain::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContentChain_descriptor_;
  metadata.reflection = ContentChain_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int StreamMessage::kIdFieldNumber;
const int StreamMessage::kAuthorFieldNumber;
const int StreamMessage::kContentChainFieldNumber;
const int StreamMessage::kDestroyerFieldNumber;
const int StreamMessage::kDestroyedFieldNumber;
const int StreamMessage::kDestroyTimeFieldNumber;
#endif  // !_MSC_VER

StreamMessage::StreamMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.StreamMessage)
}

void StreamMessage::InitAsDefaultInstance() {
  id_ = const_cast< ::bgs::protocol::MessageId*>(&::bgs::protocol::MessageId::default_instance());
  author_ = const_cast< ::bgs::protocol::club::v1::MemberDescription*>(&::bgs::protocol::club::v1::MemberDescription::default_instance());
  destroyer_ = const_cast< ::bgs::protocol::club::v1::MemberDescription*>(&::bgs::protocol::club::v1::MemberDescription::default_instance());
}

StreamMessage::StreamMessage(const StreamMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.StreamMessage)
}

void StreamMessage::SharedCtor() {
  _cached_size_ = 0;
  id_ = NULL;
  author_ = NULL;
  destroyer_ = NULL;
  destroyed_ = false;
  destroy_time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StreamMessage::~StreamMessage() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.StreamMessage)
  SharedDtor();
}

void StreamMessage::SharedDtor() {
  if (this != default_instance_) {
    delete id_;
    delete author_;
    delete destroyer_;
  }
}

void StreamMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreamMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StreamMessage_descriptor_;
}

const StreamMessage& StreamMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_club_5fstream_2eproto();
  return *default_instance_;
}

StreamMessage* StreamMessage::default_instance_ = NULL;

StreamMessage* StreamMessage::New() const {
  return new StreamMessage;
}

void StreamMessage::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<StreamMessage*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 59) {
    ZR_(destroy_time_, destroyed_);
    if (has_id()) {
      if (id_ != NULL) id_->::bgs::protocol::MessageId::Clear();
    }
    if (has_author()) {
      if (author_ != NULL) author_->::bgs::protocol::club::v1::MemberDescription::Clear();
    }
    if (has_destroyer()) {
      if (destroyer_ != NULL) destroyer_->::bgs::protocol::club::v1::MemberDescription::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  content_chain_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StreamMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bgs.protocol.club.v1.StreamMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .bgs.protocol.MessageId id = 3;
      case 3: {
        if (tag == 26) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_author;
        break;
      }

      // optional .bgs.protocol.club.v1.MemberDescription author = 4;
      case 4: {
        if (tag == 34) {
         parse_author:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_author()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_content_chain;
        break;
      }

      // repeated .bgs.protocol.club.v1.ContentChain content_chain = 6;
      case 6: {
        if (tag == 50) {
         parse_content_chain:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_content_chain()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_content_chain;
        if (input->ExpectTag(122)) goto parse_destroyer;
        break;
      }

      // optional .bgs.protocol.club.v1.MemberDescription destroyer = 15;
      case 15: {
        if (tag == 122) {
         parse_destroyer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_destroyer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_destroyed;
        break;
      }

      // optional bool destroyed = 16;
      case 16: {
        if (tag == 128) {
         parse_destroyed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &destroyed_)));
          set_has_destroyed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_destroy_time;
        break;
      }

      // optional uint64 destroy_time = 17;
      case 17: {
        if (tag == 136) {
         parse_destroy_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &destroy_time_)));
          set_has_destroy_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bgs.protocol.club.v1.StreamMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bgs.protocol.club.v1.StreamMessage)
  return false;
#undef DO_
}

void StreamMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bgs.protocol.club.v1.StreamMessage)
  // optional .bgs.protocol.MessageId id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->id(), output);
  }

  // optional .bgs.protocol.club.v1.MemberDescription author = 4;
  if (has_author()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->author(), output);
  }

  // repeated .bgs.protocol.club.v1.ContentChain content_chain = 6;
  for (int i = 0; i < this->content_chain_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->content_chain(i), output);
  }

  // optional .bgs.protocol.club.v1.MemberDescription destroyer = 15;
  if (has_destroyer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->destroyer(), output);
  }

  // optional bool destroyed = 16;
  if (has_destroyed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->destroyed(), output);
  }

  // optional uint64 destroy_time = 17;
  if (has_destroy_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(17, this->destroy_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bgs.protocol.club.v1.StreamMessage)
}

::google::protobuf::uint8* StreamMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.StreamMessage)
  // optional .bgs.protocol.MessageId id = 3;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->id(), target);
  }

  // optional .bgs.protocol.club.v1.MemberDescription author = 4;
  if (has_author()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->author(), target);
  }

  // repeated .bgs.protocol.club.v1.ContentChain content_chain = 6;
  for (int i = 0; i < this->content_chain_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->content_chain(i), target);
  }

  // optional .bgs.protocol.club.v1.MemberDescription destroyer = 15;
  if (has_destroyer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->destroyer(), target);
  }

  // optional bool destroyed = 16;
  if (has_destroyed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->destroyed(), target);
  }

  // optional uint64 destroy_time = 17;
  if (has_destroy_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(17, this->destroy_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.StreamMessage)
  return target;
}

int StreamMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .bgs.protocol.MessageId id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->id());
    }

    // optional .bgs.protocol.club.v1.MemberDescription author = 4;
    if (has_author()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->author());
    }

    // optional .bgs.protocol.club.v1.MemberDescription destroyer = 15;
    if (has_destroyer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->destroyer());
    }

    // optional bool destroyed = 16;
    if (has_destroyed()) {
      total_size += 2 + 1;
    }

    // optional uint64 destroy_time = 17;
    if (has_destroy_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->destroy_time());
    }

  }
  // repeated .bgs.protocol.club.v1.ContentChain content_chain = 6;
  total_size += 1 * this->content_chain_size();
  for (int i = 0; i < this->content_chain_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->content_chain(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StreamMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StreamMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StreamMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StreamMessage::MergeFrom(const StreamMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  content_chain_.MergeFrom(from.content_chain_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      mutable_id()->::bgs::protocol::MessageId::MergeFrom(from.id());
    }
    if (from.has_author()) {
      mutable_author()->::bgs::protocol::club::v1::MemberDescription::MergeFrom(from.author());
    }
    if (from.has_destroyer()) {
      mutable_destroyer()->::bgs::protocol::club::v1::MemberDescription::MergeFrom(from.destroyer());
    }
    if (from.has_destroyed()) {
      set_destroyed(from.destroyed());
    }
    if (from.has_destroy_time()) {
      set_destroy_time(from.destroy_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StreamMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamMessage::CopyFrom(const StreamMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamMessage::IsInitialized() const {
  if (has_author()) {
    if (!this->author().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->content_chain())) return false;
  if (has_destroyer()) {
    if (!this->destroyer().IsInitialized()) return false;
  }
  return true;
}

void StreamMessage::Swap(StreamMessage* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(author_, other->author_);
    content_chain_.Swap(&other->content_chain_);
    std::swap(destroyer_, other->destroyer_);
    std::swap(destroyed_, other->destroyed_);
    std::swap(destroy_time_, other->destroy_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StreamMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StreamMessage_descriptor_;
  metadata.reflection = StreamMessage_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int StreamMention::kClubIdFieldNumber;
const int StreamMention::kStreamIdFieldNumber;
const int StreamMention::kMessageIdFieldNumber;
const int StreamMention::kAuthorFieldNumber;
const int StreamMention::kDestroyedFieldNumber;
const int StreamMention::kMentionIdFieldNumber;
const int StreamMention::kMemberIdFieldNumber;
const int StreamMention::kMessageFieldNumber;
#endif  // !_MSC_VER

StreamMention::StreamMention()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.StreamMention)
}

void StreamMention::InitAsDefaultInstance() {
  message_id_ = const_cast< ::bgs::protocol::MessageId*>(&::bgs::protocol::MessageId::default_instance());
  author_ = const_cast< ::bgs::protocol::club::v1::MemberDescription*>(&::bgs::protocol::club::v1::MemberDescription::default_instance());
  mention_id_ = const_cast< ::bgs::protocol::TimeSeriesId*>(&::bgs::protocol::TimeSeriesId::default_instance());
  member_id_ = const_cast< ::bgs::protocol::club::v1::MemberId*>(&::bgs::protocol::club::v1::MemberId::default_instance());
  message_ = const_cast< ::bgs::protocol::club::v1::StreamMessage*>(&::bgs::protocol::club::v1::StreamMessage::default_instance());
}

StreamMention::StreamMention(const StreamMention& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.StreamMention)
}

void StreamMention::SharedCtor() {
  _cached_size_ = 0;
  club_id_ = GOOGLE_ULONGLONG(0);
  stream_id_ = GOOGLE_ULONGLONG(0);
  message_id_ = NULL;
  author_ = NULL;
  destroyed_ = false;
  mention_id_ = NULL;
  member_id_ = NULL;
  message_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StreamMention::~StreamMention() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.StreamMention)
  SharedDtor();
}

void StreamMention::SharedDtor() {
  if (this != default_instance_) {
    delete message_id_;
    delete author_;
    delete mention_id_;
    delete member_id_;
    delete message_;
  }
}

void StreamMention::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreamMention::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StreamMention_descriptor_;
}

const StreamMention& StreamMention::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_club_5fstream_2eproto();
  return *default_instance_;
}

StreamMention* StreamMention::default_instance_ = NULL;

StreamMention* StreamMention::New() const {
  return new StreamMention;
}

void StreamMention::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<StreamMention*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(club_id_, stream_id_);
    if (has_message_id()) {
      if (message_id_ != NULL) message_id_->::bgs::protocol::MessageId::Clear();
    }
    if (has_author()) {
      if (author_ != NULL) author_->::bgs::protocol::club::v1::MemberDescription::Clear();
    }
    destroyed_ = false;
    if (has_mention_id()) {
      if (mention_id_ != NULL) mention_id_->::bgs::protocol::TimeSeriesId::Clear();
    }
    if (has_member_id()) {
      if (member_id_ != NULL) member_id_->::bgs::protocol::club::v1::MemberId::Clear();
    }
    if (has_message()) {
      if (message_ != NULL) message_->::bgs::protocol::club::v1::StreamMessage::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StreamMention::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bgs.protocol.club.v1.StreamMention)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 club_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &club_id_)));
          set_has_club_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_stream_id;
        break;
      }

      // optional uint64 stream_id = 2;
      case 2: {
        if (tag == 16) {
         parse_stream_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &stream_id_)));
          set_has_stream_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_message_id;
        break;
      }

      // optional .bgs.protocol.MessageId message_id = 3;
      case 3: {
        if (tag == 26) {
         parse_message_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_message_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_author;
        break;
      }

      // optional .bgs.protocol.club.v1.MemberDescription author = 4;
      case 4: {
        if (tag == 34) {
         parse_author:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_author()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_destroyed;
        break;
      }

      // optional bool destroyed = 5;
      case 5: {
        if (tag == 40) {
         parse_destroyed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &destroyed_)));
          set_has_destroyed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_mention_id;
        break;
      }

      // optional .bgs.protocol.TimeSeriesId mention_id = 6;
      case 6: {
        if (tag == 50) {
         parse_mention_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mention_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_member_id;
        break;
      }

      // optional .bgs.protocol.club.v1.MemberId member_id = 7;
      case 7: {
        if (tag == 58) {
         parse_member_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_member_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_message;
        break;
      }

      // optional .bgs.protocol.club.v1.StreamMessage message = 8;
      case 8: {
        if (tag == 66) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_message()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bgs.protocol.club.v1.StreamMention)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bgs.protocol.club.v1.StreamMention)
  return false;
#undef DO_
}

void StreamMention::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bgs.protocol.club.v1.StreamMention)
  // optional uint64 club_id = 1;
  if (has_club_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->club_id(), output);
  }

  // optional uint64 stream_id = 2;
  if (has_stream_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->stream_id(), output);
  }

  // optional .bgs.protocol.MessageId message_id = 3;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->message_id(), output);
  }

  // optional .bgs.protocol.club.v1.MemberDescription author = 4;
  if (has_author()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->author(), output);
  }

  // optional bool destroyed = 5;
  if (has_destroyed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->destroyed(), output);
  }

  // optional .bgs.protocol.TimeSeriesId mention_id = 6;
  if (has_mention_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->mention_id(), output);
  }

  // optional .bgs.protocol.club.v1.MemberId member_id = 7;
  if (has_member_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->member_id(), output);
  }

  // optional .bgs.protocol.club.v1.StreamMessage message = 8;
  if (has_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->message(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bgs.protocol.club.v1.StreamMention)
}

::google::protobuf::uint8* StreamMention::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.StreamMention)
  // optional uint64 club_id = 1;
  if (has_club_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->club_id(), target);
  }

  // optional uint64 stream_id = 2;
  if (has_stream_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->stream_id(), target);
  }

  // optional .bgs.protocol.MessageId message_id = 3;
  if (has_message_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->message_id(), target);
  }

  // optional .bgs.protocol.club.v1.MemberDescription author = 4;
  if (has_author()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->author(), target);
  }

  // optional bool destroyed = 5;
  if (has_destroyed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->destroyed(), target);
  }

  // optional .bgs.protocol.TimeSeriesId mention_id = 6;
  if (has_mention_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->mention_id(), target);
  }

  // optional .bgs.protocol.club.v1.MemberId member_id = 7;
  if (has_member_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->member_id(), target);
  }

  // optional .bgs.protocol.club.v1.StreamMessage message = 8;
  if (has_message()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->message(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.StreamMention)
  return target;
}

int StreamMention::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 club_id = 1;
    if (has_club_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->club_id());
    }

    // optional uint64 stream_id = 2;
    if (has_stream_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->stream_id());
    }

    // optional .bgs.protocol.MessageId message_id = 3;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->message_id());
    }

    // optional .bgs.protocol.club.v1.MemberDescription author = 4;
    if (has_author()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->author());
    }

    // optional bool destroyed = 5;
    if (has_destroyed()) {
      total_size += 1 + 1;
    }

    // optional .bgs.protocol.TimeSeriesId mention_id = 6;
    if (has_mention_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mention_id());
    }

    // optional .bgs.protocol.club.v1.MemberId member_id = 7;
    if (has_member_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->member_id());
    }

    // optional .bgs.protocol.club.v1.StreamMessage message = 8;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->message());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StreamMention::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StreamMention* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StreamMention*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StreamMention::MergeFrom(const StreamMention& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_club_id()) {
      set_club_id(from.club_id());
    }
    if (from.has_stream_id()) {
      set_stream_id(from.stream_id());
    }
    if (from.has_message_id()) {
      mutable_message_id()->::bgs::protocol::MessageId::MergeFrom(from.message_id());
    }
    if (from.has_author()) {
      mutable_author()->::bgs::protocol::club::v1::MemberDescription::MergeFrom(from.author());
    }
    if (from.has_destroyed()) {
      set_destroyed(from.destroyed());
    }
    if (from.has_mention_id()) {
      mutable_mention_id()->::bgs::protocol::TimeSeriesId::MergeFrom(from.mention_id());
    }
    if (from.has_member_id()) {
      mutable_member_id()->::bgs::protocol::club::v1::MemberId::MergeFrom(from.member_id());
    }
    if (from.has_message()) {
      mutable_message()->::bgs::protocol::club::v1::StreamMessage::MergeFrom(from.message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StreamMention::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamMention::CopyFrom(const StreamMention& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamMention::IsInitialized() const {
  if (has_author()) {
    if (!this->author().IsInitialized()) return false;
  }
  if (has_member_id()) {
    if (!this->member_id().IsInitialized()) return false;
  }
  if (has_message()) {
    if (!this->message().IsInitialized()) return false;
  }
  return true;
}

void StreamMention::Swap(StreamMention* other) {
  if (other != this) {
    std::swap(club_id_, other->club_id_);
    std::swap(stream_id_, other->stream_id_);
    std::swap(message_id_, other->message_id_);
    std::swap(author_, other->author_);
    std::swap(destroyed_, other->destroyed_);
    std::swap(mention_id_, other->mention_id_);
    std::swap(member_id_, other->member_id_);
    std::swap(message_, other->message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StreamMention::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StreamMention_descriptor_;
  metadata.reflection = StreamMention_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int StreamView::kClubIdFieldNumber;
const int StreamView::kStreamIdFieldNumber;
const int StreamView::kMarkerFieldNumber;
#endif  // !_MSC_VER

StreamView::StreamView()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.StreamView)
}

void StreamView::InitAsDefaultInstance() {
  marker_ = const_cast< ::bgs::protocol::ViewMarker*>(&::bgs::protocol::ViewMarker::default_instance());
}

StreamView::StreamView(const StreamView& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.StreamView)
}

void StreamView::SharedCtor() {
  _cached_size_ = 0;
  club_id_ = GOOGLE_ULONGLONG(0);
  stream_id_ = GOOGLE_ULONGLONG(0);
  marker_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StreamView::~StreamView() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.StreamView)
  SharedDtor();
}

void StreamView::SharedDtor() {
  if (this != default_instance_) {
    delete marker_;
  }
}

void StreamView::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreamView::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StreamView_descriptor_;
}

const StreamView& StreamView::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_club_5fstream_2eproto();
  return *default_instance_;
}

StreamView* StreamView::default_instance_ = NULL;

StreamView* StreamView::New() const {
  return new StreamView;
}

void StreamView::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<StreamView*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(club_id_, stream_id_);
    if (has_marker()) {
      if (marker_ != NULL) marker_->::bgs::protocol::ViewMarker::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StreamView::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bgs.protocol.club.v1.StreamView)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 club_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &club_id_)));
          set_has_club_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_stream_id;
        break;
      }

      // optional uint64 stream_id = 2;
      case 2: {
        if (tag == 16) {
         parse_stream_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &stream_id_)));
          set_has_stream_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_marker;
        break;
      }

      // optional .bgs.protocol.ViewMarker marker = 3;
      case 3: {
        if (tag == 26) {
         parse_marker:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_marker()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bgs.protocol.club.v1.StreamView)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bgs.protocol.club.v1.StreamView)
  return false;
#undef DO_
}

void StreamView::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bgs.protocol.club.v1.StreamView)
  // optional uint64 club_id = 1;
  if (has_club_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->club_id(), output);
  }

  // optional uint64 stream_id = 2;
  if (has_stream_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->stream_id(), output);
  }

  // optional .bgs.protocol.ViewMarker marker = 3;
  if (has_marker()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->marker(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bgs.protocol.club.v1.StreamView)
}

::google::protobuf::uint8* StreamView::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.StreamView)
  // optional uint64 club_id = 1;
  if (has_club_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->club_id(), target);
  }

  // optional uint64 stream_id = 2;
  if (has_stream_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->stream_id(), target);
  }

  // optional .bgs.protocol.ViewMarker marker = 3;
  if (has_marker()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->marker(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.StreamView)
  return target;
}

int StreamView::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 club_id = 1;
    if (has_club_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->club_id());
    }

    // optional uint64 stream_id = 2;
    if (has_stream_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->stream_id());
    }

    // optional .bgs.protocol.ViewMarker marker = 3;
    if (has_marker()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->marker());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StreamView::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StreamView* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StreamView*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StreamView::MergeFrom(const StreamView& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_club_id()) {
      set_club_id(from.club_id());
    }
    if (from.has_stream_id()) {
      set_stream_id(from.stream_id());
    }
    if (from.has_marker()) {
      mutable_marker()->::bgs::protocol::ViewMarker::MergeFrom(from.marker());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StreamView::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamView::CopyFrom(const StreamView& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamView::IsInitialized() const {
  return true;
}

void StreamView::Swap(StreamView* other) {
  if (other != this) {
    std::swap(club_id_, other->club_id_);
    std::swap(stream_id_, other->stream_id_);
    std::swap(marker_, other->marker_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StreamView::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StreamView_descriptor_;
  metadata.reflection = StreamView_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int StreamAdvanceViewTime::kStreamIdFieldNumber;
const int StreamAdvanceViewTime::kViewTimeFieldNumber;
#endif  // !_MSC_VER

StreamAdvanceViewTime::StreamAdvanceViewTime()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.StreamAdvanceViewTime)
}

void StreamAdvanceViewTime::InitAsDefaultInstance() {
}

StreamAdvanceViewTime::StreamAdvanceViewTime(const StreamAdvanceViewTime& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.StreamAdvanceViewTime)
}

void StreamAdvanceViewTime::SharedCtor() {
  _cached_size_ = 0;
  stream_id_ = GOOGLE_ULONGLONG(0);
  view_time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StreamAdvanceViewTime::~StreamAdvanceViewTime() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.StreamAdvanceViewTime)
  SharedDtor();
}

void StreamAdvanceViewTime::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StreamAdvanceViewTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreamAdvanceViewTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StreamAdvanceViewTime_descriptor_;
}

const StreamAdvanceViewTime& StreamAdvanceViewTime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_club_5fstream_2eproto();
  return *default_instance_;
}

StreamAdvanceViewTime* StreamAdvanceViewTime::default_instance_ = NULL;

StreamAdvanceViewTime* StreamAdvanceViewTime::New() const {
  return new StreamAdvanceViewTime;
}

void StreamAdvanceViewTime::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<StreamAdvanceViewTime*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(stream_id_, view_time_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StreamAdvanceViewTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bgs.protocol.club.v1.StreamAdvanceViewTime)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 stream_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &stream_id_)));
          set_has_stream_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_view_time;
        break;
      }

      // optional uint64 view_time = 2;
      case 2: {
        if (tag == 16) {
         parse_view_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &view_time_)));
          set_has_view_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bgs.protocol.club.v1.StreamAdvanceViewTime)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bgs.protocol.club.v1.StreamAdvanceViewTime)
  return false;
#undef DO_
}

void StreamAdvanceViewTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bgs.protocol.club.v1.StreamAdvanceViewTime)
  // optional uint64 stream_id = 1;
  if (has_stream_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->stream_id(), output);
  }

  // optional uint64 view_time = 2;
  if (has_view_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->view_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bgs.protocol.club.v1.StreamAdvanceViewTime)
}

::google::protobuf::uint8* StreamAdvanceViewTime::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.StreamAdvanceViewTime)
  // optional uint64 stream_id = 1;
  if (has_stream_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->stream_id(), target);
  }

  // optional uint64 view_time = 2;
  if (has_view_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->view_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.StreamAdvanceViewTime)
  return target;
}

int StreamAdvanceViewTime::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 stream_id = 1;
    if (has_stream_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->stream_id());
    }

    // optional uint64 view_time = 2;
    if (has_view_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->view_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StreamAdvanceViewTime::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StreamAdvanceViewTime* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StreamAdvanceViewTime*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StreamAdvanceViewTime::MergeFrom(const StreamAdvanceViewTime& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stream_id()) {
      set_stream_id(from.stream_id());
    }
    if (from.has_view_time()) {
      set_view_time(from.view_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StreamAdvanceViewTime::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamAdvanceViewTime::CopyFrom(const StreamAdvanceViewTime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamAdvanceViewTime::IsInitialized() const {
  return true;
}

void StreamAdvanceViewTime::Swap(StreamAdvanceViewTime* other) {
  if (other != this) {
    std::swap(stream_id_, other->stream_id_);
    std::swap(view_time_, other->view_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StreamAdvanceViewTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StreamAdvanceViewTime_descriptor_;
  metadata.reflection = StreamAdvanceViewTime_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int StreamEventTime::kStreamIdFieldNumber;
const int StreamEventTime::kEventTimeFieldNumber;
#endif  // !_MSC_VER

StreamEventTime::StreamEventTime()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.StreamEventTime)
}

void StreamEventTime::InitAsDefaultInstance() {
}

StreamEventTime::StreamEventTime(const StreamEventTime& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.StreamEventTime)
}

void StreamEventTime::SharedCtor() {
  _cached_size_ = 0;
  stream_id_ = GOOGLE_ULONGLONG(0);
  event_time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StreamEventTime::~StreamEventTime() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.StreamEventTime)
  SharedDtor();
}

void StreamEventTime::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StreamEventTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreamEventTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StreamEventTime_descriptor_;
}

const StreamEventTime& StreamEventTime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_club_5fstream_2eproto();
  return *default_instance_;
}

StreamEventTime* StreamEventTime::default_instance_ = NULL;

StreamEventTime* StreamEventTime::New() const {
  return new StreamEventTime;
}

void StreamEventTime::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<StreamEventTime*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(stream_id_, event_time_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StreamEventTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bgs.protocol.club.v1.StreamEventTime)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 stream_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &stream_id_)));
          set_has_stream_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_event_time;
        break;
      }

      // optional uint64 event_time = 2;
      case 2: {
        if (tag == 16) {
         parse_event_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &event_time_)));
          set_has_event_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bgs.protocol.club.v1.StreamEventTime)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bgs.protocol.club.v1.StreamEventTime)
  return false;
#undef DO_
}

void StreamEventTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bgs.protocol.club.v1.StreamEventTime)
  // optional uint64 stream_id = 1;
  if (has_stream_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->stream_id(), output);
  }

  // optional uint64 event_time = 2;
  if (has_event_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->event_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bgs.protocol.club.v1.StreamEventTime)
}

::google::protobuf::uint8* StreamEventTime::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.StreamEventTime)
  // optional uint64 stream_id = 1;
  if (has_stream_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->stream_id(), target);
  }

  // optional uint64 event_time = 2;
  if (has_event_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->event_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.StreamEventTime)
  return target;
}

int StreamEventTime::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 stream_id = 1;
    if (has_stream_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->stream_id());
    }

    // optional uint64 event_time = 2;
    if (has_event_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->event_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StreamEventTime::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StreamEventTime* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StreamEventTime*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StreamEventTime::MergeFrom(const StreamEventTime& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stream_id()) {
      set_stream_id(from.stream_id());
    }
    if (from.has_event_time()) {
      set_event_time(from.event_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StreamEventTime::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamEventTime::CopyFrom(const StreamEventTime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamEventTime::IsInitialized() const {
  return true;
}

void StreamEventTime::Swap(StreamEventTime* other) {
  if (other != this) {
    std::swap(stream_id_, other->stream_id_);
    std::swap(event_time_, other->event_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StreamEventTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StreamEventTime_descriptor_;
  metadata.reflection = StreamEventTime_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int StreamMentionView::kClubIdFieldNumber;
const int StreamMentionView::kStreamIdFieldNumber;
const int StreamMentionView::kMarkerFieldNumber;
#endif  // !_MSC_VER

StreamMentionView::StreamMentionView()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.StreamMentionView)
}

void StreamMentionView::InitAsDefaultInstance() {
  marker_ = const_cast< ::bgs::protocol::ViewMarker*>(&::bgs::protocol::ViewMarker::default_instance());
}

StreamMentionView::StreamMentionView(const StreamMentionView& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.StreamMentionView)
}

void StreamMentionView::SharedCtor() {
  _cached_size_ = 0;
  club_id_ = GOOGLE_ULONGLONG(0);
  stream_id_ = GOOGLE_ULONGLONG(0);
  marker_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StreamMentionView::~StreamMentionView() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.StreamMentionView)
  SharedDtor();
}

void StreamMentionView::SharedDtor() {
  if (this != default_instance_) {
    delete marker_;
  }
}

void StreamMentionView::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreamMentionView::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StreamMentionView_descriptor_;
}

const StreamMentionView& StreamMentionView::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_club_5fstream_2eproto();
  return *default_instance_;
}

StreamMentionView* StreamMentionView::default_instance_ = NULL;

StreamMentionView* StreamMentionView::New() const {
  return new StreamMentionView;
}

void StreamMentionView::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<StreamMentionView*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(club_id_, stream_id_);
    if (has_marker()) {
      if (marker_ != NULL) marker_->::bgs::protocol::ViewMarker::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StreamMentionView::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bgs.protocol.club.v1.StreamMentionView)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 club_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &club_id_)));
          set_has_club_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_stream_id;
        break;
      }

      // optional uint64 stream_id = 2;
      case 2: {
        if (tag == 16) {
         parse_stream_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &stream_id_)));
          set_has_stream_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_marker;
        break;
      }

      // optional .bgs.protocol.ViewMarker marker = 3;
      case 3: {
        if (tag == 26) {
         parse_marker:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_marker()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bgs.protocol.club.v1.StreamMentionView)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bgs.protocol.club.v1.StreamMentionView)
  return false;
#undef DO_
}

void StreamMentionView::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bgs.protocol.club.v1.StreamMentionView)
  // optional uint64 club_id = 1;
  if (has_club_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->club_id(), output);
  }

  // optional uint64 stream_id = 2;
  if (has_stream_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->stream_id(), output);
  }

  // optional .bgs.protocol.ViewMarker marker = 3;
  if (has_marker()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->marker(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bgs.protocol.club.v1.StreamMentionView)
}

::google::protobuf::uint8* StreamMentionView::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.StreamMentionView)
  // optional uint64 club_id = 1;
  if (has_club_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->club_id(), target);
  }

  // optional uint64 stream_id = 2;
  if (has_stream_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->stream_id(), target);
  }

  // optional .bgs.protocol.ViewMarker marker = 3;
  if (has_marker()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->marker(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.StreamMentionView)
  return target;
}

int StreamMentionView::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 club_id = 1;
    if (has_club_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->club_id());
    }

    // optional uint64 stream_id = 2;
    if (has_stream_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->stream_id());
    }

    // optional .bgs.protocol.ViewMarker marker = 3;
    if (has_marker()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->marker());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StreamMentionView::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StreamMentionView* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StreamMentionView*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StreamMentionView::MergeFrom(const StreamMentionView& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_club_id()) {
      set_club_id(from.club_id());
    }
    if (from.has_stream_id()) {
      set_stream_id(from.stream_id());
    }
    if (from.has_marker()) {
      mutable_marker()->::bgs::protocol::ViewMarker::MergeFrom(from.marker());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StreamMentionView::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamMentionView::CopyFrom(const StreamMentionView& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamMentionView::IsInitialized() const {
  return true;
}

void StreamMentionView::Swap(StreamMentionView* other) {
  if (other != this) {
    std::swap(club_id_, other->club_id_);
    std::swap(stream_id_, other->stream_id_);
    std::swap(marker_, other->marker_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StreamMentionView::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StreamMentionView_descriptor_;
  metadata.reflection = StreamMentionView_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int StreamStateOptions::kAttributeFieldNumber;
const int StreamStateOptions::kNameFieldNumber;
const int StreamStateOptions::kSubjectFieldNumber;
const int StreamStateOptions::kAccessFieldNumber;
const int StreamStateOptions::kVoiceLevelFieldNumber;
#endif  // !_MSC_VER

StreamStateOptions::StreamStateOptions()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.StreamStateOptions)
}

void StreamStateOptions::InitAsDefaultInstance() {
  access_ = const_cast< ::bgs::protocol::club::v1::StreamAccess*>(&::bgs::protocol::club::v1::StreamAccess::default_instance());
}

StreamStateOptions::StreamStateOptions(const StreamStateOptions& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.StreamStateOptions)
}

void StreamStateOptions::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  subject_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  access_ = NULL;
  voice_level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StreamStateOptions::~StreamStateOptions() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.StreamStateOptions)
  SharedDtor();
}

void StreamStateOptions::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (subject_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete subject_;
  }
  if (this != default_instance_) {
    delete access_;
  }
}

void StreamStateOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreamStateOptions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StreamStateOptions_descriptor_;
}

const StreamStateOptions& StreamStateOptions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_club_5fstream_2eproto();
  return *default_instance_;
}

StreamStateOptions* StreamStateOptions::default_instance_ = NULL;

StreamStateOptions* StreamStateOptions::New() const {
  return new StreamStateOptions;
}

void StreamStateOptions::Clear() {
  if (_has_bits_[0 / 32] & 30) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_subject()) {
      if (subject_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        subject_->clear();
      }
    }
    if (has_access()) {
      if (access_ != NULL) access_->::bgs::protocol::club::v1::StreamAccess::Clear();
    }
    voice_level_ = 0;
  }
  attribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StreamStateOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bgs.protocol.club.v1.StreamStateOptions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .bgs.protocol.v2.Attribute attribute = 1;
      case 1: {
        if (tag == 10) {
         parse_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attribute()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_attribute;
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_subject;
        break;
      }

      // optional string subject = 3;
      case 3: {
        if (tag == 26) {
         parse_subject:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subject()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->subject().data(), this->subject().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "subject");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_access;
        break;
      }

      // optional .bgs.protocol.club.v1.StreamAccess access = 4;
      case 4: {
        if (tag == 34) {
         parse_access:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_access()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_voice_level;
        break;
      }

      // optional .bgs.protocol.club.v1.StreamVoiceLevel voice_level = 5;
      case 5: {
        if (tag == 40) {
         parse_voice_level:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::bgs::protocol::club::v1::StreamVoiceLevel_IsValid(value)) {
            set_voice_level(static_cast< ::bgs::protocol::club::v1::StreamVoiceLevel >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bgs.protocol.club.v1.StreamStateOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bgs.protocol.club.v1.StreamStateOptions)
  return false;
#undef DO_
}

void StreamStateOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bgs.protocol.club.v1.StreamStateOptions)
  // repeated .bgs.protocol.v2.Attribute attribute = 1;
  for (int i = 0; i < this->attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->attribute(i), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional string subject = 3;
  if (has_subject()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->subject().data(), this->subject().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "subject");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->subject(), output);
  }

  // optional .bgs.protocol.club.v1.StreamAccess access = 4;
  if (has_access()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->access(), output);
  }

  // optional .bgs.protocol.club.v1.StreamVoiceLevel voice_level = 5;
  if (has_voice_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->voice_level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bgs.protocol.club.v1.StreamStateOptions)
}

::google::protobuf::uint8* StreamStateOptions::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.StreamStateOptions)
  // repeated .bgs.protocol.v2.Attribute attribute = 1;
  for (int i = 0; i < this->attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->attribute(i), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string subject = 3;
  if (has_subject()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->subject().data(), this->subject().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "subject");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->subject(), target);
  }

  // optional .bgs.protocol.club.v1.StreamAccess access = 4;
  if (has_access()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->access(), target);
  }

  // optional .bgs.protocol.club.v1.StreamVoiceLevel voice_level = 5;
  if (has_voice_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->voice_level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.StreamStateOptions)
  return target;
}

int StreamStateOptions::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string subject = 3;
    if (has_subject()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->subject());
    }

    // optional .bgs.protocol.club.v1.StreamAccess access = 4;
    if (has_access()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->access());
    }

    // optional .bgs.protocol.club.v1.StreamVoiceLevel voice_level = 5;
    if (has_voice_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->voice_level());
    }

  }
  // repeated .bgs.protocol.v2.Attribute attribute = 1;
  total_size += 1 * this->attribute_size();
  for (int i = 0; i < this->attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attribute(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StreamStateOptions::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StreamStateOptions* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StreamStateOptions*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StreamStateOptions::MergeFrom(const StreamStateOptions& from) {
  GOOGLE_CHECK_NE(&from, this);
  attribute_.MergeFrom(from.attribute_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_subject()) {
      set_subject(from.subject());
    }
    if (from.has_access()) {
      mutable_access()->::bgs::protocol::club::v1::StreamAccess::MergeFrom(from.access());
    }
    if (from.has_voice_level()) {
      set_voice_level(from.voice_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StreamStateOptions::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamStateOptions::CopyFrom(const StreamStateOptions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamStateOptions::IsInitialized() const {
  return true;
}

void StreamStateOptions::Swap(StreamStateOptions* other) {
  if (other != this) {
    attribute_.Swap(&other->attribute_);
    std::swap(name_, other->name_);
    std::swap(subject_, other->subject_);
    std::swap(access_, other->access_);
    std::swap(voice_level_, other->voice_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StreamStateOptions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StreamStateOptions_descriptor_;
  metadata.reflection = StreamStateOptions_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int StreamStateAssignment::kStreamIdFieldNumber;
const int StreamStateAssignment::kAttributeFieldNumber;
const int StreamStateAssignment::kNameFieldNumber;
const int StreamStateAssignment::kSubjectFieldNumber;
const int StreamStateAssignment::kAccessFieldNumber;
const int StreamStateAssignment::kStreamSubscriptionRemovedFieldNumber;
const int StreamStateAssignment::kVoiceLevelFieldNumber;
#endif  // !_MSC_VER

StreamStateAssignment::StreamStateAssignment()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.StreamStateAssignment)
}

void StreamStateAssignment::InitAsDefaultInstance() {
  access_ = const_cast< ::bgs::protocol::club::v1::StreamAccess*>(&::bgs::protocol::club::v1::StreamAccess::default_instance());
}

StreamStateAssignment::StreamStateAssignment(const StreamStateAssignment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.StreamStateAssignment)
}

void StreamStateAssignment::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  stream_id_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  subject_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  access_ = NULL;
  stream_subscription_removed_ = false;
  voice_level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StreamStateAssignment::~StreamStateAssignment() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.StreamStateAssignment)
  SharedDtor();
}

void StreamStateAssignment::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (subject_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete subject_;
  }
  if (this != default_instance_) {
    delete access_;
  }
}

void StreamStateAssignment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreamStateAssignment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StreamStateAssignment_descriptor_;
}

const StreamStateAssignment& StreamStateAssignment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_club_5fstream_2eproto();
  return *default_instance_;
}

StreamStateAssignment* StreamStateAssignment::default_instance_ = NULL;

StreamStateAssignment* StreamStateAssignment::New() const {
  return new StreamStateAssignment;
}

void StreamStateAssignment::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<StreamStateAssignment*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 125) {
    ZR_(stream_subscription_removed_, voice_level_);
    stream_id_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_subject()) {
      if (subject_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        subject_->clear();
      }
    }
    if (has_access()) {
      if (access_ != NULL) access_->::bgs::protocol::club::v1::StreamAccess::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  attribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StreamStateAssignment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bgs.protocol.club.v1.StreamStateAssignment)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 stream_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &stream_id_)));
          set_has_stream_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_attribute;
        break;
      }

      // repeated .bgs.protocol.v2.Attribute attribute = 2;
      case 2: {
        if (tag == 18) {
         parse_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attribute()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_attribute;
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_subject;
        break;
      }

      // optional string subject = 4;
      case 4: {
        if (tag == 34) {
         parse_subject:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subject()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->subject().data(), this->subject().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "subject");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_access;
        break;
      }

      // optional .bgs.protocol.club.v1.StreamAccess access = 5;
      case 5: {
        if (tag == 42) {
         parse_access:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_access()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_stream_subscription_removed;
        break;
      }

      // optional bool stream_subscription_removed = 6;
      case 6: {
        if (tag == 48) {
         parse_stream_subscription_removed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &stream_subscription_removed_)));
          set_has_stream_subscription_removed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_voice_level;
        break;
      }

      // optional .bgs.protocol.club.v1.StreamVoiceLevel voice_level = 7;
      case 7: {
        if (tag == 56) {
         parse_voice_level:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::bgs::protocol::club::v1::StreamVoiceLevel_IsValid(value)) {
            set_voice_level(static_cast< ::bgs::protocol::club::v1::StreamVoiceLevel >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bgs.protocol.club.v1.StreamStateAssignment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bgs.protocol.club.v1.StreamStateAssignment)
  return false;
#undef DO_
}

void StreamStateAssignment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bgs.protocol.club.v1.StreamStateAssignment)
  // optional uint64 stream_id = 1;
  if (has_stream_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->stream_id(), output);
  }

  // repeated .bgs.protocol.v2.Attribute attribute = 2;
  for (int i = 0; i < this->attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->attribute(i), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional string subject = 4;
  if (has_subject()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->subject().data(), this->subject().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "subject");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->subject(), output);
  }

  // optional .bgs.protocol.club.v1.StreamAccess access = 5;
  if (has_access()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->access(), output);
  }

  // optional bool stream_subscription_removed = 6;
  if (has_stream_subscription_removed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->stream_subscription_removed(), output);
  }

  // optional .bgs.protocol.club.v1.StreamVoiceLevel voice_level = 7;
  if (has_voice_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->voice_level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bgs.protocol.club.v1.StreamStateAssignment)
}

::google::protobuf::uint8* StreamStateAssignment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.StreamStateAssignment)
  // optional uint64 stream_id = 1;
  if (has_stream_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->stream_id(), target);
  }

  // repeated .bgs.protocol.v2.Attribute attribute = 2;
  for (int i = 0; i < this->attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->attribute(i), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional string subject = 4;
  if (has_subject()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->subject().data(), this->subject().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "subject");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->subject(), target);
  }

  // optional .bgs.protocol.club.v1.StreamAccess access = 5;
  if (has_access()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->access(), target);
  }

  // optional bool stream_subscription_removed = 6;
  if (has_stream_subscription_removed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->stream_subscription_removed(), target);
  }

  // optional .bgs.protocol.club.v1.StreamVoiceLevel voice_level = 7;
  if (has_voice_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->voice_level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.StreamStateAssignment)
  return target;
}

int StreamStateAssignment::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 stream_id = 1;
    if (has_stream_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->stream_id());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string subject = 4;
    if (has_subject()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->subject());
    }

    // optional .bgs.protocol.club.v1.StreamAccess access = 5;
    if (has_access()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->access());
    }

    // optional bool stream_subscription_removed = 6;
    if (has_stream_subscription_removed()) {
      total_size += 1 + 1;
    }

    // optional .bgs.protocol.club.v1.StreamVoiceLevel voice_level = 7;
    if (has_voice_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->voice_level());
    }

  }
  // repeated .bgs.protocol.v2.Attribute attribute = 2;
  total_size += 1 * this->attribute_size();
  for (int i = 0; i < this->attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attribute(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StreamStateAssignment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StreamStateAssignment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StreamStateAssignment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StreamStateAssignment::MergeFrom(const StreamStateAssignment& from) {
  GOOGLE_CHECK_NE(&from, this);
  attribute_.MergeFrom(from.attribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stream_id()) {
      set_stream_id(from.stream_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_subject()) {
      set_subject(from.subject());
    }
    if (from.has_access()) {
      mutable_access()->::bgs::protocol::club::v1::StreamAccess::MergeFrom(from.access());
    }
    if (from.has_stream_subscription_removed()) {
      set_stream_subscription_removed(from.stream_subscription_removed());
    }
    if (from.has_voice_level()) {
      set_voice_level(from.voice_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StreamStateAssignment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamStateAssignment::CopyFrom(const StreamStateAssignment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamStateAssignment::IsInitialized() const {
  return true;
}

void StreamStateAssignment::Swap(StreamStateAssignment* other) {
  if (other != this) {
    std::swap(stream_id_, other->stream_id_);
    attribute_.Swap(&other->attribute_);
    std::swap(name_, other->name_);
    std::swap(subject_, other->subject_);
    std::swap(access_, other->access_);
    std::swap(stream_subscription_removed_, other->stream_subscription_removed_);
    std::swap(voice_level_, other->voice_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StreamStateAssignment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StreamStateAssignment_descriptor_;
  metadata.reflection = StreamStateAssignment_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int StreamTypingIndicator::kAuthorIdFieldNumber;
const int StreamTypingIndicator::kIndicatorFieldNumber;
const int StreamTypingIndicator::kEpochFieldNumber;
#endif  // !_MSC_VER

StreamTypingIndicator::StreamTypingIndicator()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.StreamTypingIndicator)
}

void StreamTypingIndicator::InitAsDefaultInstance() {
  author_id_ = const_cast< ::bgs::protocol::club::v1::MemberId*>(&::bgs::protocol::club::v1::MemberId::default_instance());
}

StreamTypingIndicator::StreamTypingIndicator(const StreamTypingIndicator& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.StreamTypingIndicator)
}

void StreamTypingIndicator::SharedCtor() {
  _cached_size_ = 0;
  author_id_ = NULL;
  indicator_ = 0;
  epoch_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StreamTypingIndicator::~StreamTypingIndicator() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.StreamTypingIndicator)
  SharedDtor();
}

void StreamTypingIndicator::SharedDtor() {
  if (this != default_instance_) {
    delete author_id_;
  }
}

void StreamTypingIndicator::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreamTypingIndicator::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StreamTypingIndicator_descriptor_;
}

const StreamTypingIndicator& StreamTypingIndicator::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_club_5fstream_2eproto();
  return *default_instance_;
}

StreamTypingIndicator* StreamTypingIndicator::default_instance_ = NULL;

StreamTypingIndicator* StreamTypingIndicator::New() const {
  return new StreamTypingIndicator;
}

void StreamTypingIndicator::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<StreamTypingIndicator*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(epoch_, indicator_);
    if (has_author_id()) {
      if (author_id_ != NULL) author_id_->::bgs::protocol::club::v1::MemberId::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StreamTypingIndicator::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bgs.protocol.club.v1.StreamTypingIndicator)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .bgs.protocol.club.v1.MemberId author_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_author_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_indicator;
        break;
      }

      // optional .bgs.protocol.TypingIndicator indicator = 2;
      case 2: {
        if (tag == 16) {
         parse_indicator:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::bgs::protocol::TypingIndicator_IsValid(value)) {
            set_indicator(static_cast< ::bgs::protocol::TypingIndicator >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_epoch;
        break;
      }

      // optional uint64 epoch = 3;
      case 3: {
        if (tag == 24) {
         parse_epoch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &epoch_)));
          set_has_epoch();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bgs.protocol.club.v1.StreamTypingIndicator)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bgs.protocol.club.v1.StreamTypingIndicator)
  return false;
#undef DO_
}

void StreamTypingIndicator::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bgs.protocol.club.v1.StreamTypingIndicator)
  // optional .bgs.protocol.club.v1.MemberId author_id = 1;
  if (has_author_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->author_id(), output);
  }

  // optional .bgs.protocol.TypingIndicator indicator = 2;
  if (has_indicator()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->indicator(), output);
  }

  // optional uint64 epoch = 3;
  if (has_epoch()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->epoch(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bgs.protocol.club.v1.StreamTypingIndicator)
}

::google::protobuf::uint8* StreamTypingIndicator::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.StreamTypingIndicator)
  // optional .bgs.protocol.club.v1.MemberId author_id = 1;
  if (has_author_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->author_id(), target);
  }

  // optional .bgs.protocol.TypingIndicator indicator = 2;
  if (has_indicator()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->indicator(), target);
  }

  // optional uint64 epoch = 3;
  if (has_epoch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->epoch(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.StreamTypingIndicator)
  return target;
}

int StreamTypingIndicator::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .bgs.protocol.club.v1.MemberId author_id = 1;
    if (has_author_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->author_id());
    }

    // optional .bgs.protocol.TypingIndicator indicator = 2;
    if (has_indicator()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->indicator());
    }

    // optional uint64 epoch = 3;
    if (has_epoch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->epoch());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StreamTypingIndicator::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StreamTypingIndicator* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StreamTypingIndicator*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StreamTypingIndicator::MergeFrom(const StreamTypingIndicator& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_author_id()) {
      mutable_author_id()->::bgs::protocol::club::v1::MemberId::MergeFrom(from.author_id());
    }
    if (from.has_indicator()) {
      set_indicator(from.indicator());
    }
    if (from.has_epoch()) {
      set_epoch(from.epoch());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StreamTypingIndicator::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamTypingIndicator::CopyFrom(const StreamTypingIndicator& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamTypingIndicator::IsInitialized() const {
  if (has_author_id()) {
    if (!this->author_id().IsInitialized()) return false;
  }
  return true;
}

void StreamTypingIndicator::Swap(StreamTypingIndicator* other) {
  if (other != this) {
    std::swap(author_id_, other->author_id_);
    std::swap(indicator_, other->indicator_);
    std::swap(epoch_, other->epoch_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StreamTypingIndicator::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StreamTypingIndicator_descriptor_;
  metadata.reflection = StreamTypingIndicator_reflection_;
  return metadata;
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace club
}  // namespace protocol
}  // namespace bgs

// @@protoc_insertion_point(global_scope)
