// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: club_stream.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "club_stream.pb.h"

#include <utility>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace bgs {
namespace protocol {
namespace club {
namespace v1 {

namespace {

const ::google::protobuf::Descriptor* StreamPosition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StreamPosition_reflection_ = NULL;
const ::google::protobuf::Descriptor* StreamAccess_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StreamAccess_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateStreamOptions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateStreamOptions_reflection_ = NULL;
const ::google::protobuf::Descriptor* Stream_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Stream_reflection_ = NULL;
const ::google::protobuf::Descriptor* StreamDescription_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StreamDescription_reflection_ = NULL;
const ::google::protobuf::Descriptor* MentionContent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MentionContent_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateMessageOptions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateMessageOptions_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClubStreamMessageContainer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClubStreamMessageContainer_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContentChain_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContentChain_reflection_ = NULL;
const ::google::protobuf::Descriptor* StreamMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StreamMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* StreamMention_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StreamMention_reflection_ = NULL;
const ::google::protobuf::Descriptor* StreamView_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StreamView_reflection_ = NULL;
const ::google::protobuf::Descriptor* StreamAdvanceViewTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StreamAdvanceViewTime_reflection_ = NULL;
const ::google::protobuf::Descriptor* StreamEventTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StreamEventTime_reflection_ = NULL;
const ::google::protobuf::Descriptor* StreamMentionView_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StreamMentionView_reflection_ = NULL;
const ::google::protobuf::Descriptor* StreamStateOptions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StreamStateOptions_reflection_ = NULL;
const ::google::protobuf::Descriptor* StreamStateAssignment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StreamStateAssignment_reflection_ = NULL;
const ::google::protobuf::Descriptor* StreamTypingIndicator_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StreamTypingIndicator_reflection_ = NULL;

}  // namespace

void protobuf_AssignDesc_club_5fstream_2eproto() {
  protobuf_AddDesc_club_5fstream_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "club_stream.proto");
  GOOGLE_CHECK(file != NULL);
  StreamPosition_descriptor_ = file->message_type(0);
  static const int StreamPosition_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamPosition, stream_id_),
  };
  StreamPosition_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StreamPosition_descriptor_,
      StreamPosition::default_instance_,
      StreamPosition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamPosition, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamPosition, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StreamPosition));
  StreamAccess_descriptor_ = file->message_type(1);
  static const int StreamAccess_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamAccess, role_),
  };
  StreamAccess_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StreamAccess_descriptor_,
      StreamAccess::default_instance_,
      StreamAccess_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamAccess, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamAccess, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StreamAccess));
  CreateStreamOptions_descriptor_ = file->message_type(2);
  static const int CreateStreamOptions_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateStreamOptions, attribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateStreamOptions, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateStreamOptions, subject_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateStreamOptions, access_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateStreamOptions, voice_level_),
  };
  CreateStreamOptions_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateStreamOptions_descriptor_,
      CreateStreamOptions::default_instance_,
      CreateStreamOptions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateStreamOptions, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateStreamOptions, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateStreamOptions));
  Stream_descriptor_ = file->message_type(3);
  static const int Stream_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stream, club_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stream, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stream, attribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stream, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stream, subject_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stream, access_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stream, voice_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stream, creation_time_),
  };
  Stream_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Stream_descriptor_,
      Stream::default_instance_,
      Stream_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stream, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stream, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Stream));
  StreamDescription_descriptor_ = file->message_type(4);
  static const int StreamDescription_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamDescription, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamDescription, name_),
  };
  StreamDescription_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StreamDescription_descriptor_,
      StreamDescription::default_instance_,
      StreamDescription_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamDescription, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamDescription, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StreamDescription));
  MentionContent_descriptor_ = file->message_type(5);
  static const int MentionContent_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MentionContent, all_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MentionContent, here_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MentionContent, member_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MentionContent, role_),
  };
  MentionContent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MentionContent_descriptor_,
      MentionContent::default_instance_,
      MentionContent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MentionContent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MentionContent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MentionContent));
  CreateMessageOptions_descriptor_ = file->message_type(6);
  static const int CreateMessageOptions_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateMessageOptions, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateMessageOptions, mention_),
  };
  CreateMessageOptions_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateMessageOptions_descriptor_,
      CreateMessageOptions::default_instance_,
      CreateMessageOptions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateMessageOptions, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateMessageOptions, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateMessageOptions));
  ClubStreamMessageContainer_descriptor_ = file->message_type(7);
  static const int ClubStreamMessageContainer_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubStreamMessageContainer, message_),
  };
  ClubStreamMessageContainer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClubStreamMessageContainer_descriptor_,
      ClubStreamMessageContainer::default_instance_,
      ClubStreamMessageContainer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubStreamMessageContainer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubStreamMessageContainer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClubStreamMessageContainer));
  ContentChain_descriptor_ = file->message_type(8);
  static const int ContentChain_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentChain, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentChain, embed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentChain, mention_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentChain, edit_time_),
  };
  ContentChain_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContentChain_descriptor_,
      ContentChain::default_instance_,
      ContentChain_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentChain, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentChain, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContentChain));
  StreamMessage_descriptor_ = file->message_type(9);
  static const int StreamMessage_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamMessage, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamMessage, author_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamMessage, content_chain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamMessage, destroyer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamMessage, destroyed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamMessage, destroy_time_),
  };
  StreamMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StreamMessage_descriptor_,
      StreamMessage::default_instance_,
      StreamMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StreamMessage));
  StreamMention_descriptor_ = file->message_type(10);
  static const int StreamMention_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamMention, club_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamMention, stream_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamMention, message_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamMention, author_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamMention, destroyed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamMention, mention_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamMention, member_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamMention, message_),
  };
  StreamMention_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StreamMention_descriptor_,
      StreamMention::default_instance_,
      StreamMention_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamMention, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamMention, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StreamMention));
  StreamView_descriptor_ = file->message_type(11);
  static const int StreamView_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamView, club_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamView, stream_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamView, marker_),
  };
  StreamView_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StreamView_descriptor_,
      StreamView::default_instance_,
      StreamView_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamView, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamView, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StreamView));
  StreamAdvanceViewTime_descriptor_ = file->message_type(12);
  static const int StreamAdvanceViewTime_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamAdvanceViewTime, stream_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamAdvanceViewTime, view_time_),
  };
  StreamAdvanceViewTime_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StreamAdvanceViewTime_descriptor_,
      StreamAdvanceViewTime::default_instance_,
      StreamAdvanceViewTime_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamAdvanceViewTime, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamAdvanceViewTime, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StreamAdvanceViewTime));
  StreamEventTime_descriptor_ = file->message_type(13);
  static const int StreamEventTime_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamEventTime, stream_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamEventTime, event_time_),
  };
  StreamEventTime_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StreamEventTime_descriptor_,
      StreamEventTime::default_instance_,
      StreamEventTime_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamEventTime, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamEventTime, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StreamEventTime));
  StreamMentionView_descriptor_ = file->message_type(14);
  static const int StreamMentionView_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamMentionView, club_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamMentionView, stream_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamMentionView, marker_),
  };
  StreamMentionView_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StreamMentionView_descriptor_,
      StreamMentionView::default_instance_,
      StreamMentionView_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamMentionView, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamMentionView, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StreamMentionView));
  StreamStateOptions_descriptor_ = file->message_type(15);
  static const int StreamStateOptions_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamStateOptions, attribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamStateOptions, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamStateOptions, subject_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamStateOptions, access_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamStateOptions, voice_level_),
  };
  StreamStateOptions_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StreamStateOptions_descriptor_,
      StreamStateOptions::default_instance_,
      StreamStateOptions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamStateOptions, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamStateOptions, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StreamStateOptions));
  StreamStateAssignment_descriptor_ = file->message_type(16);
  static const int StreamStateAssignment_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamStateAssignment, stream_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamStateAssignment, attribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamStateAssignment, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamStateAssignment, subject_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamStateAssignment, access_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamStateAssignment, stream_subscription_removed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamStateAssignment, voice_level_),
  };
  StreamStateAssignment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StreamStateAssignment_descriptor_,
      StreamStateAssignment::default_instance_,
      StreamStateAssignment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamStateAssignment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamStateAssignment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StreamStateAssignment));
  StreamTypingIndicator_descriptor_ = file->message_type(17);
  static const int StreamTypingIndicator_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamTypingIndicator, author_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamTypingIndicator, indicator_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamTypingIndicator, epoch_),
  };
  StreamTypingIndicator_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StreamTypingIndicator_descriptor_,
      StreamTypingIndicator::default_instance_,
      StreamTypingIndicator_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamTypingIndicator, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamTypingIndicator, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StreamTypingIndicator));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_club_5fstream_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StreamPosition_descriptor_, &StreamPosition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StreamAccess_descriptor_, &StreamAccess::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateStreamOptions_descriptor_, &CreateStreamOptions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Stream_descriptor_, &Stream::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StreamDescription_descriptor_, &StreamDescription::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MentionContent_descriptor_, &MentionContent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateMessageOptions_descriptor_, &CreateMessageOptions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClubStreamMessageContainer_descriptor_, &ClubStreamMessageContainer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContentChain_descriptor_, &ContentChain::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StreamMessage_descriptor_, &StreamMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StreamMention_descriptor_, &StreamMention::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StreamView_descriptor_, &StreamView::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StreamAdvanceViewTime_descriptor_, &StreamAdvanceViewTime::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StreamEventTime_descriptor_, &StreamEventTime::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StreamMentionView_descriptor_, &StreamMentionView::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StreamStateOptions_descriptor_, &StreamStateOptions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StreamStateAssignment_descriptor_, &StreamStateAssignment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StreamTypingIndicator_descriptor_, &StreamTypingIndicator::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_club_5fstream_2eproto() {
  delete StreamPosition::default_instance_;
  delete StreamPosition_reflection_;
  delete StreamAccess::default_instance_;
  delete StreamAccess_reflection_;
  delete CreateStreamOptions::default_instance_;
  delete CreateStreamOptions_reflection_;
  delete Stream::default_instance_;
  delete Stream_reflection_;
  delete StreamDescription::default_instance_;
  delete StreamDescription_reflection_;
  delete MentionContent::default_instance_;
  delete MentionContent_reflection_;
  delete CreateMessageOptions::default_instance_;
  delete CreateMessageOptions_reflection_;
  delete ClubStreamMessageContainer::default_instance_;
  delete ClubStreamMessageContainer_reflection_;
  delete ContentChain::default_instance_;
  delete ContentChain_reflection_;
  delete StreamMessage::default_instance_;
  delete StreamMessage_reflection_;
  delete StreamMention::default_instance_;
  delete StreamMention_reflection_;
  delete StreamView::default_instance_;
  delete StreamView_reflection_;
  delete StreamAdvanceViewTime::default_instance_;
  delete StreamAdvanceViewTime_reflection_;
  delete StreamEventTime::default_instance_;
  delete StreamEventTime_reflection_;
  delete StreamMentionView::default_instance_;
  delete StreamMentionView_reflection_;
  delete StreamStateOptions::default_instance_;
  delete StreamStateOptions_reflection_;
  delete StreamStateAssignment::default_instance_;
  delete StreamStateAssignment_reflection_;
  delete StreamTypingIndicator::default_instance_;
  delete StreamTypingIndicator_reflection_;
}

void protobuf_AddDesc_club_5fstream_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::bgs::protocol::club::v1::protobuf_AddDesc_club_5fenum_2eproto();
  ::bgs::protocol::club::v1::protobuf_AddDesc_club_5fmember_2eproto();
  ::bgs::protocol::v2::protobuf_AddDesc_api_2fclient_2fv2_2fattribute_5ftypes_2eproto();
  ::bgs::protocol::protobuf_AddDesc_embed_5ftypes_2eproto();
  ::bgs::protocol::protobuf_AddDesc_event_5fview_5ftypes_2eproto();
  ::bgs::protocol::protobuf_AddDesc_message_5ftypes_2eproto();
  ::bgs::protocol::protobuf_AddDesc_ets_5ftypes_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021club_stream.proto\022\024bgs.protocol.club.v"
    "1\032\017club_enum.proto\032\021club_member.proto\032#a"
    "pi/client/v2/attribute_types.proto\032\021embe"
    "d_types.proto\032\026event_view_types.proto\032\023m"
    "essage_types.proto\032\017ets_types.proto\"\'\n\016S"
    "treamPosition\022\025\n\tstream_id\030\001 \003(\004B\002\020\001\" \n\014"
    "StreamAccess\022\020\n\004role\030\001 \003(\rB\002\020\001\"\324\001\n\023Creat"
    "eStreamOptions\022-\n\tattribute\030\001 \003(\0132\032.bgs."
    "protocol.v2.Attribute\022\014\n\004name\030\002 \001(\t\022\017\n\007s"
    "ubject\030\003 \001(\t\0222\n\006access\030\004 \001(\0132\".bgs.proto"
    "col.club.v1.StreamAccess\022;\n\013voice_level\030"
    "\005 \001(\0162&.bgs.protocol.club.v1.StreamVoice"
    "Level\"\373\001\n\006Stream\022\017\n\007club_id\030\001 \001(\004\022\n\n\002id\030"
    "\002 \001(\004\022-\n\tattribute\030\003 \003(\0132\032.bgs.protocol."
    "v2.Attribute\022\014\n\004name\030\004 \001(\t\022\017\n\007subject\030\005 "
    "\001(\t\0222\n\006access\030\006 \001(\0132\".bgs.protocol.club."
    "v1.StreamAccess\022;\n\013voice_level\030\007 \001(\0162&.b"
    "gs.protocol.club.v1.StreamVoiceLevel\022\025\n\r"
    "creation_time\030\010 \001(\004\"-\n\021StreamDescription"
    "\022\n\n\002id\030\002 \001(\004\022\014\n\004name\030\004 \001(\t\"p\n\016MentionCon"
    "tent\022\013\n\003all\030\001 \001(\010\022\014\n\004here\030\002 \001(\010\0221\n\tmembe"
    "r_id\030\003 \003(\0132\036.bgs.protocol.club.v1.Member"
    "Id\022\020\n\004role\030\004 \003(\rB\002\020\001\"^\n\024CreateMessageOpt"
    "ions\022\017\n\007content\030\002 \001(\t\0225\n\007mention\030\003 \001(\0132$"
    ".bgs.protocol.club.v1.MentionContent\"R\n\032"
    "ClubStreamMessageContainer\0224\n\007message\030\001 "
    "\003(\0132#.bgs.protocol.club.v1.StreamMessage"
    "\"\221\001\n\014ContentChain\022\017\n\007content\030\005 \001(\t\022&\n\005em"
    "bed\030\006 \003(\0132\027.bgs.protocol.EmbedInfo\0225\n\007me"
    "ntion\030\007 \001(\0132$.bgs.protocol.club.v1.Menti"
    "onContent\022\021\n\tedit_time\030\010 \001(\004\"\215\002\n\rStreamM"
    "essage\022#\n\002id\030\003 \001(\0132\027.bgs.protocol.Messag"
    "eId\0227\n\006author\030\004 \001(\0132\'.bgs.protocol.club."
    "v1.MemberDescription\0229\n\rcontent_chain\030\006 "
    "\003(\0132\".bgs.protocol.club.v1.ContentChain\022"
    ":\n\tdestroyer\030\017 \001(\0132\'.bgs.protocol.club.v"
    "1.MemberDescription\022\021\n\tdestroyed\030\020 \001(\010\022\024"
    "\n\014destroy_time\030\021 \001(\004\"\305\002\n\rStreamMention\022\017"
    "\n\007club_id\030\001 \001(\004\022\021\n\tstream_id\030\002 \001(\004\022+\n\nme"
    "ssage_id\030\003 \001(\0132\027.bgs.protocol.MessageId\022"
    "7\n\006author\030\004 \001(\0132\'.bgs.protocol.club.v1.M"
    "emberDescription\022\021\n\tdestroyed\030\005 \001(\010\022.\n\nm"
    "ention_id\030\006 \001(\0132\032.bgs.protocol.TimeSerie"
    "sId\0221\n\tmember_id\030\007 \001(\0132\036.bgs.protocol.cl"
    "ub.v1.MemberId\0224\n\007message\030\010 \001(\0132#.bgs.pr"
    "otocol.club.v1.StreamMessage\"Z\n\nStreamVi"
    "ew\022\017\n\007club_id\030\001 \001(\004\022\021\n\tstream_id\030\002 \001(\004\022("
    "\n\006marker\030\003 \001(\0132\030.bgs.protocol.ViewMarker"
    "\"=\n\025StreamAdvanceViewTime\022\021\n\tstream_id\030\001"
    " \001(\004\022\021\n\tview_time\030\002 \001(\004\"8\n\017StreamEventTi"
    "me\022\021\n\tstream_id\030\001 \001(\004\022\022\n\nevent_time\030\002 \001("
    "\004\"a\n\021StreamMentionView\022\017\n\007club_id\030\001 \001(\004\022"
    "\021\n\tstream_id\030\002 \001(\004\022(\n\006marker\030\003 \001(\0132\030.bgs"
    ".protocol.ViewMarker\"\323\001\n\022StreamStateOpti"
    "ons\022-\n\tattribute\030\001 \003(\0132\032.bgs.protocol.v2"
    ".Attribute\022\014\n\004name\030\002 \001(\t\022\017\n\007subject\030\003 \001("
    "\t\0222\n\006access\030\004 \001(\0132\".bgs.protocol.club.v1"
    ".StreamAccess\022;\n\013voice_level\030\005 \001(\0162&.bgs"
    ".protocol.club.v1.StreamVoiceLevel\"\216\002\n\025S"
    "treamStateAssignment\022\021\n\tstream_id\030\001 \001(\004\022"
    "-\n\tattribute\030\002 \003(\0132\032.bgs.protocol.v2.Att"
    "ribute\022\014\n\004name\030\003 \001(\t\022\017\n\007subject\030\004 \001(\t\0222\n"
    "\006access\030\005 \001(\0132\".bgs.protocol.club.v1.Str"
    "eamAccess\022#\n\033stream_subscription_removed"
    "\030\006 \001(\010\022;\n\013voice_level\030\007 \001(\0162&.bgs.protoc"
    "ol.club.v1.StreamVoiceLevel\"\213\001\n\025StreamTy"
    "pingIndicator\0221\n\tauthor_id\030\001 \001(\0132\036.bgs.p"
    "rotocol.club.v1.MemberId\0220\n\tindicator\030\002 "
    "\001(\0162\035.bgs.protocol.TypingIndicator\022\r\n\005ep"
    "och\030\003 \001(\004B\002H\002", 2773);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "club_stream.proto", &protobuf_RegisterTypes);
  StreamPosition::default_instance_ = new StreamPosition();
  StreamAccess::default_instance_ = new StreamAccess();
  CreateStreamOptions::default_instance_ = new CreateStreamOptions();
  Stream::default_instance_ = new Stream();
  StreamDescription::default_instance_ = new StreamDescription();
  MentionContent::default_instance_ = new MentionContent();
  CreateMessageOptions::default_instance_ = new CreateMessageOptions();
  ClubStreamMessageContainer::default_instance_ = new ClubStreamMessageContainer();
  ContentChain::default_instance_ = new ContentChain();
  StreamMessage::default_instance_ = new StreamMessage();
  StreamMention::default_instance_ = new StreamMention();
  StreamView::default_instance_ = new StreamView();
  StreamAdvanceViewTime::default_instance_ = new StreamAdvanceViewTime();
  StreamEventTime::default_instance_ = new StreamEventTime();
  StreamMentionView::default_instance_ = new StreamMentionView();
  StreamStateOptions::default_instance_ = new StreamStateOptions();
  StreamStateAssignment::default_instance_ = new StreamStateAssignment();
  StreamTypingIndicator::default_instance_ = new StreamTypingIndicator();
  StreamPosition::default_instance_->InitAsDefaultInstance();
  StreamAccess::default_instance_->InitAsDefaultInstance();
  CreateStreamOptions::default_instance_->InitAsDefaultInstance();
  Stream::default_instance_->InitAsDefaultInstance();
  StreamDescription::default_instance_->InitAsDefaultInstance();
  MentionContent::default_instance_->InitAsDefaultInstance();
  CreateMessageOptions::default_instance_->InitAsDefaultInstance();
  ClubStreamMessageContainer::default_instance_->InitAsDefaultInstance();
  ContentChain::default_instance_->InitAsDefaultInstance();
  StreamMessage::default_instance_->InitAsDefaultInstance();
  StreamMention::default_instance_->InitAsDefaultInstance();
  StreamView::default_instance_->InitAsDefaultInstance();
  StreamAdvanceViewTime::default_instance_->InitAsDefaultInstance();
  StreamEventTime::default_instance_->InitAsDefaultInstance();
  StreamMentionView::default_instance_->InitAsDefaultInstance();
  StreamStateOptions::default_instance_->InitAsDefaultInstance();
  StreamStateAssignment::default_instance_->InitAsDefaultInstance();
  StreamTypingIndicator::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_club_5fstream_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_club_5fstream_2eproto {
  StaticDescriptorInitializer_club_5fstream_2eproto() {
    protobuf_AddDesc_club_5fstream_2eproto();
  }
} static_descriptor_initializer_club_5fstream_2eproto_;
// ===================================================================

#ifndef _MSC_VER
const int StreamPosition::kStreamIdFieldNumber;
#endif  // !_MSC_VER

StreamPosition::StreamPosition()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.StreamPosition)
}

void StreamPosition::InitAsDefaultInstance() {
}

StreamPosition::StreamPosition(const StreamPosition& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.StreamPosition)
}

void StreamPosition::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StreamPosition::~StreamPosition() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.StreamPosition)
  SharedDtor();
}

void StreamPosition::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StreamPosition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreamPosition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StreamPosition_descriptor_;
}

const StreamPosition& StreamPosition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_club_5fstream_2eproto();
  return *default_instance_;
}

StreamPosition* StreamPosition::default_instance_ = NULL;

StreamPosition* StreamPosition::New() const {
  return new StreamPosition;
}

void StreamPosition::Swap(StreamPosition* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata StreamPosition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StreamPosition_descriptor_;
  metadata.reflection = StreamPosition_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int StreamAccess::kRoleFieldNumber;
#endif  // !_MSC_VER

StreamAccess::StreamAccess()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.StreamAccess)
}

void StreamAccess::InitAsDefaultInstance() {
}

StreamAccess::StreamAccess(const StreamAccess& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.StreamAccess)
}

void StreamAccess::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StreamAccess::~StreamAccess() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.StreamAccess)
  SharedDtor();
}

void StreamAccess::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StreamAccess::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreamAccess::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StreamAccess_descriptor_;
}

const StreamAccess& StreamAccess::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_club_5fstream_2eproto();
  return *default_instance_;
}

StreamAccess* StreamAccess::default_instance_ = NULL;

StreamAccess* StreamAccess::New() const {
  return new StreamAccess;
}

void StreamAccess::Swap(StreamAccess* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata StreamAccess::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StreamAccess_descriptor_;
  metadata.reflection = StreamAccess_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int CreateStreamOptions::kAttributeFieldNumber;
const int CreateStreamOptions::kNameFieldNumber;
const int CreateStreamOptions::kSubjectFieldNumber;
const int CreateStreamOptions::kAccessFieldNumber;
const int CreateStreamOptions::kVoiceLevelFieldNumber;
#endif  // !_MSC_VER

CreateStreamOptions::CreateStreamOptions()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.CreateStreamOptions)
}

void CreateStreamOptions::InitAsDefaultInstance() {
  access_ = const_cast< ::bgs::protocol::club::v1::StreamAccess*>(&::bgs::protocol::club::v1::StreamAccess::default_instance());
}

CreateStreamOptions::CreateStreamOptions(const CreateStreamOptions& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.CreateStreamOptions)
}

void CreateStreamOptions::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  subject_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  access_ = NULL;
  voice_level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateStreamOptions::~CreateStreamOptions() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.CreateStreamOptions)
  SharedDtor();
}

void CreateStreamOptions::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (subject_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete subject_;
  }
  if (this != default_instance_) {
    delete access_;
  }
}

void CreateStreamOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateStreamOptions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateStreamOptions_descriptor_;
}

const CreateStreamOptions& CreateStreamOptions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_club_5fstream_2eproto();
  return *default_instance_;
}

CreateStreamOptions* CreateStreamOptions::default_instance_ = NULL;

CreateStreamOptions* CreateStreamOptions::New() const {
  return new CreateStreamOptions;
}

void CreateStreamOptions::Swap(CreateStreamOptions* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata CreateStreamOptions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateStreamOptions_descriptor_;
  metadata.reflection = CreateStreamOptions_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int Stream::kClubIdFieldNumber;
const int Stream::kIdFieldNumber;
const int Stream::kAttributeFieldNumber;
const int Stream::kNameFieldNumber;
const int Stream::kSubjectFieldNumber;
const int Stream::kAccessFieldNumber;
const int Stream::kVoiceLevelFieldNumber;
const int Stream::kCreationTimeFieldNumber;
#endif  // !_MSC_VER

Stream::Stream()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.Stream)
}

void Stream::InitAsDefaultInstance() {
  access_ = const_cast< ::bgs::protocol::club::v1::StreamAccess*>(&::bgs::protocol::club::v1::StreamAccess::default_instance());
}

Stream::Stream(const Stream& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.Stream)
}

void Stream::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  club_id_ = GOOGLE_ULONGLONG(0);
  id_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  subject_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  access_ = NULL;
  voice_level_ = 0;
  creation_time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Stream::~Stream() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.Stream)
  SharedDtor();
}

void Stream::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (subject_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete subject_;
  }
  if (this != default_instance_) {
    delete access_;
  }
}

void Stream::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Stream::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Stream_descriptor_;
}

const Stream& Stream::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_club_5fstream_2eproto();
  return *default_instance_;
}

Stream* Stream::default_instance_ = NULL;

Stream* Stream::New() const {
  return new Stream;
}

void Stream::Swap(Stream* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata Stream::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Stream_descriptor_;
  metadata.reflection = Stream_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int StreamDescription::kIdFieldNumber;
const int StreamDescription::kNameFieldNumber;
#endif  // !_MSC_VER

StreamDescription::StreamDescription()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.StreamDescription)
}

void StreamDescription::InitAsDefaultInstance() {
}

StreamDescription::StreamDescription(const StreamDescription& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.StreamDescription)
}

void StreamDescription::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StreamDescription::~StreamDescription() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.StreamDescription)
  SharedDtor();
}

void StreamDescription::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void StreamDescription::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreamDescription::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StreamDescription_descriptor_;
}

const StreamDescription& StreamDescription::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_club_5fstream_2eproto();
  return *default_instance_;
}

StreamDescription* StreamDescription::default_instance_ = NULL;

StreamDescription* StreamDescription::New() const {
  return new StreamDescription;
}

void StreamDescription::Swap(StreamDescription* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata StreamDescription::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StreamDescription_descriptor_;
  metadata.reflection = StreamDescription_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int MentionContent::kAllFieldNumber;
const int MentionContent::kHereFieldNumber;
const int MentionContent::kMemberIdFieldNumber;
const int MentionContent::kRoleFieldNumber;
#endif  // !_MSC_VER

MentionContent::MentionContent()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.MentionContent)
}

void MentionContent::InitAsDefaultInstance() {
}

MentionContent::MentionContent(const MentionContent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.MentionContent)
}

void MentionContent::SharedCtor() {
  _cached_size_ = 0;
  all_ = false;
  here_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MentionContent::~MentionContent() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.MentionContent)
  SharedDtor();
}

void MentionContent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MentionContent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MentionContent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MentionContent_descriptor_;
}

const MentionContent& MentionContent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_club_5fstream_2eproto();
  return *default_instance_;
}

MentionContent* MentionContent::default_instance_ = NULL;

MentionContent* MentionContent::New() const {
  return new MentionContent;
}

void MentionContent::Swap(MentionContent* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata MentionContent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MentionContent_descriptor_;
  metadata.reflection = MentionContent_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int CreateMessageOptions::kContentFieldNumber;
const int CreateMessageOptions::kMentionFieldNumber;
#endif  // !_MSC_VER

CreateMessageOptions::CreateMessageOptions()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.CreateMessageOptions)
}

void CreateMessageOptions::InitAsDefaultInstance() {
  mention_ = const_cast< ::bgs::protocol::club::v1::MentionContent*>(&::bgs::protocol::club::v1::MentionContent::default_instance());
}

CreateMessageOptions::CreateMessageOptions(const CreateMessageOptions& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.CreateMessageOptions)
}

void CreateMessageOptions::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mention_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateMessageOptions::~CreateMessageOptions() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.CreateMessageOptions)
  SharedDtor();
}

void CreateMessageOptions::SharedDtor() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (this != default_instance_) {
    delete mention_;
  }
}

void CreateMessageOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateMessageOptions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateMessageOptions_descriptor_;
}

const CreateMessageOptions& CreateMessageOptions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_club_5fstream_2eproto();
  return *default_instance_;
}

CreateMessageOptions* CreateMessageOptions::default_instance_ = NULL;

CreateMessageOptions* CreateMessageOptions::New() const {
  return new CreateMessageOptions;
}

void CreateMessageOptions::Swap(CreateMessageOptions* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata CreateMessageOptions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateMessageOptions_descriptor_;
  metadata.reflection = CreateMessageOptions_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int ClubStreamMessageContainer::kMessageFieldNumber;
#endif  // !_MSC_VER

ClubStreamMessageContainer::ClubStreamMessageContainer()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.ClubStreamMessageContainer)
}

void ClubStreamMessageContainer::InitAsDefaultInstance() {
}

ClubStreamMessageContainer::ClubStreamMessageContainer(const ClubStreamMessageContainer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.ClubStreamMessageContainer)
}

void ClubStreamMessageContainer::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClubStreamMessageContainer::~ClubStreamMessageContainer() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.ClubStreamMessageContainer)
  SharedDtor();
}

void ClubStreamMessageContainer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClubStreamMessageContainer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClubStreamMessageContainer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClubStreamMessageContainer_descriptor_;
}

const ClubStreamMessageContainer& ClubStreamMessageContainer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_club_5fstream_2eproto();
  return *default_instance_;
}

ClubStreamMessageContainer* ClubStreamMessageContainer::default_instance_ = NULL;

ClubStreamMessageContainer* ClubStreamMessageContainer::New() const {
  return new ClubStreamMessageContainer;
}

void ClubStreamMessageContainer::Swap(ClubStreamMessageContainer* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata ClubStreamMessageContainer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClubStreamMessageContainer_descriptor_;
  metadata.reflection = ClubStreamMessageContainer_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int ContentChain::kContentFieldNumber;
const int ContentChain::kEmbedFieldNumber;
const int ContentChain::kMentionFieldNumber;
const int ContentChain::kEditTimeFieldNumber;
#endif  // !_MSC_VER

ContentChain::ContentChain()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.ContentChain)
}

void ContentChain::InitAsDefaultInstance() {
  mention_ = const_cast< ::bgs::protocol::club::v1::MentionContent*>(&::bgs::protocol::club::v1::MentionContent::default_instance());
}

ContentChain::ContentChain(const ContentChain& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.ContentChain)
}

void ContentChain::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mention_ = NULL;
  edit_time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContentChain::~ContentChain() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.ContentChain)
  SharedDtor();
}

void ContentChain::SharedDtor() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (this != default_instance_) {
    delete mention_;
  }
}

void ContentChain::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContentChain::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContentChain_descriptor_;
}

const ContentChain& ContentChain::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_club_5fstream_2eproto();
  return *default_instance_;
}

ContentChain* ContentChain::default_instance_ = NULL;

ContentChain* ContentChain::New() const {
  return new ContentChain;
}

void ContentChain::Swap(ContentChain* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata ContentChain::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContentChain_descriptor_;
  metadata.reflection = ContentChain_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int StreamMessage::kIdFieldNumber;
const int StreamMessage::kAuthorFieldNumber;
const int StreamMessage::kContentChainFieldNumber;
const int StreamMessage::kDestroyerFieldNumber;
const int StreamMessage::kDestroyedFieldNumber;
const int StreamMessage::kDestroyTimeFieldNumber;
#endif  // !_MSC_VER

StreamMessage::StreamMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.StreamMessage)
}

void StreamMessage::InitAsDefaultInstance() {
  id_ = const_cast< ::bgs::protocol::MessageId*>(&::bgs::protocol::MessageId::default_instance());
  author_ = const_cast< ::bgs::protocol::club::v1::MemberDescription*>(&::bgs::protocol::club::v1::MemberDescription::default_instance());
  destroyer_ = const_cast< ::bgs::protocol::club::v1::MemberDescription*>(&::bgs::protocol::club::v1::MemberDescription::default_instance());
}

StreamMessage::StreamMessage(const StreamMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.StreamMessage)
}

void StreamMessage::SharedCtor() {
  _cached_size_ = 0;
  id_ = NULL;
  author_ = NULL;
  destroyer_ = NULL;
  destroyed_ = false;
  destroy_time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StreamMessage::~StreamMessage() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.StreamMessage)
  SharedDtor();
}

void StreamMessage::SharedDtor() {
  if (this != default_instance_) {
    delete id_;
    delete author_;
    delete destroyer_;
  }
}

void StreamMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreamMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StreamMessage_descriptor_;
}

const StreamMessage& StreamMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_club_5fstream_2eproto();
  return *default_instance_;
}

StreamMessage* StreamMessage::default_instance_ = NULL;

StreamMessage* StreamMessage::New() const {
  return new StreamMessage;
}

void StreamMessage::Swap(StreamMessage* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata StreamMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StreamMessage_descriptor_;
  metadata.reflection = StreamMessage_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int StreamMention::kClubIdFieldNumber;
const int StreamMention::kStreamIdFieldNumber;
const int StreamMention::kMessageIdFieldNumber;
const int StreamMention::kAuthorFieldNumber;
const int StreamMention::kDestroyedFieldNumber;
const int StreamMention::kMentionIdFieldNumber;
const int StreamMention::kMemberIdFieldNumber;
const int StreamMention::kMessageFieldNumber;
#endif  // !_MSC_VER

StreamMention::StreamMention()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.StreamMention)
}

void StreamMention::InitAsDefaultInstance() {
  message_id_ = const_cast< ::bgs::protocol::MessageId*>(&::bgs::protocol::MessageId::default_instance());
  author_ = const_cast< ::bgs::protocol::club::v1::MemberDescription*>(&::bgs::protocol::club::v1::MemberDescription::default_instance());
  mention_id_ = const_cast< ::bgs::protocol::TimeSeriesId*>(&::bgs::protocol::TimeSeriesId::default_instance());
  member_id_ = const_cast< ::bgs::protocol::club::v1::MemberId*>(&::bgs::protocol::club::v1::MemberId::default_instance());
  message_ = const_cast< ::bgs::protocol::club::v1::StreamMessage*>(&::bgs::protocol::club::v1::StreamMessage::default_instance());
}

StreamMention::StreamMention(const StreamMention& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.StreamMention)
}

void StreamMention::SharedCtor() {
  _cached_size_ = 0;
  club_id_ = GOOGLE_ULONGLONG(0);
  stream_id_ = GOOGLE_ULONGLONG(0);
  message_id_ = NULL;
  author_ = NULL;
  destroyed_ = false;
  mention_id_ = NULL;
  member_id_ = NULL;
  message_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StreamMention::~StreamMention() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.StreamMention)
  SharedDtor();
}

void StreamMention::SharedDtor() {
  if (this != default_instance_) {
    delete message_id_;
    delete author_;
    delete mention_id_;
    delete member_id_;
    delete message_;
  }
}

void StreamMention::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreamMention::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StreamMention_descriptor_;
}

const StreamMention& StreamMention::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_club_5fstream_2eproto();
  return *default_instance_;
}

StreamMention* StreamMention::default_instance_ = NULL;

StreamMention* StreamMention::New() const {
  return new StreamMention;
}

void StreamMention::Swap(StreamMention* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata StreamMention::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StreamMention_descriptor_;
  metadata.reflection = StreamMention_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int StreamView::kClubIdFieldNumber;
const int StreamView::kStreamIdFieldNumber;
const int StreamView::kMarkerFieldNumber;
#endif  // !_MSC_VER

StreamView::StreamView()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.StreamView)
}

void StreamView::InitAsDefaultInstance() {
  marker_ = const_cast< ::bgs::protocol::ViewMarker*>(&::bgs::protocol::ViewMarker::default_instance());
}

StreamView::StreamView(const StreamView& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.StreamView)
}

void StreamView::SharedCtor() {
  _cached_size_ = 0;
  club_id_ = GOOGLE_ULONGLONG(0);
  stream_id_ = GOOGLE_ULONGLONG(0);
  marker_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StreamView::~StreamView() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.StreamView)
  SharedDtor();
}

void StreamView::SharedDtor() {
  if (this != default_instance_) {
    delete marker_;
  }
}

void StreamView::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreamView::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StreamView_descriptor_;
}

const StreamView& StreamView::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_club_5fstream_2eproto();
  return *default_instance_;
}

StreamView* StreamView::default_instance_ = NULL;

StreamView* StreamView::New() const {
  return new StreamView;
}

void StreamView::Swap(StreamView* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata StreamView::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StreamView_descriptor_;
  metadata.reflection = StreamView_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int StreamAdvanceViewTime::kStreamIdFieldNumber;
const int StreamAdvanceViewTime::kViewTimeFieldNumber;
#endif  // !_MSC_VER

StreamAdvanceViewTime::StreamAdvanceViewTime()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.StreamAdvanceViewTime)
}

void StreamAdvanceViewTime::InitAsDefaultInstance() {
}

StreamAdvanceViewTime::StreamAdvanceViewTime(const StreamAdvanceViewTime& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.StreamAdvanceViewTime)
}

void StreamAdvanceViewTime::SharedCtor() {
  _cached_size_ = 0;
  stream_id_ = GOOGLE_ULONGLONG(0);
  view_time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StreamAdvanceViewTime::~StreamAdvanceViewTime() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.StreamAdvanceViewTime)
  SharedDtor();
}

void StreamAdvanceViewTime::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StreamAdvanceViewTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreamAdvanceViewTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StreamAdvanceViewTime_descriptor_;
}

const StreamAdvanceViewTime& StreamAdvanceViewTime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_club_5fstream_2eproto();
  return *default_instance_;
}

StreamAdvanceViewTime* StreamAdvanceViewTime::default_instance_ = NULL;

StreamAdvanceViewTime* StreamAdvanceViewTime::New() const {
  return new StreamAdvanceViewTime;
}

void StreamAdvanceViewTime::Swap(StreamAdvanceViewTime* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata StreamAdvanceViewTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StreamAdvanceViewTime_descriptor_;
  metadata.reflection = StreamAdvanceViewTime_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int StreamEventTime::kStreamIdFieldNumber;
const int StreamEventTime::kEventTimeFieldNumber;
#endif  // !_MSC_VER

StreamEventTime::StreamEventTime()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.StreamEventTime)
}

void StreamEventTime::InitAsDefaultInstance() {
}

StreamEventTime::StreamEventTime(const StreamEventTime& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.StreamEventTime)
}

void StreamEventTime::SharedCtor() {
  _cached_size_ = 0;
  stream_id_ = GOOGLE_ULONGLONG(0);
  event_time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StreamEventTime::~StreamEventTime() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.StreamEventTime)
  SharedDtor();
}

void StreamEventTime::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StreamEventTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreamEventTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StreamEventTime_descriptor_;
}

const StreamEventTime& StreamEventTime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_club_5fstream_2eproto();
  return *default_instance_;
}

StreamEventTime* StreamEventTime::default_instance_ = NULL;

StreamEventTime* StreamEventTime::New() const {
  return new StreamEventTime;
}

void StreamEventTime::Swap(StreamEventTime* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata StreamEventTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StreamEventTime_descriptor_;
  metadata.reflection = StreamEventTime_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int StreamMentionView::kClubIdFieldNumber;
const int StreamMentionView::kStreamIdFieldNumber;
const int StreamMentionView::kMarkerFieldNumber;
#endif  // !_MSC_VER

StreamMentionView::StreamMentionView()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.StreamMentionView)
}

void StreamMentionView::InitAsDefaultInstance() {
  marker_ = const_cast< ::bgs::protocol::ViewMarker*>(&::bgs::protocol::ViewMarker::default_instance());
}

StreamMentionView::StreamMentionView(const StreamMentionView& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.StreamMentionView)
}

void StreamMentionView::SharedCtor() {
  _cached_size_ = 0;
  club_id_ = GOOGLE_ULONGLONG(0);
  stream_id_ = GOOGLE_ULONGLONG(0);
  marker_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StreamMentionView::~StreamMentionView() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.StreamMentionView)
  SharedDtor();
}

void StreamMentionView::SharedDtor() {
  if (this != default_instance_) {
    delete marker_;
  }
}

void StreamMentionView::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreamMentionView::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StreamMentionView_descriptor_;
}

const StreamMentionView& StreamMentionView::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_club_5fstream_2eproto();
  return *default_instance_;
}

StreamMentionView* StreamMentionView::default_instance_ = NULL;

StreamMentionView* StreamMentionView::New() const {
  return new StreamMentionView;
}

void StreamMentionView::Swap(StreamMentionView* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata StreamMentionView::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StreamMentionView_descriptor_;
  metadata.reflection = StreamMentionView_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int StreamStateOptions::kAttributeFieldNumber;
const int StreamStateOptions::kNameFieldNumber;
const int StreamStateOptions::kSubjectFieldNumber;
const int StreamStateOptions::kAccessFieldNumber;
const int StreamStateOptions::kVoiceLevelFieldNumber;
#endif  // !_MSC_VER

StreamStateOptions::StreamStateOptions()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.StreamStateOptions)
}

void StreamStateOptions::InitAsDefaultInstance() {
  access_ = const_cast< ::bgs::protocol::club::v1::StreamAccess*>(&::bgs::protocol::club::v1::StreamAccess::default_instance());
}

StreamStateOptions::StreamStateOptions(const StreamStateOptions& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.StreamStateOptions)
}

void StreamStateOptions::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  subject_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  access_ = NULL;
  voice_level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StreamStateOptions::~StreamStateOptions() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.StreamStateOptions)
  SharedDtor();
}

void StreamStateOptions::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (subject_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete subject_;
  }
  if (this != default_instance_) {
    delete access_;
  }
}

void StreamStateOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreamStateOptions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StreamStateOptions_descriptor_;
}

const StreamStateOptions& StreamStateOptions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_club_5fstream_2eproto();
  return *default_instance_;
}

StreamStateOptions* StreamStateOptions::default_instance_ = NULL;

StreamStateOptions* StreamStateOptions::New() const {
  return new StreamStateOptions;
}

void StreamStateOptions::Swap(StreamStateOptions* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata StreamStateOptions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StreamStateOptions_descriptor_;
  metadata.reflection = StreamStateOptions_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int StreamStateAssignment::kStreamIdFieldNumber;
const int StreamStateAssignment::kAttributeFieldNumber;
const int StreamStateAssignment::kNameFieldNumber;
const int StreamStateAssignment::kSubjectFieldNumber;
const int StreamStateAssignment::kAccessFieldNumber;
const int StreamStateAssignment::kStreamSubscriptionRemovedFieldNumber;
const int StreamStateAssignment::kVoiceLevelFieldNumber;
#endif  // !_MSC_VER

StreamStateAssignment::StreamStateAssignment()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.StreamStateAssignment)
}

void StreamStateAssignment::InitAsDefaultInstance() {
  access_ = const_cast< ::bgs::protocol::club::v1::StreamAccess*>(&::bgs::protocol::club::v1::StreamAccess::default_instance());
}

StreamStateAssignment::StreamStateAssignment(const StreamStateAssignment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.StreamStateAssignment)
}

void StreamStateAssignment::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  stream_id_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  subject_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  access_ = NULL;
  stream_subscription_removed_ = false;
  voice_level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StreamStateAssignment::~StreamStateAssignment() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.StreamStateAssignment)
  SharedDtor();
}

void StreamStateAssignment::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (subject_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete subject_;
  }
  if (this != default_instance_) {
    delete access_;
  }
}

void StreamStateAssignment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreamStateAssignment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StreamStateAssignment_descriptor_;
}

const StreamStateAssignment& StreamStateAssignment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_club_5fstream_2eproto();
  return *default_instance_;
}

StreamStateAssignment* StreamStateAssignment::default_instance_ = NULL;

StreamStateAssignment* StreamStateAssignment::New() const {
  return new StreamStateAssignment;
}

void StreamStateAssignment::Swap(StreamStateAssignment* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata StreamStateAssignment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StreamStateAssignment_descriptor_;
  metadata.reflection = StreamStateAssignment_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int StreamTypingIndicator::kAuthorIdFieldNumber;
const int StreamTypingIndicator::kIndicatorFieldNumber;
const int StreamTypingIndicator::kEpochFieldNumber;
#endif  // !_MSC_VER

StreamTypingIndicator::StreamTypingIndicator()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.StreamTypingIndicator)
}

void StreamTypingIndicator::InitAsDefaultInstance() {
  author_id_ = const_cast< ::bgs::protocol::club::v1::MemberId*>(&::bgs::protocol::club::v1::MemberId::default_instance());
}

StreamTypingIndicator::StreamTypingIndicator(const StreamTypingIndicator& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.StreamTypingIndicator)
}

void StreamTypingIndicator::SharedCtor() {
  _cached_size_ = 0;
  author_id_ = NULL;
  indicator_ = 0;
  epoch_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StreamTypingIndicator::~StreamTypingIndicator() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.StreamTypingIndicator)
  SharedDtor();
}

void StreamTypingIndicator::SharedDtor() {
  if (this != default_instance_) {
    delete author_id_;
  }
}

void StreamTypingIndicator::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreamTypingIndicator::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StreamTypingIndicator_descriptor_;
}

const StreamTypingIndicator& StreamTypingIndicator::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_club_5fstream_2eproto();
  return *default_instance_;
}

StreamTypingIndicator* StreamTypingIndicator::default_instance_ = NULL;

StreamTypingIndicator* StreamTypingIndicator::New() const {
  return new StreamTypingIndicator;
}

void StreamTypingIndicator::Swap(StreamTypingIndicator* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata StreamTypingIndicator::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StreamTypingIndicator_descriptor_;
  metadata.reflection = StreamTypingIndicator_reflection_;
  return metadata;
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace club
}  // namespace protocol
}  // namespace bgs

// @@protoc_insertion_point(global_scope)
