// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: club_membership_service.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "club_membership_service.pb.h"

#include <algorithm>
#include <utility>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
#include "Log.h"
#include "Errors.h"
#include "BattlenetRpcErrorCodes.h"
// @@protoc_insertion_point(includes)

namespace bgs {
namespace protocol {
namespace club {
namespace v1 {
namespace membership {

namespace {

const ::google::protobuf::Descriptor* SubscribeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubscribeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubscribeResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubscribeResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* UnsubscribeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnsubscribeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetStateRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetStateRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetStateResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetStateResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateClubSharedSettingsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateClubSharedSettingsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetStreamMentionsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetStreamMentionsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetStreamMentionsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetStreamMentionsResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* RemoveStreamMentionsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RemoveStreamMentionsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AdvanceStreamMentionViewTimeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AdvanceStreamMentionViewTimeRequest_reflection_ = NULL;
const ::google::protobuf::ServiceDescriptor* ClubMembershipService_descriptor_ = NULL;

}  // namespace

void protobuf_AssignDesc_club_5fmembership_5fservice_2eproto() {
  protobuf_AddDesc_club_5fmembership_5fservice_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "club_membership_service.proto");
  GOOGLE_CHECK(file != NULL);
  SubscribeRequest_descriptor_ = file->message_type(0);
  static const int SubscribeRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeRequest, agent_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeRequest, options_),
  };
  SubscribeRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SubscribeRequest_descriptor_,
      SubscribeRequest::default_instance_,
      SubscribeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SubscribeRequest));
  SubscribeResponse_descriptor_ = file->message_type(1);
  static const int SubscribeResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeResponse, state_),
  };
  SubscribeResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SubscribeResponse_descriptor_,
      SubscribeResponse::default_instance_,
      SubscribeResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SubscribeResponse));
  UnsubscribeRequest_descriptor_ = file->message_type(2);
  static const int UnsubscribeRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnsubscribeRequest, agent_id_),
  };
  UnsubscribeRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UnsubscribeRequest_descriptor_,
      UnsubscribeRequest::default_instance_,
      UnsubscribeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnsubscribeRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnsubscribeRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UnsubscribeRequest));
  GetStateRequest_descriptor_ = file->message_type(3);
  static const int GetStateRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStateRequest, agent_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStateRequest, options_),
  };
  GetStateRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetStateRequest_descriptor_,
      GetStateRequest::default_instance_,
      GetStateRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStateRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStateRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetStateRequest));
  GetStateResponse_descriptor_ = file->message_type(4);
  static const int GetStateResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStateResponse, state_),
  };
  GetStateResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetStateResponse_descriptor_,
      GetStateResponse::default_instance_,
      GetStateResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStateResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStateResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetStateResponse));
  UpdateClubSharedSettingsRequest_descriptor_ = file->message_type(5);
  static const int UpdateClubSharedSettingsRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateClubSharedSettingsRequest, agent_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateClubSharedSettingsRequest, options_),
  };
  UpdateClubSharedSettingsRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateClubSharedSettingsRequest_descriptor_,
      UpdateClubSharedSettingsRequest::default_instance_,
      UpdateClubSharedSettingsRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateClubSharedSettingsRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateClubSharedSettingsRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateClubSharedSettingsRequest));
  GetStreamMentionsRequest_descriptor_ = file->message_type(6);
  static const int GetStreamMentionsRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStreamMentionsRequest, agent_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStreamMentionsRequest, options_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStreamMentionsRequest, fetch_messages_),
  };
  GetStreamMentionsRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetStreamMentionsRequest_descriptor_,
      GetStreamMentionsRequest::default_instance_,
      GetStreamMentionsRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStreamMentionsRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStreamMentionsRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetStreamMentionsRequest));
  GetStreamMentionsResponse_descriptor_ = file->message_type(7);
  static const int GetStreamMentionsResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStreamMentionsResponse, mention_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStreamMentionsResponse, continuation_),
  };
  GetStreamMentionsResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetStreamMentionsResponse_descriptor_,
      GetStreamMentionsResponse::default_instance_,
      GetStreamMentionsResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStreamMentionsResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStreamMentionsResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetStreamMentionsResponse));
  RemoveStreamMentionsRequest_descriptor_ = file->message_type(8);
  static const int RemoveStreamMentionsRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveStreamMentionsRequest, agent_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveStreamMentionsRequest, mention_id_),
  };
  RemoveStreamMentionsRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RemoveStreamMentionsRequest_descriptor_,
      RemoveStreamMentionsRequest::default_instance_,
      RemoveStreamMentionsRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveStreamMentionsRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveStreamMentionsRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RemoveStreamMentionsRequest));
  AdvanceStreamMentionViewTimeRequest_descriptor_ = file->message_type(9);
  static const int AdvanceStreamMentionViewTimeRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdvanceStreamMentionViewTimeRequest, agent_id_),
  };
  AdvanceStreamMentionViewTimeRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AdvanceStreamMentionViewTimeRequest_descriptor_,
      AdvanceStreamMentionViewTimeRequest::default_instance_,
      AdvanceStreamMentionViewTimeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdvanceStreamMentionViewTimeRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdvanceStreamMentionViewTimeRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AdvanceStreamMentionViewTimeRequest));
  ClubMembershipService_descriptor_ = file->service(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_club_5fmembership_5fservice_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SubscribeRequest_descriptor_, &SubscribeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SubscribeResponse_descriptor_, &SubscribeResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UnsubscribeRequest_descriptor_, &UnsubscribeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetStateRequest_descriptor_, &GetStateRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetStateResponse_descriptor_, &GetStateResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateClubSharedSettingsRequest_descriptor_, &UpdateClubSharedSettingsRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetStreamMentionsRequest_descriptor_, &GetStreamMentionsRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetStreamMentionsResponse_descriptor_, &GetStreamMentionsResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RemoveStreamMentionsRequest_descriptor_, &RemoveStreamMentionsRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AdvanceStreamMentionViewTimeRequest_descriptor_, &AdvanceStreamMentionViewTimeRequest::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_club_5fmembership_5fservice_2eproto() {
  delete SubscribeRequest::default_instance_;
  delete SubscribeRequest_reflection_;
  delete SubscribeResponse::default_instance_;
  delete SubscribeResponse_reflection_;
  delete UnsubscribeRequest::default_instance_;
  delete UnsubscribeRequest_reflection_;
  delete GetStateRequest::default_instance_;
  delete GetStateRequest_reflection_;
  delete GetStateResponse::default_instance_;
  delete GetStateResponse_reflection_;
  delete UpdateClubSharedSettingsRequest::default_instance_;
  delete UpdateClubSharedSettingsRequest_reflection_;
  delete GetStreamMentionsRequest::default_instance_;
  delete GetStreamMentionsRequest_reflection_;
  delete GetStreamMentionsResponse::default_instance_;
  delete GetStreamMentionsResponse_reflection_;
  delete RemoveStreamMentionsRequest::default_instance_;
  delete RemoveStreamMentionsRequest_reflection_;
  delete AdvanceStreamMentionViewTimeRequest::default_instance_;
  delete AdvanceStreamMentionViewTimeRequest_reflection_;
}

void protobuf_AddDesc_club_5fmembership_5fservice_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::bgs::protocol::club::v1::protobuf_AddDesc_club_5ftypes_2eproto();
  ::bgs::protocol::club::v1::protobuf_AddDesc_club_5fstream_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\035club_membership_service.proto\022\037bgs.pro"
    "tocol.club.v1.membership\032\020club_types.pro"
    "to\032\021club_stream.proto\"\227\001\n\020SubscribeReque"
    "st\022<\n\010agent_id\030\001 \001(\0132\".bgs.protocol.acco"
    "unt.v1.AccountIdB\006\202\371+\002\020\001\022E\n\007options\030\002 \001("
    "\01324.bgs.protocol.club.v1.ClubMembershipS"
    "ubscribeOptions\"M\n\021SubscribeResponse\0228\n\005"
    "state\030\001 \001(\0132).bgs.protocol.club.v1.ClubM"
    "embershipState\"R\n\022UnsubscribeRequest\022<\n\010"
    "agent_id\030\001 \001(\0132\".bgs.protocol.account.v1"
    ".AccountIdB\006\202\371+\002\020\001\"\225\001\n\017GetStateRequest\022<"
    "\n\010agent_id\030\001 \001(\0132\".bgs.protocol.account."
    "v1.AccountIdB\006\202\371+\002\020\001\022D\n\007options\030\002 \001(\01323."
    "bgs.protocol.club.v1.ClubMembershipGetSt"
    "ateOptions\"L\n\020GetStateResponse\0228\n\005state\030"
    "\001 \001(\0132).bgs.protocol.club.v1.ClubMembers"
    "hipState\"\241\001\n\037UpdateClubSharedSettingsReq"
    "uest\022<\n\010agent_id\030\001 \001(\0132\".bgs.protocol.ac"
    "count.v1.AccountIdB\006\202\371+\002\020\001\022@\n\007options\030\002 "
    "\001(\0132/.bgs.protocol.club.v1.ClubSharedSet"
    "tingsOptions\"\240\001\n\030GetStreamMentionsReques"
    "t\022<\n\010agent_id\030\001 \001(\0132\".bgs.protocol.accou"
    "nt.v1.AccountIdB\006\202\371+\002\020\001\022.\n\007options\030\002 \001(\013"
    "2\035.bgs.protocol.GetEventOptions\022\026\n\016fetch"
    "_messages\030\003 \001(\010\"g\n\031GetStreamMentionsResp"
    "onse\0224\n\007mention\030\001 \003(\0132#.bgs.protocol.clu"
    "b.v1.StreamMention\022\024\n\014continuation\030\002 \001(\004"
    "\"\213\001\n\033RemoveStreamMentionsRequest\022<\n\010agen"
    "t_id\030\001 \001(\0132\".bgs.protocol.account.v1.Acc"
    "ountIdB\006\202\371+\002\020\001\022.\n\nmention_id\030\002 \003(\0132\032.bgs"
    ".protocol.TimeSeriesId\"c\n#AdvanceStreamM"
    "entionViewTimeRequest\022<\n\010agent_id\030\001 \001(\0132"
    "\".bgs.protocol.account.v1.AccountIdB\006\202\371+"
    "\002\020\0012\310\007\n\025ClubMembershipService\022z\n\tSubscri"
    "be\0221.bgs.protocol.club.v1.membership.Sub"
    "scribeRequest\0322.bgs.protocol.club.v1.mem"
    "bership.SubscribeResponse\"\006\202\371+\002\010\001\022`\n\013Uns"
    "ubscribe\0223.bgs.protocol.club.v1.membersh"
    "ip.UnsubscribeRequest\032\024.bgs.protocol.NoD"
    "ata\"\006\202\371+\002\010\002\022y\n\010GetState\0220.bgs.protocol.c"
    "lub.v1.membership.GetStateRequest\0321.bgs."
    "protocol.club.v1.membership.GetStateResp"
    "onse\"\010\202\371+\004\010\0030\001\022z\n\030UpdateClubSharedSettin"
    "gs\022@.bgs.protocol.club.v1.membership.Upd"
    "ateClubSharedSettingsRequest\032\024.bgs.proto"
    "col.NoData\"\006\202\371+\002\010\004\022\224\001\n\021GetStreamMentions"
    "\0229.bgs.protocol.club.v1.membership.GetSt"
    "reamMentionsRequest\032:.bgs.protocol.club."
    "v1.membership.GetStreamMentionsResponse\""
    "\010\202\371+\004\010\0050\001\022r\n\024RemoveStreamMentions\022<.bgs."
    "protocol.club.v1.membership.RemoveStream"
    "MentionsRequest\032\024.bgs.protocol.NoData\"\006\202"
    "\371+\002\010\006\022\202\001\n\034AdvanceStreamMentionViewTime\022D"
    ".bgs.protocol.club.v1.membership.Advance"
    "StreamMentionViewTimeRequest\032\024.bgs.proto"
    "col.NoData\"\006\202\371+\002\010\007\032J\202\371+>\n+bnet.protocol."
    "club.v1.ClubMembershipService*\017club_memb"
    "ership\212\371+\004\020\001\030\001B\005H\001\200\001\000", 2301);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "club_membership_service.proto", &protobuf_RegisterTypes);
  SubscribeRequest::default_instance_ = new SubscribeRequest();
  SubscribeResponse::default_instance_ = new SubscribeResponse();
  UnsubscribeRequest::default_instance_ = new UnsubscribeRequest();
  GetStateRequest::default_instance_ = new GetStateRequest();
  GetStateResponse::default_instance_ = new GetStateResponse();
  UpdateClubSharedSettingsRequest::default_instance_ = new UpdateClubSharedSettingsRequest();
  GetStreamMentionsRequest::default_instance_ = new GetStreamMentionsRequest();
  GetStreamMentionsResponse::default_instance_ = new GetStreamMentionsResponse();
  RemoveStreamMentionsRequest::default_instance_ = new RemoveStreamMentionsRequest();
  AdvanceStreamMentionViewTimeRequest::default_instance_ = new AdvanceStreamMentionViewTimeRequest();
  SubscribeRequest::default_instance_->InitAsDefaultInstance();
  SubscribeResponse::default_instance_->InitAsDefaultInstance();
  UnsubscribeRequest::default_instance_->InitAsDefaultInstance();
  GetStateRequest::default_instance_->InitAsDefaultInstance();
  GetStateResponse::default_instance_->InitAsDefaultInstance();
  UpdateClubSharedSettingsRequest::default_instance_->InitAsDefaultInstance();
  GetStreamMentionsRequest::default_instance_->InitAsDefaultInstance();
  GetStreamMentionsResponse::default_instance_->InitAsDefaultInstance();
  RemoveStreamMentionsRequest::default_instance_->InitAsDefaultInstance();
  AdvanceStreamMentionViewTimeRequest::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_club_5fmembership_5fservice_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_club_5fmembership_5fservice_2eproto {
  StaticDescriptorInitializer_club_5fmembership_5fservice_2eproto() {
    protobuf_AddDesc_club_5fmembership_5fservice_2eproto();
  }
} static_descriptor_initializer_club_5fmembership_5fservice_2eproto_;
// ===================================================================

#ifndef _MSC_VER
const int SubscribeRequest::kAgentIdFieldNumber;
const int SubscribeRequest::kOptionsFieldNumber;
#endif  // !_MSC_VER

SubscribeRequest::SubscribeRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.membership.SubscribeRequest)
}

void SubscribeRequest::InitAsDefaultInstance() {
  agent_id_ = const_cast< ::bgs::protocol::account::v1::AccountId*>(&::bgs::protocol::account::v1::AccountId::default_instance());
  options_ = const_cast< ::bgs::protocol::club::v1::ClubMembershipSubscribeOptions*>(&::bgs::protocol::club::v1::ClubMembershipSubscribeOptions::default_instance());
}

SubscribeRequest::SubscribeRequest(const SubscribeRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.membership.SubscribeRequest)
}

void SubscribeRequest::SharedCtor() {
  _cached_size_ = 0;
  agent_id_ = NULL;
  options_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubscribeRequest::~SubscribeRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.membership.SubscribeRequest)
  SharedDtor();
}

void SubscribeRequest::SharedDtor() {
  if (this != default_instance_) {
    delete agent_id_;
    delete options_;
  }
}

void SubscribeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubscribeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubscribeRequest_descriptor_;
}

const SubscribeRequest& SubscribeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_club_5fmembership_5fservice_2eproto();
  return *default_instance_;
}

SubscribeRequest* SubscribeRequest::default_instance_ = NULL;

SubscribeRequest* SubscribeRequest::New() const {
  return new SubscribeRequest;
}

void SubscribeRequest::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_agent_id()) {
      if (agent_id_ != NULL) agent_id_->::bgs::protocol::account::v1::AccountId::Clear();
    }
    if (has_options()) {
      if (options_ != NULL) options_->::bgs::protocol::club::v1::ClubMembershipSubscribeOptions::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SubscribeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bgs.protocol.club.v1.membership.SubscribeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .bgs.protocol.account.v1.AccountId agent_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_agent_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_options;
        break;
      }

      // optional .bgs.protocol.club.v1.ClubMembershipSubscribeOptions options = 2;
      case 2: {
        if (tag == 18) {
         parse_options:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_options()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bgs.protocol.club.v1.membership.SubscribeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bgs.protocol.club.v1.membership.SubscribeRequest)
  return false;
#undef DO_
}

void SubscribeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bgs.protocol.club.v1.membership.SubscribeRequest)
  // optional .bgs.protocol.account.v1.AccountId agent_id = 1;
  if (has_agent_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->agent_id(), output);
  }

  // optional .bgs.protocol.club.v1.ClubMembershipSubscribeOptions options = 2;
  if (has_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->options(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bgs.protocol.club.v1.membership.SubscribeRequest)
}

::google::protobuf::uint8* SubscribeRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.membership.SubscribeRequest)
  // optional .bgs.protocol.account.v1.AccountId agent_id = 1;
  if (has_agent_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->agent_id(), target);
  }

  // optional .bgs.protocol.club.v1.ClubMembershipSubscribeOptions options = 2;
  if (has_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->options(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.membership.SubscribeRequest)
  return target;
}

int SubscribeRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .bgs.protocol.account.v1.AccountId agent_id = 1;
    if (has_agent_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->agent_id());
    }

    // optional .bgs.protocol.club.v1.ClubMembershipSubscribeOptions options = 2;
    if (has_options()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->options());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubscribeRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SubscribeRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SubscribeRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SubscribeRequest::MergeFrom(const SubscribeRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_agent_id()) {
      mutable_agent_id()->::bgs::protocol::account::v1::AccountId::MergeFrom(from.agent_id());
    }
    if (from.has_options()) {
      mutable_options()->::bgs::protocol::club::v1::ClubMembershipSubscribeOptions::MergeFrom(from.options());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SubscribeRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeRequest::CopyFrom(const SubscribeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeRequest::IsInitialized() const {
  if (has_agent_id()) {
    if (!this->agent_id().IsInitialized()) return false;
  }
  if (has_options()) {
    if (!this->options().IsInitialized()) return false;
  }
  return true;
}

void SubscribeRequest::Swap(SubscribeRequest* other) {
  if (other != this) {
    std::swap(agent_id_, other->agent_id_);
    std::swap(options_, other->options_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SubscribeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubscribeRequest_descriptor_;
  metadata.reflection = SubscribeRequest_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int SubscribeResponse::kStateFieldNumber;
#endif  // !_MSC_VER

SubscribeResponse::SubscribeResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.membership.SubscribeResponse)
}

void SubscribeResponse::InitAsDefaultInstance() {
  state_ = const_cast< ::bgs::protocol::club::v1::ClubMembershipState*>(&::bgs::protocol::club::v1::ClubMembershipState::default_instance());
}

SubscribeResponse::SubscribeResponse(const SubscribeResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.membership.SubscribeResponse)
}

void SubscribeResponse::SharedCtor() {
  _cached_size_ = 0;
  state_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubscribeResponse::~SubscribeResponse() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.membership.SubscribeResponse)
  SharedDtor();
}

void SubscribeResponse::SharedDtor() {
  if (this != default_instance_) {
    delete state_;
  }
}

void SubscribeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubscribeResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubscribeResponse_descriptor_;
}

const SubscribeResponse& SubscribeResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_club_5fmembership_5fservice_2eproto();
  return *default_instance_;
}

SubscribeResponse* SubscribeResponse::default_instance_ = NULL;

SubscribeResponse* SubscribeResponse::New() const {
  return new SubscribeResponse;
}

void SubscribeResponse::Clear() {
  if (has_state()) {
    if (state_ != NULL) state_->::bgs::protocol::club::v1::ClubMembershipState::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SubscribeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bgs.protocol.club.v1.membership.SubscribeResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .bgs.protocol.club.v1.ClubMembershipState state = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bgs.protocol.club.v1.membership.SubscribeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bgs.protocol.club.v1.membership.SubscribeResponse)
  return false;
#undef DO_
}

void SubscribeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bgs.protocol.club.v1.membership.SubscribeResponse)
  // optional .bgs.protocol.club.v1.ClubMembershipState state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bgs.protocol.club.v1.membership.SubscribeResponse)
}

::google::protobuf::uint8* SubscribeResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.membership.SubscribeResponse)
  // optional .bgs.protocol.club.v1.ClubMembershipState state = 1;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.membership.SubscribeResponse)
  return target;
}

int SubscribeResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .bgs.protocol.club.v1.ClubMembershipState state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubscribeResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SubscribeResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SubscribeResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SubscribeResponse::MergeFrom(const SubscribeResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      mutable_state()->::bgs::protocol::club::v1::ClubMembershipState::MergeFrom(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SubscribeResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeResponse::CopyFrom(const SubscribeResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeResponse::IsInitialized() const {
  if (has_state()) {
    if (!this->state().IsInitialized()) return false;
  }
  return true;
}

void SubscribeResponse::Swap(SubscribeResponse* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SubscribeResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubscribeResponse_descriptor_;
  metadata.reflection = SubscribeResponse_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int UnsubscribeRequest::kAgentIdFieldNumber;
#endif  // !_MSC_VER

UnsubscribeRequest::UnsubscribeRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.membership.UnsubscribeRequest)
}

void UnsubscribeRequest::InitAsDefaultInstance() {
  agent_id_ = const_cast< ::bgs::protocol::account::v1::AccountId*>(&::bgs::protocol::account::v1::AccountId::default_instance());
}

UnsubscribeRequest::UnsubscribeRequest(const UnsubscribeRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.membership.UnsubscribeRequest)
}

void UnsubscribeRequest::SharedCtor() {
  _cached_size_ = 0;
  agent_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnsubscribeRequest::~UnsubscribeRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.membership.UnsubscribeRequest)
  SharedDtor();
}

void UnsubscribeRequest::SharedDtor() {
  if (this != default_instance_) {
    delete agent_id_;
  }
}

void UnsubscribeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnsubscribeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnsubscribeRequest_descriptor_;
}

const UnsubscribeRequest& UnsubscribeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_club_5fmembership_5fservice_2eproto();
  return *default_instance_;
}

UnsubscribeRequest* UnsubscribeRequest::default_instance_ = NULL;

UnsubscribeRequest* UnsubscribeRequest::New() const {
  return new UnsubscribeRequest;
}

void UnsubscribeRequest::Clear() {
  if (has_agent_id()) {
    if (agent_id_ != NULL) agent_id_->::bgs::protocol::account::v1::AccountId::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UnsubscribeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bgs.protocol.club.v1.membership.UnsubscribeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .bgs.protocol.account.v1.AccountId agent_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_agent_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bgs.protocol.club.v1.membership.UnsubscribeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bgs.protocol.club.v1.membership.UnsubscribeRequest)
  return false;
#undef DO_
}

void UnsubscribeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bgs.protocol.club.v1.membership.UnsubscribeRequest)
  // optional .bgs.protocol.account.v1.AccountId agent_id = 1;
  if (has_agent_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->agent_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bgs.protocol.club.v1.membership.UnsubscribeRequest)
}

::google::protobuf::uint8* UnsubscribeRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.membership.UnsubscribeRequest)
  // optional .bgs.protocol.account.v1.AccountId agent_id = 1;
  if (has_agent_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->agent_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.membership.UnsubscribeRequest)
  return target;
}

int UnsubscribeRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .bgs.protocol.account.v1.AccountId agent_id = 1;
    if (has_agent_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->agent_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnsubscribeRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UnsubscribeRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UnsubscribeRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UnsubscribeRequest::MergeFrom(const UnsubscribeRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_agent_id()) {
      mutable_agent_id()->::bgs::protocol::account::v1::AccountId::MergeFrom(from.agent_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UnsubscribeRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnsubscribeRequest::CopyFrom(const UnsubscribeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnsubscribeRequest::IsInitialized() const {
  if (has_agent_id()) {
    if (!this->agent_id().IsInitialized()) return false;
  }
  return true;
}

void UnsubscribeRequest::Swap(UnsubscribeRequest* other) {
  if (other != this) {
    std::swap(agent_id_, other->agent_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UnsubscribeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnsubscribeRequest_descriptor_;
  metadata.reflection = UnsubscribeRequest_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int GetStateRequest::kAgentIdFieldNumber;
const int GetStateRequest::kOptionsFieldNumber;
#endif  // !_MSC_VER

GetStateRequest::GetStateRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.membership.GetStateRequest)
}

void GetStateRequest::InitAsDefaultInstance() {
  agent_id_ = const_cast< ::bgs::protocol::account::v1::AccountId*>(&::bgs::protocol::account::v1::AccountId::default_instance());
  options_ = const_cast< ::bgs::protocol::club::v1::ClubMembershipGetStateOptions*>(&::bgs::protocol::club::v1::ClubMembershipGetStateOptions::default_instance());
}

GetStateRequest::GetStateRequest(const GetStateRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.membership.GetStateRequest)
}

void GetStateRequest::SharedCtor() {
  _cached_size_ = 0;
  agent_id_ = NULL;
  options_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetStateRequest::~GetStateRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.membership.GetStateRequest)
  SharedDtor();
}

void GetStateRequest::SharedDtor() {
  if (this != default_instance_) {
    delete agent_id_;
    delete options_;
  }
}

void GetStateRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetStateRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetStateRequest_descriptor_;
}

const GetStateRequest& GetStateRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_club_5fmembership_5fservice_2eproto();
  return *default_instance_;
}

GetStateRequest* GetStateRequest::default_instance_ = NULL;

GetStateRequest* GetStateRequest::New() const {
  return new GetStateRequest;
}

void GetStateRequest::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_agent_id()) {
      if (agent_id_ != NULL) agent_id_->::bgs::protocol::account::v1::AccountId::Clear();
    }
    if (has_options()) {
      if (options_ != NULL) options_->::bgs::protocol::club::v1::ClubMembershipGetStateOptions::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetStateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bgs.protocol.club.v1.membership.GetStateRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .bgs.protocol.account.v1.AccountId agent_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_agent_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_options;
        break;
      }

      // optional .bgs.protocol.club.v1.ClubMembershipGetStateOptions options = 2;
      case 2: {
        if (tag == 18) {
         parse_options:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_options()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bgs.protocol.club.v1.membership.GetStateRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bgs.protocol.club.v1.membership.GetStateRequest)
  return false;
#undef DO_
}

void GetStateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bgs.protocol.club.v1.membership.GetStateRequest)
  // optional .bgs.protocol.account.v1.AccountId agent_id = 1;
  if (has_agent_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->agent_id(), output);
  }

  // optional .bgs.protocol.club.v1.ClubMembershipGetStateOptions options = 2;
  if (has_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->options(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bgs.protocol.club.v1.membership.GetStateRequest)
}

::google::protobuf::uint8* GetStateRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.membership.GetStateRequest)
  // optional .bgs.protocol.account.v1.AccountId agent_id = 1;
  if (has_agent_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->agent_id(), target);
  }

  // optional .bgs.protocol.club.v1.ClubMembershipGetStateOptions options = 2;
  if (has_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->options(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.membership.GetStateRequest)
  return target;
}

int GetStateRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .bgs.protocol.account.v1.AccountId agent_id = 1;
    if (has_agent_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->agent_id());
    }

    // optional .bgs.protocol.club.v1.ClubMembershipGetStateOptions options = 2;
    if (has_options()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->options());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetStateRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetStateRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetStateRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetStateRequest::MergeFrom(const GetStateRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_agent_id()) {
      mutable_agent_id()->::bgs::protocol::account::v1::AccountId::MergeFrom(from.agent_id());
    }
    if (from.has_options()) {
      mutable_options()->::bgs::protocol::club::v1::ClubMembershipGetStateOptions::MergeFrom(from.options());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetStateRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetStateRequest::CopyFrom(const GetStateRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStateRequest::IsInitialized() const {
  if (has_agent_id()) {
    if (!this->agent_id().IsInitialized()) return false;
  }
  if (has_options()) {
    if (!this->options().IsInitialized()) return false;
  }
  return true;
}

void GetStateRequest::Swap(GetStateRequest* other) {
  if (other != this) {
    std::swap(agent_id_, other->agent_id_);
    std::swap(options_, other->options_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetStateRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetStateRequest_descriptor_;
  metadata.reflection = GetStateRequest_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int GetStateResponse::kStateFieldNumber;
#endif  // !_MSC_VER

GetStateResponse::GetStateResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.membership.GetStateResponse)
}

void GetStateResponse::InitAsDefaultInstance() {
  state_ = const_cast< ::bgs::protocol::club::v1::ClubMembershipState*>(&::bgs::protocol::club::v1::ClubMembershipState::default_instance());
}

GetStateResponse::GetStateResponse(const GetStateResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.membership.GetStateResponse)
}

void GetStateResponse::SharedCtor() {
  _cached_size_ = 0;
  state_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetStateResponse::~GetStateResponse() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.membership.GetStateResponse)
  SharedDtor();
}

void GetStateResponse::SharedDtor() {
  if (this != default_instance_) {
    delete state_;
  }
}

void GetStateResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetStateResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetStateResponse_descriptor_;
}

const GetStateResponse& GetStateResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_club_5fmembership_5fservice_2eproto();
  return *default_instance_;
}

GetStateResponse* GetStateResponse::default_instance_ = NULL;

GetStateResponse* GetStateResponse::New() const {
  return new GetStateResponse;
}

void GetStateResponse::Clear() {
  if (has_state()) {
    if (state_ != NULL) state_->::bgs::protocol::club::v1::ClubMembershipState::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetStateResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bgs.protocol.club.v1.membership.GetStateResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .bgs.protocol.club.v1.ClubMembershipState state = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bgs.protocol.club.v1.membership.GetStateResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bgs.protocol.club.v1.membership.GetStateResponse)
  return false;
#undef DO_
}

void GetStateResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bgs.protocol.club.v1.membership.GetStateResponse)
  // optional .bgs.protocol.club.v1.ClubMembershipState state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bgs.protocol.club.v1.membership.GetStateResponse)
}

::google::protobuf::uint8* GetStateResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.membership.GetStateResponse)
  // optional .bgs.protocol.club.v1.ClubMembershipState state = 1;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.membership.GetStateResponse)
  return target;
}

int GetStateResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .bgs.protocol.club.v1.ClubMembershipState state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetStateResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetStateResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetStateResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetStateResponse::MergeFrom(const GetStateResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      mutable_state()->::bgs::protocol::club::v1::ClubMembershipState::MergeFrom(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetStateResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetStateResponse::CopyFrom(const GetStateResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStateResponse::IsInitialized() const {
  if (has_state()) {
    if (!this->state().IsInitialized()) return false;
  }
  return true;
}

void GetStateResponse::Swap(GetStateResponse* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetStateResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetStateResponse_descriptor_;
  metadata.reflection = GetStateResponse_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int UpdateClubSharedSettingsRequest::kAgentIdFieldNumber;
const int UpdateClubSharedSettingsRequest::kOptionsFieldNumber;
#endif  // !_MSC_VER

UpdateClubSharedSettingsRequest::UpdateClubSharedSettingsRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.membership.UpdateClubSharedSettingsRequest)
}

void UpdateClubSharedSettingsRequest::InitAsDefaultInstance() {
  agent_id_ = const_cast< ::bgs::protocol::account::v1::AccountId*>(&::bgs::protocol::account::v1::AccountId::default_instance());
  options_ = const_cast< ::bgs::protocol::club::v1::ClubSharedSettingsOptions*>(&::bgs::protocol::club::v1::ClubSharedSettingsOptions::default_instance());
}

UpdateClubSharedSettingsRequest::UpdateClubSharedSettingsRequest(const UpdateClubSharedSettingsRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.membership.UpdateClubSharedSettingsRequest)
}

void UpdateClubSharedSettingsRequest::SharedCtor() {
  _cached_size_ = 0;
  agent_id_ = NULL;
  options_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateClubSharedSettingsRequest::~UpdateClubSharedSettingsRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.membership.UpdateClubSharedSettingsRequest)
  SharedDtor();
}

void UpdateClubSharedSettingsRequest::SharedDtor() {
  if (this != default_instance_) {
    delete agent_id_;
    delete options_;
  }
}

void UpdateClubSharedSettingsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateClubSharedSettingsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateClubSharedSettingsRequest_descriptor_;
}

const UpdateClubSharedSettingsRequest& UpdateClubSharedSettingsRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_club_5fmembership_5fservice_2eproto();
  return *default_instance_;
}

UpdateClubSharedSettingsRequest* UpdateClubSharedSettingsRequest::default_instance_ = NULL;

UpdateClubSharedSettingsRequest* UpdateClubSharedSettingsRequest::New() const {
  return new UpdateClubSharedSettingsRequest;
}

void UpdateClubSharedSettingsRequest::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_agent_id()) {
      if (agent_id_ != NULL) agent_id_->::bgs::protocol::account::v1::AccountId::Clear();
    }
    if (has_options()) {
      if (options_ != NULL) options_->::bgs::protocol::club::v1::ClubSharedSettingsOptions::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateClubSharedSettingsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bgs.protocol.club.v1.membership.UpdateClubSharedSettingsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .bgs.protocol.account.v1.AccountId agent_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_agent_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_options;
        break;
      }

      // optional .bgs.protocol.club.v1.ClubSharedSettingsOptions options = 2;
      case 2: {
        if (tag == 18) {
         parse_options:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_options()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bgs.protocol.club.v1.membership.UpdateClubSharedSettingsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bgs.protocol.club.v1.membership.UpdateClubSharedSettingsRequest)
  return false;
#undef DO_
}

void UpdateClubSharedSettingsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bgs.protocol.club.v1.membership.UpdateClubSharedSettingsRequest)
  // optional .bgs.protocol.account.v1.AccountId agent_id = 1;
  if (has_agent_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->agent_id(), output);
  }

  // optional .bgs.protocol.club.v1.ClubSharedSettingsOptions options = 2;
  if (has_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->options(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bgs.protocol.club.v1.membership.UpdateClubSharedSettingsRequest)
}

::google::protobuf::uint8* UpdateClubSharedSettingsRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.membership.UpdateClubSharedSettingsRequest)
  // optional .bgs.protocol.account.v1.AccountId agent_id = 1;
  if (has_agent_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->agent_id(), target);
  }

  // optional .bgs.protocol.club.v1.ClubSharedSettingsOptions options = 2;
  if (has_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->options(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.membership.UpdateClubSharedSettingsRequest)
  return target;
}

int UpdateClubSharedSettingsRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .bgs.protocol.account.v1.AccountId agent_id = 1;
    if (has_agent_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->agent_id());
    }

    // optional .bgs.protocol.club.v1.ClubSharedSettingsOptions options = 2;
    if (has_options()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->options());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateClubSharedSettingsRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateClubSharedSettingsRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateClubSharedSettingsRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateClubSharedSettingsRequest::MergeFrom(const UpdateClubSharedSettingsRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_agent_id()) {
      mutable_agent_id()->::bgs::protocol::account::v1::AccountId::MergeFrom(from.agent_id());
    }
    if (from.has_options()) {
      mutable_options()->::bgs::protocol::club::v1::ClubSharedSettingsOptions::MergeFrom(from.options());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateClubSharedSettingsRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateClubSharedSettingsRequest::CopyFrom(const UpdateClubSharedSettingsRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateClubSharedSettingsRequest::IsInitialized() const {
  if (has_agent_id()) {
    if (!this->agent_id().IsInitialized()) return false;
  }
  return true;
}

void UpdateClubSharedSettingsRequest::Swap(UpdateClubSharedSettingsRequest* other) {
  if (other != this) {
    std::swap(agent_id_, other->agent_id_);
    std::swap(options_, other->options_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateClubSharedSettingsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateClubSharedSettingsRequest_descriptor_;
  metadata.reflection = UpdateClubSharedSettingsRequest_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int GetStreamMentionsRequest::kAgentIdFieldNumber;
const int GetStreamMentionsRequest::kOptionsFieldNumber;
const int GetStreamMentionsRequest::kFetchMessagesFieldNumber;
#endif  // !_MSC_VER

GetStreamMentionsRequest::GetStreamMentionsRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.membership.GetStreamMentionsRequest)
}

void GetStreamMentionsRequest::InitAsDefaultInstance() {
  agent_id_ = const_cast< ::bgs::protocol::account::v1::AccountId*>(&::bgs::protocol::account::v1::AccountId::default_instance());
  options_ = const_cast< ::bgs::protocol::GetEventOptions*>(&::bgs::protocol::GetEventOptions::default_instance());
}

GetStreamMentionsRequest::GetStreamMentionsRequest(const GetStreamMentionsRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.membership.GetStreamMentionsRequest)
}

void GetStreamMentionsRequest::SharedCtor() {
  _cached_size_ = 0;
  agent_id_ = NULL;
  options_ = NULL;
  fetch_messages_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetStreamMentionsRequest::~GetStreamMentionsRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.membership.GetStreamMentionsRequest)
  SharedDtor();
}

void GetStreamMentionsRequest::SharedDtor() {
  if (this != default_instance_) {
    delete agent_id_;
    delete options_;
  }
}

void GetStreamMentionsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetStreamMentionsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetStreamMentionsRequest_descriptor_;
}

const GetStreamMentionsRequest& GetStreamMentionsRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_club_5fmembership_5fservice_2eproto();
  return *default_instance_;
}

GetStreamMentionsRequest* GetStreamMentionsRequest::default_instance_ = NULL;

GetStreamMentionsRequest* GetStreamMentionsRequest::New() const {
  return new GetStreamMentionsRequest;
}

void GetStreamMentionsRequest::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_agent_id()) {
      if (agent_id_ != NULL) agent_id_->::bgs::protocol::account::v1::AccountId::Clear();
    }
    if (has_options()) {
      if (options_ != NULL) options_->::bgs::protocol::GetEventOptions::Clear();
    }
    fetch_messages_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetStreamMentionsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bgs.protocol.club.v1.membership.GetStreamMentionsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .bgs.protocol.account.v1.AccountId agent_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_agent_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_options;
        break;
      }

      // optional .bgs.protocol.GetEventOptions options = 2;
      case 2: {
        if (tag == 18) {
         parse_options:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_options()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_fetch_messages;
        break;
      }

      // optional bool fetch_messages = 3;
      case 3: {
        if (tag == 24) {
         parse_fetch_messages:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fetch_messages_)));
          set_has_fetch_messages();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bgs.protocol.club.v1.membership.GetStreamMentionsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bgs.protocol.club.v1.membership.GetStreamMentionsRequest)
  return false;
#undef DO_
}

void GetStreamMentionsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bgs.protocol.club.v1.membership.GetStreamMentionsRequest)
  // optional .bgs.protocol.account.v1.AccountId agent_id = 1;
  if (has_agent_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->agent_id(), output);
  }

  // optional .bgs.protocol.GetEventOptions options = 2;
  if (has_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->options(), output);
  }

  // optional bool fetch_messages = 3;
  if (has_fetch_messages()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->fetch_messages(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bgs.protocol.club.v1.membership.GetStreamMentionsRequest)
}

::google::protobuf::uint8* GetStreamMentionsRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.membership.GetStreamMentionsRequest)
  // optional .bgs.protocol.account.v1.AccountId agent_id = 1;
  if (has_agent_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->agent_id(), target);
  }

  // optional .bgs.protocol.GetEventOptions options = 2;
  if (has_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->options(), target);
  }

  // optional bool fetch_messages = 3;
  if (has_fetch_messages()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->fetch_messages(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.membership.GetStreamMentionsRequest)
  return target;
}

int GetStreamMentionsRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .bgs.protocol.account.v1.AccountId agent_id = 1;
    if (has_agent_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->agent_id());
    }

    // optional .bgs.protocol.GetEventOptions options = 2;
    if (has_options()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->options());
    }

    // optional bool fetch_messages = 3;
    if (has_fetch_messages()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetStreamMentionsRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetStreamMentionsRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetStreamMentionsRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetStreamMentionsRequest::MergeFrom(const GetStreamMentionsRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_agent_id()) {
      mutable_agent_id()->::bgs::protocol::account::v1::AccountId::MergeFrom(from.agent_id());
    }
    if (from.has_options()) {
      mutable_options()->::bgs::protocol::GetEventOptions::MergeFrom(from.options());
    }
    if (from.has_fetch_messages()) {
      set_fetch_messages(from.fetch_messages());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetStreamMentionsRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetStreamMentionsRequest::CopyFrom(const GetStreamMentionsRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStreamMentionsRequest::IsInitialized() const {
  if (has_agent_id()) {
    if (!this->agent_id().IsInitialized()) return false;
  }
  return true;
}

void GetStreamMentionsRequest::Swap(GetStreamMentionsRequest* other) {
  if (other != this) {
    std::swap(agent_id_, other->agent_id_);
    std::swap(options_, other->options_);
    std::swap(fetch_messages_, other->fetch_messages_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetStreamMentionsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetStreamMentionsRequest_descriptor_;
  metadata.reflection = GetStreamMentionsRequest_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int GetStreamMentionsResponse::kMentionFieldNumber;
const int GetStreamMentionsResponse::kContinuationFieldNumber;
#endif  // !_MSC_VER

GetStreamMentionsResponse::GetStreamMentionsResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.membership.GetStreamMentionsResponse)
}

void GetStreamMentionsResponse::InitAsDefaultInstance() {
}

GetStreamMentionsResponse::GetStreamMentionsResponse(const GetStreamMentionsResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.membership.GetStreamMentionsResponse)
}

void GetStreamMentionsResponse::SharedCtor() {
  _cached_size_ = 0;
  continuation_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetStreamMentionsResponse::~GetStreamMentionsResponse() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.membership.GetStreamMentionsResponse)
  SharedDtor();
}

void GetStreamMentionsResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetStreamMentionsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetStreamMentionsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetStreamMentionsResponse_descriptor_;
}

const GetStreamMentionsResponse& GetStreamMentionsResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_club_5fmembership_5fservice_2eproto();
  return *default_instance_;
}

GetStreamMentionsResponse* GetStreamMentionsResponse::default_instance_ = NULL;

GetStreamMentionsResponse* GetStreamMentionsResponse::New() const {
  return new GetStreamMentionsResponse;
}

void GetStreamMentionsResponse::Clear() {
  continuation_ = GOOGLE_ULONGLONG(0);
  mention_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetStreamMentionsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bgs.protocol.club.v1.membership.GetStreamMentionsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .bgs.protocol.club.v1.StreamMention mention = 1;
      case 1: {
        if (tag == 10) {
         parse_mention:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mention()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_mention;
        if (input->ExpectTag(16)) goto parse_continuation;
        break;
      }

      // optional uint64 continuation = 2;
      case 2: {
        if (tag == 16) {
         parse_continuation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &continuation_)));
          set_has_continuation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bgs.protocol.club.v1.membership.GetStreamMentionsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bgs.protocol.club.v1.membership.GetStreamMentionsResponse)
  return false;
#undef DO_
}

void GetStreamMentionsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bgs.protocol.club.v1.membership.GetStreamMentionsResponse)
  // repeated .bgs.protocol.club.v1.StreamMention mention = 1;
  for (int i = 0; i < this->mention_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mention(i), output);
  }

  // optional uint64 continuation = 2;
  if (has_continuation()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->continuation(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bgs.protocol.club.v1.membership.GetStreamMentionsResponse)
}

::google::protobuf::uint8* GetStreamMentionsResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.membership.GetStreamMentionsResponse)
  // repeated .bgs.protocol.club.v1.StreamMention mention = 1;
  for (int i = 0; i < this->mention_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mention(i), target);
  }

  // optional uint64 continuation = 2;
  if (has_continuation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->continuation(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.membership.GetStreamMentionsResponse)
  return target;
}

int GetStreamMentionsResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint64 continuation = 2;
    if (has_continuation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->continuation());
    }

  }
  // repeated .bgs.protocol.club.v1.StreamMention mention = 1;
  total_size += 1 * this->mention_size();
  for (int i = 0; i < this->mention_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mention(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetStreamMentionsResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetStreamMentionsResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetStreamMentionsResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetStreamMentionsResponse::MergeFrom(const GetStreamMentionsResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mention_.MergeFrom(from.mention_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_continuation()) {
      set_continuation(from.continuation());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetStreamMentionsResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetStreamMentionsResponse::CopyFrom(const GetStreamMentionsResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStreamMentionsResponse::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->mention())) return false;
  return true;
}

void GetStreamMentionsResponse::Swap(GetStreamMentionsResponse* other) {
  if (other != this) {
    mention_.Swap(&other->mention_);
    std::swap(continuation_, other->continuation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetStreamMentionsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetStreamMentionsResponse_descriptor_;
  metadata.reflection = GetStreamMentionsResponse_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int RemoveStreamMentionsRequest::kAgentIdFieldNumber;
const int RemoveStreamMentionsRequest::kMentionIdFieldNumber;
#endif  // !_MSC_VER

RemoveStreamMentionsRequest::RemoveStreamMentionsRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.membership.RemoveStreamMentionsRequest)
}

void RemoveStreamMentionsRequest::InitAsDefaultInstance() {
  agent_id_ = const_cast< ::bgs::protocol::account::v1::AccountId*>(&::bgs::protocol::account::v1::AccountId::default_instance());
}

RemoveStreamMentionsRequest::RemoveStreamMentionsRequest(const RemoveStreamMentionsRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.membership.RemoveStreamMentionsRequest)
}

void RemoveStreamMentionsRequest::SharedCtor() {
  _cached_size_ = 0;
  agent_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RemoveStreamMentionsRequest::~RemoveStreamMentionsRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.membership.RemoveStreamMentionsRequest)
  SharedDtor();
}

void RemoveStreamMentionsRequest::SharedDtor() {
  if (this != default_instance_) {
    delete agent_id_;
  }
}

void RemoveStreamMentionsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RemoveStreamMentionsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RemoveStreamMentionsRequest_descriptor_;
}

const RemoveStreamMentionsRequest& RemoveStreamMentionsRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_club_5fmembership_5fservice_2eproto();
  return *default_instance_;
}

RemoveStreamMentionsRequest* RemoveStreamMentionsRequest::default_instance_ = NULL;

RemoveStreamMentionsRequest* RemoveStreamMentionsRequest::New() const {
  return new RemoveStreamMentionsRequest;
}

void RemoveStreamMentionsRequest::Clear() {
  if (has_agent_id()) {
    if (agent_id_ != NULL) agent_id_->::bgs::protocol::account::v1::AccountId::Clear();
  }
  mention_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RemoveStreamMentionsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bgs.protocol.club.v1.membership.RemoveStreamMentionsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .bgs.protocol.account.v1.AccountId agent_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_agent_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_mention_id;
        break;
      }

      // repeated .bgs.protocol.TimeSeriesId mention_id = 2;
      case 2: {
        if (tag == 18) {
         parse_mention_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mention_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_mention_id;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bgs.protocol.club.v1.membership.RemoveStreamMentionsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bgs.protocol.club.v1.membership.RemoveStreamMentionsRequest)
  return false;
#undef DO_
}

void RemoveStreamMentionsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bgs.protocol.club.v1.membership.RemoveStreamMentionsRequest)
  // optional .bgs.protocol.account.v1.AccountId agent_id = 1;
  if (has_agent_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->agent_id(), output);
  }

  // repeated .bgs.protocol.TimeSeriesId mention_id = 2;
  for (int i = 0; i < this->mention_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->mention_id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bgs.protocol.club.v1.membership.RemoveStreamMentionsRequest)
}

::google::protobuf::uint8* RemoveStreamMentionsRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.membership.RemoveStreamMentionsRequest)
  // optional .bgs.protocol.account.v1.AccountId agent_id = 1;
  if (has_agent_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->agent_id(), target);
  }

  // repeated .bgs.protocol.TimeSeriesId mention_id = 2;
  for (int i = 0; i < this->mention_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->mention_id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.membership.RemoveStreamMentionsRequest)
  return target;
}

int RemoveStreamMentionsRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .bgs.protocol.account.v1.AccountId agent_id = 1;
    if (has_agent_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->agent_id());
    }

  }
  // repeated .bgs.protocol.TimeSeriesId mention_id = 2;
  total_size += 1 * this->mention_id_size();
  for (int i = 0; i < this->mention_id_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mention_id(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemoveStreamMentionsRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RemoveStreamMentionsRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RemoveStreamMentionsRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RemoveStreamMentionsRequest::MergeFrom(const RemoveStreamMentionsRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mention_id_.MergeFrom(from.mention_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_agent_id()) {
      mutable_agent_id()->::bgs::protocol::account::v1::AccountId::MergeFrom(from.agent_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RemoveStreamMentionsRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveStreamMentionsRequest::CopyFrom(const RemoveStreamMentionsRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveStreamMentionsRequest::IsInitialized() const {
  if (has_agent_id()) {
    if (!this->agent_id().IsInitialized()) return false;
  }
  return true;
}

void RemoveStreamMentionsRequest::Swap(RemoveStreamMentionsRequest* other) {
  if (other != this) {
    std::swap(agent_id_, other->agent_id_);
    mention_id_.Swap(&other->mention_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RemoveStreamMentionsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RemoveStreamMentionsRequest_descriptor_;
  metadata.reflection = RemoveStreamMentionsRequest_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int AdvanceStreamMentionViewTimeRequest::kAgentIdFieldNumber;
#endif  // !_MSC_VER

AdvanceStreamMentionViewTimeRequest::AdvanceStreamMentionViewTimeRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.membership.AdvanceStreamMentionViewTimeRequest)
}

void AdvanceStreamMentionViewTimeRequest::InitAsDefaultInstance() {
  agent_id_ = const_cast< ::bgs::protocol::account::v1::AccountId*>(&::bgs::protocol::account::v1::AccountId::default_instance());
}

AdvanceStreamMentionViewTimeRequest::AdvanceStreamMentionViewTimeRequest(const AdvanceStreamMentionViewTimeRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.membership.AdvanceStreamMentionViewTimeRequest)
}

void AdvanceStreamMentionViewTimeRequest::SharedCtor() {
  _cached_size_ = 0;
  agent_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AdvanceStreamMentionViewTimeRequest::~AdvanceStreamMentionViewTimeRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.membership.AdvanceStreamMentionViewTimeRequest)
  SharedDtor();
}

void AdvanceStreamMentionViewTimeRequest::SharedDtor() {
  if (this != default_instance_) {
    delete agent_id_;
  }
}

void AdvanceStreamMentionViewTimeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AdvanceStreamMentionViewTimeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdvanceStreamMentionViewTimeRequest_descriptor_;
}

const AdvanceStreamMentionViewTimeRequest& AdvanceStreamMentionViewTimeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_club_5fmembership_5fservice_2eproto();
  return *default_instance_;
}

AdvanceStreamMentionViewTimeRequest* AdvanceStreamMentionViewTimeRequest::default_instance_ = NULL;

AdvanceStreamMentionViewTimeRequest* AdvanceStreamMentionViewTimeRequest::New() const {
  return new AdvanceStreamMentionViewTimeRequest;
}

void AdvanceStreamMentionViewTimeRequest::Clear() {
  if (has_agent_id()) {
    if (agent_id_ != NULL) agent_id_->::bgs::protocol::account::v1::AccountId::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AdvanceStreamMentionViewTimeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bgs.protocol.club.v1.membership.AdvanceStreamMentionViewTimeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .bgs.protocol.account.v1.AccountId agent_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_agent_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bgs.protocol.club.v1.membership.AdvanceStreamMentionViewTimeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bgs.protocol.club.v1.membership.AdvanceStreamMentionViewTimeRequest)
  return false;
#undef DO_
}

void AdvanceStreamMentionViewTimeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bgs.protocol.club.v1.membership.AdvanceStreamMentionViewTimeRequest)
  // optional .bgs.protocol.account.v1.AccountId agent_id = 1;
  if (has_agent_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->agent_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bgs.protocol.club.v1.membership.AdvanceStreamMentionViewTimeRequest)
}

::google::protobuf::uint8* AdvanceStreamMentionViewTimeRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.membership.AdvanceStreamMentionViewTimeRequest)
  // optional .bgs.protocol.account.v1.AccountId agent_id = 1;
  if (has_agent_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->agent_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.membership.AdvanceStreamMentionViewTimeRequest)
  return target;
}

int AdvanceStreamMentionViewTimeRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .bgs.protocol.account.v1.AccountId agent_id = 1;
    if (has_agent_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->agent_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AdvanceStreamMentionViewTimeRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AdvanceStreamMentionViewTimeRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AdvanceStreamMentionViewTimeRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AdvanceStreamMentionViewTimeRequest::MergeFrom(const AdvanceStreamMentionViewTimeRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_agent_id()) {
      mutable_agent_id()->::bgs::protocol::account::v1::AccountId::MergeFrom(from.agent_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AdvanceStreamMentionViewTimeRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdvanceStreamMentionViewTimeRequest::CopyFrom(const AdvanceStreamMentionViewTimeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdvanceStreamMentionViewTimeRequest::IsInitialized() const {
  if (has_agent_id()) {
    if (!this->agent_id().IsInitialized()) return false;
  }
  return true;
}

void AdvanceStreamMentionViewTimeRequest::Swap(AdvanceStreamMentionViewTimeRequest* other) {
  if (other != this) {
    std::swap(agent_id_, other->agent_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AdvanceStreamMentionViewTimeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AdvanceStreamMentionViewTimeRequest_descriptor_;
  metadata.reflection = AdvanceStreamMentionViewTimeRequest_reflection_;
  return metadata;
}

// ===================================================================

ClubMembershipService::ClubMembershipService(bool use_original_hash) : service_hash_(use_original_hash ? OriginalHash::value : NameHash::value) {
}

ClubMembershipService::~ClubMembershipService() {
}

google::protobuf::ServiceDescriptor const* ClubMembershipService::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClubMembershipService_descriptor_;
}

void ClubMembershipService::CallServerMethod(uint32 token, uint32 methodId, MessageBuffer buffer) {
  switch(methodId & 0x3FFFFFFF) {
    case 1: {
      ::bgs::protocol::club::v1::membership::SubscribeRequest request;
      if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
        TC_LOG_DEBUG("service.protobuf", "%s Failed to parse request for ClubMembershipService.Subscribe server method call.", GetCallerInfo().c_str());
        SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
        return;
      }
      TC_LOG_DEBUG("service.protobuf", "%s Client called server method ClubMembershipService.Subscribe(bgs.protocol.club.v1.membership.SubscribeRequest{ %s }).",
        GetCallerInfo().c_str(), request.ShortDebugString().c_str());
      std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = [token, methodId](ServiceBase* service, uint32 status, ::google::protobuf::Message const* response)
      {
        ASSERT(response->GetDescriptor() == ::bgs::protocol::club::v1::membership::SubscribeResponse::descriptor());
        ClubMembershipService* self = static_cast<ClubMembershipService*>(service);
        TC_LOG_DEBUG("service.protobuf", "%s Client called server method ClubMembershipService.Subscribe() returned bgs.protocol.club.v1.membership.SubscribeResponse{ %s } status %u.",
          self->GetCallerInfo().c_str(), response->ShortDebugString().c_str(), status);
        if (!status)
          self->SendResponse(self->service_hash_, methodId, token, response);
        else
          self->SendResponse(self->service_hash_, methodId, token, status);
      };
      ::bgs::protocol::club::v1::membership::SubscribeResponse response;
      uint32 status = HandleSubscribe(&request, &response, continuation);
      if (continuation)
        continuation(this, status, &response);
      break;
    }
    case 2: {
      ::bgs::protocol::club::v1::membership::UnsubscribeRequest request;
      if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
        TC_LOG_DEBUG("service.protobuf", "%s Failed to parse request for ClubMembershipService.Unsubscribe server method call.", GetCallerInfo().c_str());
        SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
        return;
      }
      TC_LOG_DEBUG("service.protobuf", "%s Client called server method ClubMembershipService.Unsubscribe(bgs.protocol.club.v1.membership.UnsubscribeRequest{ %s }).",
        GetCallerInfo().c_str(), request.ShortDebugString().c_str());
      std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = [token, methodId](ServiceBase* service, uint32 status, ::google::protobuf::Message const* response)
      {
        ASSERT(response->GetDescriptor() == ::bgs::protocol::NoData::descriptor());
        ClubMembershipService* self = static_cast<ClubMembershipService*>(service);
        TC_LOG_DEBUG("service.protobuf", "%s Client called server method ClubMembershipService.Unsubscribe() returned bgs.protocol.NoData{ %s } status %u.",
          self->GetCallerInfo().c_str(), response->ShortDebugString().c_str(), status);
        if (!status)
          self->SendResponse(self->service_hash_, methodId, token, response);
        else
          self->SendResponse(self->service_hash_, methodId, token, status);
      };
      ::bgs::protocol::NoData response;
      uint32 status = HandleUnsubscribe(&request, &response, continuation);
      if (continuation)
        continuation(this, status, &response);
      break;
    }
    case 3: {
      ::bgs::protocol::club::v1::membership::GetStateRequest request;
      if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
        TC_LOG_DEBUG("service.protobuf", "%s Failed to parse request for ClubMembershipService.GetState server method call.", GetCallerInfo().c_str());
        SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
        return;
      }
      TC_LOG_DEBUG("service.protobuf", "%s Client called server method ClubMembershipService.GetState(bgs.protocol.club.v1.membership.GetStateRequest{ %s }).",
        GetCallerInfo().c_str(), request.ShortDebugString().c_str());
      std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = [token, methodId](ServiceBase* service, uint32 status, ::google::protobuf::Message const* response)
      {
        ASSERT(response->GetDescriptor() == ::bgs::protocol::club::v1::membership::GetStateResponse::descriptor());
        ClubMembershipService* self = static_cast<ClubMembershipService*>(service);
        TC_LOG_DEBUG("service.protobuf", "%s Client called server method ClubMembershipService.GetState() returned bgs.protocol.club.v1.membership.GetStateResponse{ %s } status %u.",
          self->GetCallerInfo().c_str(), response->ShortDebugString().c_str(), status);
        if (!status)
          self->SendResponse(self->service_hash_, methodId, token, response);
        else
          self->SendResponse(self->service_hash_, methodId, token, status);
      };
      ::bgs::protocol::club::v1::membership::GetStateResponse response;
      uint32 status = HandleGetState(&request, &response, continuation);
      if (continuation)
        continuation(this, status, &response);
      break;
    }
    case 4: {
      ::bgs::protocol::club::v1::membership::UpdateClubSharedSettingsRequest request;
      if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
        TC_LOG_DEBUG("service.protobuf", "%s Failed to parse request for ClubMembershipService.UpdateClubSharedSettings server method call.", GetCallerInfo().c_str());
        SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
        return;
      }
      TC_LOG_DEBUG("service.protobuf", "%s Client called server method ClubMembershipService.UpdateClubSharedSettings(bgs.protocol.club.v1.membership.UpdateClubSharedSettingsRequest{ %s }).",
        GetCallerInfo().c_str(), request.ShortDebugString().c_str());
      std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = [token, methodId](ServiceBase* service, uint32 status, ::google::protobuf::Message const* response)
      {
        ASSERT(response->GetDescriptor() == ::bgs::protocol::NoData::descriptor());
        ClubMembershipService* self = static_cast<ClubMembershipService*>(service);
        TC_LOG_DEBUG("service.protobuf", "%s Client called server method ClubMembershipService.UpdateClubSharedSettings() returned bgs.protocol.NoData{ %s } status %u.",
          self->GetCallerInfo().c_str(), response->ShortDebugString().c_str(), status);
        if (!status)
          self->SendResponse(self->service_hash_, methodId, token, response);
        else
          self->SendResponse(self->service_hash_, methodId, token, status);
      };
      ::bgs::protocol::NoData response;
      uint32 status = HandleUpdateClubSharedSettings(&request, &response, continuation);
      if (continuation)
        continuation(this, status, &response);
      break;
    }
    case 5: {
      ::bgs::protocol::club::v1::membership::GetStreamMentionsRequest request;
      if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
        TC_LOG_DEBUG("service.protobuf", "%s Failed to parse request for ClubMembershipService.GetStreamMentions server method call.", GetCallerInfo().c_str());
        SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
        return;
      }
      TC_LOG_DEBUG("service.protobuf", "%s Client called server method ClubMembershipService.GetStreamMentions(bgs.protocol.club.v1.membership.GetStreamMentionsRequest{ %s }).",
        GetCallerInfo().c_str(), request.ShortDebugString().c_str());
      std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = [token, methodId](ServiceBase* service, uint32 status, ::google::protobuf::Message const* response)
      {
        ASSERT(response->GetDescriptor() == ::bgs::protocol::club::v1::membership::GetStreamMentionsResponse::descriptor());
        ClubMembershipService* self = static_cast<ClubMembershipService*>(service);
        TC_LOG_DEBUG("service.protobuf", "%s Client called server method ClubMembershipService.GetStreamMentions() returned bgs.protocol.club.v1.membership.GetStreamMentionsResponse{ %s } status %u.",
          self->GetCallerInfo().c_str(), response->ShortDebugString().c_str(), status);
        if (!status)
          self->SendResponse(self->service_hash_, methodId, token, response);
        else
          self->SendResponse(self->service_hash_, methodId, token, status);
      };
      ::bgs::protocol::club::v1::membership::GetStreamMentionsResponse response;
      uint32 status = HandleGetStreamMentions(&request, &response, continuation);
      if (continuation)
        continuation(this, status, &response);
      break;
    }
    case 6: {
      ::bgs::protocol::club::v1::membership::RemoveStreamMentionsRequest request;
      if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
        TC_LOG_DEBUG("service.protobuf", "%s Failed to parse request for ClubMembershipService.RemoveStreamMentions server method call.", GetCallerInfo().c_str());
        SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
        return;
      }
      TC_LOG_DEBUG("service.protobuf", "%s Client called server method ClubMembershipService.RemoveStreamMentions(bgs.protocol.club.v1.membership.RemoveStreamMentionsRequest{ %s }).",
        GetCallerInfo().c_str(), request.ShortDebugString().c_str());
      std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = [token, methodId](ServiceBase* service, uint32 status, ::google::protobuf::Message const* response)
      {
        ASSERT(response->GetDescriptor() == ::bgs::protocol::NoData::descriptor());
        ClubMembershipService* self = static_cast<ClubMembershipService*>(service);
        TC_LOG_DEBUG("service.protobuf", "%s Client called server method ClubMembershipService.RemoveStreamMentions() returned bgs.protocol.NoData{ %s } status %u.",
          self->GetCallerInfo().c_str(), response->ShortDebugString().c_str(), status);
        if (!status)
          self->SendResponse(self->service_hash_, methodId, token, response);
        else
          self->SendResponse(self->service_hash_, methodId, token, status);
      };
      ::bgs::protocol::NoData response;
      uint32 status = HandleRemoveStreamMentions(&request, &response, continuation);
      if (continuation)
        continuation(this, status, &response);
      break;
    }
    case 7: {
      ::bgs::protocol::club::v1::membership::AdvanceStreamMentionViewTimeRequest request;
      if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
        TC_LOG_DEBUG("service.protobuf", "%s Failed to parse request for ClubMembershipService.AdvanceStreamMentionViewTime server method call.", GetCallerInfo().c_str());
        SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
        return;
      }
      TC_LOG_DEBUG("service.protobuf", "%s Client called server method ClubMembershipService.AdvanceStreamMentionViewTime(bgs.protocol.club.v1.membership.AdvanceStreamMentionViewTimeRequest{ %s }).",
        GetCallerInfo().c_str(), request.ShortDebugString().c_str());
      std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = [token, methodId](ServiceBase* service, uint32 status, ::google::protobuf::Message const* response)
      {
        ASSERT(response->GetDescriptor() == ::bgs::protocol::NoData::descriptor());
        ClubMembershipService* self = static_cast<ClubMembershipService*>(service);
        TC_LOG_DEBUG("service.protobuf", "%s Client called server method ClubMembershipService.AdvanceStreamMentionViewTime() returned bgs.protocol.NoData{ %s } status %u.",
          self->GetCallerInfo().c_str(), response->ShortDebugString().c_str(), status);
        if (!status)
          self->SendResponse(self->service_hash_, methodId, token, response);
        else
          self->SendResponse(self->service_hash_, methodId, token, status);
      };
      ::bgs::protocol::NoData response;
      uint32 status = HandleAdvanceStreamMentionViewTime(&request, &response, continuation);
      if (continuation)
        continuation(this, status, &response);
      break;
    }
    default:
      TC_LOG_ERROR("service.protobuf", "Bad method id %u.", methodId);
      SendResponse(service_hash_, methodId, token, ERROR_RPC_INVALID_METHOD);
      break;
    }
}

uint32 ClubMembershipService::HandleSubscribe(::bgs::protocol::club::v1::membership::SubscribeRequest const* request, ::bgs::protocol::club::v1::membership::SubscribeResponse* response, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& continuation) {
  TC_LOG_ERROR("service.protobuf", "%s Client tried to call not implemented method ClubMembershipService.Subscribe({ %s })",
    GetCallerInfo().c_str(), request->ShortDebugString().c_str());
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 ClubMembershipService::HandleUnsubscribe(::bgs::protocol::club::v1::membership::UnsubscribeRequest const* request, ::bgs::protocol::NoData* response, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& continuation) {
  TC_LOG_ERROR("service.protobuf", "%s Client tried to call not implemented method ClubMembershipService.Unsubscribe({ %s })",
    GetCallerInfo().c_str(), request->ShortDebugString().c_str());
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 ClubMembershipService::HandleGetState(::bgs::protocol::club::v1::membership::GetStateRequest const* request, ::bgs::protocol::club::v1::membership::GetStateResponse* response, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& continuation) {
  TC_LOG_ERROR("service.protobuf", "%s Client tried to call not implemented method ClubMembershipService.GetState({ %s })",
    GetCallerInfo().c_str(), request->ShortDebugString().c_str());
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 ClubMembershipService::HandleUpdateClubSharedSettings(::bgs::protocol::club::v1::membership::UpdateClubSharedSettingsRequest const* request, ::bgs::protocol::NoData* response, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& continuation) {
  TC_LOG_ERROR("service.protobuf", "%s Client tried to call not implemented method ClubMembershipService.UpdateClubSharedSettings({ %s })",
    GetCallerInfo().c_str(), request->ShortDebugString().c_str());
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 ClubMembershipService::HandleGetStreamMentions(::bgs::protocol::club::v1::membership::GetStreamMentionsRequest const* request, ::bgs::protocol::club::v1::membership::GetStreamMentionsResponse* response, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& continuation) {
  TC_LOG_ERROR("service.protobuf", "%s Client tried to call not implemented method ClubMembershipService.GetStreamMentions({ %s })",
    GetCallerInfo().c_str(), request->ShortDebugString().c_str());
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 ClubMembershipService::HandleRemoveStreamMentions(::bgs::protocol::club::v1::membership::RemoveStreamMentionsRequest const* request, ::bgs::protocol::NoData* response, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& continuation) {
  TC_LOG_ERROR("service.protobuf", "%s Client tried to call not implemented method ClubMembershipService.RemoveStreamMentions({ %s })",
    GetCallerInfo().c_str(), request->ShortDebugString().c_str());
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 ClubMembershipService::HandleAdvanceStreamMentionViewTime(::bgs::protocol::club::v1::membership::AdvanceStreamMentionViewTimeRequest const* request, ::bgs::protocol::NoData* response, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& continuation) {
  TC_LOG_ERROR("service.protobuf", "%s Client tried to call not implemented method ClubMembershipService.AdvanceStreamMentionViewTime({ %s })",
    GetCallerInfo().c_str(), request->ShortDebugString().c_str());
  return ERROR_RPC_NOT_IMPLEMENTED;
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace membership
}  // namespace v1
}  // namespace club
}  // namespace protocol
}  // namespace bgs

// @@protoc_insertion_point(global_scope)
