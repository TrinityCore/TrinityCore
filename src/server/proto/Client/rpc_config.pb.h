// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpc_config.proto

#ifndef PROTOBUF_rpc_5fconfig_2eproto__INCLUDED
#define PROTOBUF_rpc_5fconfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "Define.h" // for TC_PROTO_API
// @@protoc_insertion_point(includes)

namespace bgs {
namespace protocol {
namespace config {

// Internal implementation detail -- do not call these.
void TC_PROTO_API protobuf_AddDesc_rpc_5fconfig_2eproto();
void protobuf_AssignDesc_rpc_5fconfig_2eproto();
void protobuf_ShutdownFile_rpc_5fconfig_2eproto();

class RPCMethodConfig;
class RPCMeterConfig;
class ProtocolAlias;
class ServiceAliases;

// ===================================================================

class TC_PROTO_API RPCMethodConfig : public ::google::protobuf::Message {
 public:
  RPCMethodConfig();
  virtual ~RPCMethodConfig();

  RPCMethodConfig(const RPCMethodConfig& from);

  inline RPCMethodConfig& operator=(const RPCMethodConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RPCMethodConfig& default_instance();

  void Swap(RPCMethodConfig* other);

  // implements Message ----------------------------------------------

  RPCMethodConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RPCMethodConfig& from);
  void MergeFrom(const RPCMethodConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string service_name = 1 [deprecated = true];
  inline bool has_service_name() const PROTOBUF_DEPRECATED;
  inline void clear_service_name() PROTOBUF_DEPRECATED;
  static const int kServiceNameFieldNumber = 1;
  inline const ::std::string& service_name() const PROTOBUF_DEPRECATED;
  inline void set_service_name(const ::std::string& value) PROTOBUF_DEPRECATED;
  inline void set_service_name(const char* value) PROTOBUF_DEPRECATED;
  inline void set_service_name(const char* value, size_t size) PROTOBUF_DEPRECATED;
  inline ::std::string* mutable_service_name() PROTOBUF_DEPRECATED;
  inline ::std::string* release_service_name() PROTOBUF_DEPRECATED;
  inline void set_allocated_service_name(::std::string* service_name) PROTOBUF_DEPRECATED;

  // optional string method_name = 2 [deprecated = true];
  inline bool has_method_name() const PROTOBUF_DEPRECATED;
  inline void clear_method_name() PROTOBUF_DEPRECATED;
  static const int kMethodNameFieldNumber = 2;
  inline const ::std::string& method_name() const PROTOBUF_DEPRECATED;
  inline void set_method_name(const ::std::string& value) PROTOBUF_DEPRECATED;
  inline void set_method_name(const char* value) PROTOBUF_DEPRECATED;
  inline void set_method_name(const char* value, size_t size) PROTOBUF_DEPRECATED;
  inline ::std::string* mutable_method_name() PROTOBUF_DEPRECATED;
  inline ::std::string* release_method_name() PROTOBUF_DEPRECATED;
  inline void set_allocated_method_name(::std::string* method_name) PROTOBUF_DEPRECATED;

  // optional uint32 fixed_call_cost = 3 [default = 1];
  inline bool has_fixed_call_cost() const;
  inline void clear_fixed_call_cost();
  static const int kFixedCallCostFieldNumber = 3;
  inline ::google::protobuf::uint32 fixed_call_cost() const;
  inline void set_fixed_call_cost(::google::protobuf::uint32 value);

  // optional uint32 fixed_packet_size = 4 [default = 0];
  inline bool has_fixed_packet_size() const;
  inline void clear_fixed_packet_size();
  static const int kFixedPacketSizeFieldNumber = 4;
  inline ::google::protobuf::uint32 fixed_packet_size() const;
  inline void set_fixed_packet_size(::google::protobuf::uint32 value);

  // optional float variable_multiplier = 5 [default = 0];
  inline bool has_variable_multiplier() const;
  inline void clear_variable_multiplier();
  static const int kVariableMultiplierFieldNumber = 5;
  inline float variable_multiplier() const;
  inline void set_variable_multiplier(float value);

  // optional float multiplier = 6 [default = 1];
  inline bool has_multiplier() const;
  inline void clear_multiplier();
  static const int kMultiplierFieldNumber = 6;
  inline float multiplier() const;
  inline void set_multiplier(float value);

  // optional uint32 rate_limit_count = 7;
  inline bool has_rate_limit_count() const;
  inline void clear_rate_limit_count();
  static const int kRateLimitCountFieldNumber = 7;
  inline ::google::protobuf::uint32 rate_limit_count() const;
  inline void set_rate_limit_count(::google::protobuf::uint32 value);

  // optional uint32 rate_limit_seconds = 8;
  inline bool has_rate_limit_seconds() const;
  inline void clear_rate_limit_seconds();
  static const int kRateLimitSecondsFieldNumber = 8;
  inline ::google::protobuf::uint32 rate_limit_seconds() const;
  inline void set_rate_limit_seconds(::google::protobuf::uint32 value);

  // optional uint32 max_packet_size = 9;
  inline bool has_max_packet_size() const;
  inline void clear_max_packet_size();
  static const int kMaxPacketSizeFieldNumber = 9;
  inline ::google::protobuf::uint32 max_packet_size() const;
  inline void set_max_packet_size(::google::protobuf::uint32 value);

  // optional uint32 max_encoded_size = 10;
  inline bool has_max_encoded_size() const;
  inline void clear_max_encoded_size();
  static const int kMaxEncodedSizeFieldNumber = 10;
  inline ::google::protobuf::uint32 max_encoded_size() const;
  inline void set_max_encoded_size(::google::protobuf::uint32 value);

  // optional float timeout = 11;
  inline bool has_timeout() const;
  inline void clear_timeout();
  static const int kTimeoutFieldNumber = 11;
  inline float timeout() const;
  inline void set_timeout(float value);

  // optional uint32 cap_balance = 12;
  inline bool has_cap_balance() const;
  inline void clear_cap_balance();
  static const int kCapBalanceFieldNumber = 12;
  inline ::google::protobuf::uint32 cap_balance() const;
  inline void set_cap_balance(::google::protobuf::uint32 value);

  // optional float income_per_second = 13 [default = 0];
  inline bool has_income_per_second() const;
  inline void clear_income_per_second();
  static const int kIncomePerSecondFieldNumber = 13;
  inline float income_per_second() const;
  inline void set_income_per_second(float value);

  // optional uint32 service_hash = 14;
  inline bool has_service_hash() const;
  inline void clear_service_hash();
  static const int kServiceHashFieldNumber = 14;
  inline ::google::protobuf::uint32 service_hash() const;
  inline void set_service_hash(::google::protobuf::uint32 value);

  // optional uint32 method_id = 15;
  inline bool has_method_id() const;
  inline void clear_method_id();
  static const int kMethodIdFieldNumber = 15;
  inline ::google::protobuf::uint32 method_id() const;
  inline void set_method_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:bgs.protocol.config.RPCMethodConfig)
 private:
  inline void set_has_service_name();
  inline void clear_has_service_name();
  inline void set_has_method_name();
  inline void clear_has_method_name();
  inline void set_has_fixed_call_cost();
  inline void clear_has_fixed_call_cost();
  inline void set_has_fixed_packet_size();
  inline void clear_has_fixed_packet_size();
  inline void set_has_variable_multiplier();
  inline void clear_has_variable_multiplier();
  inline void set_has_multiplier();
  inline void clear_has_multiplier();
  inline void set_has_rate_limit_count();
  inline void clear_has_rate_limit_count();
  inline void set_has_rate_limit_seconds();
  inline void clear_has_rate_limit_seconds();
  inline void set_has_max_packet_size();
  inline void clear_has_max_packet_size();
  inline void set_has_max_encoded_size();
  inline void clear_has_max_encoded_size();
  inline void set_has_timeout();
  inline void clear_has_timeout();
  inline void set_has_cap_balance();
  inline void clear_has_cap_balance();
  inline void set_has_income_per_second();
  inline void clear_has_income_per_second();
  inline void set_has_service_hash();
  inline void clear_has_service_hash();
  inline void set_has_method_id();
  inline void clear_has_method_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* service_name_;
  ::std::string* method_name_;
  ::google::protobuf::uint32 fixed_call_cost_;
  ::google::protobuf::uint32 fixed_packet_size_;
  float variable_multiplier_;
  float multiplier_;
  ::google::protobuf::uint32 rate_limit_count_;
  ::google::protobuf::uint32 rate_limit_seconds_;
  ::google::protobuf::uint32 max_packet_size_;
  ::google::protobuf::uint32 max_encoded_size_;
  float timeout_;
  ::google::protobuf::uint32 cap_balance_;
  float income_per_second_;
  ::google::protobuf::uint32 service_hash_;
  ::google::protobuf::uint32 method_id_;
  friend void TC_PROTO_API protobuf_AddDesc_rpc_5fconfig_2eproto();
  friend void protobuf_AssignDesc_rpc_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_rpc_5fconfig_2eproto();

  void InitAsDefaultInstance();
  static RPCMethodConfig* default_instance_;
};
// -------------------------------------------------------------------

class TC_PROTO_API RPCMeterConfig : public ::google::protobuf::Message {
 public:
  RPCMeterConfig();
  virtual ~RPCMeterConfig();

  RPCMeterConfig(const RPCMeterConfig& from);

  inline RPCMeterConfig& operator=(const RPCMeterConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RPCMeterConfig& default_instance();

  void Swap(RPCMeterConfig* other);

  // implements Message ----------------------------------------------

  RPCMeterConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RPCMeterConfig& from);
  void MergeFrom(const RPCMeterConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .bgs.protocol.config.RPCMethodConfig method = 1;
  inline int method_size() const;
  inline void clear_method();
  static const int kMethodFieldNumber = 1;
  inline const ::bgs::protocol::config::RPCMethodConfig& method(int index) const;
  inline ::bgs::protocol::config::RPCMethodConfig* mutable_method(int index);
  inline ::bgs::protocol::config::RPCMethodConfig* add_method();
  inline const ::google::protobuf::RepeatedPtrField< ::bgs::protocol::config::RPCMethodConfig >&
      method() const;
  inline ::google::protobuf::RepeatedPtrField< ::bgs::protocol::config::RPCMethodConfig >*
      mutable_method();

  // optional uint32 income_per_second = 2 [default = 1];
  inline bool has_income_per_second() const;
  inline void clear_income_per_second();
  static const int kIncomePerSecondFieldNumber = 2;
  inline ::google::protobuf::uint32 income_per_second() const;
  inline void set_income_per_second(::google::protobuf::uint32 value);

  // optional uint32 initial_balance = 3;
  inline bool has_initial_balance() const;
  inline void clear_initial_balance();
  static const int kInitialBalanceFieldNumber = 3;
  inline ::google::protobuf::uint32 initial_balance() const;
  inline void set_initial_balance(::google::protobuf::uint32 value);

  // optional uint32 cap_balance = 4;
  inline bool has_cap_balance() const;
  inline void clear_cap_balance();
  static const int kCapBalanceFieldNumber = 4;
  inline ::google::protobuf::uint32 cap_balance() const;
  inline void set_cap_balance(::google::protobuf::uint32 value);

  // optional float startup_period = 5 [default = 0];
  inline bool has_startup_period() const;
  inline void clear_startup_period();
  static const int kStartupPeriodFieldNumber = 5;
  inline float startup_period() const;
  inline void set_startup_period(float value);

  // @@protoc_insertion_point(class_scope:bgs.protocol.config.RPCMeterConfig)
 private:
  inline void set_has_income_per_second();
  inline void clear_has_income_per_second();
  inline void set_has_initial_balance();
  inline void clear_has_initial_balance();
  inline void set_has_cap_balance();
  inline void clear_has_cap_balance();
  inline void set_has_startup_period();
  inline void clear_has_startup_period();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::bgs::protocol::config::RPCMethodConfig > method_;
  ::google::protobuf::uint32 income_per_second_;
  ::google::protobuf::uint32 initial_balance_;
  ::google::protobuf::uint32 cap_balance_;
  float startup_period_;
  friend void TC_PROTO_API protobuf_AddDesc_rpc_5fconfig_2eproto();
  friend void protobuf_AssignDesc_rpc_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_rpc_5fconfig_2eproto();

  void InitAsDefaultInstance();
  static RPCMeterConfig* default_instance_;
};
// -------------------------------------------------------------------

class TC_PROTO_API ProtocolAlias : public ::google::protobuf::Message {
 public:
  ProtocolAlias();
  virtual ~ProtocolAlias();

  ProtocolAlias(const ProtocolAlias& from);

  inline ProtocolAlias& operator=(const ProtocolAlias& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtocolAlias& default_instance();

  void Swap(ProtocolAlias* other);

  // implements Message ----------------------------------------------

  ProtocolAlias* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtocolAlias& from);
  void MergeFrom(const ProtocolAlias& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string server_service_name = 1;
  inline bool has_server_service_name() const;
  inline void clear_server_service_name();
  static const int kServerServiceNameFieldNumber = 1;
  inline const ::std::string& server_service_name() const;
  inline void set_server_service_name(const ::std::string& value);
  inline void set_server_service_name(const char* value);
  inline void set_server_service_name(const char* value, size_t size);
  inline ::std::string* mutable_server_service_name();
  inline ::std::string* release_server_service_name();
  inline void set_allocated_server_service_name(::std::string* server_service_name);

  // required string client_service_name = 2;
  inline bool has_client_service_name() const;
  inline void clear_client_service_name();
  static const int kClientServiceNameFieldNumber = 2;
  inline const ::std::string& client_service_name() const;
  inline void set_client_service_name(const ::std::string& value);
  inline void set_client_service_name(const char* value);
  inline void set_client_service_name(const char* value, size_t size);
  inline ::std::string* mutable_client_service_name();
  inline ::std::string* release_client_service_name();
  inline void set_allocated_client_service_name(::std::string* client_service_name);

  // @@protoc_insertion_point(class_scope:bgs.protocol.config.ProtocolAlias)
 private:
  inline void set_has_server_service_name();
  inline void clear_has_server_service_name();
  inline void set_has_client_service_name();
  inline void clear_has_client_service_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* server_service_name_;
  ::std::string* client_service_name_;
  friend void TC_PROTO_API protobuf_AddDesc_rpc_5fconfig_2eproto();
  friend void protobuf_AssignDesc_rpc_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_rpc_5fconfig_2eproto();

  void InitAsDefaultInstance();
  static ProtocolAlias* default_instance_;
};
// -------------------------------------------------------------------

class TC_PROTO_API ServiceAliases : public ::google::protobuf::Message {
 public:
  ServiceAliases();
  virtual ~ServiceAliases();

  ServiceAliases(const ServiceAliases& from);

  inline ServiceAliases& operator=(const ServiceAliases& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServiceAliases& default_instance();

  void Swap(ServiceAliases* other);

  // implements Message ----------------------------------------------

  ServiceAliases* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServiceAliases& from);
  void MergeFrom(const ServiceAliases& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .bgs.protocol.config.ProtocolAlias protocol_alias = 1;
  inline int protocol_alias_size() const;
  inline void clear_protocol_alias();
  static const int kProtocolAliasFieldNumber = 1;
  inline const ::bgs::protocol::config::ProtocolAlias& protocol_alias(int index) const;
  inline ::bgs::protocol::config::ProtocolAlias* mutable_protocol_alias(int index);
  inline ::bgs::protocol::config::ProtocolAlias* add_protocol_alias();
  inline const ::google::protobuf::RepeatedPtrField< ::bgs::protocol::config::ProtocolAlias >&
      protocol_alias() const;
  inline ::google::protobuf::RepeatedPtrField< ::bgs::protocol::config::ProtocolAlias >*
      mutable_protocol_alias();

  // @@protoc_insertion_point(class_scope:bgs.protocol.config.ServiceAliases)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::bgs::protocol::config::ProtocolAlias > protocol_alias_;
  friend void TC_PROTO_API protobuf_AddDesc_rpc_5fconfig_2eproto();
  friend void protobuf_AssignDesc_rpc_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_rpc_5fconfig_2eproto();

  void InitAsDefaultInstance();
  static ServiceAliases* default_instance_;
};
// ===================================================================

// ===================================================================

// ===================================================================

// RPCMethodConfig

// optional string service_name = 1 [deprecated = true];
inline bool RPCMethodConfig::has_service_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RPCMethodConfig::set_has_service_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RPCMethodConfig::clear_has_service_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RPCMethodConfig::clear_service_name() {
  if (service_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    service_name_->clear();
  }
  clear_has_service_name();
}
inline const ::std::string& RPCMethodConfig::service_name() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.config.RPCMethodConfig.service_name)
  return *service_name_;
}
inline void RPCMethodConfig::set_service_name(const ::std::string& value) {
  set_has_service_name();
  if (service_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    service_name_ = new ::std::string;
  }
  service_name_->assign(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.config.RPCMethodConfig.service_name)
}
inline void RPCMethodConfig::set_service_name(const char* value) {
  set_has_service_name();
  if (service_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    service_name_ = new ::std::string;
  }
  service_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:bgs.protocol.config.RPCMethodConfig.service_name)
}
inline void RPCMethodConfig::set_service_name(const char* value, size_t size) {
  set_has_service_name();
  if (service_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    service_name_ = new ::std::string;
  }
  service_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.config.RPCMethodConfig.service_name)
}
inline ::std::string* RPCMethodConfig::mutable_service_name() {
  set_has_service_name();
  if (service_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    service_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:bgs.protocol.config.RPCMethodConfig.service_name)
  return service_name_;
}
inline ::std::string* RPCMethodConfig::release_service_name() {
  clear_has_service_name();
  if (service_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = service_name_;
    service_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RPCMethodConfig::set_allocated_service_name(::std::string* service_name) {
  if (service_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete service_name_;
  }
  if (service_name) {
    set_has_service_name();
    service_name_ = service_name;
  } else {
    clear_has_service_name();
    service_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.config.RPCMethodConfig.service_name)
}

// optional string method_name = 2 [deprecated = true];
inline bool RPCMethodConfig::has_method_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RPCMethodConfig::set_has_method_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RPCMethodConfig::clear_has_method_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RPCMethodConfig::clear_method_name() {
  if (method_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    method_name_->clear();
  }
  clear_has_method_name();
}
inline const ::std::string& RPCMethodConfig::method_name() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.config.RPCMethodConfig.method_name)
  return *method_name_;
}
inline void RPCMethodConfig::set_method_name(const ::std::string& value) {
  set_has_method_name();
  if (method_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    method_name_ = new ::std::string;
  }
  method_name_->assign(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.config.RPCMethodConfig.method_name)
}
inline void RPCMethodConfig::set_method_name(const char* value) {
  set_has_method_name();
  if (method_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    method_name_ = new ::std::string;
  }
  method_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:bgs.protocol.config.RPCMethodConfig.method_name)
}
inline void RPCMethodConfig::set_method_name(const char* value, size_t size) {
  set_has_method_name();
  if (method_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    method_name_ = new ::std::string;
  }
  method_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.config.RPCMethodConfig.method_name)
}
inline ::std::string* RPCMethodConfig::mutable_method_name() {
  set_has_method_name();
  if (method_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    method_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:bgs.protocol.config.RPCMethodConfig.method_name)
  return method_name_;
}
inline ::std::string* RPCMethodConfig::release_method_name() {
  clear_has_method_name();
  if (method_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = method_name_;
    method_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RPCMethodConfig::set_allocated_method_name(::std::string* method_name) {
  if (method_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete method_name_;
  }
  if (method_name) {
    set_has_method_name();
    method_name_ = method_name;
  } else {
    clear_has_method_name();
    method_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.config.RPCMethodConfig.method_name)
}

// optional uint32 fixed_call_cost = 3 [default = 1];
inline bool RPCMethodConfig::has_fixed_call_cost() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RPCMethodConfig::set_has_fixed_call_cost() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RPCMethodConfig::clear_has_fixed_call_cost() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RPCMethodConfig::clear_fixed_call_cost() {
  fixed_call_cost_ = 1u;
  clear_has_fixed_call_cost();
}
inline ::google::protobuf::uint32 RPCMethodConfig::fixed_call_cost() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.config.RPCMethodConfig.fixed_call_cost)
  return fixed_call_cost_;
}
inline void RPCMethodConfig::set_fixed_call_cost(::google::protobuf::uint32 value) {
  set_has_fixed_call_cost();
  fixed_call_cost_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.config.RPCMethodConfig.fixed_call_cost)
}

// optional uint32 fixed_packet_size = 4 [default = 0];
inline bool RPCMethodConfig::has_fixed_packet_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RPCMethodConfig::set_has_fixed_packet_size() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RPCMethodConfig::clear_has_fixed_packet_size() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RPCMethodConfig::clear_fixed_packet_size() {
  fixed_packet_size_ = 0u;
  clear_has_fixed_packet_size();
}
inline ::google::protobuf::uint32 RPCMethodConfig::fixed_packet_size() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.config.RPCMethodConfig.fixed_packet_size)
  return fixed_packet_size_;
}
inline void RPCMethodConfig::set_fixed_packet_size(::google::protobuf::uint32 value) {
  set_has_fixed_packet_size();
  fixed_packet_size_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.config.RPCMethodConfig.fixed_packet_size)
}

// optional float variable_multiplier = 5 [default = 0];
inline bool RPCMethodConfig::has_variable_multiplier() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RPCMethodConfig::set_has_variable_multiplier() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RPCMethodConfig::clear_has_variable_multiplier() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RPCMethodConfig::clear_variable_multiplier() {
  variable_multiplier_ = 0;
  clear_has_variable_multiplier();
}
inline float RPCMethodConfig::variable_multiplier() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.config.RPCMethodConfig.variable_multiplier)
  return variable_multiplier_;
}
inline void RPCMethodConfig::set_variable_multiplier(float value) {
  set_has_variable_multiplier();
  variable_multiplier_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.config.RPCMethodConfig.variable_multiplier)
}

// optional float multiplier = 6 [default = 1];
inline bool RPCMethodConfig::has_multiplier() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RPCMethodConfig::set_has_multiplier() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RPCMethodConfig::clear_has_multiplier() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RPCMethodConfig::clear_multiplier() {
  multiplier_ = 1;
  clear_has_multiplier();
}
inline float RPCMethodConfig::multiplier() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.config.RPCMethodConfig.multiplier)
  return multiplier_;
}
inline void RPCMethodConfig::set_multiplier(float value) {
  set_has_multiplier();
  multiplier_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.config.RPCMethodConfig.multiplier)
}

// optional uint32 rate_limit_count = 7;
inline bool RPCMethodConfig::has_rate_limit_count() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RPCMethodConfig::set_has_rate_limit_count() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RPCMethodConfig::clear_has_rate_limit_count() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RPCMethodConfig::clear_rate_limit_count() {
  rate_limit_count_ = 0u;
  clear_has_rate_limit_count();
}
inline ::google::protobuf::uint32 RPCMethodConfig::rate_limit_count() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.config.RPCMethodConfig.rate_limit_count)
  return rate_limit_count_;
}
inline void RPCMethodConfig::set_rate_limit_count(::google::protobuf::uint32 value) {
  set_has_rate_limit_count();
  rate_limit_count_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.config.RPCMethodConfig.rate_limit_count)
}

// optional uint32 rate_limit_seconds = 8;
inline bool RPCMethodConfig::has_rate_limit_seconds() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RPCMethodConfig::set_has_rate_limit_seconds() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RPCMethodConfig::clear_has_rate_limit_seconds() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RPCMethodConfig::clear_rate_limit_seconds() {
  rate_limit_seconds_ = 0u;
  clear_has_rate_limit_seconds();
}
inline ::google::protobuf::uint32 RPCMethodConfig::rate_limit_seconds() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.config.RPCMethodConfig.rate_limit_seconds)
  return rate_limit_seconds_;
}
inline void RPCMethodConfig::set_rate_limit_seconds(::google::protobuf::uint32 value) {
  set_has_rate_limit_seconds();
  rate_limit_seconds_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.config.RPCMethodConfig.rate_limit_seconds)
}

// optional uint32 max_packet_size = 9;
inline bool RPCMethodConfig::has_max_packet_size() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RPCMethodConfig::set_has_max_packet_size() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RPCMethodConfig::clear_has_max_packet_size() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RPCMethodConfig::clear_max_packet_size() {
  max_packet_size_ = 0u;
  clear_has_max_packet_size();
}
inline ::google::protobuf::uint32 RPCMethodConfig::max_packet_size() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.config.RPCMethodConfig.max_packet_size)
  return max_packet_size_;
}
inline void RPCMethodConfig::set_max_packet_size(::google::protobuf::uint32 value) {
  set_has_max_packet_size();
  max_packet_size_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.config.RPCMethodConfig.max_packet_size)
}

// optional uint32 max_encoded_size = 10;
inline bool RPCMethodConfig::has_max_encoded_size() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RPCMethodConfig::set_has_max_encoded_size() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RPCMethodConfig::clear_has_max_encoded_size() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RPCMethodConfig::clear_max_encoded_size() {
  max_encoded_size_ = 0u;
  clear_has_max_encoded_size();
}
inline ::google::protobuf::uint32 RPCMethodConfig::max_encoded_size() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.config.RPCMethodConfig.max_encoded_size)
  return max_encoded_size_;
}
inline void RPCMethodConfig::set_max_encoded_size(::google::protobuf::uint32 value) {
  set_has_max_encoded_size();
  max_encoded_size_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.config.RPCMethodConfig.max_encoded_size)
}

// optional float timeout = 11;
inline bool RPCMethodConfig::has_timeout() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RPCMethodConfig::set_has_timeout() {
  _has_bits_[0] |= 0x00000400u;
}
inline void RPCMethodConfig::clear_has_timeout() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void RPCMethodConfig::clear_timeout() {
  timeout_ = 0;
  clear_has_timeout();
}
inline float RPCMethodConfig::timeout() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.config.RPCMethodConfig.timeout)
  return timeout_;
}
inline void RPCMethodConfig::set_timeout(float value) {
  set_has_timeout();
  timeout_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.config.RPCMethodConfig.timeout)
}

// optional uint32 cap_balance = 12;
inline bool RPCMethodConfig::has_cap_balance() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void RPCMethodConfig::set_has_cap_balance() {
  _has_bits_[0] |= 0x00000800u;
}
inline void RPCMethodConfig::clear_has_cap_balance() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void RPCMethodConfig::clear_cap_balance() {
  cap_balance_ = 0u;
  clear_has_cap_balance();
}
inline ::google::protobuf::uint32 RPCMethodConfig::cap_balance() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.config.RPCMethodConfig.cap_balance)
  return cap_balance_;
}
inline void RPCMethodConfig::set_cap_balance(::google::protobuf::uint32 value) {
  set_has_cap_balance();
  cap_balance_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.config.RPCMethodConfig.cap_balance)
}

// optional float income_per_second = 13 [default = 0];
inline bool RPCMethodConfig::has_income_per_second() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void RPCMethodConfig::set_has_income_per_second() {
  _has_bits_[0] |= 0x00001000u;
}
inline void RPCMethodConfig::clear_has_income_per_second() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void RPCMethodConfig::clear_income_per_second() {
  income_per_second_ = 0;
  clear_has_income_per_second();
}
inline float RPCMethodConfig::income_per_second() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.config.RPCMethodConfig.income_per_second)
  return income_per_second_;
}
inline void RPCMethodConfig::set_income_per_second(float value) {
  set_has_income_per_second();
  income_per_second_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.config.RPCMethodConfig.income_per_second)
}

// optional uint32 service_hash = 14;
inline bool RPCMethodConfig::has_service_hash() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void RPCMethodConfig::set_has_service_hash() {
  _has_bits_[0] |= 0x00002000u;
}
inline void RPCMethodConfig::clear_has_service_hash() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void RPCMethodConfig::clear_service_hash() {
  service_hash_ = 0u;
  clear_has_service_hash();
}
inline ::google::protobuf::uint32 RPCMethodConfig::service_hash() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.config.RPCMethodConfig.service_hash)
  return service_hash_;
}
inline void RPCMethodConfig::set_service_hash(::google::protobuf::uint32 value) {
  set_has_service_hash();
  service_hash_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.config.RPCMethodConfig.service_hash)
}

// optional uint32 method_id = 15;
inline bool RPCMethodConfig::has_method_id() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void RPCMethodConfig::set_has_method_id() {
  _has_bits_[0] |= 0x00004000u;
}
inline void RPCMethodConfig::clear_has_method_id() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void RPCMethodConfig::clear_method_id() {
  method_id_ = 0u;
  clear_has_method_id();
}
inline ::google::protobuf::uint32 RPCMethodConfig::method_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.config.RPCMethodConfig.method_id)
  return method_id_;
}
inline void RPCMethodConfig::set_method_id(::google::protobuf::uint32 value) {
  set_has_method_id();
  method_id_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.config.RPCMethodConfig.method_id)
}

// -------------------------------------------------------------------

// RPCMeterConfig

// repeated .bgs.protocol.config.RPCMethodConfig method = 1;
inline int RPCMeterConfig::method_size() const {
  return method_.size();
}
inline void RPCMeterConfig::clear_method() {
  method_.Clear();
}
inline const ::bgs::protocol::config::RPCMethodConfig& RPCMeterConfig::method(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.config.RPCMeterConfig.method)
  return method_.Get(index);
}
inline ::bgs::protocol::config::RPCMethodConfig* RPCMeterConfig::mutable_method(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.config.RPCMeterConfig.method)
  return method_.Mutable(index);
}
inline ::bgs::protocol::config::RPCMethodConfig* RPCMeterConfig::add_method() {
  // @@protoc_insertion_point(field_add:bgs.protocol.config.RPCMeterConfig.method)
  return method_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bgs::protocol::config::RPCMethodConfig >&
RPCMeterConfig::method() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.config.RPCMeterConfig.method)
  return method_;
}
inline ::google::protobuf::RepeatedPtrField< ::bgs::protocol::config::RPCMethodConfig >*
RPCMeterConfig::mutable_method() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.config.RPCMeterConfig.method)
  return &method_;
}

// optional uint32 income_per_second = 2 [default = 1];
inline bool RPCMeterConfig::has_income_per_second() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RPCMeterConfig::set_has_income_per_second() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RPCMeterConfig::clear_has_income_per_second() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RPCMeterConfig::clear_income_per_second() {
  income_per_second_ = 1u;
  clear_has_income_per_second();
}
inline ::google::protobuf::uint32 RPCMeterConfig::income_per_second() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.config.RPCMeterConfig.income_per_second)
  return income_per_second_;
}
inline void RPCMeterConfig::set_income_per_second(::google::protobuf::uint32 value) {
  set_has_income_per_second();
  income_per_second_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.config.RPCMeterConfig.income_per_second)
}

// optional uint32 initial_balance = 3;
inline bool RPCMeterConfig::has_initial_balance() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RPCMeterConfig::set_has_initial_balance() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RPCMeterConfig::clear_has_initial_balance() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RPCMeterConfig::clear_initial_balance() {
  initial_balance_ = 0u;
  clear_has_initial_balance();
}
inline ::google::protobuf::uint32 RPCMeterConfig::initial_balance() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.config.RPCMeterConfig.initial_balance)
  return initial_balance_;
}
inline void RPCMeterConfig::set_initial_balance(::google::protobuf::uint32 value) {
  set_has_initial_balance();
  initial_balance_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.config.RPCMeterConfig.initial_balance)
}

// optional uint32 cap_balance = 4;
inline bool RPCMeterConfig::has_cap_balance() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RPCMeterConfig::set_has_cap_balance() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RPCMeterConfig::clear_has_cap_balance() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RPCMeterConfig::clear_cap_balance() {
  cap_balance_ = 0u;
  clear_has_cap_balance();
}
inline ::google::protobuf::uint32 RPCMeterConfig::cap_balance() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.config.RPCMeterConfig.cap_balance)
  return cap_balance_;
}
inline void RPCMeterConfig::set_cap_balance(::google::protobuf::uint32 value) {
  set_has_cap_balance();
  cap_balance_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.config.RPCMeterConfig.cap_balance)
}

// optional float startup_period = 5 [default = 0];
inline bool RPCMeterConfig::has_startup_period() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RPCMeterConfig::set_has_startup_period() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RPCMeterConfig::clear_has_startup_period() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RPCMeterConfig::clear_startup_period() {
  startup_period_ = 0;
  clear_has_startup_period();
}
inline float RPCMeterConfig::startup_period() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.config.RPCMeterConfig.startup_period)
  return startup_period_;
}
inline void RPCMeterConfig::set_startup_period(float value) {
  set_has_startup_period();
  startup_period_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.config.RPCMeterConfig.startup_period)
}

// -------------------------------------------------------------------

// ProtocolAlias

// required string server_service_name = 1;
inline bool ProtocolAlias::has_server_service_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtocolAlias::set_has_server_service_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtocolAlias::clear_has_server_service_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtocolAlias::clear_server_service_name() {
  if (server_service_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    server_service_name_->clear();
  }
  clear_has_server_service_name();
}
inline const ::std::string& ProtocolAlias::server_service_name() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.config.ProtocolAlias.server_service_name)
  return *server_service_name_;
}
inline void ProtocolAlias::set_server_service_name(const ::std::string& value) {
  set_has_server_service_name();
  if (server_service_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    server_service_name_ = new ::std::string;
  }
  server_service_name_->assign(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.config.ProtocolAlias.server_service_name)
}
inline void ProtocolAlias::set_server_service_name(const char* value) {
  set_has_server_service_name();
  if (server_service_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    server_service_name_ = new ::std::string;
  }
  server_service_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:bgs.protocol.config.ProtocolAlias.server_service_name)
}
inline void ProtocolAlias::set_server_service_name(const char* value, size_t size) {
  set_has_server_service_name();
  if (server_service_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    server_service_name_ = new ::std::string;
  }
  server_service_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.config.ProtocolAlias.server_service_name)
}
inline ::std::string* ProtocolAlias::mutable_server_service_name() {
  set_has_server_service_name();
  if (server_service_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    server_service_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:bgs.protocol.config.ProtocolAlias.server_service_name)
  return server_service_name_;
}
inline ::std::string* ProtocolAlias::release_server_service_name() {
  clear_has_server_service_name();
  if (server_service_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = server_service_name_;
    server_service_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ProtocolAlias::set_allocated_server_service_name(::std::string* server_service_name) {
  if (server_service_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete server_service_name_;
  }
  if (server_service_name) {
    set_has_server_service_name();
    server_service_name_ = server_service_name;
  } else {
    clear_has_server_service_name();
    server_service_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.config.ProtocolAlias.server_service_name)
}

// required string client_service_name = 2;
inline bool ProtocolAlias::has_client_service_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtocolAlias::set_has_client_service_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtocolAlias::clear_has_client_service_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtocolAlias::clear_client_service_name() {
  if (client_service_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    client_service_name_->clear();
  }
  clear_has_client_service_name();
}
inline const ::std::string& ProtocolAlias::client_service_name() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.config.ProtocolAlias.client_service_name)
  return *client_service_name_;
}
inline void ProtocolAlias::set_client_service_name(const ::std::string& value) {
  set_has_client_service_name();
  if (client_service_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    client_service_name_ = new ::std::string;
  }
  client_service_name_->assign(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.config.ProtocolAlias.client_service_name)
}
inline void ProtocolAlias::set_client_service_name(const char* value) {
  set_has_client_service_name();
  if (client_service_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    client_service_name_ = new ::std::string;
  }
  client_service_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:bgs.protocol.config.ProtocolAlias.client_service_name)
}
inline void ProtocolAlias::set_client_service_name(const char* value, size_t size) {
  set_has_client_service_name();
  if (client_service_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    client_service_name_ = new ::std::string;
  }
  client_service_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.config.ProtocolAlias.client_service_name)
}
inline ::std::string* ProtocolAlias::mutable_client_service_name() {
  set_has_client_service_name();
  if (client_service_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    client_service_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:bgs.protocol.config.ProtocolAlias.client_service_name)
  return client_service_name_;
}
inline ::std::string* ProtocolAlias::release_client_service_name() {
  clear_has_client_service_name();
  if (client_service_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = client_service_name_;
    client_service_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ProtocolAlias::set_allocated_client_service_name(::std::string* client_service_name) {
  if (client_service_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete client_service_name_;
  }
  if (client_service_name) {
    set_has_client_service_name();
    client_service_name_ = client_service_name;
  } else {
    clear_has_client_service_name();
    client_service_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.config.ProtocolAlias.client_service_name)
}

// -------------------------------------------------------------------

// ServiceAliases

// repeated .bgs.protocol.config.ProtocolAlias protocol_alias = 1;
inline int ServiceAliases::protocol_alias_size() const {
  return protocol_alias_.size();
}
inline void ServiceAliases::clear_protocol_alias() {
  protocol_alias_.Clear();
}
inline const ::bgs::protocol::config::ProtocolAlias& ServiceAliases::protocol_alias(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.config.ServiceAliases.protocol_alias)
  return protocol_alias_.Get(index);
}
inline ::bgs::protocol::config::ProtocolAlias* ServiceAliases::mutable_protocol_alias(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.config.ServiceAliases.protocol_alias)
  return protocol_alias_.Mutable(index);
}
inline ::bgs::protocol::config::ProtocolAlias* ServiceAliases::add_protocol_alias() {
  // @@protoc_insertion_point(field_add:bgs.protocol.config.ServiceAliases.protocol_alias)
  return protocol_alias_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bgs::protocol::config::ProtocolAlias >&
ServiceAliases::protocol_alias() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.config.ServiceAliases.protocol_alias)
  return protocol_alias_;
}
inline ::google::protobuf::RepeatedPtrField< ::bgs::protocol::config::ProtocolAlias >*
ServiceAliases::mutable_protocol_alias() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.config.ServiceAliases.protocol_alias)
  return &protocol_alias_;
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace config
}  // namespace protocol
}  // namespace bgs

#ifndef SWIG
namespace google {
namespace protobuf {
}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rpc_5fconfig_2eproto__INCLUDED
