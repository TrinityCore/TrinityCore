// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: club_core.proto

#ifndef PROTOBUF_club_5fcore_2eproto__INCLUDED
#define PROTOBUF_club_5fcore_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "club_enum.pb.h"
#include "club_role.pb.h"
#include "club_member.pb.h"
#include "club_stream.pb.h"
#include "api/client/v2/attribute_types.pb.h"
#include "event_view_types.pb.h"
#include "Define.h" // for TC_PROTO_API
// @@protoc_insertion_point(includes)

namespace bgs {
namespace protocol {
namespace club {
namespace v1 {

// Internal implementation detail -- do not call these.
void TC_PROTO_API protobuf_AddDesc_club_5fcore_2eproto();
void protobuf_AssignDesc_club_5fcore_2eproto();
void protobuf_ShutdownFile_club_5fcore_2eproto();

class AvatarId;
class SetBroadcastOptions;
class Broadcast;
class UniqueClubType;
class ClubCreateOptions;
class Club;
class ClubDescription;
class ClubView;
class ClubStateOptions;
class ClubStateAssignment;
class StreamSettings;
class ClubSettings;
class ClubSettingsOptions;
class ClubSettingsAssignment;

// ===================================================================

class TC_PROTO_API AvatarId : public ::google::protobuf::Message {
 public:
  AvatarId();
  virtual ~AvatarId();

  AvatarId(const AvatarId& from);

  inline AvatarId& operator=(const AvatarId& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AvatarId& default_instance();

  void Swap(AvatarId* other);

  // implements Message ----------------------------------------------

  AvatarId* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AvatarId& from);
  void MergeFrom(const AvatarId& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.AvatarId)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  friend void TC_PROTO_API protobuf_AddDesc_club_5fcore_2eproto();
  friend void protobuf_AssignDesc_club_5fcore_2eproto();
  friend void protobuf_ShutdownFile_club_5fcore_2eproto();

  void InitAsDefaultInstance();
  static AvatarId* default_instance_;
};
// -------------------------------------------------------------------

class TC_PROTO_API SetBroadcastOptions : public ::google::protobuf::Message {
 public:
  SetBroadcastOptions();
  virtual ~SetBroadcastOptions();

  SetBroadcastOptions(const SetBroadcastOptions& from);

  inline SetBroadcastOptions& operator=(const SetBroadcastOptions& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SetBroadcastOptions& default_instance();

  void Swap(SetBroadcastOptions* other);

  // implements Message ----------------------------------------------

  SetBroadcastOptions* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SetBroadcastOptions& from);
  void MergeFrom(const SetBroadcastOptions& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string content = 1;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 1;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.SetBroadcastOptions)
 private:
  inline void set_has_content();
  inline void clear_has_content();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* content_;
  friend void TC_PROTO_API protobuf_AddDesc_club_5fcore_2eproto();
  friend void protobuf_AssignDesc_club_5fcore_2eproto();
  friend void protobuf_ShutdownFile_club_5fcore_2eproto();

  void InitAsDefaultInstance();
  static SetBroadcastOptions* default_instance_;
};
// -------------------------------------------------------------------

class TC_PROTO_API Broadcast : public ::google::protobuf::Message {
 public:
  Broadcast();
  virtual ~Broadcast();

  Broadcast(const Broadcast& from);

  inline Broadcast& operator=(const Broadcast& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Broadcast& default_instance();

  void Swap(Broadcast* other);

  // implements Message ----------------------------------------------

  Broadcast* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Broadcast& from);
  void MergeFrom(const Broadcast& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string content = 1;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 1;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // optional .bgs.protocol.club.v1.MemberDescription creator = 2;
  inline bool has_creator() const;
  inline void clear_creator();
  static const int kCreatorFieldNumber = 2;
  inline const ::bgs::protocol::club::v1::MemberDescription& creator() const;
  inline ::bgs::protocol::club::v1::MemberDescription* mutable_creator();
  inline ::bgs::protocol::club::v1::MemberDescription* release_creator();
  inline void set_allocated_creator(::bgs::protocol::club::v1::MemberDescription* creator);

  // optional uint64 creation_time = 3;
  inline bool has_creation_time() const;
  inline void clear_creation_time();
  static const int kCreationTimeFieldNumber = 3;
  inline ::google::protobuf::uint64 creation_time() const;
  inline void set_creation_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.Broadcast)
 private:
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_creator();
  inline void clear_has_creator();
  inline void set_has_creation_time();
  inline void clear_has_creation_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* content_;
  ::bgs::protocol::club::v1::MemberDescription* creator_;
  ::google::protobuf::uint64 creation_time_;
  friend void TC_PROTO_API protobuf_AddDesc_club_5fcore_2eproto();
  friend void protobuf_AssignDesc_club_5fcore_2eproto();
  friend void protobuf_ShutdownFile_club_5fcore_2eproto();

  void InitAsDefaultInstance();
  static Broadcast* default_instance_;
};
// -------------------------------------------------------------------

class TC_PROTO_API UniqueClubType : public ::google::protobuf::Message {
 public:
  UniqueClubType();
  virtual ~UniqueClubType();

  UniqueClubType(const UniqueClubType& from);

  inline UniqueClubType& operator=(const UniqueClubType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UniqueClubType& default_instance();

  void Swap(UniqueClubType* other);

  // implements Message ----------------------------------------------

  UniqueClubType* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UniqueClubType& from);
  void MergeFrom(const UniqueClubType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed32 program = 1;
  inline bool has_program() const;
  inline void clear_program();
  static const int kProgramFieldNumber = 1;
  inline ::google::protobuf::uint32 program() const;
  inline void set_program(::google::protobuf::uint32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.UniqueClubType)
 private:
  inline void set_has_program();
  inline void clear_has_program();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::google::protobuf::uint32 program_;
  friend void TC_PROTO_API protobuf_AddDesc_club_5fcore_2eproto();
  friend void protobuf_AssignDesc_club_5fcore_2eproto();
  friend void protobuf_ShutdownFile_club_5fcore_2eproto();

  void InitAsDefaultInstance();
  static UniqueClubType* default_instance_;
};
// -------------------------------------------------------------------

class TC_PROTO_API ClubCreateOptions : public ::google::protobuf::Message {
 public:
  ClubCreateOptions();
  virtual ~ClubCreateOptions();

  ClubCreateOptions(const ClubCreateOptions& from);

  inline ClubCreateOptions& operator=(const ClubCreateOptions& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClubCreateOptions& default_instance();

  void Swap(ClubCreateOptions* other);

  // implements Message ----------------------------------------------

  ClubCreateOptions* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClubCreateOptions& from);
  void MergeFrom(const ClubCreateOptions& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .bgs.protocol.club.v1.UniqueClubType type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline const ::bgs::protocol::club::v1::UniqueClubType& type() const;
  inline ::bgs::protocol::club::v1::UniqueClubType* mutable_type();
  inline ::bgs::protocol::club::v1::UniqueClubType* release_type();
  inline void set_allocated_type(::bgs::protocol::club::v1::UniqueClubType* type);

  // repeated .bgs.protocol.v2.Attribute attribute = 2;
  inline int attribute_size() const;
  inline void clear_attribute();
  static const int kAttributeFieldNumber = 2;
  inline const ::bgs::protocol::v2::Attribute& attribute(int index) const;
  inline ::bgs::protocol::v2::Attribute* mutable_attribute(int index);
  inline ::bgs::protocol::v2::Attribute* add_attribute();
  inline const ::google::protobuf::RepeatedPtrField< ::bgs::protocol::v2::Attribute >&
      attribute() const;
  inline ::google::protobuf::RepeatedPtrField< ::bgs::protocol::v2::Attribute >*
      mutable_attribute();

  // optional string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string description = 4;
  inline bool has_description() const;
  inline void clear_description();
  static const int kDescriptionFieldNumber = 4;
  inline const ::std::string& description() const;
  inline void set_description(const ::std::string& value);
  inline void set_description(const char* value);
  inline void set_description(const char* value, size_t size);
  inline ::std::string* mutable_description();
  inline ::std::string* release_description();
  inline void set_allocated_description(::std::string* description);

  // optional .bgs.protocol.club.v1.AvatarId avatar = 5;
  inline bool has_avatar() const;
  inline void clear_avatar();
  static const int kAvatarFieldNumber = 5;
  inline const ::bgs::protocol::club::v1::AvatarId& avatar() const;
  inline ::bgs::protocol::club::v1::AvatarId* mutable_avatar();
  inline ::bgs::protocol::club::v1::AvatarId* release_avatar();
  inline void set_allocated_avatar(::bgs::protocol::club::v1::AvatarId* avatar);

  // optional .bgs.protocol.club.v1.PrivacyLevel privacy_level = 6;
  inline bool has_privacy_level() const;
  inline void clear_privacy_level();
  static const int kPrivacyLevelFieldNumber = 6;
  inline ::bgs::protocol::club::v1::PrivacyLevel privacy_level() const;
  inline void set_privacy_level(::bgs::protocol::club::v1::PrivacyLevel value);

  // optional string short_name = 7;
  inline bool has_short_name() const;
  inline void clear_short_name();
  static const int kShortNameFieldNumber = 7;
  inline const ::std::string& short_name() const;
  inline void set_short_name(const ::std::string& value);
  inline void set_short_name(const char* value);
  inline void set_short_name(const char* value, size_t size);
  inline ::std::string* mutable_short_name();
  inline ::std::string* release_short_name();
  inline void set_allocated_short_name(::std::string* short_name);

  // optional .bgs.protocol.club.v1.CreateMemberOptions member = 10;
  inline bool has_member() const;
  inline void clear_member();
  static const int kMemberFieldNumber = 10;
  inline const ::bgs::protocol::club::v1::CreateMemberOptions& member() const;
  inline ::bgs::protocol::club::v1::CreateMemberOptions* mutable_member();
  inline ::bgs::protocol::club::v1::CreateMemberOptions* release_member();
  inline void set_allocated_member(::bgs::protocol::club::v1::CreateMemberOptions* member);

  // optional .bgs.protocol.club.v1.CreateStreamOptions stream = 11;
  inline bool has_stream() const;
  inline void clear_stream();
  static const int kStreamFieldNumber = 11;
  inline const ::bgs::protocol::club::v1::CreateStreamOptions& stream() const;
  inline ::bgs::protocol::club::v1::CreateStreamOptions* mutable_stream();
  inline ::bgs::protocol::club::v1::CreateStreamOptions* release_stream();
  inline void set_allocated_stream(::bgs::protocol::club::v1::CreateStreamOptions* stream);

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.ClubCreateOptions)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_description();
  inline void clear_has_description();
  inline void set_has_avatar();
  inline void clear_has_avatar();
  inline void set_has_privacy_level();
  inline void clear_has_privacy_level();
  inline void set_has_short_name();
  inline void clear_has_short_name();
  inline void set_has_member();
  inline void clear_has_member();
  inline void set_has_stream();
  inline void clear_has_stream();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::bgs::protocol::club::v1::UniqueClubType* type_;
  ::google::protobuf::RepeatedPtrField< ::bgs::protocol::v2::Attribute > attribute_;
  ::std::string* name_;
  ::std::string* description_;
  ::bgs::protocol::club::v1::AvatarId* avatar_;
  ::std::string* short_name_;
  ::bgs::protocol::club::v1::CreateMemberOptions* member_;
  ::bgs::protocol::club::v1::CreateStreamOptions* stream_;
  int privacy_level_;
  friend void TC_PROTO_API protobuf_AddDesc_club_5fcore_2eproto();
  friend void protobuf_AssignDesc_club_5fcore_2eproto();
  friend void protobuf_ShutdownFile_club_5fcore_2eproto();

  void InitAsDefaultInstance();
  static ClubCreateOptions* default_instance_;
};
// -------------------------------------------------------------------

class TC_PROTO_API Club : public ::google::protobuf::Message {
 public:
  Club();
  virtual ~Club();

  Club(const Club& from);

  inline Club& operator=(const Club& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Club& default_instance();

  void Swap(Club* other);

  // implements Message ----------------------------------------------

  Club* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Club& from);
  void MergeFrom(const Club& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // optional .bgs.protocol.club.v1.UniqueClubType type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline const ::bgs::protocol::club::v1::UniqueClubType& type() const;
  inline ::bgs::protocol::club::v1::UniqueClubType* mutable_type();
  inline ::bgs::protocol::club::v1::UniqueClubType* release_type();
  inline void set_allocated_type(::bgs::protocol::club::v1::UniqueClubType* type);

  // repeated .bgs.protocol.v2.Attribute attribute = 3;
  inline int attribute_size() const;
  inline void clear_attribute();
  static const int kAttributeFieldNumber = 3;
  inline const ::bgs::protocol::v2::Attribute& attribute(int index) const;
  inline ::bgs::protocol::v2::Attribute* mutable_attribute(int index);
  inline ::bgs::protocol::v2::Attribute* add_attribute();
  inline const ::google::protobuf::RepeatedPtrField< ::bgs::protocol::v2::Attribute >&
      attribute() const;
  inline ::google::protobuf::RepeatedPtrField< ::bgs::protocol::v2::Attribute >*
      mutable_attribute();

  // optional string name = 4;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 4;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string description = 5;
  inline bool has_description() const;
  inline void clear_description();
  static const int kDescriptionFieldNumber = 5;
  inline const ::std::string& description() const;
  inline void set_description(const ::std::string& value);
  inline void set_description(const char* value);
  inline void set_description(const char* value, size_t size);
  inline ::std::string* mutable_description();
  inline ::std::string* release_description();
  inline void set_allocated_description(::std::string* description);

  // optional .bgs.protocol.club.v1.Broadcast broadcast = 6;
  inline bool has_broadcast() const;
  inline void clear_broadcast();
  static const int kBroadcastFieldNumber = 6;
  inline const ::bgs::protocol::club::v1::Broadcast& broadcast() const;
  inline ::bgs::protocol::club::v1::Broadcast* mutable_broadcast();
  inline ::bgs::protocol::club::v1::Broadcast* release_broadcast();
  inline void set_allocated_broadcast(::bgs::protocol::club::v1::Broadcast* broadcast);

  // optional .bgs.protocol.club.v1.AvatarId avatar = 7;
  inline bool has_avatar() const;
  inline void clear_avatar();
  static const int kAvatarFieldNumber = 7;
  inline const ::bgs::protocol::club::v1::AvatarId& avatar() const;
  inline ::bgs::protocol::club::v1::AvatarId* mutable_avatar();
  inline ::bgs::protocol::club::v1::AvatarId* release_avatar();
  inline void set_allocated_avatar(::bgs::protocol::club::v1::AvatarId* avatar);

  // optional .bgs.protocol.club.v1.PrivacyLevel privacy_level = 8;
  inline bool has_privacy_level() const;
  inline void clear_privacy_level();
  static const int kPrivacyLevelFieldNumber = 8;
  inline ::bgs::protocol::club::v1::PrivacyLevel privacy_level() const;
  inline void set_privacy_level(::bgs::protocol::club::v1::PrivacyLevel value);

  // optional .bgs.protocol.club.v1.VisibilityLevel visibility_level = 9;
  inline bool has_visibility_level() const;
  inline void clear_visibility_level();
  static const int kVisibilityLevelFieldNumber = 9;
  inline ::bgs::protocol::club::v1::VisibilityLevel visibility_level() const;
  inline void set_visibility_level(::bgs::protocol::club::v1::VisibilityLevel value);

  // optional uint32 member_count = 10;
  inline bool has_member_count() const;
  inline void clear_member_count();
  static const int kMemberCountFieldNumber = 10;
  inline ::google::protobuf::uint32 member_count() const;
  inline void set_member_count(::google::protobuf::uint32 value);

  // optional uint64 creation_time = 11;
  inline bool has_creation_time() const;
  inline void clear_creation_time();
  static const int kCreationTimeFieldNumber = 11;
  inline ::google::protobuf::uint64 creation_time() const;
  inline void set_creation_time(::google::protobuf::uint64 value);

  // optional .bgs.protocol.club.v1.StreamPosition stream_position = 12;
  inline bool has_stream_position() const;
  inline void clear_stream_position();
  static const int kStreamPositionFieldNumber = 12;
  inline const ::bgs::protocol::club::v1::StreamPosition& stream_position() const;
  inline ::bgs::protocol::club::v1::StreamPosition* mutable_stream_position();
  inline ::bgs::protocol::club::v1::StreamPosition* release_stream_position();
  inline void set_allocated_stream_position(::bgs::protocol::club::v1::StreamPosition* stream_position);

  // optional .bgs.protocol.club.v1.ClubRoleSet role_set = 13;
  inline bool has_role_set() const;
  inline void clear_role_set();
  static const int kRoleSetFieldNumber = 13;
  inline const ::bgs::protocol::club::v1::ClubRoleSet& role_set() const;
  inline ::bgs::protocol::club::v1::ClubRoleSet* mutable_role_set();
  inline ::bgs::protocol::club::v1::ClubRoleSet* release_role_set();
  inline void set_allocated_role_set(::bgs::protocol::club::v1::ClubRoleSet* role_set);

  // repeated .bgs.protocol.club.v1.MemberDescription leader = 14;
  inline int leader_size() const;
  inline void clear_leader();
  static const int kLeaderFieldNumber = 14;
  inline const ::bgs::protocol::club::v1::MemberDescription& leader(int index) const;
  inline ::bgs::protocol::club::v1::MemberDescription* mutable_leader(int index);
  inline ::bgs::protocol::club::v1::MemberDescription* add_leader();
  inline const ::google::protobuf::RepeatedPtrField< ::bgs::protocol::club::v1::MemberDescription >&
      leader() const;
  inline ::google::protobuf::RepeatedPtrField< ::bgs::protocol::club::v1::MemberDescription >*
      mutable_leader();

  // optional string short_name = 15;
  inline bool has_short_name() const;
  inline void clear_short_name();
  static const int kShortNameFieldNumber = 15;
  inline const ::std::string& short_name() const;
  inline void set_short_name(const ::std::string& value);
  inline void set_short_name(const char* value);
  inline void set_short_name(const char* value, size_t size);
  inline ::std::string* mutable_short_name();
  inline ::std::string* release_short_name();
  inline void set_allocated_short_name(::std::string* short_name);

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.Club)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_description();
  inline void clear_has_description();
  inline void set_has_broadcast();
  inline void clear_has_broadcast();
  inline void set_has_avatar();
  inline void clear_has_avatar();
  inline void set_has_privacy_level();
  inline void clear_has_privacy_level();
  inline void set_has_visibility_level();
  inline void clear_has_visibility_level();
  inline void set_has_member_count();
  inline void clear_has_member_count();
  inline void set_has_creation_time();
  inline void clear_has_creation_time();
  inline void set_has_stream_position();
  inline void clear_has_stream_position();
  inline void set_has_role_set();
  inline void clear_has_role_set();
  inline void set_has_short_name();
  inline void clear_has_short_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 id_;
  ::bgs::protocol::club::v1::UniqueClubType* type_;
  ::google::protobuf::RepeatedPtrField< ::bgs::protocol::v2::Attribute > attribute_;
  ::std::string* name_;
  ::std::string* description_;
  ::bgs::protocol::club::v1::Broadcast* broadcast_;
  ::bgs::protocol::club::v1::AvatarId* avatar_;
  int privacy_level_;
  int visibility_level_;
  ::google::protobuf::uint64 creation_time_;
  ::bgs::protocol::club::v1::StreamPosition* stream_position_;
  ::bgs::protocol::club::v1::ClubRoleSet* role_set_;
  ::google::protobuf::RepeatedPtrField< ::bgs::protocol::club::v1::MemberDescription > leader_;
  ::std::string* short_name_;
  ::google::protobuf::uint32 member_count_;
  friend void TC_PROTO_API protobuf_AddDesc_club_5fcore_2eproto();
  friend void protobuf_AssignDesc_club_5fcore_2eproto();
  friend void protobuf_ShutdownFile_club_5fcore_2eproto();

  void InitAsDefaultInstance();
  static Club* default_instance_;
};
// -------------------------------------------------------------------

class TC_PROTO_API ClubDescription : public ::google::protobuf::Message {
 public:
  ClubDescription();
  virtual ~ClubDescription();

  ClubDescription(const ClubDescription& from);

  inline ClubDescription& operator=(const ClubDescription& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClubDescription& default_instance();

  void Swap(ClubDescription* other);

  // implements Message ----------------------------------------------

  ClubDescription* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClubDescription& from);
  void MergeFrom(const ClubDescription& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // optional .bgs.protocol.club.v1.UniqueClubType type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline const ::bgs::protocol::club::v1::UniqueClubType& type() const;
  inline ::bgs::protocol::club::v1::UniqueClubType* mutable_type();
  inline ::bgs::protocol::club::v1::UniqueClubType* release_type();
  inline void set_allocated_type(::bgs::protocol::club::v1::UniqueClubType* type);

  // optional string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string description = 4;
  inline bool has_description() const;
  inline void clear_description();
  static const int kDescriptionFieldNumber = 4;
  inline const ::std::string& description() const;
  inline void set_description(const ::std::string& value);
  inline void set_description(const char* value);
  inline void set_description(const char* value, size_t size);
  inline ::std::string* mutable_description();
  inline ::std::string* release_description();
  inline void set_allocated_description(::std::string* description);

  // optional .bgs.protocol.club.v1.AvatarId avatar = 5;
  inline bool has_avatar() const;
  inline void clear_avatar();
  static const int kAvatarFieldNumber = 5;
  inline const ::bgs::protocol::club::v1::AvatarId& avatar() const;
  inline ::bgs::protocol::club::v1::AvatarId* mutable_avatar();
  inline ::bgs::protocol::club::v1::AvatarId* release_avatar();
  inline void set_allocated_avatar(::bgs::protocol::club::v1::AvatarId* avatar);

  // optional .bgs.protocol.club.v1.PrivacyLevel privacy_level = 6;
  inline bool has_privacy_level() const;
  inline void clear_privacy_level();
  static const int kPrivacyLevelFieldNumber = 6;
  inline ::bgs::protocol::club::v1::PrivacyLevel privacy_level() const;
  inline void set_privacy_level(::bgs::protocol::club::v1::PrivacyLevel value);

  // optional .bgs.protocol.club.v1.VisibilityLevel visibility_level = 7;
  inline bool has_visibility_level() const;
  inline void clear_visibility_level();
  static const int kVisibilityLevelFieldNumber = 7;
  inline ::bgs::protocol::club::v1::VisibilityLevel visibility_level() const;
  inline void set_visibility_level(::bgs::protocol::club::v1::VisibilityLevel value);

  // optional uint32 member_count = 8;
  inline bool has_member_count() const;
  inline void clear_member_count();
  static const int kMemberCountFieldNumber = 8;
  inline ::google::protobuf::uint32 member_count() const;
  inline void set_member_count(::google::protobuf::uint32 value);

  // repeated .bgs.protocol.club.v1.MemberDescription leader = 9;
  inline int leader_size() const;
  inline void clear_leader();
  static const int kLeaderFieldNumber = 9;
  inline const ::bgs::protocol::club::v1::MemberDescription& leader(int index) const;
  inline ::bgs::protocol::club::v1::MemberDescription* mutable_leader(int index);
  inline ::bgs::protocol::club::v1::MemberDescription* add_leader();
  inline const ::google::protobuf::RepeatedPtrField< ::bgs::protocol::club::v1::MemberDescription >&
      leader() const;
  inline ::google::protobuf::RepeatedPtrField< ::bgs::protocol::club::v1::MemberDescription >*
      mutable_leader();

  // optional uint64 creation_time = 10;
  inline bool has_creation_time() const;
  inline void clear_creation_time();
  static const int kCreationTimeFieldNumber = 10;
  inline ::google::protobuf::uint64 creation_time() const;
  inline void set_creation_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.ClubDescription)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_description();
  inline void clear_has_description();
  inline void set_has_avatar();
  inline void clear_has_avatar();
  inline void set_has_privacy_level();
  inline void clear_has_privacy_level();
  inline void set_has_visibility_level();
  inline void clear_has_visibility_level();
  inline void set_has_member_count();
  inline void clear_has_member_count();
  inline void set_has_creation_time();
  inline void clear_has_creation_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 id_;
  ::bgs::protocol::club::v1::UniqueClubType* type_;
  ::std::string* name_;
  ::std::string* description_;
  ::bgs::protocol::club::v1::AvatarId* avatar_;
  int privacy_level_;
  int visibility_level_;
  ::google::protobuf::RepeatedPtrField< ::bgs::protocol::club::v1::MemberDescription > leader_;
  ::google::protobuf::uint64 creation_time_;
  ::google::protobuf::uint32 member_count_;
  friend void TC_PROTO_API protobuf_AddDesc_club_5fcore_2eproto();
  friend void protobuf_AssignDesc_club_5fcore_2eproto();
  friend void protobuf_ShutdownFile_club_5fcore_2eproto();

  void InitAsDefaultInstance();
  static ClubDescription* default_instance_;
};
// -------------------------------------------------------------------

class TC_PROTO_API ClubView : public ::google::protobuf::Message {
 public:
  ClubView();
  virtual ~ClubView();

  ClubView(const ClubView& from);

  inline ClubView& operator=(const ClubView& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClubView& default_instance();

  void Swap(ClubView* other);

  // implements Message ----------------------------------------------

  ClubView* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClubView& from);
  void MergeFrom(const ClubView& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 club_id = 1;
  inline bool has_club_id() const;
  inline void clear_club_id();
  static const int kClubIdFieldNumber = 1;
  inline ::google::protobuf::uint64 club_id() const;
  inline void set_club_id(::google::protobuf::uint64 value);

  // optional .bgs.protocol.ViewMarker marker = 2;
  inline bool has_marker() const;
  inline void clear_marker();
  static const int kMarkerFieldNumber = 2;
  inline const ::bgs::protocol::ViewMarker& marker() const;
  inline ::bgs::protocol::ViewMarker* mutable_marker();
  inline ::bgs::protocol::ViewMarker* release_marker();
  inline void set_allocated_marker(::bgs::protocol::ViewMarker* marker);

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.ClubView)
 private:
  inline void set_has_club_id();
  inline void clear_has_club_id();
  inline void set_has_marker();
  inline void clear_has_marker();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 club_id_;
  ::bgs::protocol::ViewMarker* marker_;
  friend void TC_PROTO_API protobuf_AddDesc_club_5fcore_2eproto();
  friend void protobuf_AssignDesc_club_5fcore_2eproto();
  friend void protobuf_ShutdownFile_club_5fcore_2eproto();

  void InitAsDefaultInstance();
  static ClubView* default_instance_;
};
// -------------------------------------------------------------------

class TC_PROTO_API ClubStateOptions : public ::google::protobuf::Message {
 public:
  ClubStateOptions();
  virtual ~ClubStateOptions();

  ClubStateOptions(const ClubStateOptions& from);

  inline ClubStateOptions& operator=(const ClubStateOptions& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClubStateOptions& default_instance();

  void Swap(ClubStateOptions* other);

  // implements Message ----------------------------------------------

  ClubStateOptions* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClubStateOptions& from);
  void MergeFrom(const ClubStateOptions& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .bgs.protocol.v2.Attribute attribute = 1;
  inline int attribute_size() const;
  inline void clear_attribute();
  static const int kAttributeFieldNumber = 1;
  inline const ::bgs::protocol::v2::Attribute& attribute(int index) const;
  inline ::bgs::protocol::v2::Attribute* mutable_attribute(int index);
  inline ::bgs::protocol::v2::Attribute* add_attribute();
  inline const ::google::protobuf::RepeatedPtrField< ::bgs::protocol::v2::Attribute >&
      attribute() const;
  inline ::google::protobuf::RepeatedPtrField< ::bgs::protocol::v2::Attribute >*
      mutable_attribute();

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string description = 3;
  inline bool has_description() const;
  inline void clear_description();
  static const int kDescriptionFieldNumber = 3;
  inline const ::std::string& description() const;
  inline void set_description(const ::std::string& value);
  inline void set_description(const char* value);
  inline void set_description(const char* value, size_t size);
  inline ::std::string* mutable_description();
  inline ::std::string* release_description();
  inline void set_allocated_description(::std::string* description);

  // optional .bgs.protocol.club.v1.SetBroadcastOptions broadcast = 4;
  inline bool has_broadcast() const;
  inline void clear_broadcast();
  static const int kBroadcastFieldNumber = 4;
  inline const ::bgs::protocol::club::v1::SetBroadcastOptions& broadcast() const;
  inline ::bgs::protocol::club::v1::SetBroadcastOptions* mutable_broadcast();
  inline ::bgs::protocol::club::v1::SetBroadcastOptions* release_broadcast();
  inline void set_allocated_broadcast(::bgs::protocol::club::v1::SetBroadcastOptions* broadcast);

  // optional .bgs.protocol.club.v1.AvatarId avatar = 5;
  inline bool has_avatar() const;
  inline void clear_avatar();
  static const int kAvatarFieldNumber = 5;
  inline const ::bgs::protocol::club::v1::AvatarId& avatar() const;
  inline ::bgs::protocol::club::v1::AvatarId* mutable_avatar();
  inline ::bgs::protocol::club::v1::AvatarId* release_avatar();
  inline void set_allocated_avatar(::bgs::protocol::club::v1::AvatarId* avatar);

  // optional .bgs.protocol.club.v1.PrivacyLevel privacy_level = 6;
  inline bool has_privacy_level() const;
  inline void clear_privacy_level();
  static const int kPrivacyLevelFieldNumber = 6;
  inline ::bgs::protocol::club::v1::PrivacyLevel privacy_level() const;
  inline void set_privacy_level(::bgs::protocol::club::v1::PrivacyLevel value);

  // optional .bgs.protocol.club.v1.StreamPosition stream_position = 7;
  inline bool has_stream_position() const;
  inline void clear_stream_position();
  static const int kStreamPositionFieldNumber = 7;
  inline const ::bgs::protocol::club::v1::StreamPosition& stream_position() const;
  inline ::bgs::protocol::club::v1::StreamPosition* mutable_stream_position();
  inline ::bgs::protocol::club::v1::StreamPosition* release_stream_position();
  inline void set_allocated_stream_position(::bgs::protocol::club::v1::StreamPosition* stream_position);

  // optional string short_name = 8;
  inline bool has_short_name() const;
  inline void clear_short_name();
  static const int kShortNameFieldNumber = 8;
  inline const ::std::string& short_name() const;
  inline void set_short_name(const ::std::string& value);
  inline void set_short_name(const char* value);
  inline void set_short_name(const char* value, size_t size);
  inline ::std::string* mutable_short_name();
  inline ::std::string* release_short_name();
  inline void set_allocated_short_name(::std::string* short_name);

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.ClubStateOptions)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_description();
  inline void clear_has_description();
  inline void set_has_broadcast();
  inline void clear_has_broadcast();
  inline void set_has_avatar();
  inline void clear_has_avatar();
  inline void set_has_privacy_level();
  inline void clear_has_privacy_level();
  inline void set_has_stream_position();
  inline void clear_has_stream_position();
  inline void set_has_short_name();
  inline void clear_has_short_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::bgs::protocol::v2::Attribute > attribute_;
  ::std::string* name_;
  ::std::string* description_;
  ::bgs::protocol::club::v1::SetBroadcastOptions* broadcast_;
  ::bgs::protocol::club::v1::AvatarId* avatar_;
  ::bgs::protocol::club::v1::StreamPosition* stream_position_;
  ::std::string* short_name_;
  int privacy_level_;
  friend void TC_PROTO_API protobuf_AddDesc_club_5fcore_2eproto();
  friend void protobuf_AssignDesc_club_5fcore_2eproto();
  friend void protobuf_ShutdownFile_club_5fcore_2eproto();

  void InitAsDefaultInstance();
  static ClubStateOptions* default_instance_;
};
// -------------------------------------------------------------------

class TC_PROTO_API ClubStateAssignment : public ::google::protobuf::Message {
 public:
  ClubStateAssignment();
  virtual ~ClubStateAssignment();

  ClubStateAssignment(const ClubStateAssignment& from);

  inline ClubStateAssignment& operator=(const ClubStateAssignment& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClubStateAssignment& default_instance();

  void Swap(ClubStateAssignment* other);

  // implements Message ----------------------------------------------

  ClubStateAssignment* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClubStateAssignment& from);
  void MergeFrom(const ClubStateAssignment& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 club_id = 1;
  inline bool has_club_id() const;
  inline void clear_club_id();
  static const int kClubIdFieldNumber = 1;
  inline ::google::protobuf::uint64 club_id() const;
  inline void set_club_id(::google::protobuf::uint64 value);

  // repeated .bgs.protocol.v2.Attribute attribute = 2;
  inline int attribute_size() const;
  inline void clear_attribute();
  static const int kAttributeFieldNumber = 2;
  inline const ::bgs::protocol::v2::Attribute& attribute(int index) const;
  inline ::bgs::protocol::v2::Attribute* mutable_attribute(int index);
  inline ::bgs::protocol::v2::Attribute* add_attribute();
  inline const ::google::protobuf::RepeatedPtrField< ::bgs::protocol::v2::Attribute >&
      attribute() const;
  inline ::google::protobuf::RepeatedPtrField< ::bgs::protocol::v2::Attribute >*
      mutable_attribute();

  // optional string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string description = 4;
  inline bool has_description() const;
  inline void clear_description();
  static const int kDescriptionFieldNumber = 4;
  inline const ::std::string& description() const;
  inline void set_description(const ::std::string& value);
  inline void set_description(const char* value);
  inline void set_description(const char* value, size_t size);
  inline ::std::string* mutable_description();
  inline ::std::string* release_description();
  inline void set_allocated_description(::std::string* description);

  // optional .bgs.protocol.club.v1.Broadcast broadcast = 5;
  inline bool has_broadcast() const;
  inline void clear_broadcast();
  static const int kBroadcastFieldNumber = 5;
  inline const ::bgs::protocol::club::v1::Broadcast& broadcast() const;
  inline ::bgs::protocol::club::v1::Broadcast* mutable_broadcast();
  inline ::bgs::protocol::club::v1::Broadcast* release_broadcast();
  inline void set_allocated_broadcast(::bgs::protocol::club::v1::Broadcast* broadcast);

  // optional .bgs.protocol.club.v1.AvatarId avatar = 6;
  inline bool has_avatar() const;
  inline void clear_avatar();
  static const int kAvatarFieldNumber = 6;
  inline const ::bgs::protocol::club::v1::AvatarId& avatar() const;
  inline ::bgs::protocol::club::v1::AvatarId* mutable_avatar();
  inline ::bgs::protocol::club::v1::AvatarId* release_avatar();
  inline void set_allocated_avatar(::bgs::protocol::club::v1::AvatarId* avatar);

  // optional .bgs.protocol.club.v1.PrivacyLevel privacy_level = 7;
  inline bool has_privacy_level() const;
  inline void clear_privacy_level();
  static const int kPrivacyLevelFieldNumber = 7;
  inline ::bgs::protocol::club::v1::PrivacyLevel privacy_level() const;
  inline void set_privacy_level(::bgs::protocol::club::v1::PrivacyLevel value);

  // optional .bgs.protocol.club.v1.StreamPosition stream_position = 8;
  inline bool has_stream_position() const;
  inline void clear_stream_position();
  static const int kStreamPositionFieldNumber = 8;
  inline const ::bgs::protocol::club::v1::StreamPosition& stream_position() const;
  inline ::bgs::protocol::club::v1::StreamPosition* mutable_stream_position();
  inline ::bgs::protocol::club::v1::StreamPosition* release_stream_position();
  inline void set_allocated_stream_position(::bgs::protocol::club::v1::StreamPosition* stream_position);

  // optional string short_name = 9;
  inline bool has_short_name() const;
  inline void clear_short_name();
  static const int kShortNameFieldNumber = 9;
  inline const ::std::string& short_name() const;
  inline void set_short_name(const ::std::string& value);
  inline void set_short_name(const char* value);
  inline void set_short_name(const char* value, size_t size);
  inline ::std::string* mutable_short_name();
  inline ::std::string* release_short_name();
  inline void set_allocated_short_name(::std::string* short_name);

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.ClubStateAssignment)
 private:
  inline void set_has_club_id();
  inline void clear_has_club_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_description();
  inline void clear_has_description();
  inline void set_has_broadcast();
  inline void clear_has_broadcast();
  inline void set_has_avatar();
  inline void clear_has_avatar();
  inline void set_has_privacy_level();
  inline void clear_has_privacy_level();
  inline void set_has_stream_position();
  inline void clear_has_stream_position();
  inline void set_has_short_name();
  inline void clear_has_short_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 club_id_;
  ::google::protobuf::RepeatedPtrField< ::bgs::protocol::v2::Attribute > attribute_;
  ::std::string* name_;
  ::std::string* description_;
  ::bgs::protocol::club::v1::Broadcast* broadcast_;
  ::bgs::protocol::club::v1::AvatarId* avatar_;
  ::bgs::protocol::club::v1::StreamPosition* stream_position_;
  ::std::string* short_name_;
  int privacy_level_;
  friend void TC_PROTO_API protobuf_AddDesc_club_5fcore_2eproto();
  friend void protobuf_AssignDesc_club_5fcore_2eproto();
  friend void protobuf_ShutdownFile_club_5fcore_2eproto();

  void InitAsDefaultInstance();
  static ClubStateAssignment* default_instance_;
};
// -------------------------------------------------------------------

class TC_PROTO_API StreamSettings : public ::google::protobuf::Message {
 public:
  StreamSettings();
  virtual ~StreamSettings();

  StreamSettings(const StreamSettings& from);

  inline StreamSettings& operator=(const StreamSettings& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StreamSettings& default_instance();

  void Swap(StreamSettings* other);

  // implements Message ----------------------------------------------

  StreamSettings* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StreamSettings& from);
  void MergeFrom(const StreamSettings& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 stream_id = 1;
  inline bool has_stream_id() const;
  inline void clear_stream_id();
  static const int kStreamIdFieldNumber = 1;
  inline ::google::protobuf::uint64 stream_id() const;
  inline void set_stream_id(::google::protobuf::uint64 value);

  // optional .bgs.protocol.club.v1.StreamNotificationFilter filter = 2;
  inline bool has_filter() const;
  inline void clear_filter();
  static const int kFilterFieldNumber = 2;
  inline ::bgs::protocol::club::v1::StreamNotificationFilter filter() const;
  inline void set_filter(::bgs::protocol::club::v1::StreamNotificationFilter value);

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.StreamSettings)
 private:
  inline void set_has_stream_id();
  inline void clear_has_stream_id();
  inline void set_has_filter();
  inline void clear_has_filter();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 stream_id_;
  int filter_;
  friend void TC_PROTO_API protobuf_AddDesc_club_5fcore_2eproto();
  friend void protobuf_AssignDesc_club_5fcore_2eproto();
  friend void protobuf_ShutdownFile_club_5fcore_2eproto();

  void InitAsDefaultInstance();
  static StreamSettings* default_instance_;
};
// -------------------------------------------------------------------

class TC_PROTO_API ClubSettings : public ::google::protobuf::Message {
 public:
  ClubSettings();
  virtual ~ClubSettings();

  ClubSettings(const ClubSettings& from);

  inline ClubSettings& operator=(const ClubSettings& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClubSettings& default_instance();

  void Swap(ClubSettings* other);

  // implements Message ----------------------------------------------

  ClubSettings* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClubSettings& from);
  void MergeFrom(const ClubSettings& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .bgs.protocol.club.v1.StreamSettings stream = 1;
  inline int stream_size() const;
  inline void clear_stream();
  static const int kStreamFieldNumber = 1;
  inline const ::bgs::protocol::club::v1::StreamSettings& stream(int index) const;
  inline ::bgs::protocol::club::v1::StreamSettings* mutable_stream(int index);
  inline ::bgs::protocol::club::v1::StreamSettings* add_stream();
  inline const ::google::protobuf::RepeatedPtrField< ::bgs::protocol::club::v1::StreamSettings >&
      stream() const;
  inline ::google::protobuf::RepeatedPtrField< ::bgs::protocol::club::v1::StreamSettings >*
      mutable_stream();

  // optional bool stream_notification_filter_all = 2;
  inline bool has_stream_notification_filter_all() const;
  inline void clear_stream_notification_filter_all();
  static const int kStreamNotificationFilterAllFieldNumber = 2;
  inline bool stream_notification_filter_all() const;
  inline void set_stream_notification_filter_all(bool value);

  // repeated .bgs.protocol.v2.Attribute attribute = 3;
  inline int attribute_size() const;
  inline void clear_attribute();
  static const int kAttributeFieldNumber = 3;
  inline const ::bgs::protocol::v2::Attribute& attribute(int index) const;
  inline ::bgs::protocol::v2::Attribute* mutable_attribute(int index);
  inline ::bgs::protocol::v2::Attribute* add_attribute();
  inline const ::google::protobuf::RepeatedPtrField< ::bgs::protocol::v2::Attribute >&
      attribute() const;
  inline ::google::protobuf::RepeatedPtrField< ::bgs::protocol::v2::Attribute >*
      mutable_attribute();

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.ClubSettings)
 private:
  inline void set_has_stream_notification_filter_all();
  inline void clear_has_stream_notification_filter_all();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::bgs::protocol::club::v1::StreamSettings > stream_;
  ::google::protobuf::RepeatedPtrField< ::bgs::protocol::v2::Attribute > attribute_;
  bool stream_notification_filter_all_;
  friend void TC_PROTO_API protobuf_AddDesc_club_5fcore_2eproto();
  friend void protobuf_AssignDesc_club_5fcore_2eproto();
  friend void protobuf_ShutdownFile_club_5fcore_2eproto();

  void InitAsDefaultInstance();
  static ClubSettings* default_instance_;
};
// -------------------------------------------------------------------

class TC_PROTO_API ClubSettingsOptions : public ::google::protobuf::Message {
 public:
  ClubSettingsOptions();
  virtual ~ClubSettingsOptions();

  ClubSettingsOptions(const ClubSettingsOptions& from);

  inline ClubSettingsOptions& operator=(const ClubSettingsOptions& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClubSettingsOptions& default_instance();

  void Swap(ClubSettingsOptions* other);

  // implements Message ----------------------------------------------

  ClubSettingsOptions* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClubSettingsOptions& from);
  void MergeFrom(const ClubSettingsOptions& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .bgs.protocol.club.v1.StreamSettings stream = 1 [deprecated = true];
  inline int stream_size() const PROTOBUF_DEPRECATED;
  inline void clear_stream() PROTOBUF_DEPRECATED;
  static const int kStreamFieldNumber = 1;
  inline const ::bgs::protocol::club::v1::StreamSettings& stream(int index) const PROTOBUF_DEPRECATED;
  inline ::bgs::protocol::club::v1::StreamSettings* mutable_stream(int index) PROTOBUF_DEPRECATED;
  inline ::bgs::protocol::club::v1::StreamSettings* add_stream() PROTOBUF_DEPRECATED;
  inline const ::google::protobuf::RepeatedPtrField< ::bgs::protocol::club::v1::StreamSettings >&
      stream() const PROTOBUF_DEPRECATED;
  inline ::google::protobuf::RepeatedPtrField< ::bgs::protocol::club::v1::StreamSettings >*
      mutable_stream() PROTOBUF_DEPRECATED;

  // optional .bgs.protocol.club.v1.ClubSettings settings = 2;
  inline bool has_settings() const;
  inline void clear_settings();
  static const int kSettingsFieldNumber = 2;
  inline const ::bgs::protocol::club::v1::ClubSettings& settings() const;
  inline ::bgs::protocol::club::v1::ClubSettings* mutable_settings();
  inline ::bgs::protocol::club::v1::ClubSettings* release_settings();
  inline void set_allocated_settings(::bgs::protocol::club::v1::ClubSettings* settings);

  // optional uint32 version = 3;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 3;
  inline ::google::protobuf::uint32 version() const;
  inline void set_version(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.ClubSettingsOptions)
 private:
  inline void set_has_settings();
  inline void clear_has_settings();
  inline void set_has_version();
  inline void clear_has_version();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::bgs::protocol::club::v1::StreamSettings > stream_;
  ::bgs::protocol::club::v1::ClubSettings* settings_;
  ::google::protobuf::uint32 version_;
  friend void TC_PROTO_API protobuf_AddDesc_club_5fcore_2eproto();
  friend void protobuf_AssignDesc_club_5fcore_2eproto();
  friend void protobuf_ShutdownFile_club_5fcore_2eproto();

  void InitAsDefaultInstance();
  static ClubSettingsOptions* default_instance_;
};
// -------------------------------------------------------------------

class TC_PROTO_API ClubSettingsAssignment : public ::google::protobuf::Message {
 public:
  ClubSettingsAssignment();
  virtual ~ClubSettingsAssignment();

  ClubSettingsAssignment(const ClubSettingsAssignment& from);

  inline ClubSettingsAssignment& operator=(const ClubSettingsAssignment& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClubSettingsAssignment& default_instance();

  void Swap(ClubSettingsAssignment* other);

  // implements Message ----------------------------------------------

  ClubSettingsAssignment* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClubSettingsAssignment& from);
  void MergeFrom(const ClubSettingsAssignment& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .bgs.protocol.club.v1.StreamSettings stream = 1 [deprecated = true];
  inline int stream_size() const PROTOBUF_DEPRECATED;
  inline void clear_stream() PROTOBUF_DEPRECATED;
  static const int kStreamFieldNumber = 1;
  inline const ::bgs::protocol::club::v1::StreamSettings& stream(int index) const PROTOBUF_DEPRECATED;
  inline ::bgs::protocol::club::v1::StreamSettings* mutable_stream(int index) PROTOBUF_DEPRECATED;
  inline ::bgs::protocol::club::v1::StreamSettings* add_stream() PROTOBUF_DEPRECATED;
  inline const ::google::protobuf::RepeatedPtrField< ::bgs::protocol::club::v1::StreamSettings >&
      stream() const PROTOBUF_DEPRECATED;
  inline ::google::protobuf::RepeatedPtrField< ::bgs::protocol::club::v1::StreamSettings >*
      mutable_stream() PROTOBUF_DEPRECATED;

  // optional .bgs.protocol.club.v1.ClubSettings settings = 2;
  inline bool has_settings() const;
  inline void clear_settings();
  static const int kSettingsFieldNumber = 2;
  inline const ::bgs::protocol::club::v1::ClubSettings& settings() const;
  inline ::bgs::protocol::club::v1::ClubSettings* mutable_settings();
  inline ::bgs::protocol::club::v1::ClubSettings* release_settings();
  inline void set_allocated_settings(::bgs::protocol::club::v1::ClubSettings* settings);

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.ClubSettingsAssignment)
 private:
  inline void set_has_settings();
  inline void clear_has_settings();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::bgs::protocol::club::v1::StreamSettings > stream_;
  ::bgs::protocol::club::v1::ClubSettings* settings_;
  friend void TC_PROTO_API protobuf_AddDesc_club_5fcore_2eproto();
  friend void protobuf_AssignDesc_club_5fcore_2eproto();
  friend void protobuf_ShutdownFile_club_5fcore_2eproto();

  void InitAsDefaultInstance();
  static ClubSettingsAssignment* default_instance_;
};
// ===================================================================


// ===================================================================


// ===================================================================

// AvatarId

// optional uint32 id = 1;
inline bool AvatarId::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AvatarId::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AvatarId::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AvatarId::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 AvatarId::id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.AvatarId.id)
  return id_;
}
inline void AvatarId::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.AvatarId.id)
}

// -------------------------------------------------------------------

// SetBroadcastOptions

// optional string content = 1;
inline bool SetBroadcastOptions::has_content() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SetBroadcastOptions::set_has_content() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SetBroadcastOptions::clear_has_content() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SetBroadcastOptions::clear_content() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& SetBroadcastOptions::content() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.SetBroadcastOptions.content)
  return *content_;
}
inline void SetBroadcastOptions::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.SetBroadcastOptions.content)
}
inline void SetBroadcastOptions::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set_char:bgs.protocol.club.v1.SetBroadcastOptions.content)
}
inline void SetBroadcastOptions::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.club.v1.SetBroadcastOptions.content)
}
inline ::std::string* SetBroadcastOptions::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.SetBroadcastOptions.content)
  return content_;
}
inline ::std::string* SetBroadcastOptions::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SetBroadcastOptions::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.SetBroadcastOptions.content)
}

// -------------------------------------------------------------------

// Broadcast

// optional string content = 1;
inline bool Broadcast::has_content() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Broadcast::set_has_content() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Broadcast::clear_has_content() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Broadcast::clear_content() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& Broadcast::content() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.Broadcast.content)
  return *content_;
}
inline void Broadcast::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.Broadcast.content)
}
inline void Broadcast::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set_char:bgs.protocol.club.v1.Broadcast.content)
}
inline void Broadcast::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.club.v1.Broadcast.content)
}
inline ::std::string* Broadcast::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.Broadcast.content)
  return content_;
}
inline ::std::string* Broadcast::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Broadcast::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.Broadcast.content)
}

// optional .bgs.protocol.club.v1.MemberDescription creator = 2;
inline bool Broadcast::has_creator() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Broadcast::set_has_creator() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Broadcast::clear_has_creator() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Broadcast::clear_creator() {
  if (creator_ != NULL) creator_->::bgs::protocol::club::v1::MemberDescription::Clear();
  clear_has_creator();
}
inline const ::bgs::protocol::club::v1::MemberDescription& Broadcast::creator() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.Broadcast.creator)
  return creator_ != NULL ? *creator_ : *default_instance_->creator_;
}
inline ::bgs::protocol::club::v1::MemberDescription* Broadcast::mutable_creator() {
  set_has_creator();
  if (creator_ == NULL) creator_ = new ::bgs::protocol::club::v1::MemberDescription;
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.Broadcast.creator)
  return creator_;
}
inline ::bgs::protocol::club::v1::MemberDescription* Broadcast::release_creator() {
  clear_has_creator();
  ::bgs::protocol::club::v1::MemberDescription* temp = creator_;
  creator_ = NULL;
  return temp;
}
inline void Broadcast::set_allocated_creator(::bgs::protocol::club::v1::MemberDescription* creator) {
  delete creator_;
  creator_ = creator;
  if (creator) {
    set_has_creator();
  } else {
    clear_has_creator();
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.Broadcast.creator)
}

// optional uint64 creation_time = 3;
inline bool Broadcast::has_creation_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Broadcast::set_has_creation_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Broadcast::clear_has_creation_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Broadcast::clear_creation_time() {
  creation_time_ = GOOGLE_ULONGLONG(0);
  clear_has_creation_time();
}
inline ::google::protobuf::uint64 Broadcast::creation_time() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.Broadcast.creation_time)
  return creation_time_;
}
inline void Broadcast::set_creation_time(::google::protobuf::uint64 value) {
  set_has_creation_time();
  creation_time_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.Broadcast.creation_time)
}

// -------------------------------------------------------------------

// UniqueClubType

// optional fixed32 program = 1;
inline bool UniqueClubType::has_program() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UniqueClubType::set_has_program() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UniqueClubType::clear_has_program() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UniqueClubType::clear_program() {
  program_ = 0u;
  clear_has_program();
}
inline ::google::protobuf::uint32 UniqueClubType::program() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.UniqueClubType.program)
  return program_;
}
inline void UniqueClubType::set_program(::google::protobuf::uint32 value) {
  set_has_program();
  program_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.UniqueClubType.program)
}

// optional string name = 2;
inline bool UniqueClubType::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UniqueClubType::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UniqueClubType::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UniqueClubType::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& UniqueClubType::name() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.UniqueClubType.name)
  return *name_;
}
inline void UniqueClubType::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.UniqueClubType.name)
}
inline void UniqueClubType::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:bgs.protocol.club.v1.UniqueClubType.name)
}
inline void UniqueClubType::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.club.v1.UniqueClubType.name)
}
inline ::std::string* UniqueClubType::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.UniqueClubType.name)
  return name_;
}
inline ::std::string* UniqueClubType::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UniqueClubType::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.UniqueClubType.name)
}

// -------------------------------------------------------------------

// ClubCreateOptions

// optional .bgs.protocol.club.v1.UniqueClubType type = 1;
inline bool ClubCreateOptions::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClubCreateOptions::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClubCreateOptions::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClubCreateOptions::clear_type() {
  if (type_ != NULL) type_->::bgs::protocol::club::v1::UniqueClubType::Clear();
  clear_has_type();
}
inline const ::bgs::protocol::club::v1::UniqueClubType& ClubCreateOptions::type() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubCreateOptions.type)
  return type_ != NULL ? *type_ : *default_instance_->type_;
}
inline ::bgs::protocol::club::v1::UniqueClubType* ClubCreateOptions::mutable_type() {
  set_has_type();
  if (type_ == NULL) type_ = new ::bgs::protocol::club::v1::UniqueClubType;
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubCreateOptions.type)
  return type_;
}
inline ::bgs::protocol::club::v1::UniqueClubType* ClubCreateOptions::release_type() {
  clear_has_type();
  ::bgs::protocol::club::v1::UniqueClubType* temp = type_;
  type_ = NULL;
  return temp;
}
inline void ClubCreateOptions::set_allocated_type(::bgs::protocol::club::v1::UniqueClubType* type) {
  delete type_;
  type_ = type;
  if (type) {
    set_has_type();
  } else {
    clear_has_type();
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.ClubCreateOptions.type)
}

// repeated .bgs.protocol.v2.Attribute attribute = 2;
inline int ClubCreateOptions::attribute_size() const {
  return attribute_.size();
}
inline void ClubCreateOptions::clear_attribute() {
  attribute_.Clear();
}
inline const ::bgs::protocol::v2::Attribute& ClubCreateOptions::attribute(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubCreateOptions.attribute)
  return attribute_.Get(index);
}
inline ::bgs::protocol::v2::Attribute* ClubCreateOptions::mutable_attribute(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubCreateOptions.attribute)
  return attribute_.Mutable(index);
}
inline ::bgs::protocol::v2::Attribute* ClubCreateOptions::add_attribute() {
  // @@protoc_insertion_point(field_add:bgs.protocol.club.v1.ClubCreateOptions.attribute)
  return attribute_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bgs::protocol::v2::Attribute >&
ClubCreateOptions::attribute() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.club.v1.ClubCreateOptions.attribute)
  return attribute_;
}
inline ::google::protobuf::RepeatedPtrField< ::bgs::protocol::v2::Attribute >*
ClubCreateOptions::mutable_attribute() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.club.v1.ClubCreateOptions.attribute)
  return &attribute_;
}

// optional string name = 3;
inline bool ClubCreateOptions::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ClubCreateOptions::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ClubCreateOptions::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ClubCreateOptions::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ClubCreateOptions::name() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubCreateOptions.name)
  return *name_;
}
inline void ClubCreateOptions::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubCreateOptions.name)
}
inline void ClubCreateOptions::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:bgs.protocol.club.v1.ClubCreateOptions.name)
}
inline void ClubCreateOptions::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.club.v1.ClubCreateOptions.name)
}
inline ::std::string* ClubCreateOptions::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubCreateOptions.name)
  return name_;
}
inline ::std::string* ClubCreateOptions::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ClubCreateOptions::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.ClubCreateOptions.name)
}

// optional string description = 4;
inline bool ClubCreateOptions::has_description() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ClubCreateOptions::set_has_description() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ClubCreateOptions::clear_has_description() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ClubCreateOptions::clear_description() {
  if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_->clear();
  }
  clear_has_description();
}
inline const ::std::string& ClubCreateOptions::description() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubCreateOptions.description)
  return *description_;
}
inline void ClubCreateOptions::set_description(const ::std::string& value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_ = new ::std::string;
  }
  description_->assign(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubCreateOptions.description)
}
inline void ClubCreateOptions::set_description(const char* value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_ = new ::std::string;
  }
  description_->assign(value);
  // @@protoc_insertion_point(field_set_char:bgs.protocol.club.v1.ClubCreateOptions.description)
}
inline void ClubCreateOptions::set_description(const char* value, size_t size) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_ = new ::std::string;
  }
  description_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.club.v1.ClubCreateOptions.description)
}
inline ::std::string* ClubCreateOptions::mutable_description() {
  set_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubCreateOptions.description)
  return description_;
}
inline ::std::string* ClubCreateOptions::release_description() {
  clear_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = description_;
    description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ClubCreateOptions::set_allocated_description(::std::string* description) {
  if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete description_;
  }
  if (description) {
    set_has_description();
    description_ = description;
  } else {
    clear_has_description();
    description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.ClubCreateOptions.description)
}

// optional .bgs.protocol.club.v1.AvatarId avatar = 5;
inline bool ClubCreateOptions::has_avatar() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ClubCreateOptions::set_has_avatar() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ClubCreateOptions::clear_has_avatar() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ClubCreateOptions::clear_avatar() {
  if (avatar_ != NULL) avatar_->::bgs::protocol::club::v1::AvatarId::Clear();
  clear_has_avatar();
}
inline const ::bgs::protocol::club::v1::AvatarId& ClubCreateOptions::avatar() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubCreateOptions.avatar)
  return avatar_ != NULL ? *avatar_ : *default_instance_->avatar_;
}
inline ::bgs::protocol::club::v1::AvatarId* ClubCreateOptions::mutable_avatar() {
  set_has_avatar();
  if (avatar_ == NULL) avatar_ = new ::bgs::protocol::club::v1::AvatarId;
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubCreateOptions.avatar)
  return avatar_;
}
inline ::bgs::protocol::club::v1::AvatarId* ClubCreateOptions::release_avatar() {
  clear_has_avatar();
  ::bgs::protocol::club::v1::AvatarId* temp = avatar_;
  avatar_ = NULL;
  return temp;
}
inline void ClubCreateOptions::set_allocated_avatar(::bgs::protocol::club::v1::AvatarId* avatar) {
  delete avatar_;
  avatar_ = avatar;
  if (avatar) {
    set_has_avatar();
  } else {
    clear_has_avatar();
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.ClubCreateOptions.avatar)
}

// optional .bgs.protocol.club.v1.PrivacyLevel privacy_level = 6;
inline bool ClubCreateOptions::has_privacy_level() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ClubCreateOptions::set_has_privacy_level() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ClubCreateOptions::clear_has_privacy_level() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ClubCreateOptions::clear_privacy_level() {
  privacy_level_ = 0;
  clear_has_privacy_level();
}
inline ::bgs::protocol::club::v1::PrivacyLevel ClubCreateOptions::privacy_level() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubCreateOptions.privacy_level)
  return static_cast< ::bgs::protocol::club::v1::PrivacyLevel >(privacy_level_);
}
inline void ClubCreateOptions::set_privacy_level(::bgs::protocol::club::v1::PrivacyLevel value) {
  assert(::bgs::protocol::club::v1::PrivacyLevel_IsValid(value));
  set_has_privacy_level();
  privacy_level_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubCreateOptions.privacy_level)
}

// optional string short_name = 7;
inline bool ClubCreateOptions::has_short_name() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ClubCreateOptions::set_has_short_name() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ClubCreateOptions::clear_has_short_name() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ClubCreateOptions::clear_short_name() {
  if (short_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    short_name_->clear();
  }
  clear_has_short_name();
}
inline const ::std::string& ClubCreateOptions::short_name() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubCreateOptions.short_name)
  return *short_name_;
}
inline void ClubCreateOptions::set_short_name(const ::std::string& value) {
  set_has_short_name();
  if (short_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    short_name_ = new ::std::string;
  }
  short_name_->assign(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubCreateOptions.short_name)
}
inline void ClubCreateOptions::set_short_name(const char* value) {
  set_has_short_name();
  if (short_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    short_name_ = new ::std::string;
  }
  short_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:bgs.protocol.club.v1.ClubCreateOptions.short_name)
}
inline void ClubCreateOptions::set_short_name(const char* value, size_t size) {
  set_has_short_name();
  if (short_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    short_name_ = new ::std::string;
  }
  short_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.club.v1.ClubCreateOptions.short_name)
}
inline ::std::string* ClubCreateOptions::mutable_short_name() {
  set_has_short_name();
  if (short_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    short_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubCreateOptions.short_name)
  return short_name_;
}
inline ::std::string* ClubCreateOptions::release_short_name() {
  clear_has_short_name();
  if (short_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = short_name_;
    short_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ClubCreateOptions::set_allocated_short_name(::std::string* short_name) {
  if (short_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete short_name_;
  }
  if (short_name) {
    set_has_short_name();
    short_name_ = short_name;
  } else {
    clear_has_short_name();
    short_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.ClubCreateOptions.short_name)
}

// optional .bgs.protocol.club.v1.CreateMemberOptions member = 10;
inline bool ClubCreateOptions::has_member() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ClubCreateOptions::set_has_member() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ClubCreateOptions::clear_has_member() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ClubCreateOptions::clear_member() {
  if (member_ != NULL) member_->::bgs::protocol::club::v1::CreateMemberOptions::Clear();
  clear_has_member();
}
inline const ::bgs::protocol::club::v1::CreateMemberOptions& ClubCreateOptions::member() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubCreateOptions.member)
  return member_ != NULL ? *member_ : *default_instance_->member_;
}
inline ::bgs::protocol::club::v1::CreateMemberOptions* ClubCreateOptions::mutable_member() {
  set_has_member();
  if (member_ == NULL) member_ = new ::bgs::protocol::club::v1::CreateMemberOptions;
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubCreateOptions.member)
  return member_;
}
inline ::bgs::protocol::club::v1::CreateMemberOptions* ClubCreateOptions::release_member() {
  clear_has_member();
  ::bgs::protocol::club::v1::CreateMemberOptions* temp = member_;
  member_ = NULL;
  return temp;
}
inline void ClubCreateOptions::set_allocated_member(::bgs::protocol::club::v1::CreateMemberOptions* member) {
  delete member_;
  member_ = member;
  if (member) {
    set_has_member();
  } else {
    clear_has_member();
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.ClubCreateOptions.member)
}

// optional .bgs.protocol.club.v1.CreateStreamOptions stream = 11;
inline bool ClubCreateOptions::has_stream() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ClubCreateOptions::set_has_stream() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ClubCreateOptions::clear_has_stream() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ClubCreateOptions::clear_stream() {
  if (stream_ != NULL) stream_->::bgs::protocol::club::v1::CreateStreamOptions::Clear();
  clear_has_stream();
}
inline const ::bgs::protocol::club::v1::CreateStreamOptions& ClubCreateOptions::stream() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubCreateOptions.stream)
  return stream_ != NULL ? *stream_ : *default_instance_->stream_;
}
inline ::bgs::protocol::club::v1::CreateStreamOptions* ClubCreateOptions::mutable_stream() {
  set_has_stream();
  if (stream_ == NULL) stream_ = new ::bgs::protocol::club::v1::CreateStreamOptions;
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubCreateOptions.stream)
  return stream_;
}
inline ::bgs::protocol::club::v1::CreateStreamOptions* ClubCreateOptions::release_stream() {
  clear_has_stream();
  ::bgs::protocol::club::v1::CreateStreamOptions* temp = stream_;
  stream_ = NULL;
  return temp;
}
inline void ClubCreateOptions::set_allocated_stream(::bgs::protocol::club::v1::CreateStreamOptions* stream) {
  delete stream_;
  stream_ = stream;
  if (stream) {
    set_has_stream();
  } else {
    clear_has_stream();
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.ClubCreateOptions.stream)
}

// -------------------------------------------------------------------

// Club

// optional uint64 id = 1;
inline bool Club::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Club::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Club::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Club::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 Club::id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.Club.id)
  return id_;
}
inline void Club::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.Club.id)
}

// optional .bgs.protocol.club.v1.UniqueClubType type = 2;
inline bool Club::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Club::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Club::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Club::clear_type() {
  if (type_ != NULL) type_->::bgs::protocol::club::v1::UniqueClubType::Clear();
  clear_has_type();
}
inline const ::bgs::protocol::club::v1::UniqueClubType& Club::type() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.Club.type)
  return type_ != NULL ? *type_ : *default_instance_->type_;
}
inline ::bgs::protocol::club::v1::UniqueClubType* Club::mutable_type() {
  set_has_type();
  if (type_ == NULL) type_ = new ::bgs::protocol::club::v1::UniqueClubType;
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.Club.type)
  return type_;
}
inline ::bgs::protocol::club::v1::UniqueClubType* Club::release_type() {
  clear_has_type();
  ::bgs::protocol::club::v1::UniqueClubType* temp = type_;
  type_ = NULL;
  return temp;
}
inline void Club::set_allocated_type(::bgs::protocol::club::v1::UniqueClubType* type) {
  delete type_;
  type_ = type;
  if (type) {
    set_has_type();
  } else {
    clear_has_type();
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.Club.type)
}

// repeated .bgs.protocol.v2.Attribute attribute = 3;
inline int Club::attribute_size() const {
  return attribute_.size();
}
inline void Club::clear_attribute() {
  attribute_.Clear();
}
inline const ::bgs::protocol::v2::Attribute& Club::attribute(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.Club.attribute)
  return attribute_.Get(index);
}
inline ::bgs::protocol::v2::Attribute* Club::mutable_attribute(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.Club.attribute)
  return attribute_.Mutable(index);
}
inline ::bgs::protocol::v2::Attribute* Club::add_attribute() {
  // @@protoc_insertion_point(field_add:bgs.protocol.club.v1.Club.attribute)
  return attribute_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bgs::protocol::v2::Attribute >&
Club::attribute() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.club.v1.Club.attribute)
  return attribute_;
}
inline ::google::protobuf::RepeatedPtrField< ::bgs::protocol::v2::Attribute >*
Club::mutable_attribute() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.club.v1.Club.attribute)
  return &attribute_;
}

// optional string name = 4;
inline bool Club::has_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Club::set_has_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Club::clear_has_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Club::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Club::name() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.Club.name)
  return *name_;
}
inline void Club::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.Club.name)
}
inline void Club::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:bgs.protocol.club.v1.Club.name)
}
inline void Club::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.club.v1.Club.name)
}
inline ::std::string* Club::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.Club.name)
  return name_;
}
inline ::std::string* Club::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Club::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.Club.name)
}

// optional string description = 5;
inline bool Club::has_description() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Club::set_has_description() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Club::clear_has_description() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Club::clear_description() {
  if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_->clear();
  }
  clear_has_description();
}
inline const ::std::string& Club::description() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.Club.description)
  return *description_;
}
inline void Club::set_description(const ::std::string& value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_ = new ::std::string;
  }
  description_->assign(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.Club.description)
}
inline void Club::set_description(const char* value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_ = new ::std::string;
  }
  description_->assign(value);
  // @@protoc_insertion_point(field_set_char:bgs.protocol.club.v1.Club.description)
}
inline void Club::set_description(const char* value, size_t size) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_ = new ::std::string;
  }
  description_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.club.v1.Club.description)
}
inline ::std::string* Club::mutable_description() {
  set_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.Club.description)
  return description_;
}
inline ::std::string* Club::release_description() {
  clear_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = description_;
    description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Club::set_allocated_description(::std::string* description) {
  if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete description_;
  }
  if (description) {
    set_has_description();
    description_ = description;
  } else {
    clear_has_description();
    description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.Club.description)
}

// optional .bgs.protocol.club.v1.Broadcast broadcast = 6;
inline bool Club::has_broadcast() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Club::set_has_broadcast() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Club::clear_has_broadcast() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Club::clear_broadcast() {
  if (broadcast_ != NULL) broadcast_->::bgs::protocol::club::v1::Broadcast::Clear();
  clear_has_broadcast();
}
inline const ::bgs::protocol::club::v1::Broadcast& Club::broadcast() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.Club.broadcast)
  return broadcast_ != NULL ? *broadcast_ : *default_instance_->broadcast_;
}
inline ::bgs::protocol::club::v1::Broadcast* Club::mutable_broadcast() {
  set_has_broadcast();
  if (broadcast_ == NULL) broadcast_ = new ::bgs::protocol::club::v1::Broadcast;
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.Club.broadcast)
  return broadcast_;
}
inline ::bgs::protocol::club::v1::Broadcast* Club::release_broadcast() {
  clear_has_broadcast();
  ::bgs::protocol::club::v1::Broadcast* temp = broadcast_;
  broadcast_ = NULL;
  return temp;
}
inline void Club::set_allocated_broadcast(::bgs::protocol::club::v1::Broadcast* broadcast) {
  delete broadcast_;
  broadcast_ = broadcast;
  if (broadcast) {
    set_has_broadcast();
  } else {
    clear_has_broadcast();
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.Club.broadcast)
}

// optional .bgs.protocol.club.v1.AvatarId avatar = 7;
inline bool Club::has_avatar() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Club::set_has_avatar() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Club::clear_has_avatar() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Club::clear_avatar() {
  if (avatar_ != NULL) avatar_->::bgs::protocol::club::v1::AvatarId::Clear();
  clear_has_avatar();
}
inline const ::bgs::protocol::club::v1::AvatarId& Club::avatar() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.Club.avatar)
  return avatar_ != NULL ? *avatar_ : *default_instance_->avatar_;
}
inline ::bgs::protocol::club::v1::AvatarId* Club::mutable_avatar() {
  set_has_avatar();
  if (avatar_ == NULL) avatar_ = new ::bgs::protocol::club::v1::AvatarId;
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.Club.avatar)
  return avatar_;
}
inline ::bgs::protocol::club::v1::AvatarId* Club::release_avatar() {
  clear_has_avatar();
  ::bgs::protocol::club::v1::AvatarId* temp = avatar_;
  avatar_ = NULL;
  return temp;
}
inline void Club::set_allocated_avatar(::bgs::protocol::club::v1::AvatarId* avatar) {
  delete avatar_;
  avatar_ = avatar;
  if (avatar) {
    set_has_avatar();
  } else {
    clear_has_avatar();
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.Club.avatar)
}

// optional .bgs.protocol.club.v1.PrivacyLevel privacy_level = 8;
inline bool Club::has_privacy_level() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Club::set_has_privacy_level() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Club::clear_has_privacy_level() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Club::clear_privacy_level() {
  privacy_level_ = 0;
  clear_has_privacy_level();
}
inline ::bgs::protocol::club::v1::PrivacyLevel Club::privacy_level() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.Club.privacy_level)
  return static_cast< ::bgs::protocol::club::v1::PrivacyLevel >(privacy_level_);
}
inline void Club::set_privacy_level(::bgs::protocol::club::v1::PrivacyLevel value) {
  assert(::bgs::protocol::club::v1::PrivacyLevel_IsValid(value));
  set_has_privacy_level();
  privacy_level_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.Club.privacy_level)
}

// optional .bgs.protocol.club.v1.VisibilityLevel visibility_level = 9;
inline bool Club::has_visibility_level() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Club::set_has_visibility_level() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Club::clear_has_visibility_level() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Club::clear_visibility_level() {
  visibility_level_ = 0;
  clear_has_visibility_level();
}
inline ::bgs::protocol::club::v1::VisibilityLevel Club::visibility_level() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.Club.visibility_level)
  return static_cast< ::bgs::protocol::club::v1::VisibilityLevel >(visibility_level_);
}
inline void Club::set_visibility_level(::bgs::protocol::club::v1::VisibilityLevel value) {
  assert(::bgs::protocol::club::v1::VisibilityLevel_IsValid(value));
  set_has_visibility_level();
  visibility_level_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.Club.visibility_level)
}

// optional uint32 member_count = 10;
inline bool Club::has_member_count() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Club::set_has_member_count() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Club::clear_has_member_count() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Club::clear_member_count() {
  member_count_ = 0u;
  clear_has_member_count();
}
inline ::google::protobuf::uint32 Club::member_count() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.Club.member_count)
  return member_count_;
}
inline void Club::set_member_count(::google::protobuf::uint32 value) {
  set_has_member_count();
  member_count_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.Club.member_count)
}

// optional uint64 creation_time = 11;
inline bool Club::has_creation_time() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Club::set_has_creation_time() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Club::clear_has_creation_time() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Club::clear_creation_time() {
  creation_time_ = GOOGLE_ULONGLONG(0);
  clear_has_creation_time();
}
inline ::google::protobuf::uint64 Club::creation_time() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.Club.creation_time)
  return creation_time_;
}
inline void Club::set_creation_time(::google::protobuf::uint64 value) {
  set_has_creation_time();
  creation_time_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.Club.creation_time)
}

// optional .bgs.protocol.club.v1.StreamPosition stream_position = 12;
inline bool Club::has_stream_position() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Club::set_has_stream_position() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Club::clear_has_stream_position() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Club::clear_stream_position() {
  if (stream_position_ != NULL) stream_position_->::bgs::protocol::club::v1::StreamPosition::Clear();
  clear_has_stream_position();
}
inline const ::bgs::protocol::club::v1::StreamPosition& Club::stream_position() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.Club.stream_position)
  return stream_position_ != NULL ? *stream_position_ : *default_instance_->stream_position_;
}
inline ::bgs::protocol::club::v1::StreamPosition* Club::mutable_stream_position() {
  set_has_stream_position();
  if (stream_position_ == NULL) stream_position_ = new ::bgs::protocol::club::v1::StreamPosition;
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.Club.stream_position)
  return stream_position_;
}
inline ::bgs::protocol::club::v1::StreamPosition* Club::release_stream_position() {
  clear_has_stream_position();
  ::bgs::protocol::club::v1::StreamPosition* temp = stream_position_;
  stream_position_ = NULL;
  return temp;
}
inline void Club::set_allocated_stream_position(::bgs::protocol::club::v1::StreamPosition* stream_position) {
  delete stream_position_;
  stream_position_ = stream_position;
  if (stream_position) {
    set_has_stream_position();
  } else {
    clear_has_stream_position();
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.Club.stream_position)
}

// optional .bgs.protocol.club.v1.ClubRoleSet role_set = 13;
inline bool Club::has_role_set() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Club::set_has_role_set() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Club::clear_has_role_set() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Club::clear_role_set() {
  if (role_set_ != NULL) role_set_->::bgs::protocol::club::v1::ClubRoleSet::Clear();
  clear_has_role_set();
}
inline const ::bgs::protocol::club::v1::ClubRoleSet& Club::role_set() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.Club.role_set)
  return role_set_ != NULL ? *role_set_ : *default_instance_->role_set_;
}
inline ::bgs::protocol::club::v1::ClubRoleSet* Club::mutable_role_set() {
  set_has_role_set();
  if (role_set_ == NULL) role_set_ = new ::bgs::protocol::club::v1::ClubRoleSet;
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.Club.role_set)
  return role_set_;
}
inline ::bgs::protocol::club::v1::ClubRoleSet* Club::release_role_set() {
  clear_has_role_set();
  ::bgs::protocol::club::v1::ClubRoleSet* temp = role_set_;
  role_set_ = NULL;
  return temp;
}
inline void Club::set_allocated_role_set(::bgs::protocol::club::v1::ClubRoleSet* role_set) {
  delete role_set_;
  role_set_ = role_set;
  if (role_set) {
    set_has_role_set();
  } else {
    clear_has_role_set();
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.Club.role_set)
}

// repeated .bgs.protocol.club.v1.MemberDescription leader = 14;
inline int Club::leader_size() const {
  return leader_.size();
}
inline void Club::clear_leader() {
  leader_.Clear();
}
inline const ::bgs::protocol::club::v1::MemberDescription& Club::leader(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.Club.leader)
  return leader_.Get(index);
}
inline ::bgs::protocol::club::v1::MemberDescription* Club::mutable_leader(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.Club.leader)
  return leader_.Mutable(index);
}
inline ::bgs::protocol::club::v1::MemberDescription* Club::add_leader() {
  // @@protoc_insertion_point(field_add:bgs.protocol.club.v1.Club.leader)
  return leader_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bgs::protocol::club::v1::MemberDescription >&
Club::leader() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.club.v1.Club.leader)
  return leader_;
}
inline ::google::protobuf::RepeatedPtrField< ::bgs::protocol::club::v1::MemberDescription >*
Club::mutable_leader() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.club.v1.Club.leader)
  return &leader_;
}

// optional string short_name = 15;
inline bool Club::has_short_name() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Club::set_has_short_name() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Club::clear_has_short_name() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Club::clear_short_name() {
  if (short_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    short_name_->clear();
  }
  clear_has_short_name();
}
inline const ::std::string& Club::short_name() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.Club.short_name)
  return *short_name_;
}
inline void Club::set_short_name(const ::std::string& value) {
  set_has_short_name();
  if (short_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    short_name_ = new ::std::string;
  }
  short_name_->assign(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.Club.short_name)
}
inline void Club::set_short_name(const char* value) {
  set_has_short_name();
  if (short_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    short_name_ = new ::std::string;
  }
  short_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:bgs.protocol.club.v1.Club.short_name)
}
inline void Club::set_short_name(const char* value, size_t size) {
  set_has_short_name();
  if (short_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    short_name_ = new ::std::string;
  }
  short_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.club.v1.Club.short_name)
}
inline ::std::string* Club::mutable_short_name() {
  set_has_short_name();
  if (short_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    short_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.Club.short_name)
  return short_name_;
}
inline ::std::string* Club::release_short_name() {
  clear_has_short_name();
  if (short_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = short_name_;
    short_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Club::set_allocated_short_name(::std::string* short_name) {
  if (short_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete short_name_;
  }
  if (short_name) {
    set_has_short_name();
    short_name_ = short_name;
  } else {
    clear_has_short_name();
    short_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.Club.short_name)
}

// -------------------------------------------------------------------

// ClubDescription

// optional uint64 id = 1;
inline bool ClubDescription::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClubDescription::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClubDescription::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClubDescription::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 ClubDescription::id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubDescription.id)
  return id_;
}
inline void ClubDescription::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubDescription.id)
}

// optional .bgs.protocol.club.v1.UniqueClubType type = 2;
inline bool ClubDescription::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClubDescription::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ClubDescription::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ClubDescription::clear_type() {
  if (type_ != NULL) type_->::bgs::protocol::club::v1::UniqueClubType::Clear();
  clear_has_type();
}
inline const ::bgs::protocol::club::v1::UniqueClubType& ClubDescription::type() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubDescription.type)
  return type_ != NULL ? *type_ : *default_instance_->type_;
}
inline ::bgs::protocol::club::v1::UniqueClubType* ClubDescription::mutable_type() {
  set_has_type();
  if (type_ == NULL) type_ = new ::bgs::protocol::club::v1::UniqueClubType;
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubDescription.type)
  return type_;
}
inline ::bgs::protocol::club::v1::UniqueClubType* ClubDescription::release_type() {
  clear_has_type();
  ::bgs::protocol::club::v1::UniqueClubType* temp = type_;
  type_ = NULL;
  return temp;
}
inline void ClubDescription::set_allocated_type(::bgs::protocol::club::v1::UniqueClubType* type) {
  delete type_;
  type_ = type;
  if (type) {
    set_has_type();
  } else {
    clear_has_type();
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.ClubDescription.type)
}

// optional string name = 3;
inline bool ClubDescription::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ClubDescription::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ClubDescription::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ClubDescription::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ClubDescription::name() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubDescription.name)
  return *name_;
}
inline void ClubDescription::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubDescription.name)
}
inline void ClubDescription::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:bgs.protocol.club.v1.ClubDescription.name)
}
inline void ClubDescription::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.club.v1.ClubDescription.name)
}
inline ::std::string* ClubDescription::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubDescription.name)
  return name_;
}
inline ::std::string* ClubDescription::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ClubDescription::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.ClubDescription.name)
}

// optional string description = 4;
inline bool ClubDescription::has_description() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ClubDescription::set_has_description() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ClubDescription::clear_has_description() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ClubDescription::clear_description() {
  if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_->clear();
  }
  clear_has_description();
}
inline const ::std::string& ClubDescription::description() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubDescription.description)
  return *description_;
}
inline void ClubDescription::set_description(const ::std::string& value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_ = new ::std::string;
  }
  description_->assign(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubDescription.description)
}
inline void ClubDescription::set_description(const char* value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_ = new ::std::string;
  }
  description_->assign(value);
  // @@protoc_insertion_point(field_set_char:bgs.protocol.club.v1.ClubDescription.description)
}
inline void ClubDescription::set_description(const char* value, size_t size) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_ = new ::std::string;
  }
  description_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.club.v1.ClubDescription.description)
}
inline ::std::string* ClubDescription::mutable_description() {
  set_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubDescription.description)
  return description_;
}
inline ::std::string* ClubDescription::release_description() {
  clear_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = description_;
    description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ClubDescription::set_allocated_description(::std::string* description) {
  if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete description_;
  }
  if (description) {
    set_has_description();
    description_ = description;
  } else {
    clear_has_description();
    description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.ClubDescription.description)
}

// optional .bgs.protocol.club.v1.AvatarId avatar = 5;
inline bool ClubDescription::has_avatar() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ClubDescription::set_has_avatar() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ClubDescription::clear_has_avatar() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ClubDescription::clear_avatar() {
  if (avatar_ != NULL) avatar_->::bgs::protocol::club::v1::AvatarId::Clear();
  clear_has_avatar();
}
inline const ::bgs::protocol::club::v1::AvatarId& ClubDescription::avatar() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubDescription.avatar)
  return avatar_ != NULL ? *avatar_ : *default_instance_->avatar_;
}
inline ::bgs::protocol::club::v1::AvatarId* ClubDescription::mutable_avatar() {
  set_has_avatar();
  if (avatar_ == NULL) avatar_ = new ::bgs::protocol::club::v1::AvatarId;
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubDescription.avatar)
  return avatar_;
}
inline ::bgs::protocol::club::v1::AvatarId* ClubDescription::release_avatar() {
  clear_has_avatar();
  ::bgs::protocol::club::v1::AvatarId* temp = avatar_;
  avatar_ = NULL;
  return temp;
}
inline void ClubDescription::set_allocated_avatar(::bgs::protocol::club::v1::AvatarId* avatar) {
  delete avatar_;
  avatar_ = avatar;
  if (avatar) {
    set_has_avatar();
  } else {
    clear_has_avatar();
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.ClubDescription.avatar)
}

// optional .bgs.protocol.club.v1.PrivacyLevel privacy_level = 6;
inline bool ClubDescription::has_privacy_level() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ClubDescription::set_has_privacy_level() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ClubDescription::clear_has_privacy_level() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ClubDescription::clear_privacy_level() {
  privacy_level_ = 0;
  clear_has_privacy_level();
}
inline ::bgs::protocol::club::v1::PrivacyLevel ClubDescription::privacy_level() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubDescription.privacy_level)
  return static_cast< ::bgs::protocol::club::v1::PrivacyLevel >(privacy_level_);
}
inline void ClubDescription::set_privacy_level(::bgs::protocol::club::v1::PrivacyLevel value) {
  assert(::bgs::protocol::club::v1::PrivacyLevel_IsValid(value));
  set_has_privacy_level();
  privacy_level_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubDescription.privacy_level)
}

// optional .bgs.protocol.club.v1.VisibilityLevel visibility_level = 7;
inline bool ClubDescription::has_visibility_level() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ClubDescription::set_has_visibility_level() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ClubDescription::clear_has_visibility_level() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ClubDescription::clear_visibility_level() {
  visibility_level_ = 0;
  clear_has_visibility_level();
}
inline ::bgs::protocol::club::v1::VisibilityLevel ClubDescription::visibility_level() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubDescription.visibility_level)
  return static_cast< ::bgs::protocol::club::v1::VisibilityLevel >(visibility_level_);
}
inline void ClubDescription::set_visibility_level(::bgs::protocol::club::v1::VisibilityLevel value) {
  assert(::bgs::protocol::club::v1::VisibilityLevel_IsValid(value));
  set_has_visibility_level();
  visibility_level_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubDescription.visibility_level)
}

// optional uint32 member_count = 8;
inline bool ClubDescription::has_member_count() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ClubDescription::set_has_member_count() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ClubDescription::clear_has_member_count() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ClubDescription::clear_member_count() {
  member_count_ = 0u;
  clear_has_member_count();
}
inline ::google::protobuf::uint32 ClubDescription::member_count() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubDescription.member_count)
  return member_count_;
}
inline void ClubDescription::set_member_count(::google::protobuf::uint32 value) {
  set_has_member_count();
  member_count_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubDescription.member_count)
}

// repeated .bgs.protocol.club.v1.MemberDescription leader = 9;
inline int ClubDescription::leader_size() const {
  return leader_.size();
}
inline void ClubDescription::clear_leader() {
  leader_.Clear();
}
inline const ::bgs::protocol::club::v1::MemberDescription& ClubDescription::leader(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubDescription.leader)
  return leader_.Get(index);
}
inline ::bgs::protocol::club::v1::MemberDescription* ClubDescription::mutable_leader(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubDescription.leader)
  return leader_.Mutable(index);
}
inline ::bgs::protocol::club::v1::MemberDescription* ClubDescription::add_leader() {
  // @@protoc_insertion_point(field_add:bgs.protocol.club.v1.ClubDescription.leader)
  return leader_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bgs::protocol::club::v1::MemberDescription >&
ClubDescription::leader() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.club.v1.ClubDescription.leader)
  return leader_;
}
inline ::google::protobuf::RepeatedPtrField< ::bgs::protocol::club::v1::MemberDescription >*
ClubDescription::mutable_leader() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.club.v1.ClubDescription.leader)
  return &leader_;
}

// optional uint64 creation_time = 10;
inline bool ClubDescription::has_creation_time() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ClubDescription::set_has_creation_time() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ClubDescription::clear_has_creation_time() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ClubDescription::clear_creation_time() {
  creation_time_ = GOOGLE_ULONGLONG(0);
  clear_has_creation_time();
}
inline ::google::protobuf::uint64 ClubDescription::creation_time() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubDescription.creation_time)
  return creation_time_;
}
inline void ClubDescription::set_creation_time(::google::protobuf::uint64 value) {
  set_has_creation_time();
  creation_time_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubDescription.creation_time)
}

// -------------------------------------------------------------------

// ClubView

// optional uint64 club_id = 1;
inline bool ClubView::has_club_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClubView::set_has_club_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClubView::clear_has_club_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClubView::clear_club_id() {
  club_id_ = GOOGLE_ULONGLONG(0);
  clear_has_club_id();
}
inline ::google::protobuf::uint64 ClubView::club_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubView.club_id)
  return club_id_;
}
inline void ClubView::set_club_id(::google::protobuf::uint64 value) {
  set_has_club_id();
  club_id_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubView.club_id)
}

// optional .bgs.protocol.ViewMarker marker = 2;
inline bool ClubView::has_marker() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClubView::set_has_marker() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ClubView::clear_has_marker() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ClubView::clear_marker() {
  if (marker_ != NULL) marker_->::bgs::protocol::ViewMarker::Clear();
  clear_has_marker();
}
inline const ::bgs::protocol::ViewMarker& ClubView::marker() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubView.marker)
  return marker_ != NULL ? *marker_ : *default_instance_->marker_;
}
inline ::bgs::protocol::ViewMarker* ClubView::mutable_marker() {
  set_has_marker();
  if (marker_ == NULL) marker_ = new ::bgs::protocol::ViewMarker;
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubView.marker)
  return marker_;
}
inline ::bgs::protocol::ViewMarker* ClubView::release_marker() {
  clear_has_marker();
  ::bgs::protocol::ViewMarker* temp = marker_;
  marker_ = NULL;
  return temp;
}
inline void ClubView::set_allocated_marker(::bgs::protocol::ViewMarker* marker) {
  delete marker_;
  marker_ = marker;
  if (marker) {
    set_has_marker();
  } else {
    clear_has_marker();
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.ClubView.marker)
}

// -------------------------------------------------------------------

// ClubStateOptions

// repeated .bgs.protocol.v2.Attribute attribute = 1;
inline int ClubStateOptions::attribute_size() const {
  return attribute_.size();
}
inline void ClubStateOptions::clear_attribute() {
  attribute_.Clear();
}
inline const ::bgs::protocol::v2::Attribute& ClubStateOptions::attribute(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubStateOptions.attribute)
  return attribute_.Get(index);
}
inline ::bgs::protocol::v2::Attribute* ClubStateOptions::mutable_attribute(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubStateOptions.attribute)
  return attribute_.Mutable(index);
}
inline ::bgs::protocol::v2::Attribute* ClubStateOptions::add_attribute() {
  // @@protoc_insertion_point(field_add:bgs.protocol.club.v1.ClubStateOptions.attribute)
  return attribute_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bgs::protocol::v2::Attribute >&
ClubStateOptions::attribute() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.club.v1.ClubStateOptions.attribute)
  return attribute_;
}
inline ::google::protobuf::RepeatedPtrField< ::bgs::protocol::v2::Attribute >*
ClubStateOptions::mutable_attribute() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.club.v1.ClubStateOptions.attribute)
  return &attribute_;
}

// optional string name = 2;
inline bool ClubStateOptions::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClubStateOptions::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ClubStateOptions::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ClubStateOptions::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ClubStateOptions::name() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubStateOptions.name)
  return *name_;
}
inline void ClubStateOptions::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubStateOptions.name)
}
inline void ClubStateOptions::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:bgs.protocol.club.v1.ClubStateOptions.name)
}
inline void ClubStateOptions::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.club.v1.ClubStateOptions.name)
}
inline ::std::string* ClubStateOptions::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubStateOptions.name)
  return name_;
}
inline ::std::string* ClubStateOptions::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ClubStateOptions::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.ClubStateOptions.name)
}

// optional string description = 3;
inline bool ClubStateOptions::has_description() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ClubStateOptions::set_has_description() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ClubStateOptions::clear_has_description() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ClubStateOptions::clear_description() {
  if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_->clear();
  }
  clear_has_description();
}
inline const ::std::string& ClubStateOptions::description() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubStateOptions.description)
  return *description_;
}
inline void ClubStateOptions::set_description(const ::std::string& value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_ = new ::std::string;
  }
  description_->assign(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubStateOptions.description)
}
inline void ClubStateOptions::set_description(const char* value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_ = new ::std::string;
  }
  description_->assign(value);
  // @@protoc_insertion_point(field_set_char:bgs.protocol.club.v1.ClubStateOptions.description)
}
inline void ClubStateOptions::set_description(const char* value, size_t size) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_ = new ::std::string;
  }
  description_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.club.v1.ClubStateOptions.description)
}
inline ::std::string* ClubStateOptions::mutable_description() {
  set_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubStateOptions.description)
  return description_;
}
inline ::std::string* ClubStateOptions::release_description() {
  clear_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = description_;
    description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ClubStateOptions::set_allocated_description(::std::string* description) {
  if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete description_;
  }
  if (description) {
    set_has_description();
    description_ = description;
  } else {
    clear_has_description();
    description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.ClubStateOptions.description)
}

// optional .bgs.protocol.club.v1.SetBroadcastOptions broadcast = 4;
inline bool ClubStateOptions::has_broadcast() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ClubStateOptions::set_has_broadcast() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ClubStateOptions::clear_has_broadcast() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ClubStateOptions::clear_broadcast() {
  if (broadcast_ != NULL) broadcast_->::bgs::protocol::club::v1::SetBroadcastOptions::Clear();
  clear_has_broadcast();
}
inline const ::bgs::protocol::club::v1::SetBroadcastOptions& ClubStateOptions::broadcast() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubStateOptions.broadcast)
  return broadcast_ != NULL ? *broadcast_ : *default_instance_->broadcast_;
}
inline ::bgs::protocol::club::v1::SetBroadcastOptions* ClubStateOptions::mutable_broadcast() {
  set_has_broadcast();
  if (broadcast_ == NULL) broadcast_ = new ::bgs::protocol::club::v1::SetBroadcastOptions;
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubStateOptions.broadcast)
  return broadcast_;
}
inline ::bgs::protocol::club::v1::SetBroadcastOptions* ClubStateOptions::release_broadcast() {
  clear_has_broadcast();
  ::bgs::protocol::club::v1::SetBroadcastOptions* temp = broadcast_;
  broadcast_ = NULL;
  return temp;
}
inline void ClubStateOptions::set_allocated_broadcast(::bgs::protocol::club::v1::SetBroadcastOptions* broadcast) {
  delete broadcast_;
  broadcast_ = broadcast;
  if (broadcast) {
    set_has_broadcast();
  } else {
    clear_has_broadcast();
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.ClubStateOptions.broadcast)
}

// optional .bgs.protocol.club.v1.AvatarId avatar = 5;
inline bool ClubStateOptions::has_avatar() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ClubStateOptions::set_has_avatar() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ClubStateOptions::clear_has_avatar() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ClubStateOptions::clear_avatar() {
  if (avatar_ != NULL) avatar_->::bgs::protocol::club::v1::AvatarId::Clear();
  clear_has_avatar();
}
inline const ::bgs::protocol::club::v1::AvatarId& ClubStateOptions::avatar() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubStateOptions.avatar)
  return avatar_ != NULL ? *avatar_ : *default_instance_->avatar_;
}
inline ::bgs::protocol::club::v1::AvatarId* ClubStateOptions::mutable_avatar() {
  set_has_avatar();
  if (avatar_ == NULL) avatar_ = new ::bgs::protocol::club::v1::AvatarId;
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubStateOptions.avatar)
  return avatar_;
}
inline ::bgs::protocol::club::v1::AvatarId* ClubStateOptions::release_avatar() {
  clear_has_avatar();
  ::bgs::protocol::club::v1::AvatarId* temp = avatar_;
  avatar_ = NULL;
  return temp;
}
inline void ClubStateOptions::set_allocated_avatar(::bgs::protocol::club::v1::AvatarId* avatar) {
  delete avatar_;
  avatar_ = avatar;
  if (avatar) {
    set_has_avatar();
  } else {
    clear_has_avatar();
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.ClubStateOptions.avatar)
}

// optional .bgs.protocol.club.v1.PrivacyLevel privacy_level = 6;
inline bool ClubStateOptions::has_privacy_level() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ClubStateOptions::set_has_privacy_level() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ClubStateOptions::clear_has_privacy_level() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ClubStateOptions::clear_privacy_level() {
  privacy_level_ = 0;
  clear_has_privacy_level();
}
inline ::bgs::protocol::club::v1::PrivacyLevel ClubStateOptions::privacy_level() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubStateOptions.privacy_level)
  return static_cast< ::bgs::protocol::club::v1::PrivacyLevel >(privacy_level_);
}
inline void ClubStateOptions::set_privacy_level(::bgs::protocol::club::v1::PrivacyLevel value) {
  assert(::bgs::protocol::club::v1::PrivacyLevel_IsValid(value));
  set_has_privacy_level();
  privacy_level_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubStateOptions.privacy_level)
}

// optional .bgs.protocol.club.v1.StreamPosition stream_position = 7;
inline bool ClubStateOptions::has_stream_position() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ClubStateOptions::set_has_stream_position() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ClubStateOptions::clear_has_stream_position() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ClubStateOptions::clear_stream_position() {
  if (stream_position_ != NULL) stream_position_->::bgs::protocol::club::v1::StreamPosition::Clear();
  clear_has_stream_position();
}
inline const ::bgs::protocol::club::v1::StreamPosition& ClubStateOptions::stream_position() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubStateOptions.stream_position)
  return stream_position_ != NULL ? *stream_position_ : *default_instance_->stream_position_;
}
inline ::bgs::protocol::club::v1::StreamPosition* ClubStateOptions::mutable_stream_position() {
  set_has_stream_position();
  if (stream_position_ == NULL) stream_position_ = new ::bgs::protocol::club::v1::StreamPosition;
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubStateOptions.stream_position)
  return stream_position_;
}
inline ::bgs::protocol::club::v1::StreamPosition* ClubStateOptions::release_stream_position() {
  clear_has_stream_position();
  ::bgs::protocol::club::v1::StreamPosition* temp = stream_position_;
  stream_position_ = NULL;
  return temp;
}
inline void ClubStateOptions::set_allocated_stream_position(::bgs::protocol::club::v1::StreamPosition* stream_position) {
  delete stream_position_;
  stream_position_ = stream_position;
  if (stream_position) {
    set_has_stream_position();
  } else {
    clear_has_stream_position();
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.ClubStateOptions.stream_position)
}

// optional string short_name = 8;
inline bool ClubStateOptions::has_short_name() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ClubStateOptions::set_has_short_name() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ClubStateOptions::clear_has_short_name() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ClubStateOptions::clear_short_name() {
  if (short_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    short_name_->clear();
  }
  clear_has_short_name();
}
inline const ::std::string& ClubStateOptions::short_name() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubStateOptions.short_name)
  return *short_name_;
}
inline void ClubStateOptions::set_short_name(const ::std::string& value) {
  set_has_short_name();
  if (short_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    short_name_ = new ::std::string;
  }
  short_name_->assign(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubStateOptions.short_name)
}
inline void ClubStateOptions::set_short_name(const char* value) {
  set_has_short_name();
  if (short_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    short_name_ = new ::std::string;
  }
  short_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:bgs.protocol.club.v1.ClubStateOptions.short_name)
}
inline void ClubStateOptions::set_short_name(const char* value, size_t size) {
  set_has_short_name();
  if (short_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    short_name_ = new ::std::string;
  }
  short_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.club.v1.ClubStateOptions.short_name)
}
inline ::std::string* ClubStateOptions::mutable_short_name() {
  set_has_short_name();
  if (short_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    short_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubStateOptions.short_name)
  return short_name_;
}
inline ::std::string* ClubStateOptions::release_short_name() {
  clear_has_short_name();
  if (short_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = short_name_;
    short_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ClubStateOptions::set_allocated_short_name(::std::string* short_name) {
  if (short_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete short_name_;
  }
  if (short_name) {
    set_has_short_name();
    short_name_ = short_name;
  } else {
    clear_has_short_name();
    short_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.ClubStateOptions.short_name)
}

// -------------------------------------------------------------------

// ClubStateAssignment

// optional uint64 club_id = 1;
inline bool ClubStateAssignment::has_club_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClubStateAssignment::set_has_club_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClubStateAssignment::clear_has_club_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClubStateAssignment::clear_club_id() {
  club_id_ = GOOGLE_ULONGLONG(0);
  clear_has_club_id();
}
inline ::google::protobuf::uint64 ClubStateAssignment::club_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubStateAssignment.club_id)
  return club_id_;
}
inline void ClubStateAssignment::set_club_id(::google::protobuf::uint64 value) {
  set_has_club_id();
  club_id_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubStateAssignment.club_id)
}

// repeated .bgs.protocol.v2.Attribute attribute = 2;
inline int ClubStateAssignment::attribute_size() const {
  return attribute_.size();
}
inline void ClubStateAssignment::clear_attribute() {
  attribute_.Clear();
}
inline const ::bgs::protocol::v2::Attribute& ClubStateAssignment::attribute(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubStateAssignment.attribute)
  return attribute_.Get(index);
}
inline ::bgs::protocol::v2::Attribute* ClubStateAssignment::mutable_attribute(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubStateAssignment.attribute)
  return attribute_.Mutable(index);
}
inline ::bgs::protocol::v2::Attribute* ClubStateAssignment::add_attribute() {
  // @@protoc_insertion_point(field_add:bgs.protocol.club.v1.ClubStateAssignment.attribute)
  return attribute_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bgs::protocol::v2::Attribute >&
ClubStateAssignment::attribute() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.club.v1.ClubStateAssignment.attribute)
  return attribute_;
}
inline ::google::protobuf::RepeatedPtrField< ::bgs::protocol::v2::Attribute >*
ClubStateAssignment::mutable_attribute() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.club.v1.ClubStateAssignment.attribute)
  return &attribute_;
}

// optional string name = 3;
inline bool ClubStateAssignment::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ClubStateAssignment::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ClubStateAssignment::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ClubStateAssignment::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ClubStateAssignment::name() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubStateAssignment.name)
  return *name_;
}
inline void ClubStateAssignment::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubStateAssignment.name)
}
inline void ClubStateAssignment::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:bgs.protocol.club.v1.ClubStateAssignment.name)
}
inline void ClubStateAssignment::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.club.v1.ClubStateAssignment.name)
}
inline ::std::string* ClubStateAssignment::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubStateAssignment.name)
  return name_;
}
inline ::std::string* ClubStateAssignment::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ClubStateAssignment::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.ClubStateAssignment.name)
}

// optional string description = 4;
inline bool ClubStateAssignment::has_description() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ClubStateAssignment::set_has_description() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ClubStateAssignment::clear_has_description() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ClubStateAssignment::clear_description() {
  if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_->clear();
  }
  clear_has_description();
}
inline const ::std::string& ClubStateAssignment::description() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubStateAssignment.description)
  return *description_;
}
inline void ClubStateAssignment::set_description(const ::std::string& value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_ = new ::std::string;
  }
  description_->assign(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubStateAssignment.description)
}
inline void ClubStateAssignment::set_description(const char* value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_ = new ::std::string;
  }
  description_->assign(value);
  // @@protoc_insertion_point(field_set_char:bgs.protocol.club.v1.ClubStateAssignment.description)
}
inline void ClubStateAssignment::set_description(const char* value, size_t size) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_ = new ::std::string;
  }
  description_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.club.v1.ClubStateAssignment.description)
}
inline ::std::string* ClubStateAssignment::mutable_description() {
  set_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubStateAssignment.description)
  return description_;
}
inline ::std::string* ClubStateAssignment::release_description() {
  clear_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = description_;
    description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ClubStateAssignment::set_allocated_description(::std::string* description) {
  if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete description_;
  }
  if (description) {
    set_has_description();
    description_ = description;
  } else {
    clear_has_description();
    description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.ClubStateAssignment.description)
}

// optional .bgs.protocol.club.v1.Broadcast broadcast = 5;
inline bool ClubStateAssignment::has_broadcast() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ClubStateAssignment::set_has_broadcast() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ClubStateAssignment::clear_has_broadcast() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ClubStateAssignment::clear_broadcast() {
  if (broadcast_ != NULL) broadcast_->::bgs::protocol::club::v1::Broadcast::Clear();
  clear_has_broadcast();
}
inline const ::bgs::protocol::club::v1::Broadcast& ClubStateAssignment::broadcast() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubStateAssignment.broadcast)
  return broadcast_ != NULL ? *broadcast_ : *default_instance_->broadcast_;
}
inline ::bgs::protocol::club::v1::Broadcast* ClubStateAssignment::mutable_broadcast() {
  set_has_broadcast();
  if (broadcast_ == NULL) broadcast_ = new ::bgs::protocol::club::v1::Broadcast;
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubStateAssignment.broadcast)
  return broadcast_;
}
inline ::bgs::protocol::club::v1::Broadcast* ClubStateAssignment::release_broadcast() {
  clear_has_broadcast();
  ::bgs::protocol::club::v1::Broadcast* temp = broadcast_;
  broadcast_ = NULL;
  return temp;
}
inline void ClubStateAssignment::set_allocated_broadcast(::bgs::protocol::club::v1::Broadcast* broadcast) {
  delete broadcast_;
  broadcast_ = broadcast;
  if (broadcast) {
    set_has_broadcast();
  } else {
    clear_has_broadcast();
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.ClubStateAssignment.broadcast)
}

// optional .bgs.protocol.club.v1.AvatarId avatar = 6;
inline bool ClubStateAssignment::has_avatar() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ClubStateAssignment::set_has_avatar() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ClubStateAssignment::clear_has_avatar() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ClubStateAssignment::clear_avatar() {
  if (avatar_ != NULL) avatar_->::bgs::protocol::club::v1::AvatarId::Clear();
  clear_has_avatar();
}
inline const ::bgs::protocol::club::v1::AvatarId& ClubStateAssignment::avatar() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubStateAssignment.avatar)
  return avatar_ != NULL ? *avatar_ : *default_instance_->avatar_;
}
inline ::bgs::protocol::club::v1::AvatarId* ClubStateAssignment::mutable_avatar() {
  set_has_avatar();
  if (avatar_ == NULL) avatar_ = new ::bgs::protocol::club::v1::AvatarId;
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubStateAssignment.avatar)
  return avatar_;
}
inline ::bgs::protocol::club::v1::AvatarId* ClubStateAssignment::release_avatar() {
  clear_has_avatar();
  ::bgs::protocol::club::v1::AvatarId* temp = avatar_;
  avatar_ = NULL;
  return temp;
}
inline void ClubStateAssignment::set_allocated_avatar(::bgs::protocol::club::v1::AvatarId* avatar) {
  delete avatar_;
  avatar_ = avatar;
  if (avatar) {
    set_has_avatar();
  } else {
    clear_has_avatar();
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.ClubStateAssignment.avatar)
}

// optional .bgs.protocol.club.v1.PrivacyLevel privacy_level = 7;
inline bool ClubStateAssignment::has_privacy_level() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ClubStateAssignment::set_has_privacy_level() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ClubStateAssignment::clear_has_privacy_level() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ClubStateAssignment::clear_privacy_level() {
  privacy_level_ = 0;
  clear_has_privacy_level();
}
inline ::bgs::protocol::club::v1::PrivacyLevel ClubStateAssignment::privacy_level() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubStateAssignment.privacy_level)
  return static_cast< ::bgs::protocol::club::v1::PrivacyLevel >(privacy_level_);
}
inline void ClubStateAssignment::set_privacy_level(::bgs::protocol::club::v1::PrivacyLevel value) {
  assert(::bgs::protocol::club::v1::PrivacyLevel_IsValid(value));
  set_has_privacy_level();
  privacy_level_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubStateAssignment.privacy_level)
}

// optional .bgs.protocol.club.v1.StreamPosition stream_position = 8;
inline bool ClubStateAssignment::has_stream_position() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ClubStateAssignment::set_has_stream_position() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ClubStateAssignment::clear_has_stream_position() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ClubStateAssignment::clear_stream_position() {
  if (stream_position_ != NULL) stream_position_->::bgs::protocol::club::v1::StreamPosition::Clear();
  clear_has_stream_position();
}
inline const ::bgs::protocol::club::v1::StreamPosition& ClubStateAssignment::stream_position() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubStateAssignment.stream_position)
  return stream_position_ != NULL ? *stream_position_ : *default_instance_->stream_position_;
}
inline ::bgs::protocol::club::v1::StreamPosition* ClubStateAssignment::mutable_stream_position() {
  set_has_stream_position();
  if (stream_position_ == NULL) stream_position_ = new ::bgs::protocol::club::v1::StreamPosition;
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubStateAssignment.stream_position)
  return stream_position_;
}
inline ::bgs::protocol::club::v1::StreamPosition* ClubStateAssignment::release_stream_position() {
  clear_has_stream_position();
  ::bgs::protocol::club::v1::StreamPosition* temp = stream_position_;
  stream_position_ = NULL;
  return temp;
}
inline void ClubStateAssignment::set_allocated_stream_position(::bgs::protocol::club::v1::StreamPosition* stream_position) {
  delete stream_position_;
  stream_position_ = stream_position;
  if (stream_position) {
    set_has_stream_position();
  } else {
    clear_has_stream_position();
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.ClubStateAssignment.stream_position)
}

// optional string short_name = 9;
inline bool ClubStateAssignment::has_short_name() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ClubStateAssignment::set_has_short_name() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ClubStateAssignment::clear_has_short_name() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ClubStateAssignment::clear_short_name() {
  if (short_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    short_name_->clear();
  }
  clear_has_short_name();
}
inline const ::std::string& ClubStateAssignment::short_name() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubStateAssignment.short_name)
  return *short_name_;
}
inline void ClubStateAssignment::set_short_name(const ::std::string& value) {
  set_has_short_name();
  if (short_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    short_name_ = new ::std::string;
  }
  short_name_->assign(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubStateAssignment.short_name)
}
inline void ClubStateAssignment::set_short_name(const char* value) {
  set_has_short_name();
  if (short_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    short_name_ = new ::std::string;
  }
  short_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:bgs.protocol.club.v1.ClubStateAssignment.short_name)
}
inline void ClubStateAssignment::set_short_name(const char* value, size_t size) {
  set_has_short_name();
  if (short_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    short_name_ = new ::std::string;
  }
  short_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.club.v1.ClubStateAssignment.short_name)
}
inline ::std::string* ClubStateAssignment::mutable_short_name() {
  set_has_short_name();
  if (short_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    short_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubStateAssignment.short_name)
  return short_name_;
}
inline ::std::string* ClubStateAssignment::release_short_name() {
  clear_has_short_name();
  if (short_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = short_name_;
    short_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ClubStateAssignment::set_allocated_short_name(::std::string* short_name) {
  if (short_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete short_name_;
  }
  if (short_name) {
    set_has_short_name();
    short_name_ = short_name;
  } else {
    clear_has_short_name();
    short_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.ClubStateAssignment.short_name)
}

// -------------------------------------------------------------------

// StreamSettings

// optional uint64 stream_id = 1;
inline bool StreamSettings::has_stream_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StreamSettings::set_has_stream_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StreamSettings::clear_has_stream_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StreamSettings::clear_stream_id() {
  stream_id_ = GOOGLE_ULONGLONG(0);
  clear_has_stream_id();
}
inline ::google::protobuf::uint64 StreamSettings::stream_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.StreamSettings.stream_id)
  return stream_id_;
}
inline void StreamSettings::set_stream_id(::google::protobuf::uint64 value) {
  set_has_stream_id();
  stream_id_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.StreamSettings.stream_id)
}

// optional .bgs.protocol.club.v1.StreamNotificationFilter filter = 2;
inline bool StreamSettings::has_filter() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StreamSettings::set_has_filter() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StreamSettings::clear_has_filter() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StreamSettings::clear_filter() {
  filter_ = 0;
  clear_has_filter();
}
inline ::bgs::protocol::club::v1::StreamNotificationFilter StreamSettings::filter() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.StreamSettings.filter)
  return static_cast< ::bgs::protocol::club::v1::StreamNotificationFilter >(filter_);
}
inline void StreamSettings::set_filter(::bgs::protocol::club::v1::StreamNotificationFilter value) {
  assert(::bgs::protocol::club::v1::StreamNotificationFilter_IsValid(value));
  set_has_filter();
  filter_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.StreamSettings.filter)
}

// -------------------------------------------------------------------

// ClubSettings

// repeated .bgs.protocol.club.v1.StreamSettings stream = 1;
inline int ClubSettings::stream_size() const {
  return stream_.size();
}
inline void ClubSettings::clear_stream() {
  stream_.Clear();
}
inline const ::bgs::protocol::club::v1::StreamSettings& ClubSettings::stream(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubSettings.stream)
  return stream_.Get(index);
}
inline ::bgs::protocol::club::v1::StreamSettings* ClubSettings::mutable_stream(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubSettings.stream)
  return stream_.Mutable(index);
}
inline ::bgs::protocol::club::v1::StreamSettings* ClubSettings::add_stream() {
  // @@protoc_insertion_point(field_add:bgs.protocol.club.v1.ClubSettings.stream)
  return stream_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bgs::protocol::club::v1::StreamSettings >&
ClubSettings::stream() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.club.v1.ClubSettings.stream)
  return stream_;
}
inline ::google::protobuf::RepeatedPtrField< ::bgs::protocol::club::v1::StreamSettings >*
ClubSettings::mutable_stream() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.club.v1.ClubSettings.stream)
  return &stream_;
}

// optional bool stream_notification_filter_all = 2;
inline bool ClubSettings::has_stream_notification_filter_all() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClubSettings::set_has_stream_notification_filter_all() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ClubSettings::clear_has_stream_notification_filter_all() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ClubSettings::clear_stream_notification_filter_all() {
  stream_notification_filter_all_ = false;
  clear_has_stream_notification_filter_all();
}
inline bool ClubSettings::stream_notification_filter_all() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubSettings.stream_notification_filter_all)
  return stream_notification_filter_all_;
}
inline void ClubSettings::set_stream_notification_filter_all(bool value) {
  set_has_stream_notification_filter_all();
  stream_notification_filter_all_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubSettings.stream_notification_filter_all)
}

// repeated .bgs.protocol.v2.Attribute attribute = 3;
inline int ClubSettings::attribute_size() const {
  return attribute_.size();
}
inline void ClubSettings::clear_attribute() {
  attribute_.Clear();
}
inline const ::bgs::protocol::v2::Attribute& ClubSettings::attribute(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubSettings.attribute)
  return attribute_.Get(index);
}
inline ::bgs::protocol::v2::Attribute* ClubSettings::mutable_attribute(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubSettings.attribute)
  return attribute_.Mutable(index);
}
inline ::bgs::protocol::v2::Attribute* ClubSettings::add_attribute() {
  // @@protoc_insertion_point(field_add:bgs.protocol.club.v1.ClubSettings.attribute)
  return attribute_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bgs::protocol::v2::Attribute >&
ClubSettings::attribute() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.club.v1.ClubSettings.attribute)
  return attribute_;
}
inline ::google::protobuf::RepeatedPtrField< ::bgs::protocol::v2::Attribute >*
ClubSettings::mutable_attribute() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.club.v1.ClubSettings.attribute)
  return &attribute_;
}

// -------------------------------------------------------------------

// ClubSettingsOptions

// repeated .bgs.protocol.club.v1.StreamSettings stream = 1 [deprecated = true];
inline int ClubSettingsOptions::stream_size() const {
  return stream_.size();
}
inline void ClubSettingsOptions::clear_stream() {
  stream_.Clear();
}
inline const ::bgs::protocol::club::v1::StreamSettings& ClubSettingsOptions::stream(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubSettingsOptions.stream)
  return stream_.Get(index);
}
inline ::bgs::protocol::club::v1::StreamSettings* ClubSettingsOptions::mutable_stream(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubSettingsOptions.stream)
  return stream_.Mutable(index);
}
inline ::bgs::protocol::club::v1::StreamSettings* ClubSettingsOptions::add_stream() {
  // @@protoc_insertion_point(field_add:bgs.protocol.club.v1.ClubSettingsOptions.stream)
  return stream_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bgs::protocol::club::v1::StreamSettings >&
ClubSettingsOptions::stream() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.club.v1.ClubSettingsOptions.stream)
  return stream_;
}
inline ::google::protobuf::RepeatedPtrField< ::bgs::protocol::club::v1::StreamSettings >*
ClubSettingsOptions::mutable_stream() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.club.v1.ClubSettingsOptions.stream)
  return &stream_;
}

// optional .bgs.protocol.club.v1.ClubSettings settings = 2;
inline bool ClubSettingsOptions::has_settings() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClubSettingsOptions::set_has_settings() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ClubSettingsOptions::clear_has_settings() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ClubSettingsOptions::clear_settings() {
  if (settings_ != NULL) settings_->::bgs::protocol::club::v1::ClubSettings::Clear();
  clear_has_settings();
}
inline const ::bgs::protocol::club::v1::ClubSettings& ClubSettingsOptions::settings() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubSettingsOptions.settings)
  return settings_ != NULL ? *settings_ : *default_instance_->settings_;
}
inline ::bgs::protocol::club::v1::ClubSettings* ClubSettingsOptions::mutable_settings() {
  set_has_settings();
  if (settings_ == NULL) settings_ = new ::bgs::protocol::club::v1::ClubSettings;
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubSettingsOptions.settings)
  return settings_;
}
inline ::bgs::protocol::club::v1::ClubSettings* ClubSettingsOptions::release_settings() {
  clear_has_settings();
  ::bgs::protocol::club::v1::ClubSettings* temp = settings_;
  settings_ = NULL;
  return temp;
}
inline void ClubSettingsOptions::set_allocated_settings(::bgs::protocol::club::v1::ClubSettings* settings) {
  delete settings_;
  settings_ = settings;
  if (settings) {
    set_has_settings();
  } else {
    clear_has_settings();
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.ClubSettingsOptions.settings)
}

// optional uint32 version = 3;
inline bool ClubSettingsOptions::has_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ClubSettingsOptions::set_has_version() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ClubSettingsOptions::clear_has_version() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ClubSettingsOptions::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 ClubSettingsOptions::version() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubSettingsOptions.version)
  return version_;
}
inline void ClubSettingsOptions::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.ClubSettingsOptions.version)
}

// -------------------------------------------------------------------

// ClubSettingsAssignment

// repeated .bgs.protocol.club.v1.StreamSettings stream = 1 [deprecated = true];
inline int ClubSettingsAssignment::stream_size() const {
  return stream_.size();
}
inline void ClubSettingsAssignment::clear_stream() {
  stream_.Clear();
}
inline const ::bgs::protocol::club::v1::StreamSettings& ClubSettingsAssignment::stream(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubSettingsAssignment.stream)
  return stream_.Get(index);
}
inline ::bgs::protocol::club::v1::StreamSettings* ClubSettingsAssignment::mutable_stream(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubSettingsAssignment.stream)
  return stream_.Mutable(index);
}
inline ::bgs::protocol::club::v1::StreamSettings* ClubSettingsAssignment::add_stream() {
  // @@protoc_insertion_point(field_add:bgs.protocol.club.v1.ClubSettingsAssignment.stream)
  return stream_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bgs::protocol::club::v1::StreamSettings >&
ClubSettingsAssignment::stream() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.club.v1.ClubSettingsAssignment.stream)
  return stream_;
}
inline ::google::protobuf::RepeatedPtrField< ::bgs::protocol::club::v1::StreamSettings >*
ClubSettingsAssignment::mutable_stream() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.club.v1.ClubSettingsAssignment.stream)
  return &stream_;
}

// optional .bgs.protocol.club.v1.ClubSettings settings = 2;
inline bool ClubSettingsAssignment::has_settings() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClubSettingsAssignment::set_has_settings() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ClubSettingsAssignment::clear_has_settings() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ClubSettingsAssignment::clear_settings() {
  if (settings_ != NULL) settings_->::bgs::protocol::club::v1::ClubSettings::Clear();
  clear_has_settings();
}
inline const ::bgs::protocol::club::v1::ClubSettings& ClubSettingsAssignment::settings() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubSettingsAssignment.settings)
  return settings_ != NULL ? *settings_ : *default_instance_->settings_;
}
inline ::bgs::protocol::club::v1::ClubSettings* ClubSettingsAssignment::mutable_settings() {
  set_has_settings();
  if (settings_ == NULL) settings_ = new ::bgs::protocol::club::v1::ClubSettings;
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubSettingsAssignment.settings)
  return settings_;
}
inline ::bgs::protocol::club::v1::ClubSettings* ClubSettingsAssignment::release_settings() {
  clear_has_settings();
  ::bgs::protocol::club::v1::ClubSettings* temp = settings_;
  settings_ = NULL;
  return temp;
}
inline void ClubSettingsAssignment::set_allocated_settings(::bgs::protocol::club::v1::ClubSettings* settings) {
  delete settings_;
  settings_ = settings;
  if (settings) {
    set_has_settings();
  } else {
    clear_has_settings();
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.ClubSettingsAssignment.settings)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace club
}  // namespace protocol
}  // namespace bgs

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_club_5fcore_2eproto__INCLUDED
