// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: semantic_version.proto

#ifndef PROTOBUF_semantic_5fversion_2eproto__INCLUDED
#define PROTOBUF_semantic_5fversion_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "Define.h" // for TC_PROTO_API
// @@protoc_insertion_point(includes)

namespace bgs {
namespace protocol {

// Internal implementation detail -- do not call these.
void TC_PROTO_API protobuf_AddDesc_semantic_5fversion_2eproto();
void protobuf_AssignDesc_semantic_5fversion_2eproto();
void protobuf_ShutdownFile_semantic_5fversion_2eproto();

class SemanticVersion;

// ===================================================================

class TC_PROTO_API SemanticVersion : public ::google::protobuf::Message {
 public:
  SemanticVersion();
  virtual ~SemanticVersion();

  SemanticVersion(const SemanticVersion& from);

  inline SemanticVersion& operator=(const SemanticVersion& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SemanticVersion& default_instance();

  void Swap(SemanticVersion* other);

  // implements Message ----------------------------------------------

  SemanticVersion* New() const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 major_version = 1;
  inline bool has_major_version() const;
  inline void clear_major_version();
  static const int kMajorVersionFieldNumber = 1;
  inline ::google::protobuf::uint32 major_version() const;
  inline void set_major_version(::google::protobuf::uint32 value);

  // optional uint32 minor_version = 2;
  inline bool has_minor_version() const;
  inline void clear_minor_version();
  static const int kMinorVersionFieldNumber = 2;
  inline ::google::protobuf::uint32 minor_version() const;
  inline void set_minor_version(::google::protobuf::uint32 value);

  // optional uint32 patch_version = 3;
  inline bool has_patch_version() const;
  inline void clear_patch_version();
  static const int kPatchVersionFieldNumber = 3;
  inline ::google::protobuf::uint32 patch_version() const;
  inline void set_patch_version(::google::protobuf::uint32 value);

  // optional string version_string = 4;
  inline bool has_version_string() const;
  inline void clear_version_string();
  static const int kVersionStringFieldNumber = 4;
  inline const ::std::string& version_string() const;
  inline void set_version_string(const ::std::string& value);
  inline void set_version_string(const char* value);
  inline void set_version_string(const char* value, size_t size);
  inline ::std::string* mutable_version_string();
  inline ::std::string* release_version_string();
  inline void set_allocated_version_string(::std::string* version_string);

  // @@protoc_insertion_point(class_scope:bgs.protocol.SemanticVersion)
 private:
  inline void set_has_major_version();
  inline void clear_has_major_version();
  inline void set_has_minor_version();
  inline void clear_has_minor_version();
  inline void set_has_patch_version();
  inline void clear_has_patch_version();
  inline void set_has_version_string();
  inline void clear_has_version_string();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 major_version_;
  ::google::protobuf::uint32 minor_version_;
  ::std::string* version_string_;
  ::google::protobuf::uint32 patch_version_;
  friend void TC_PROTO_API protobuf_AddDesc_semantic_5fversion_2eproto();
  friend void protobuf_AssignDesc_semantic_5fversion_2eproto();
  friend void protobuf_ShutdownFile_semantic_5fversion_2eproto();

  void InitAsDefaultInstance();
  static SemanticVersion* default_instance_;
};
// ===================================================================

// ===================================================================

// ===================================================================

// SemanticVersion

// optional uint32 major_version = 1;
inline bool SemanticVersion::has_major_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SemanticVersion::set_has_major_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SemanticVersion::clear_has_major_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SemanticVersion::clear_major_version() {
  major_version_ = 0u;
  clear_has_major_version();
}
inline ::google::protobuf::uint32 SemanticVersion::major_version() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.SemanticVersion.major_version)
  return major_version_;
}
inline void SemanticVersion::set_major_version(::google::protobuf::uint32 value) {
  set_has_major_version();
  major_version_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.SemanticVersion.major_version)
}

// optional uint32 minor_version = 2;
inline bool SemanticVersion::has_minor_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SemanticVersion::set_has_minor_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SemanticVersion::clear_has_minor_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SemanticVersion::clear_minor_version() {
  minor_version_ = 0u;
  clear_has_minor_version();
}
inline ::google::protobuf::uint32 SemanticVersion::minor_version() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.SemanticVersion.minor_version)
  return minor_version_;
}
inline void SemanticVersion::set_minor_version(::google::protobuf::uint32 value) {
  set_has_minor_version();
  minor_version_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.SemanticVersion.minor_version)
}

// optional uint32 patch_version = 3;
inline bool SemanticVersion::has_patch_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SemanticVersion::set_has_patch_version() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SemanticVersion::clear_has_patch_version() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SemanticVersion::clear_patch_version() {
  patch_version_ = 0u;
  clear_has_patch_version();
}
inline ::google::protobuf::uint32 SemanticVersion::patch_version() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.SemanticVersion.patch_version)
  return patch_version_;
}
inline void SemanticVersion::set_patch_version(::google::protobuf::uint32 value) {
  set_has_patch_version();
  patch_version_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.SemanticVersion.patch_version)
}

// optional string version_string = 4;
inline bool SemanticVersion::has_version_string() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SemanticVersion::set_has_version_string() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SemanticVersion::clear_has_version_string() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SemanticVersion::clear_version_string() {
  if (version_string_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_string_->clear();
  }
  clear_has_version_string();
}
inline const ::std::string& SemanticVersion::version_string() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.SemanticVersion.version_string)
  return *version_string_;
}
inline void SemanticVersion::set_version_string(const ::std::string& value) {
  set_has_version_string();
  if (version_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_string_ = new ::std::string;
  }
  version_string_->assign(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.SemanticVersion.version_string)
}
inline void SemanticVersion::set_version_string(const char* value) {
  set_has_version_string();
  if (version_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_string_ = new ::std::string;
  }
  version_string_->assign(value);
  // @@protoc_insertion_point(field_set_char:bgs.protocol.SemanticVersion.version_string)
}
inline void SemanticVersion::set_version_string(const char* value, size_t size) {
  set_has_version_string();
  if (version_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_string_ = new ::std::string;
  }
  version_string_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.SemanticVersion.version_string)
}
inline ::std::string* SemanticVersion::mutable_version_string() {
  set_has_version_string();
  if (version_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_string_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:bgs.protocol.SemanticVersion.version_string)
  return version_string_;
}
inline ::std::string* SemanticVersion::release_version_string() {
  clear_has_version_string();
  if (version_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = version_string_;
    version_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SemanticVersion::set_allocated_version_string(::std::string* version_string) {
  if (version_string_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete version_string_;
  }
  if (version_string) {
    set_has_version_string();
    version_string_ = version_string;
  } else {
    clear_has_version_string();
    version_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.SemanticVersion.version_string)
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace bgs

#ifndef SWIG
namespace google {
namespace protobuf {
}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_semantic_5fversion_2eproto__INCLUDED
