// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: presence_listener.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "presence_listener.pb.h"

#include <algorithm>
#include <utility>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
#include "Log.h"
#include "Errors.h"
#include "BattlenetRpcErrorCodes.h"
// @@protoc_insertion_point(includes)

namespace bgs {
namespace protocol {
namespace presence {
namespace v1 {

namespace {

const ::google::protobuf::Descriptor* SubscribeNotification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubscribeNotification_reflection_ = NULL;
const ::google::protobuf::Descriptor* StateChangedNotification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StateChangedNotification_reflection_ = NULL;
const ::google::protobuf::ServiceDescriptor* PresenceListener_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_presence_5flistener_2eproto() {
  protobuf_AddDesc_presence_5flistener_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "presence_listener.proto");
  GOOGLE_CHECK(file != NULL);
  SubscribeNotification_descriptor_ = file->message_type(0);
  static const int SubscribeNotification_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeNotification, subscriber_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeNotification, state_),
  };
  SubscribeNotification_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SubscribeNotification_descriptor_,
      SubscribeNotification::default_instance_,
      SubscribeNotification_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeNotification, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeNotification, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SubscribeNotification));
  StateChangedNotification_descriptor_ = file->message_type(1);
  static const int StateChangedNotification_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateChangedNotification, subscriber_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateChangedNotification, state_),
  };
  StateChangedNotification_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StateChangedNotification_descriptor_,
      StateChangedNotification::default_instance_,
      StateChangedNotification_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateChangedNotification, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateChangedNotification, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StateChangedNotification));
  PresenceListener_descriptor_ = file->service(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_presence_5flistener_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SubscribeNotification_descriptor_, &SubscribeNotification::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StateChangedNotification_descriptor_, &StateChangedNotification::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_presence_5flistener_2eproto() {
  delete SubscribeNotification::default_instance_;
  delete SubscribeNotification_reflection_;
  delete StateChangedNotification::default_instance_;
  delete StateChangedNotification_reflection_;
}

void protobuf_AddDesc_presence_5flistener_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::bgs::protocol::presence::v1::protobuf_AddDesc_presence_5ftypes_2eproto();
  ::bgs::protocol::account::v1::protobuf_AddDesc_account_5ftypes_2eproto();
  ::bgs::protocol::protobuf_AddDesc_rpc_5ftypes_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027presence_listener.proto\022\030bgs.protocol."
    "presence.v1\032\024presence_types.proto\032\023accou"
    "nt_types.proto\032\017rpc_types.proto\"\212\001\n\025Subs"
    "cribeNotification\0229\n\rsubscriber_id\030\001 \001(\013"
    "2\".bgs.protocol.account.v1.AccountId\0226\n\005"
    "state\030\002 \003(\0132\'.bgs.protocol.presence.v1.P"
    "resenceState\"\215\001\n\030StateChangedNotificatio"
    "n\0229\n\rsubscriber_id\030\001 \001(\0132\".bgs.protocol."
    "account.v1.AccountId\0226\n\005state\030\002 \003(\0132\'.bg"
    "s.protocol.presence.v1.PresenceState2\226\002\n"
    "\020PresenceListener\022a\n\013OnSubscribe\022/.bgs.p"
    "rotocol.presence.v1.SubscribeNotificatio"
    "n\032\031.bgs.protocol.NO_RESPONSE\"\006\202\371+\002\010\001\022g\n\016"
    "OnStateChanged\0222.bgs.protocol.presence.v"
    "1.StateChangedNotification\032\031.bgs.protoco"
    "l.NO_RESPONSE\"\006\202\371+\002\010\002\0326\202\371+,\n*bnet.protoc"
    "ol.presence.v1.PresenceListener\212\371+\002\010\001B\002H"
    "\001", 681);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "presence_listener.proto", &protobuf_RegisterTypes);
  SubscribeNotification::default_instance_ = new SubscribeNotification();
  StateChangedNotification::default_instance_ = new StateChangedNotification();
  SubscribeNotification::default_instance_->InitAsDefaultInstance();
  StateChangedNotification::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_presence_5flistener_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_presence_5flistener_2eproto {
  StaticDescriptorInitializer_presence_5flistener_2eproto() {
    protobuf_AddDesc_presence_5flistener_2eproto();
  }
} static_descriptor_initializer_presence_5flistener_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int SubscribeNotification::kSubscriberIdFieldNumber;
const int SubscribeNotification::kStateFieldNumber;
#endif  // !_MSC_VER

SubscribeNotification::SubscribeNotification()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.presence.v1.SubscribeNotification)
}

void SubscribeNotification::InitAsDefaultInstance() {
  subscriber_id_ = const_cast< ::bgs::protocol::account::v1::AccountId*>(&::bgs::protocol::account::v1::AccountId::default_instance());
}

SubscribeNotification::SubscribeNotification(const SubscribeNotification& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.presence.v1.SubscribeNotification)
}

void SubscribeNotification::SharedCtor() {
  _cached_size_ = 0;
  subscriber_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubscribeNotification::~SubscribeNotification() {
  // @@protoc_insertion_point(destructor:bgs.protocol.presence.v1.SubscribeNotification)
  SharedDtor();
}

void SubscribeNotification::SharedDtor() {
  if (this != default_instance_) {
    delete subscriber_id_;
  }
}

void SubscribeNotification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubscribeNotification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubscribeNotification_descriptor_;
}

const SubscribeNotification& SubscribeNotification::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_presence_5flistener_2eproto();
  return *default_instance_;
}

SubscribeNotification* SubscribeNotification::default_instance_ = NULL;

SubscribeNotification* SubscribeNotification::New() const {
  return new SubscribeNotification;
}

void SubscribeNotification::Clear() {
  if (has_subscriber_id()) {
    if (subscriber_id_ != NULL) subscriber_id_->::bgs::protocol::account::v1::AccountId::Clear();
  }
  state_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SubscribeNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bgs.protocol.presence.v1.SubscribeNotification)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .bgs.protocol.account.v1.AccountId subscriber_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_subscriber_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_state;
        break;
      }

      // repeated .bgs.protocol.presence.v1.PresenceState state = 2;
      case 2: {
        if (tag == 18) {
         parse_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_state()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_state;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bgs.protocol.presence.v1.SubscribeNotification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bgs.protocol.presence.v1.SubscribeNotification)
  return false;
#undef DO_
}

void SubscribeNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bgs.protocol.presence.v1.SubscribeNotification)
  // optional .bgs.protocol.account.v1.AccountId subscriber_id = 1;
  if (has_subscriber_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->subscriber_id(), output);
  }

  // repeated .bgs.protocol.presence.v1.PresenceState state = 2;
  for (int i = 0; i < this->state_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->state(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bgs.protocol.presence.v1.SubscribeNotification)
}

::google::protobuf::uint8* SubscribeNotification::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.presence.v1.SubscribeNotification)
  // optional .bgs.protocol.account.v1.AccountId subscriber_id = 1;
  if (has_subscriber_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->subscriber_id(), target);
  }

  // repeated .bgs.protocol.presence.v1.PresenceState state = 2;
  for (int i = 0; i < this->state_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->state(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.presence.v1.SubscribeNotification)
  return target;
}

int SubscribeNotification::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .bgs.protocol.account.v1.AccountId subscriber_id = 1;
    if (has_subscriber_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->subscriber_id());
    }

  }
  // repeated .bgs.protocol.presence.v1.PresenceState state = 2;
  total_size += 1 * this->state_size();
  for (int i = 0; i < this->state_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->state(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubscribeNotification::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SubscribeNotification* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SubscribeNotification*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SubscribeNotification::MergeFrom(const SubscribeNotification& from) {
  GOOGLE_CHECK_NE(&from, this);
  state_.MergeFrom(from.state_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_subscriber_id()) {
      mutable_subscriber_id()->::bgs::protocol::account::v1::AccountId::MergeFrom(from.subscriber_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SubscribeNotification::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeNotification::CopyFrom(const SubscribeNotification& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeNotification::IsInitialized() const {

  if (has_subscriber_id()) {
    if (!this->subscriber_id().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->state())) return false;
  return true;
}

void SubscribeNotification::Swap(SubscribeNotification* other) {
  if (other != this) {
    std::swap(subscriber_id_, other->subscriber_id_);
    state_.Swap(&other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SubscribeNotification::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubscribeNotification_descriptor_;
  metadata.reflection = SubscribeNotification_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StateChangedNotification::kSubscriberIdFieldNumber;
const int StateChangedNotification::kStateFieldNumber;
#endif  // !_MSC_VER

StateChangedNotification::StateChangedNotification()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.presence.v1.StateChangedNotification)
}

void StateChangedNotification::InitAsDefaultInstance() {
  subscriber_id_ = const_cast< ::bgs::protocol::account::v1::AccountId*>(&::bgs::protocol::account::v1::AccountId::default_instance());
}

StateChangedNotification::StateChangedNotification(const StateChangedNotification& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.presence.v1.StateChangedNotification)
}

void StateChangedNotification::SharedCtor() {
  _cached_size_ = 0;
  subscriber_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StateChangedNotification::~StateChangedNotification() {
  // @@protoc_insertion_point(destructor:bgs.protocol.presence.v1.StateChangedNotification)
  SharedDtor();
}

void StateChangedNotification::SharedDtor() {
  if (this != default_instance_) {
    delete subscriber_id_;
  }
}

void StateChangedNotification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StateChangedNotification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StateChangedNotification_descriptor_;
}

const StateChangedNotification& StateChangedNotification::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_presence_5flistener_2eproto();
  return *default_instance_;
}

StateChangedNotification* StateChangedNotification::default_instance_ = NULL;

StateChangedNotification* StateChangedNotification::New() const {
  return new StateChangedNotification;
}

void StateChangedNotification::Clear() {
  if (has_subscriber_id()) {
    if (subscriber_id_ != NULL) subscriber_id_->::bgs::protocol::account::v1::AccountId::Clear();
  }
  state_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StateChangedNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bgs.protocol.presence.v1.StateChangedNotification)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .bgs.protocol.account.v1.AccountId subscriber_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_subscriber_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_state;
        break;
      }

      // repeated .bgs.protocol.presence.v1.PresenceState state = 2;
      case 2: {
        if (tag == 18) {
         parse_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_state()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_state;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bgs.protocol.presence.v1.StateChangedNotification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bgs.protocol.presence.v1.StateChangedNotification)
  return false;
#undef DO_
}

void StateChangedNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bgs.protocol.presence.v1.StateChangedNotification)
  // optional .bgs.protocol.account.v1.AccountId subscriber_id = 1;
  if (has_subscriber_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->subscriber_id(), output);
  }

  // repeated .bgs.protocol.presence.v1.PresenceState state = 2;
  for (int i = 0; i < this->state_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->state(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bgs.protocol.presence.v1.StateChangedNotification)
}

::google::protobuf::uint8* StateChangedNotification::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.presence.v1.StateChangedNotification)
  // optional .bgs.protocol.account.v1.AccountId subscriber_id = 1;
  if (has_subscriber_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->subscriber_id(), target);
  }

  // repeated .bgs.protocol.presence.v1.PresenceState state = 2;
  for (int i = 0; i < this->state_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->state(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.presence.v1.StateChangedNotification)
  return target;
}

int StateChangedNotification::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .bgs.protocol.account.v1.AccountId subscriber_id = 1;
    if (has_subscriber_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->subscriber_id());
    }

  }
  // repeated .bgs.protocol.presence.v1.PresenceState state = 2;
  total_size += 1 * this->state_size();
  for (int i = 0; i < this->state_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->state(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StateChangedNotification::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StateChangedNotification* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StateChangedNotification*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StateChangedNotification::MergeFrom(const StateChangedNotification& from) {
  GOOGLE_CHECK_NE(&from, this);
  state_.MergeFrom(from.state_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_subscriber_id()) {
      mutable_subscriber_id()->::bgs::protocol::account::v1::AccountId::MergeFrom(from.subscriber_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StateChangedNotification::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StateChangedNotification::CopyFrom(const StateChangedNotification& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StateChangedNotification::IsInitialized() const {

  if (has_subscriber_id()) {
    if (!this->subscriber_id().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->state())) return false;
  return true;
}

void StateChangedNotification::Swap(StateChangedNotification* other) {
  if (other != this) {
    std::swap(subscriber_id_, other->subscriber_id_);
    state_.Swap(&other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StateChangedNotification::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StateChangedNotification_descriptor_;
  metadata.reflection = StateChangedNotification_reflection_;
  return metadata;
}


// ===================================================================

PresenceListener::PresenceListener(bool use_original_hash) : service_hash_(use_original_hash ? OriginalHash::value : NameHash::value) {
}

PresenceListener::~PresenceListener() {
}

google::protobuf::ServiceDescriptor const* PresenceListener::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PresenceListener_descriptor_;
}

void PresenceListener::OnSubscribe(::bgs::protocol::presence::v1::SubscribeNotification const* request) {
  TC_LOG_DEBUG("service.protobuf", "%s Server called client method PresenceListener.OnSubscribe(bgs.protocol.presence.v1.SubscribeNotification{ %s })",
    GetCallerInfo().c_str(), request->ShortDebugString().c_str());
  SendRequest(service_hash_, 1, request);
}

void PresenceListener::OnStateChanged(::bgs::protocol::presence::v1::StateChangedNotification const* request) {
  TC_LOG_DEBUG("service.protobuf", "%s Server called client method PresenceListener.OnStateChanged(bgs.protocol.presence.v1.StateChangedNotification{ %s })",
    GetCallerInfo().c_str(), request->ShortDebugString().c_str());
  SendRequest(service_hash_, 2, request);
}

void PresenceListener::CallServerMethod(uint32 token, uint32 methodId, MessageBuffer buffer) {
  switch(methodId) {
    case 1: {
      ::bgs::protocol::presence::v1::SubscribeNotification request;
      if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
        TC_LOG_DEBUG("service.protobuf", "%s Failed to parse request for PresenceListener.OnSubscribe server method call.", GetCallerInfo().c_str());
        SendResponse(service_hash_, 1, token, ERROR_RPC_MALFORMED_REQUEST);
        return;
      }
      uint32 status = HandleOnSubscribe(&request);
      TC_LOG_DEBUG("service.protobuf", "%s Client called server method PresenceListener.OnSubscribe(bgs.protocol.presence.v1.SubscribeNotification{ %s }) status %u.",
        GetCallerInfo().c_str(), request.ShortDebugString().c_str(), status);
      if (status)
        SendResponse(service_hash_, 1, token, status);
      break;
    }
    case 2: {
      ::bgs::protocol::presence::v1::StateChangedNotification request;
      if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
        TC_LOG_DEBUG("service.protobuf", "%s Failed to parse request for PresenceListener.OnStateChanged server method call.", GetCallerInfo().c_str());
        SendResponse(service_hash_, 2, token, ERROR_RPC_MALFORMED_REQUEST);
        return;
      }
      uint32 status = HandleOnStateChanged(&request);
      TC_LOG_DEBUG("service.protobuf", "%s Client called server method PresenceListener.OnStateChanged(bgs.protocol.presence.v1.StateChangedNotification{ %s }) status %u.",
        GetCallerInfo().c_str(), request.ShortDebugString().c_str(), status);
      if (status)
        SendResponse(service_hash_, 2, token, status);
      break;
    }
    default:
      TC_LOG_ERROR("service.protobuf", "Bad method id %u.", methodId);
      SendResponse(service_hash_, methodId, token, ERROR_RPC_INVALID_METHOD);
      break;
    }
}

uint32 PresenceListener::HandleOnSubscribe(::bgs::protocol::presence::v1::SubscribeNotification const* request) {
  TC_LOG_ERROR("service.protobuf", "%s Client tried to call not implemented method PresenceListener.OnSubscribe({ %s })",
    GetCallerInfo().c_str(), request->ShortDebugString().c_str());
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 PresenceListener::HandleOnStateChanged(::bgs::protocol::presence::v1::StateChangedNotification const* request) {
  TC_LOG_ERROR("service.protobuf", "%s Client tried to call not implemented method PresenceListener.OnStateChanged({ %s })",
    GetCallerInfo().c_str(), request->ShortDebugString().c_str());
  return ERROR_RPC_NOT_IMPLEMENTED;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace presence
}  // namespace protocol
}  // namespace bgs

// @@protoc_insertion_point(global_scope)
