// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: club_ban.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "club_ban.pb.h"

#include <utility>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace bgs {
namespace protocol {
namespace club {
namespace v1 {

namespace {

const ::google::protobuf::Descriptor* AddBanOptions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddBanOptions_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClubBan_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClubBan_reflection_ = NULL;

}  // namespace

void protobuf_AssignDesc_club_5fban_2eproto() {
  protobuf_AddDesc_club_5fban_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "club_ban.proto");
  GOOGLE_CHECK(file != NULL);
  AddBanOptions_descriptor_ = file->message_type(0);
  static const int AddBanOptions_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddBanOptions, target_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddBanOptions, attribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddBanOptions, reason_),
  };
  AddBanOptions_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddBanOptions_descriptor_,
      AddBanOptions::default_instance_,
      AddBanOptions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddBanOptions, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddBanOptions, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddBanOptions));
  ClubBan_descriptor_ = file->message_type(1);
  static const int ClubBan_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubBan, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubBan, battle_tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubBan, creator_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubBan, attribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubBan, reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubBan, creation_time_),
  };
  ClubBan_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClubBan_descriptor_,
      ClubBan::default_instance_,
      ClubBan_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubBan, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubBan, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClubBan));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_club_5fban_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddBanOptions_descriptor_, &AddBanOptions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClubBan_descriptor_, &ClubBan::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_club_5fban_2eproto() {
  delete AddBanOptions::default_instance_;
  delete AddBanOptions_reflection_;
  delete ClubBan::default_instance_;
  delete ClubBan_reflection_;
}

void protobuf_AddDesc_club_5fban_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::bgs::protocol::protobuf_AddDesc_global_5fextensions_2ffield_5foptions_2eproto();
  ::bgs::protocol::club::v1::protobuf_AddDesc_club_5fmember_2eproto();
  ::bgs::protocol::v2::protobuf_AddDesc_api_2fclient_2fv2_2fattribute_5ftypes_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016club_ban.proto\022\024bgs.protocol.club.v1\032%"
    "global_extensions/field_options.proto\032\021c"
    "lub_member.proto\032#api/client/v2/attribut"
    "e_types.proto\"\201\001\n\rAddBanOptions\0221\n\ttarge"
    "t_id\030\001 \001(\0132\036.bgs.protocol.club.v1.Member"
    "Id\022-\n\tattribute\030\002 \003(\0132\032.bgs.protocol.v2."
    "Attribute\022\016\n\006reason\030\003 \001(\t\"\341\001\n\007ClubBan\022*\n"
    "\002id\030\001 \001(\0132\036.bgs.protocol.club.v1.MemberI"
    "d\022\032\n\nbattle_tag\030\002 \001(\tB\006\202\371+\002\010\001\0228\n\007creator"
    "\030\003 \001(\0132\'.bgs.protocol.club.v1.MemberDesc"
    "ription\022-\n\tattribute\030\004 \003(\0132\032.bgs.protoco"
    "l.v2.Attribute\022\016\n\006reason\030\005 \001(\t\022\025\n\rcreati"
    "on_time\030\006 \001(\004B\002H\002", 497);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "club_ban.proto", &protobuf_RegisterTypes);
  AddBanOptions::default_instance_ = new AddBanOptions();
  ClubBan::default_instance_ = new ClubBan();
  AddBanOptions::default_instance_->InitAsDefaultInstance();
  ClubBan::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_club_5fban_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_club_5fban_2eproto {
  StaticDescriptorInitializer_club_5fban_2eproto() {
    protobuf_AddDesc_club_5fban_2eproto();
  }
} static_descriptor_initializer_club_5fban_2eproto_;
// ===================================================================

#ifndef _MSC_VER
const int AddBanOptions::kTargetIdFieldNumber;
const int AddBanOptions::kAttributeFieldNumber;
const int AddBanOptions::kReasonFieldNumber;
#endif  // !_MSC_VER

AddBanOptions::AddBanOptions()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.AddBanOptions)
}

void AddBanOptions::InitAsDefaultInstance() {
  target_id_ = const_cast< ::bgs::protocol::club::v1::MemberId*>(&::bgs::protocol::club::v1::MemberId::default_instance());
}

AddBanOptions::AddBanOptions(const AddBanOptions& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.AddBanOptions)
}

void AddBanOptions::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  target_id_ = NULL;
  reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddBanOptions::~AddBanOptions() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.AddBanOptions)
  SharedDtor();
}

void AddBanOptions::SharedDtor() {
  if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reason_;
  }
  if (this != default_instance_) {
    delete target_id_;
  }
}

void AddBanOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddBanOptions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddBanOptions_descriptor_;
}

const AddBanOptions& AddBanOptions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_club_5fban_2eproto();
  return *default_instance_;
}

AddBanOptions* AddBanOptions::default_instance_ = NULL;

AddBanOptions* AddBanOptions::New() const {
  return new AddBanOptions;
}

void AddBanOptions::Swap(AddBanOptions* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata AddBanOptions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddBanOptions_descriptor_;
  metadata.reflection = AddBanOptions_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int ClubBan::kIdFieldNumber;
const int ClubBan::kBattleTagFieldNumber;
const int ClubBan::kCreatorFieldNumber;
const int ClubBan::kAttributeFieldNumber;
const int ClubBan::kReasonFieldNumber;
const int ClubBan::kCreationTimeFieldNumber;
#endif  // !_MSC_VER

ClubBan::ClubBan()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.ClubBan)
}

void ClubBan::InitAsDefaultInstance() {
  id_ = const_cast< ::bgs::protocol::club::v1::MemberId*>(&::bgs::protocol::club::v1::MemberId::default_instance());
  creator_ = const_cast< ::bgs::protocol::club::v1::MemberDescription*>(&::bgs::protocol::club::v1::MemberDescription::default_instance());
}

ClubBan::ClubBan(const ClubBan& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.ClubBan)
}

void ClubBan::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = NULL;
  battle_tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  creator_ = NULL;
  reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  creation_time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClubBan::~ClubBan() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.ClubBan)
  SharedDtor();
}

void ClubBan::SharedDtor() {
  if (battle_tag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete battle_tag_;
  }
  if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reason_;
  }
  if (this != default_instance_) {
    delete id_;
    delete creator_;
  }
}

void ClubBan::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClubBan::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClubBan_descriptor_;
}

const ClubBan& ClubBan::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_club_5fban_2eproto();
  return *default_instance_;
}

ClubBan* ClubBan::default_instance_ = NULL;

ClubBan* ClubBan::New() const {
  return new ClubBan;
}

void ClubBan::Swap(ClubBan* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata ClubBan::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClubBan_descriptor_;
  metadata.reflection = ClubBan_reflection_;
  return metadata;
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace club
}  // namespace protocol
}  // namespace bgs

// @@protoc_insertion_point(global_scope)
