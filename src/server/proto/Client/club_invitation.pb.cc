// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: club_invitation.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "club_invitation.pb.h"

#include <algorithm>
#include <utility>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
#include "Log.h"
// @@protoc_insertion_point(includes)

namespace bgs {
namespace protocol {
namespace club {
namespace v1 {

namespace {

const ::google::protobuf::Descriptor* ClubSlot_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClubSlot_reflection_ = NULL;
const ::google::protobuf::Descriptor* SendInvitationOptions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SendInvitationOptions_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClubInvitation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClubInvitation_reflection_ = NULL;
const ::google::protobuf::Descriptor* SendSuggestionOptions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SendSuggestionOptions_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClubSuggestion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClubSuggestion_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateTicketOptions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateTicketOptions_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClubTicket_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClubTicket_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_club_5finvitation_2eproto() {
  protobuf_AddDesc_club_5finvitation_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "club_invitation.proto");
  GOOGLE_CHECK(file != NULL);
  ClubSlot_descriptor_ = file->message_type(0);
  static const int ClubSlot_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubSlot, role_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubSlot, default_stream_id_),
  };
  ClubSlot_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClubSlot_descriptor_,
      ClubSlot::default_instance_,
      ClubSlot_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubSlot, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubSlot, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClubSlot));
  SendInvitationOptions_descriptor_ = file->message_type(1);
  static const int SendInvitationOptions_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendInvitationOptions, target_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendInvitationOptions, slot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendInvitationOptions, attribute_),
  };
  SendInvitationOptions_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SendInvitationOptions_descriptor_,
      SendInvitationOptions::default_instance_,
      SendInvitationOptions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendInvitationOptions, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendInvitationOptions, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SendInvitationOptions));
  ClubInvitation_descriptor_ = file->message_type(2);
  static const int ClubInvitation_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubInvitation, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubInvitation, inviter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubInvitation, invitee_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubInvitation, club_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubInvitation, slot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubInvitation, attribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubInvitation, creation_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubInvitation, expiration_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubInvitation, suggester_),
  };
  ClubInvitation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClubInvitation_descriptor_,
      ClubInvitation::default_instance_,
      ClubInvitation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubInvitation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubInvitation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClubInvitation));
  SendSuggestionOptions_descriptor_ = file->message_type(3);
  static const int SendSuggestionOptions_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendSuggestionOptions, target_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendSuggestionOptions, slot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendSuggestionOptions, attribute_),
  };
  SendSuggestionOptions_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SendSuggestionOptions_descriptor_,
      SendSuggestionOptions::default_instance_,
      SendSuggestionOptions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendSuggestionOptions, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendSuggestionOptions, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SendSuggestionOptions));
  ClubSuggestion_descriptor_ = file->message_type(4);
  static const int ClubSuggestion_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubSuggestion, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubSuggestion, club_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubSuggestion, suggester_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubSuggestion, suggestee_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubSuggestion, slot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubSuggestion, attribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubSuggestion, creation_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubSuggestion, expiration_time_),
  };
  ClubSuggestion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClubSuggestion_descriptor_,
      ClubSuggestion::default_instance_,
      ClubSuggestion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubSuggestion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubSuggestion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClubSuggestion));
  CreateTicketOptions_descriptor_ = file->message_type(5);
  static const int CreateTicketOptions_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTicketOptions, slot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTicketOptions, attribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTicketOptions, allowed_redeem_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTicketOptions, expiration_time_),
  };
  CreateTicketOptions_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateTicketOptions_descriptor_,
      CreateTicketOptions::default_instance_,
      CreateTicketOptions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTicketOptions, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTicketOptions, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateTicketOptions));
  ClubTicket_descriptor_ = file->message_type(6);
  static const int ClubTicket_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubTicket, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubTicket, creator_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubTicket, club_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubTicket, slot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubTicket, attribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubTicket, current_redeem_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubTicket, allowed_redeem_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubTicket, creation_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubTicket, expiration_time_),
  };
  ClubTicket_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClubTicket_descriptor_,
      ClubTicket::default_instance_,
      ClubTicket_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubTicket, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubTicket, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClubTicket));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_club_5finvitation_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClubSlot_descriptor_, &ClubSlot::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SendInvitationOptions_descriptor_, &SendInvitationOptions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClubInvitation_descriptor_, &ClubInvitation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SendSuggestionOptions_descriptor_, &SendSuggestionOptions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClubSuggestion_descriptor_, &ClubSuggestion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateTicketOptions_descriptor_, &CreateTicketOptions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClubTicket_descriptor_, &ClubTicket::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_club_5finvitation_2eproto() {
  delete ClubSlot::default_instance_;
  delete ClubSlot_reflection_;
  delete SendInvitationOptions::default_instance_;
  delete SendInvitationOptions_reflection_;
  delete ClubInvitation::default_instance_;
  delete ClubInvitation_reflection_;
  delete SendSuggestionOptions::default_instance_;
  delete SendSuggestionOptions_reflection_;
  delete ClubSuggestion::default_instance_;
  delete ClubSuggestion_reflection_;
  delete CreateTicketOptions::default_instance_;
  delete CreateTicketOptions_reflection_;
  delete ClubTicket::default_instance_;
  delete ClubTicket_reflection_;
}

void protobuf_AddDesc_club_5finvitation_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::bgs::protocol::club::v1::protobuf_AddDesc_club_5fcore_2eproto();
  ::bgs::protocol::club::v1::protobuf_AddDesc_club_5fmember_2eproto();
  ::bgs::protocol::v2::protobuf_AddDesc_api_2fclient_2fv2_2fattribute_5ftypes_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025club_invitation.proto\022\024bgs.protocol.cl"
    "ub.v1\032\017club_core.proto\032\021club_member.prot"
    "o\032#api/client/v2/attribute_types.proto\"3"
    "\n\010ClubSlot\022\014\n\004role\030\001 \001(\r\022\031\n\021default_stre"
    "am_id\030\002 \001(\004\"\247\001\n\025SendInvitationOptions\0221\n"
    "\ttarget_id\030\001 \001(\0132\036.bgs.protocol.club.v1."
    "MemberId\022,\n\004slot\030\002 \001(\0132\036.bgs.protocol.cl"
    "ub.v1.ClubSlot\022-\n\tattribute\030\003 \003(\0132\032.bgs."
    "protocol.v2.Attribute\"\216\003\n\016ClubInvitation"
    "\022\n\n\002id\030\001 \001(\006\0228\n\007inviter\030\002 \001(\0132\'.bgs.prot"
    "ocol.club.v1.MemberDescription\0228\n\007invite"
    "e\030\003 \001(\0132\'.bgs.protocol.club.v1.MemberDes"
    "cription\0223\n\004club\030\004 \001(\0132%.bgs.protocol.cl"
    "ub.v1.ClubDescription\022,\n\004slot\030\005 \001(\0132\036.bg"
    "s.protocol.club.v1.ClubSlot\022-\n\tattribute"
    "\030\006 \003(\0132\032.bgs.protocol.v2.Attribute\022\025\n\rcr"
    "eation_time\030\007 \001(\004\022\027\n\017expiration_time\030\010 \001"
    "(\004\022:\n\tsuggester\030\t \001(\0132\'.bgs.protocol.clu"
    "b.v1.MemberDescription\"\247\001\n\025SendSuggestio"
    "nOptions\0221\n\ttarget_id\030\001 \001(\0132\036.bgs.protoc"
    "ol.club.v1.MemberId\022,\n\004slot\030\002 \001(\0132\036.bgs."
    "protocol.club.v1.ClubSlot\022-\n\tattribute\030\003"
    " \003(\0132\032.bgs.protocol.v2.Attribute\"\262\002\n\016Clu"
    "bSuggestion\022\n\n\002id\030\001 \001(\006\022\017\n\007club_id\030\002 \001(\004"
    "\022:\n\tsuggester\030\003 \001(\0132\'.bgs.protocol.club."
    "v1.MemberDescription\022:\n\tsuggestee\030\004 \001(\0132"
    "\'.bgs.protocol.club.v1.MemberDescription"
    "\022,\n\004slot\030\005 \001(\0132\036.bgs.protocol.club.v1.Cl"
    "ubSlot\022-\n\tattribute\030\006 \003(\0132\032.bgs.protocol"
    ".v2.Attribute\022\025\n\rcreation_time\030\007 \001(\004\022\027\n\017"
    "expiration_time\030\010 \001(\004\"\251\001\n\023CreateTicketOp"
    "tions\022,\n\004slot\030\001 \001(\0132\036.bgs.protocol.club."
    "v1.ClubSlot\022-\n\tattribute\030\002 \003(\0132\032.bgs.pro"
    "tocol.v2.Attribute\022\034\n\024allowed_redeem_cou"
    "nt\030\003 \001(\r\022\027\n\017expiration_time\030\004 \001(\004\"\320\002\n\nCl"
    "ubTicket\022\n\n\002id\030\001 \001(\t\0228\n\007creator\030\002 \001(\0132\'."
    "bgs.protocol.club.v1.MemberDescription\0223"
    "\n\004club\030\003 \001(\0132%.bgs.protocol.club.v1.Club"
    "Description\022,\n\004slot\030\004 \001(\0132\036.bgs.protocol"
    ".club.v1.ClubSlot\022-\n\tattribute\030\005 \003(\0132\032.b"
    "gs.protocol.v2.Attribute\022\034\n\024current_rede"
    "em_count\030\006 \001(\r\022\034\n\024allowed_redeem_count\030\007"
    " \001(\r\022\025\n\rcreation_time\030\010 \001(\004\022\027\n\017expiratio"
    "n_time\030\t \001(\004B\002H\001", 1736);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "club_invitation.proto", &protobuf_RegisterTypes);
  ClubSlot::default_instance_ = new ClubSlot();
  SendInvitationOptions::default_instance_ = new SendInvitationOptions();
  ClubInvitation::default_instance_ = new ClubInvitation();
  SendSuggestionOptions::default_instance_ = new SendSuggestionOptions();
  ClubSuggestion::default_instance_ = new ClubSuggestion();
  CreateTicketOptions::default_instance_ = new CreateTicketOptions();
  ClubTicket::default_instance_ = new ClubTicket();
  ClubSlot::default_instance_->InitAsDefaultInstance();
  SendInvitationOptions::default_instance_->InitAsDefaultInstance();
  ClubInvitation::default_instance_->InitAsDefaultInstance();
  SendSuggestionOptions::default_instance_->InitAsDefaultInstance();
  ClubSuggestion::default_instance_->InitAsDefaultInstance();
  CreateTicketOptions::default_instance_->InitAsDefaultInstance();
  ClubTicket::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_club_5finvitation_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_club_5finvitation_2eproto {
  StaticDescriptorInitializer_club_5finvitation_2eproto() {
    protobuf_AddDesc_club_5finvitation_2eproto();
  }
} static_descriptor_initializer_club_5finvitation_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ClubSlot::kRoleFieldNumber;
const int ClubSlot::kDefaultStreamIdFieldNumber;
#endif  // !_MSC_VER

ClubSlot::ClubSlot()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.ClubSlot)
}

void ClubSlot::InitAsDefaultInstance() {
}

ClubSlot::ClubSlot(const ClubSlot& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.ClubSlot)
}

void ClubSlot::SharedCtor() {
  _cached_size_ = 0;
  role_ = 0u;
  default_stream_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClubSlot::~ClubSlot() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.ClubSlot)
  SharedDtor();
}

void ClubSlot::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClubSlot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClubSlot::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClubSlot_descriptor_;
}

const ClubSlot& ClubSlot::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_club_5finvitation_2eproto();
  return *default_instance_;
}

ClubSlot* ClubSlot::default_instance_ = NULL;

ClubSlot* ClubSlot::New() const {
  return new ClubSlot;
}

void ClubSlot::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ClubSlot*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(default_stream_id_, role_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClubSlot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bgs.protocol.club.v1.ClubSlot)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 role = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_)));
          set_has_role();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_default_stream_id;
        break;
      }

      // optional uint64 default_stream_id = 2;
      case 2: {
        if (tag == 16) {
         parse_default_stream_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &default_stream_id_)));
          set_has_default_stream_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bgs.protocol.club.v1.ClubSlot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bgs.protocol.club.v1.ClubSlot)
  return false;
#undef DO_
}

void ClubSlot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bgs.protocol.club.v1.ClubSlot)
  // optional uint32 role = 1;
  if (has_role()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role(), output);
  }

  // optional uint64 default_stream_id = 2;
  if (has_default_stream_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->default_stream_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bgs.protocol.club.v1.ClubSlot)
}

::google::protobuf::uint8* ClubSlot::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.ClubSlot)
  // optional uint32 role = 1;
  if (has_role()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role(), target);
  }

  // optional uint64 default_stream_id = 2;
  if (has_default_stream_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->default_stream_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.ClubSlot)
  return target;
}

int ClubSlot::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 role = 1;
    if (has_role()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role());
    }

    // optional uint64 default_stream_id = 2;
    if (has_default_stream_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->default_stream_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClubSlot::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClubSlot* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClubSlot*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClubSlot::MergeFrom(const ClubSlot& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role()) {
      set_role(from.role());
    }
    if (from.has_default_stream_id()) {
      set_default_stream_id(from.default_stream_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClubSlot::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClubSlot::CopyFrom(const ClubSlot& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClubSlot::IsInitialized() const {

  return true;
}

void ClubSlot::Swap(ClubSlot* other) {
  if (other != this) {
    std::swap(role_, other->role_);
    std::swap(default_stream_id_, other->default_stream_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClubSlot::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClubSlot_descriptor_;
  metadata.reflection = ClubSlot_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SendInvitationOptions::kTargetIdFieldNumber;
const int SendInvitationOptions::kSlotFieldNumber;
const int SendInvitationOptions::kAttributeFieldNumber;
#endif  // !_MSC_VER

SendInvitationOptions::SendInvitationOptions()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.SendInvitationOptions)
}

void SendInvitationOptions::InitAsDefaultInstance() {
  target_id_ = const_cast< ::bgs::protocol::club::v1::MemberId*>(&::bgs::protocol::club::v1::MemberId::default_instance());
  slot_ = const_cast< ::bgs::protocol::club::v1::ClubSlot*>(&::bgs::protocol::club::v1::ClubSlot::default_instance());
}

SendInvitationOptions::SendInvitationOptions(const SendInvitationOptions& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.SendInvitationOptions)
}

void SendInvitationOptions::SharedCtor() {
  _cached_size_ = 0;
  target_id_ = NULL;
  slot_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SendInvitationOptions::~SendInvitationOptions() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.SendInvitationOptions)
  SharedDtor();
}

void SendInvitationOptions::SharedDtor() {
  if (this != default_instance_) {
    delete target_id_;
    delete slot_;
  }
}

void SendInvitationOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendInvitationOptions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SendInvitationOptions_descriptor_;
}

const SendInvitationOptions& SendInvitationOptions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_club_5finvitation_2eproto();
  return *default_instance_;
}

SendInvitationOptions* SendInvitationOptions::default_instance_ = NULL;

SendInvitationOptions* SendInvitationOptions::New() const {
  return new SendInvitationOptions;
}

void SendInvitationOptions::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_target_id()) {
      if (target_id_ != NULL) target_id_->::bgs::protocol::club::v1::MemberId::Clear();
    }
    if (has_slot()) {
      if (slot_ != NULL) slot_->::bgs::protocol::club::v1::ClubSlot::Clear();
    }
  }
  attribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SendInvitationOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bgs.protocol.club.v1.SendInvitationOptions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .bgs.protocol.club.v1.MemberId target_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_target_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_slot;
        break;
      }

      // optional .bgs.protocol.club.v1.ClubSlot slot = 2;
      case 2: {
        if (tag == 18) {
         parse_slot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_slot()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_attribute;
        break;
      }

      // repeated .bgs.protocol.v2.Attribute attribute = 3;
      case 3: {
        if (tag == 26) {
         parse_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attribute()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_attribute;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bgs.protocol.club.v1.SendInvitationOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bgs.protocol.club.v1.SendInvitationOptions)
  return false;
#undef DO_
}

void SendInvitationOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bgs.protocol.club.v1.SendInvitationOptions)
  // optional .bgs.protocol.club.v1.MemberId target_id = 1;
  if (has_target_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->target_id(), output);
  }

  // optional .bgs.protocol.club.v1.ClubSlot slot = 2;
  if (has_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->slot(), output);
  }

  // repeated .bgs.protocol.v2.Attribute attribute = 3;
  for (int i = 0; i < this->attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->attribute(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bgs.protocol.club.v1.SendInvitationOptions)
}

::google::protobuf::uint8* SendInvitationOptions::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.SendInvitationOptions)
  // optional .bgs.protocol.club.v1.MemberId target_id = 1;
  if (has_target_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->target_id(), target);
  }

  // optional .bgs.protocol.club.v1.ClubSlot slot = 2;
  if (has_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->slot(), target);
  }

  // repeated .bgs.protocol.v2.Attribute attribute = 3;
  for (int i = 0; i < this->attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->attribute(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.SendInvitationOptions)
  return target;
}

int SendInvitationOptions::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .bgs.protocol.club.v1.MemberId target_id = 1;
    if (has_target_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->target_id());
    }

    // optional .bgs.protocol.club.v1.ClubSlot slot = 2;
    if (has_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->slot());
    }

  }
  // repeated .bgs.protocol.v2.Attribute attribute = 3;
  total_size += 1 * this->attribute_size();
  for (int i = 0; i < this->attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attribute(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendInvitationOptions::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SendInvitationOptions* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SendInvitationOptions*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SendInvitationOptions::MergeFrom(const SendInvitationOptions& from) {
  GOOGLE_CHECK_NE(&from, this);
  attribute_.MergeFrom(from.attribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_target_id()) {
      mutable_target_id()->::bgs::protocol::club::v1::MemberId::MergeFrom(from.target_id());
    }
    if (from.has_slot()) {
      mutable_slot()->::bgs::protocol::club::v1::ClubSlot::MergeFrom(from.slot());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SendInvitationOptions::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendInvitationOptions::CopyFrom(const SendInvitationOptions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendInvitationOptions::IsInitialized() const {

  if (has_target_id()) {
    if (!this->target_id().IsInitialized()) return false;
  }
  return true;
}

void SendInvitationOptions::Swap(SendInvitationOptions* other) {
  if (other != this) {
    std::swap(target_id_, other->target_id_);
    std::swap(slot_, other->slot_);
    attribute_.Swap(&other->attribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SendInvitationOptions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SendInvitationOptions_descriptor_;
  metadata.reflection = SendInvitationOptions_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClubInvitation::kIdFieldNumber;
const int ClubInvitation::kInviterFieldNumber;
const int ClubInvitation::kInviteeFieldNumber;
const int ClubInvitation::kClubFieldNumber;
const int ClubInvitation::kSlotFieldNumber;
const int ClubInvitation::kAttributeFieldNumber;
const int ClubInvitation::kCreationTimeFieldNumber;
const int ClubInvitation::kExpirationTimeFieldNumber;
const int ClubInvitation::kSuggesterFieldNumber;
#endif  // !_MSC_VER

ClubInvitation::ClubInvitation()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.ClubInvitation)
}

void ClubInvitation::InitAsDefaultInstance() {
  inviter_ = const_cast< ::bgs::protocol::club::v1::MemberDescription*>(&::bgs::protocol::club::v1::MemberDescription::default_instance());
  invitee_ = const_cast< ::bgs::protocol::club::v1::MemberDescription*>(&::bgs::protocol::club::v1::MemberDescription::default_instance());
  club_ = const_cast< ::bgs::protocol::club::v1::ClubDescription*>(&::bgs::protocol::club::v1::ClubDescription::default_instance());
  slot_ = const_cast< ::bgs::protocol::club::v1::ClubSlot*>(&::bgs::protocol::club::v1::ClubSlot::default_instance());
  suggester_ = const_cast< ::bgs::protocol::club::v1::MemberDescription*>(&::bgs::protocol::club::v1::MemberDescription::default_instance());
}

ClubInvitation::ClubInvitation(const ClubInvitation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.ClubInvitation)
}

void ClubInvitation::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  inviter_ = NULL;
  invitee_ = NULL;
  club_ = NULL;
  slot_ = NULL;
  creation_time_ = GOOGLE_ULONGLONG(0);
  expiration_time_ = GOOGLE_ULONGLONG(0);
  suggester_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClubInvitation::~ClubInvitation() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.ClubInvitation)
  SharedDtor();
}

void ClubInvitation::SharedDtor() {
  if (this != default_instance_) {
    delete inviter_;
    delete invitee_;
    delete club_;
    delete slot_;
    delete suggester_;
  }
}

void ClubInvitation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClubInvitation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClubInvitation_descriptor_;
}

const ClubInvitation& ClubInvitation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_club_5finvitation_2eproto();
  return *default_instance_;
}

ClubInvitation* ClubInvitation::default_instance_ = NULL;

ClubInvitation* ClubInvitation::New() const {
  return new ClubInvitation;
}

void ClubInvitation::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ClubInvitation*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 223) {
    ZR_(creation_time_, expiration_time_);
    id_ = GOOGLE_ULONGLONG(0);
    if (has_inviter()) {
      if (inviter_ != NULL) inviter_->::bgs::protocol::club::v1::MemberDescription::Clear();
    }
    if (has_invitee()) {
      if (invitee_ != NULL) invitee_->::bgs::protocol::club::v1::MemberDescription::Clear();
    }
    if (has_club()) {
      if (club_ != NULL) club_->::bgs::protocol::club::v1::ClubDescription::Clear();
    }
    if (has_slot()) {
      if (slot_ != NULL) slot_->::bgs::protocol::club::v1::ClubSlot::Clear();
    }
  }
  if (has_suggester()) {
    if (suggester_ != NULL) suggester_->::bgs::protocol::club::v1::MemberDescription::Clear();
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  attribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClubInvitation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bgs.protocol.club.v1.ClubInvitation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 id = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_inviter;
        break;
      }

      // optional .bgs.protocol.club.v1.MemberDescription inviter = 2;
      case 2: {
        if (tag == 18) {
         parse_inviter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_inviter()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_invitee;
        break;
      }

      // optional .bgs.protocol.club.v1.MemberDescription invitee = 3;
      case 3: {
        if (tag == 26) {
         parse_invitee:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_invitee()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_club;
        break;
      }

      // optional .bgs.protocol.club.v1.ClubDescription club = 4;
      case 4: {
        if (tag == 34) {
         parse_club:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_club()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_slot;
        break;
      }

      // optional .bgs.protocol.club.v1.ClubSlot slot = 5;
      case 5: {
        if (tag == 42) {
         parse_slot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_slot()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_attribute;
        break;
      }

      // repeated .bgs.protocol.v2.Attribute attribute = 6;
      case 6: {
        if (tag == 50) {
         parse_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attribute()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_attribute;
        if (input->ExpectTag(56)) goto parse_creation_time;
        break;
      }

      // optional uint64 creation_time = 7;
      case 7: {
        if (tag == 56) {
         parse_creation_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &creation_time_)));
          set_has_creation_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_expiration_time;
        break;
      }

      // optional uint64 expiration_time = 8;
      case 8: {
        if (tag == 64) {
         parse_expiration_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &expiration_time_)));
          set_has_expiration_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_suggester;
        break;
      }

      // optional .bgs.protocol.club.v1.MemberDescription suggester = 9;
      case 9: {
        if (tag == 74) {
         parse_suggester:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_suggester()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bgs.protocol.club.v1.ClubInvitation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bgs.protocol.club.v1.ClubInvitation)
  return false;
#undef DO_
}

void ClubInvitation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bgs.protocol.club.v1.ClubInvitation)
  // optional fixed64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->id(), output);
  }

  // optional .bgs.protocol.club.v1.MemberDescription inviter = 2;
  if (has_inviter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->inviter(), output);
  }

  // optional .bgs.protocol.club.v1.MemberDescription invitee = 3;
  if (has_invitee()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->invitee(), output);
  }

  // optional .bgs.protocol.club.v1.ClubDescription club = 4;
  if (has_club()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->club(), output);
  }

  // optional .bgs.protocol.club.v1.ClubSlot slot = 5;
  if (has_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->slot(), output);
  }

  // repeated .bgs.protocol.v2.Attribute attribute = 6;
  for (int i = 0; i < this->attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->attribute(i), output);
  }

  // optional uint64 creation_time = 7;
  if (has_creation_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->creation_time(), output);
  }

  // optional uint64 expiration_time = 8;
  if (has_expiration_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->expiration_time(), output);
  }

  // optional .bgs.protocol.club.v1.MemberDescription suggester = 9;
  if (has_suggester()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->suggester(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bgs.protocol.club.v1.ClubInvitation)
}

::google::protobuf::uint8* ClubInvitation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.ClubInvitation)
  // optional fixed64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->id(), target);
  }

  // optional .bgs.protocol.club.v1.MemberDescription inviter = 2;
  if (has_inviter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->inviter(), target);
  }

  // optional .bgs.protocol.club.v1.MemberDescription invitee = 3;
  if (has_invitee()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->invitee(), target);
  }

  // optional .bgs.protocol.club.v1.ClubDescription club = 4;
  if (has_club()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->club(), target);
  }

  // optional .bgs.protocol.club.v1.ClubSlot slot = 5;
  if (has_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->slot(), target);
  }

  // repeated .bgs.protocol.v2.Attribute attribute = 6;
  for (int i = 0; i < this->attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->attribute(i), target);
  }

  // optional uint64 creation_time = 7;
  if (has_creation_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->creation_time(), target);
  }

  // optional uint64 expiration_time = 8;
  if (has_expiration_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->expiration_time(), target);
  }

  // optional .bgs.protocol.club.v1.MemberDescription suggester = 9;
  if (has_suggester()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->suggester(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.ClubInvitation)
  return target;
}

int ClubInvitation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 id = 1;
    if (has_id()) {
      total_size += 1 + 8;
    }

    // optional .bgs.protocol.club.v1.MemberDescription inviter = 2;
    if (has_inviter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->inviter());
    }

    // optional .bgs.protocol.club.v1.MemberDescription invitee = 3;
    if (has_invitee()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->invitee());
    }

    // optional .bgs.protocol.club.v1.ClubDescription club = 4;
    if (has_club()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->club());
    }

    // optional .bgs.protocol.club.v1.ClubSlot slot = 5;
    if (has_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->slot());
    }

    // optional uint64 creation_time = 7;
    if (has_creation_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->creation_time());
    }

    // optional uint64 expiration_time = 8;
    if (has_expiration_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->expiration_time());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .bgs.protocol.club.v1.MemberDescription suggester = 9;
    if (has_suggester()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->suggester());
    }

  }
  // repeated .bgs.protocol.v2.Attribute attribute = 6;
  total_size += 1 * this->attribute_size();
  for (int i = 0; i < this->attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attribute(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClubInvitation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClubInvitation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClubInvitation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClubInvitation::MergeFrom(const ClubInvitation& from) {
  GOOGLE_CHECK_NE(&from, this);
  attribute_.MergeFrom(from.attribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_inviter()) {
      mutable_inviter()->::bgs::protocol::club::v1::MemberDescription::MergeFrom(from.inviter());
    }
    if (from.has_invitee()) {
      mutable_invitee()->::bgs::protocol::club::v1::MemberDescription::MergeFrom(from.invitee());
    }
    if (from.has_club()) {
      mutable_club()->::bgs::protocol::club::v1::ClubDescription::MergeFrom(from.club());
    }
    if (from.has_slot()) {
      mutable_slot()->::bgs::protocol::club::v1::ClubSlot::MergeFrom(from.slot());
    }
    if (from.has_creation_time()) {
      set_creation_time(from.creation_time());
    }
    if (from.has_expiration_time()) {
      set_expiration_time(from.expiration_time());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_suggester()) {
      mutable_suggester()->::bgs::protocol::club::v1::MemberDescription::MergeFrom(from.suggester());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClubInvitation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClubInvitation::CopyFrom(const ClubInvitation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClubInvitation::IsInitialized() const {

  if (has_inviter()) {
    if (!this->inviter().IsInitialized()) return false;
  }
  if (has_invitee()) {
    if (!this->invitee().IsInitialized()) return false;
  }
  if (has_club()) {
    if (!this->club().IsInitialized()) return false;
  }
  if (has_suggester()) {
    if (!this->suggester().IsInitialized()) return false;
  }
  return true;
}

void ClubInvitation::Swap(ClubInvitation* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(inviter_, other->inviter_);
    std::swap(invitee_, other->invitee_);
    std::swap(club_, other->club_);
    std::swap(slot_, other->slot_);
    attribute_.Swap(&other->attribute_);
    std::swap(creation_time_, other->creation_time_);
    std::swap(expiration_time_, other->expiration_time_);
    std::swap(suggester_, other->suggester_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClubInvitation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClubInvitation_descriptor_;
  metadata.reflection = ClubInvitation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SendSuggestionOptions::kTargetIdFieldNumber;
const int SendSuggestionOptions::kSlotFieldNumber;
const int SendSuggestionOptions::kAttributeFieldNumber;
#endif  // !_MSC_VER

SendSuggestionOptions::SendSuggestionOptions()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.SendSuggestionOptions)
}

void SendSuggestionOptions::InitAsDefaultInstance() {
  target_id_ = const_cast< ::bgs::protocol::club::v1::MemberId*>(&::bgs::protocol::club::v1::MemberId::default_instance());
  slot_ = const_cast< ::bgs::protocol::club::v1::ClubSlot*>(&::bgs::protocol::club::v1::ClubSlot::default_instance());
}

SendSuggestionOptions::SendSuggestionOptions(const SendSuggestionOptions& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.SendSuggestionOptions)
}

void SendSuggestionOptions::SharedCtor() {
  _cached_size_ = 0;
  target_id_ = NULL;
  slot_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SendSuggestionOptions::~SendSuggestionOptions() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.SendSuggestionOptions)
  SharedDtor();
}

void SendSuggestionOptions::SharedDtor() {
  if (this != default_instance_) {
    delete target_id_;
    delete slot_;
  }
}

void SendSuggestionOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendSuggestionOptions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SendSuggestionOptions_descriptor_;
}

const SendSuggestionOptions& SendSuggestionOptions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_club_5finvitation_2eproto();
  return *default_instance_;
}

SendSuggestionOptions* SendSuggestionOptions::default_instance_ = NULL;

SendSuggestionOptions* SendSuggestionOptions::New() const {
  return new SendSuggestionOptions;
}

void SendSuggestionOptions::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_target_id()) {
      if (target_id_ != NULL) target_id_->::bgs::protocol::club::v1::MemberId::Clear();
    }
    if (has_slot()) {
      if (slot_ != NULL) slot_->::bgs::protocol::club::v1::ClubSlot::Clear();
    }
  }
  attribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SendSuggestionOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bgs.protocol.club.v1.SendSuggestionOptions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .bgs.protocol.club.v1.MemberId target_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_target_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_slot;
        break;
      }

      // optional .bgs.protocol.club.v1.ClubSlot slot = 2;
      case 2: {
        if (tag == 18) {
         parse_slot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_slot()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_attribute;
        break;
      }

      // repeated .bgs.protocol.v2.Attribute attribute = 3;
      case 3: {
        if (tag == 26) {
         parse_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attribute()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_attribute;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bgs.protocol.club.v1.SendSuggestionOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bgs.protocol.club.v1.SendSuggestionOptions)
  return false;
#undef DO_
}

void SendSuggestionOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bgs.protocol.club.v1.SendSuggestionOptions)
  // optional .bgs.protocol.club.v1.MemberId target_id = 1;
  if (has_target_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->target_id(), output);
  }

  // optional .bgs.protocol.club.v1.ClubSlot slot = 2;
  if (has_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->slot(), output);
  }

  // repeated .bgs.protocol.v2.Attribute attribute = 3;
  for (int i = 0; i < this->attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->attribute(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bgs.protocol.club.v1.SendSuggestionOptions)
}

::google::protobuf::uint8* SendSuggestionOptions::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.SendSuggestionOptions)
  // optional .bgs.protocol.club.v1.MemberId target_id = 1;
  if (has_target_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->target_id(), target);
  }

  // optional .bgs.protocol.club.v1.ClubSlot slot = 2;
  if (has_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->slot(), target);
  }

  // repeated .bgs.protocol.v2.Attribute attribute = 3;
  for (int i = 0; i < this->attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->attribute(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.SendSuggestionOptions)
  return target;
}

int SendSuggestionOptions::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .bgs.protocol.club.v1.MemberId target_id = 1;
    if (has_target_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->target_id());
    }

    // optional .bgs.protocol.club.v1.ClubSlot slot = 2;
    if (has_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->slot());
    }

  }
  // repeated .bgs.protocol.v2.Attribute attribute = 3;
  total_size += 1 * this->attribute_size();
  for (int i = 0; i < this->attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attribute(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendSuggestionOptions::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SendSuggestionOptions* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SendSuggestionOptions*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SendSuggestionOptions::MergeFrom(const SendSuggestionOptions& from) {
  GOOGLE_CHECK_NE(&from, this);
  attribute_.MergeFrom(from.attribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_target_id()) {
      mutable_target_id()->::bgs::protocol::club::v1::MemberId::MergeFrom(from.target_id());
    }
    if (from.has_slot()) {
      mutable_slot()->::bgs::protocol::club::v1::ClubSlot::MergeFrom(from.slot());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SendSuggestionOptions::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendSuggestionOptions::CopyFrom(const SendSuggestionOptions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendSuggestionOptions::IsInitialized() const {

  if (has_target_id()) {
    if (!this->target_id().IsInitialized()) return false;
  }
  return true;
}

void SendSuggestionOptions::Swap(SendSuggestionOptions* other) {
  if (other != this) {
    std::swap(target_id_, other->target_id_);
    std::swap(slot_, other->slot_);
    attribute_.Swap(&other->attribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SendSuggestionOptions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SendSuggestionOptions_descriptor_;
  metadata.reflection = SendSuggestionOptions_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClubSuggestion::kIdFieldNumber;
const int ClubSuggestion::kClubIdFieldNumber;
const int ClubSuggestion::kSuggesterFieldNumber;
const int ClubSuggestion::kSuggesteeFieldNumber;
const int ClubSuggestion::kSlotFieldNumber;
const int ClubSuggestion::kAttributeFieldNumber;
const int ClubSuggestion::kCreationTimeFieldNumber;
const int ClubSuggestion::kExpirationTimeFieldNumber;
#endif  // !_MSC_VER

ClubSuggestion::ClubSuggestion()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.ClubSuggestion)
}

void ClubSuggestion::InitAsDefaultInstance() {
  suggester_ = const_cast< ::bgs::protocol::club::v1::MemberDescription*>(&::bgs::protocol::club::v1::MemberDescription::default_instance());
  suggestee_ = const_cast< ::bgs::protocol::club::v1::MemberDescription*>(&::bgs::protocol::club::v1::MemberDescription::default_instance());
  slot_ = const_cast< ::bgs::protocol::club::v1::ClubSlot*>(&::bgs::protocol::club::v1::ClubSlot::default_instance());
}

ClubSuggestion::ClubSuggestion(const ClubSuggestion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.ClubSuggestion)
}

void ClubSuggestion::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  club_id_ = GOOGLE_ULONGLONG(0);
  suggester_ = NULL;
  suggestee_ = NULL;
  slot_ = NULL;
  creation_time_ = GOOGLE_ULONGLONG(0);
  expiration_time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClubSuggestion::~ClubSuggestion() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.ClubSuggestion)
  SharedDtor();
}

void ClubSuggestion::SharedDtor() {
  if (this != default_instance_) {
    delete suggester_;
    delete suggestee_;
    delete slot_;
  }
}

void ClubSuggestion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClubSuggestion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClubSuggestion_descriptor_;
}

const ClubSuggestion& ClubSuggestion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_club_5finvitation_2eproto();
  return *default_instance_;
}

ClubSuggestion* ClubSuggestion::default_instance_ = NULL;

ClubSuggestion* ClubSuggestion::New() const {
  return new ClubSuggestion;
}

void ClubSuggestion::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ClubSuggestion*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 223) {
    ZR_(id_, club_id_);
    ZR_(creation_time_, expiration_time_);
    if (has_suggester()) {
      if (suggester_ != NULL) suggester_->::bgs::protocol::club::v1::MemberDescription::Clear();
    }
    if (has_suggestee()) {
      if (suggestee_ != NULL) suggestee_->::bgs::protocol::club::v1::MemberDescription::Clear();
    }
    if (has_slot()) {
      if (slot_ != NULL) slot_->::bgs::protocol::club::v1::ClubSlot::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  attribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClubSuggestion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bgs.protocol.club.v1.ClubSuggestion)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 id = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_club_id;
        break;
      }

      // optional uint64 club_id = 2;
      case 2: {
        if (tag == 16) {
         parse_club_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &club_id_)));
          set_has_club_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_suggester;
        break;
      }

      // optional .bgs.protocol.club.v1.MemberDescription suggester = 3;
      case 3: {
        if (tag == 26) {
         parse_suggester:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_suggester()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_suggestee;
        break;
      }

      // optional .bgs.protocol.club.v1.MemberDescription suggestee = 4;
      case 4: {
        if (tag == 34) {
         parse_suggestee:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_suggestee()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_slot;
        break;
      }

      // optional .bgs.protocol.club.v1.ClubSlot slot = 5;
      case 5: {
        if (tag == 42) {
         parse_slot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_slot()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_attribute;
        break;
      }

      // repeated .bgs.protocol.v2.Attribute attribute = 6;
      case 6: {
        if (tag == 50) {
         parse_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attribute()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_attribute;
        if (input->ExpectTag(56)) goto parse_creation_time;
        break;
      }

      // optional uint64 creation_time = 7;
      case 7: {
        if (tag == 56) {
         parse_creation_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &creation_time_)));
          set_has_creation_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_expiration_time;
        break;
      }

      // optional uint64 expiration_time = 8;
      case 8: {
        if (tag == 64) {
         parse_expiration_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &expiration_time_)));
          set_has_expiration_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bgs.protocol.club.v1.ClubSuggestion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bgs.protocol.club.v1.ClubSuggestion)
  return false;
#undef DO_
}

void ClubSuggestion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bgs.protocol.club.v1.ClubSuggestion)
  // optional fixed64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->id(), output);
  }

  // optional uint64 club_id = 2;
  if (has_club_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->club_id(), output);
  }

  // optional .bgs.protocol.club.v1.MemberDescription suggester = 3;
  if (has_suggester()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->suggester(), output);
  }

  // optional .bgs.protocol.club.v1.MemberDescription suggestee = 4;
  if (has_suggestee()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->suggestee(), output);
  }

  // optional .bgs.protocol.club.v1.ClubSlot slot = 5;
  if (has_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->slot(), output);
  }

  // repeated .bgs.protocol.v2.Attribute attribute = 6;
  for (int i = 0; i < this->attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->attribute(i), output);
  }

  // optional uint64 creation_time = 7;
  if (has_creation_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->creation_time(), output);
  }

  // optional uint64 expiration_time = 8;
  if (has_expiration_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->expiration_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bgs.protocol.club.v1.ClubSuggestion)
}

::google::protobuf::uint8* ClubSuggestion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.ClubSuggestion)
  // optional fixed64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->id(), target);
  }

  // optional uint64 club_id = 2;
  if (has_club_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->club_id(), target);
  }

  // optional .bgs.protocol.club.v1.MemberDescription suggester = 3;
  if (has_suggester()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->suggester(), target);
  }

  // optional .bgs.protocol.club.v1.MemberDescription suggestee = 4;
  if (has_suggestee()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->suggestee(), target);
  }

  // optional .bgs.protocol.club.v1.ClubSlot slot = 5;
  if (has_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->slot(), target);
  }

  // repeated .bgs.protocol.v2.Attribute attribute = 6;
  for (int i = 0; i < this->attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->attribute(i), target);
  }

  // optional uint64 creation_time = 7;
  if (has_creation_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->creation_time(), target);
  }

  // optional uint64 expiration_time = 8;
  if (has_expiration_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->expiration_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.ClubSuggestion)
  return target;
}

int ClubSuggestion::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 id = 1;
    if (has_id()) {
      total_size += 1 + 8;
    }

    // optional uint64 club_id = 2;
    if (has_club_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->club_id());
    }

    // optional .bgs.protocol.club.v1.MemberDescription suggester = 3;
    if (has_suggester()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->suggester());
    }

    // optional .bgs.protocol.club.v1.MemberDescription suggestee = 4;
    if (has_suggestee()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->suggestee());
    }

    // optional .bgs.protocol.club.v1.ClubSlot slot = 5;
    if (has_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->slot());
    }

    // optional uint64 creation_time = 7;
    if (has_creation_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->creation_time());
    }

    // optional uint64 expiration_time = 8;
    if (has_expiration_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->expiration_time());
    }

  }
  // repeated .bgs.protocol.v2.Attribute attribute = 6;
  total_size += 1 * this->attribute_size();
  for (int i = 0; i < this->attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attribute(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClubSuggestion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClubSuggestion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClubSuggestion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClubSuggestion::MergeFrom(const ClubSuggestion& from) {
  GOOGLE_CHECK_NE(&from, this);
  attribute_.MergeFrom(from.attribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_club_id()) {
      set_club_id(from.club_id());
    }
    if (from.has_suggester()) {
      mutable_suggester()->::bgs::protocol::club::v1::MemberDescription::MergeFrom(from.suggester());
    }
    if (from.has_suggestee()) {
      mutable_suggestee()->::bgs::protocol::club::v1::MemberDescription::MergeFrom(from.suggestee());
    }
    if (from.has_slot()) {
      mutable_slot()->::bgs::protocol::club::v1::ClubSlot::MergeFrom(from.slot());
    }
    if (from.has_creation_time()) {
      set_creation_time(from.creation_time());
    }
    if (from.has_expiration_time()) {
      set_expiration_time(from.expiration_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClubSuggestion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClubSuggestion::CopyFrom(const ClubSuggestion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClubSuggestion::IsInitialized() const {

  if (has_suggester()) {
    if (!this->suggester().IsInitialized()) return false;
  }
  if (has_suggestee()) {
    if (!this->suggestee().IsInitialized()) return false;
  }
  return true;
}

void ClubSuggestion::Swap(ClubSuggestion* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(club_id_, other->club_id_);
    std::swap(suggester_, other->suggester_);
    std::swap(suggestee_, other->suggestee_);
    std::swap(slot_, other->slot_);
    attribute_.Swap(&other->attribute_);
    std::swap(creation_time_, other->creation_time_);
    std::swap(expiration_time_, other->expiration_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClubSuggestion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClubSuggestion_descriptor_;
  metadata.reflection = ClubSuggestion_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateTicketOptions::kSlotFieldNumber;
const int CreateTicketOptions::kAttributeFieldNumber;
const int CreateTicketOptions::kAllowedRedeemCountFieldNumber;
const int CreateTicketOptions::kExpirationTimeFieldNumber;
#endif  // !_MSC_VER

CreateTicketOptions::CreateTicketOptions()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.CreateTicketOptions)
}

void CreateTicketOptions::InitAsDefaultInstance() {
  slot_ = const_cast< ::bgs::protocol::club::v1::ClubSlot*>(&::bgs::protocol::club::v1::ClubSlot::default_instance());
}

CreateTicketOptions::CreateTicketOptions(const CreateTicketOptions& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.CreateTicketOptions)
}

void CreateTicketOptions::SharedCtor() {
  _cached_size_ = 0;
  slot_ = NULL;
  allowed_redeem_count_ = 0u;
  expiration_time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateTicketOptions::~CreateTicketOptions() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.CreateTicketOptions)
  SharedDtor();
}

void CreateTicketOptions::SharedDtor() {
  if (this != default_instance_) {
    delete slot_;
  }
}

void CreateTicketOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateTicketOptions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateTicketOptions_descriptor_;
}

const CreateTicketOptions& CreateTicketOptions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_club_5finvitation_2eproto();
  return *default_instance_;
}

CreateTicketOptions* CreateTicketOptions::default_instance_ = NULL;

CreateTicketOptions* CreateTicketOptions::New() const {
  return new CreateTicketOptions;
}

void CreateTicketOptions::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CreateTicketOptions*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 13) {
    ZR_(expiration_time_, allowed_redeem_count_);
    if (has_slot()) {
      if (slot_ != NULL) slot_->::bgs::protocol::club::v1::ClubSlot::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  attribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateTicketOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bgs.protocol.club.v1.CreateTicketOptions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .bgs.protocol.club.v1.ClubSlot slot = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_slot()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_attribute;
        break;
      }

      // repeated .bgs.protocol.v2.Attribute attribute = 2;
      case 2: {
        if (tag == 18) {
         parse_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attribute()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_attribute;
        if (input->ExpectTag(24)) goto parse_allowed_redeem_count;
        break;
      }

      // optional uint32 allowed_redeem_count = 3;
      case 3: {
        if (tag == 24) {
         parse_allowed_redeem_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &allowed_redeem_count_)));
          set_has_allowed_redeem_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_expiration_time;
        break;
      }

      // optional uint64 expiration_time = 4;
      case 4: {
        if (tag == 32) {
         parse_expiration_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &expiration_time_)));
          set_has_expiration_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bgs.protocol.club.v1.CreateTicketOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bgs.protocol.club.v1.CreateTicketOptions)
  return false;
#undef DO_
}

void CreateTicketOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bgs.protocol.club.v1.CreateTicketOptions)
  // optional .bgs.protocol.club.v1.ClubSlot slot = 1;
  if (has_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->slot(), output);
  }

  // repeated .bgs.protocol.v2.Attribute attribute = 2;
  for (int i = 0; i < this->attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->attribute(i), output);
  }

  // optional uint32 allowed_redeem_count = 3;
  if (has_allowed_redeem_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->allowed_redeem_count(), output);
  }

  // optional uint64 expiration_time = 4;
  if (has_expiration_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->expiration_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bgs.protocol.club.v1.CreateTicketOptions)
}

::google::protobuf::uint8* CreateTicketOptions::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.CreateTicketOptions)
  // optional .bgs.protocol.club.v1.ClubSlot slot = 1;
  if (has_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->slot(), target);
  }

  // repeated .bgs.protocol.v2.Attribute attribute = 2;
  for (int i = 0; i < this->attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->attribute(i), target);
  }

  // optional uint32 allowed_redeem_count = 3;
  if (has_allowed_redeem_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->allowed_redeem_count(), target);
  }

  // optional uint64 expiration_time = 4;
  if (has_expiration_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->expiration_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.CreateTicketOptions)
  return target;
}

int CreateTicketOptions::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .bgs.protocol.club.v1.ClubSlot slot = 1;
    if (has_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->slot());
    }

    // optional uint32 allowed_redeem_count = 3;
    if (has_allowed_redeem_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->allowed_redeem_count());
    }

    // optional uint64 expiration_time = 4;
    if (has_expiration_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->expiration_time());
    }

  }
  // repeated .bgs.protocol.v2.Attribute attribute = 2;
  total_size += 1 * this->attribute_size();
  for (int i = 0; i < this->attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attribute(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateTicketOptions::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateTicketOptions* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateTicketOptions*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateTicketOptions::MergeFrom(const CreateTicketOptions& from) {
  GOOGLE_CHECK_NE(&from, this);
  attribute_.MergeFrom(from.attribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_slot()) {
      mutable_slot()->::bgs::protocol::club::v1::ClubSlot::MergeFrom(from.slot());
    }
    if (from.has_allowed_redeem_count()) {
      set_allowed_redeem_count(from.allowed_redeem_count());
    }
    if (from.has_expiration_time()) {
      set_expiration_time(from.expiration_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateTicketOptions::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateTicketOptions::CopyFrom(const CreateTicketOptions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateTicketOptions::IsInitialized() const {

  return true;
}

void CreateTicketOptions::Swap(CreateTicketOptions* other) {
  if (other != this) {
    std::swap(slot_, other->slot_);
    attribute_.Swap(&other->attribute_);
    std::swap(allowed_redeem_count_, other->allowed_redeem_count_);
    std::swap(expiration_time_, other->expiration_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateTicketOptions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateTicketOptions_descriptor_;
  metadata.reflection = CreateTicketOptions_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClubTicket::kIdFieldNumber;
const int ClubTicket::kCreatorFieldNumber;
const int ClubTicket::kClubFieldNumber;
const int ClubTicket::kSlotFieldNumber;
const int ClubTicket::kAttributeFieldNumber;
const int ClubTicket::kCurrentRedeemCountFieldNumber;
const int ClubTicket::kAllowedRedeemCountFieldNumber;
const int ClubTicket::kCreationTimeFieldNumber;
const int ClubTicket::kExpirationTimeFieldNumber;
#endif  // !_MSC_VER

ClubTicket::ClubTicket()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.club.v1.ClubTicket)
}

void ClubTicket::InitAsDefaultInstance() {
  creator_ = const_cast< ::bgs::protocol::club::v1::MemberDescription*>(&::bgs::protocol::club::v1::MemberDescription::default_instance());
  club_ = const_cast< ::bgs::protocol::club::v1::ClubDescription*>(&::bgs::protocol::club::v1::ClubDescription::default_instance());
  slot_ = const_cast< ::bgs::protocol::club::v1::ClubSlot*>(&::bgs::protocol::club::v1::ClubSlot::default_instance());
}

ClubTicket::ClubTicket(const ClubTicket& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.club.v1.ClubTicket)
}

void ClubTicket::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  creator_ = NULL;
  club_ = NULL;
  slot_ = NULL;
  current_redeem_count_ = 0u;
  allowed_redeem_count_ = 0u;
  creation_time_ = GOOGLE_ULONGLONG(0);
  expiration_time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClubTicket::~ClubTicket() {
  // @@protoc_insertion_point(destructor:bgs.protocol.club.v1.ClubTicket)
  SharedDtor();
}

void ClubTicket::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (this != default_instance_) {
    delete creator_;
    delete club_;
    delete slot_;
  }
}

void ClubTicket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClubTicket::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClubTicket_descriptor_;
}

const ClubTicket& ClubTicket::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_club_5finvitation_2eproto();
  return *default_instance_;
}

ClubTicket* ClubTicket::default_instance_ = NULL;

ClubTicket* ClubTicket::New() const {
  return new ClubTicket;
}

void ClubTicket::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ClubTicket*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 239) {
    ZR_(current_redeem_count_, creation_time_);
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
    if (has_creator()) {
      if (creator_ != NULL) creator_->::bgs::protocol::club::v1::MemberDescription::Clear();
    }
    if (has_club()) {
      if (club_ != NULL) club_->::bgs::protocol::club::v1::ClubDescription::Clear();
    }
    if (has_slot()) {
      if (slot_ != NULL) slot_->::bgs::protocol::club::v1::ClubSlot::Clear();
    }
  }
  expiration_time_ = GOOGLE_ULONGLONG(0);

#undef OFFSET_OF_FIELD_
#undef ZR_

  attribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClubTicket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bgs.protocol.club.v1.ClubTicket)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_creator;
        break;
      }

      // optional .bgs.protocol.club.v1.MemberDescription creator = 2;
      case 2: {
        if (tag == 18) {
         parse_creator:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_creator()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_club;
        break;
      }

      // optional .bgs.protocol.club.v1.ClubDescription club = 3;
      case 3: {
        if (tag == 26) {
         parse_club:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_club()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_slot;
        break;
      }

      // optional .bgs.protocol.club.v1.ClubSlot slot = 4;
      case 4: {
        if (tag == 34) {
         parse_slot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_slot()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_attribute;
        break;
      }

      // repeated .bgs.protocol.v2.Attribute attribute = 5;
      case 5: {
        if (tag == 42) {
         parse_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attribute()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_attribute;
        if (input->ExpectTag(48)) goto parse_current_redeem_count;
        break;
      }

      // optional uint32 current_redeem_count = 6;
      case 6: {
        if (tag == 48) {
         parse_current_redeem_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &current_redeem_count_)));
          set_has_current_redeem_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_allowed_redeem_count;
        break;
      }

      // optional uint32 allowed_redeem_count = 7;
      case 7: {
        if (tag == 56) {
         parse_allowed_redeem_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &allowed_redeem_count_)));
          set_has_allowed_redeem_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_creation_time;
        break;
      }

      // optional uint64 creation_time = 8;
      case 8: {
        if (tag == 64) {
         parse_creation_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &creation_time_)));
          set_has_creation_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_expiration_time;
        break;
      }

      // optional uint64 expiration_time = 9;
      case 9: {
        if (tag == 72) {
         parse_expiration_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &expiration_time_)));
          set_has_expiration_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bgs.protocol.club.v1.ClubTicket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bgs.protocol.club.v1.ClubTicket)
  return false;
#undef DO_
}

void ClubTicket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bgs.protocol.club.v1.ClubTicket)
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional .bgs.protocol.club.v1.MemberDescription creator = 2;
  if (has_creator()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->creator(), output);
  }

  // optional .bgs.protocol.club.v1.ClubDescription club = 3;
  if (has_club()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->club(), output);
  }

  // optional .bgs.protocol.club.v1.ClubSlot slot = 4;
  if (has_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->slot(), output);
  }

  // repeated .bgs.protocol.v2.Attribute attribute = 5;
  for (int i = 0; i < this->attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->attribute(i), output);
  }

  // optional uint32 current_redeem_count = 6;
  if (has_current_redeem_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->current_redeem_count(), output);
  }

  // optional uint32 allowed_redeem_count = 7;
  if (has_allowed_redeem_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->allowed_redeem_count(), output);
  }

  // optional uint64 creation_time = 8;
  if (has_creation_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->creation_time(), output);
  }

  // optional uint64 expiration_time = 9;
  if (has_expiration_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->expiration_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bgs.protocol.club.v1.ClubTicket)
}

::google::protobuf::uint8* ClubTicket::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.club.v1.ClubTicket)
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional .bgs.protocol.club.v1.MemberDescription creator = 2;
  if (has_creator()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->creator(), target);
  }

  // optional .bgs.protocol.club.v1.ClubDescription club = 3;
  if (has_club()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->club(), target);
  }

  // optional .bgs.protocol.club.v1.ClubSlot slot = 4;
  if (has_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->slot(), target);
  }

  // repeated .bgs.protocol.v2.Attribute attribute = 5;
  for (int i = 0; i < this->attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->attribute(i), target);
  }

  // optional uint32 current_redeem_count = 6;
  if (has_current_redeem_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->current_redeem_count(), target);
  }

  // optional uint32 allowed_redeem_count = 7;
  if (has_allowed_redeem_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->allowed_redeem_count(), target);
  }

  // optional uint64 creation_time = 8;
  if (has_creation_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->creation_time(), target);
  }

  // optional uint64 expiration_time = 9;
  if (has_expiration_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->expiration_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.club.v1.ClubTicket)
  return target;
}

int ClubTicket::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional .bgs.protocol.club.v1.MemberDescription creator = 2;
    if (has_creator()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->creator());
    }

    // optional .bgs.protocol.club.v1.ClubDescription club = 3;
    if (has_club()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->club());
    }

    // optional .bgs.protocol.club.v1.ClubSlot slot = 4;
    if (has_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->slot());
    }

    // optional uint32 current_redeem_count = 6;
    if (has_current_redeem_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->current_redeem_count());
    }

    // optional uint32 allowed_redeem_count = 7;
    if (has_allowed_redeem_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->allowed_redeem_count());
    }

    // optional uint64 creation_time = 8;
    if (has_creation_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->creation_time());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 expiration_time = 9;
    if (has_expiration_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->expiration_time());
    }

  }
  // repeated .bgs.protocol.v2.Attribute attribute = 5;
  total_size += 1 * this->attribute_size();
  for (int i = 0; i < this->attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attribute(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClubTicket::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClubTicket* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClubTicket*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClubTicket::MergeFrom(const ClubTicket& from) {
  GOOGLE_CHECK_NE(&from, this);
  attribute_.MergeFrom(from.attribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_creator()) {
      mutable_creator()->::bgs::protocol::club::v1::MemberDescription::MergeFrom(from.creator());
    }
    if (from.has_club()) {
      mutable_club()->::bgs::protocol::club::v1::ClubDescription::MergeFrom(from.club());
    }
    if (from.has_slot()) {
      mutable_slot()->::bgs::protocol::club::v1::ClubSlot::MergeFrom(from.slot());
    }
    if (from.has_current_redeem_count()) {
      set_current_redeem_count(from.current_redeem_count());
    }
    if (from.has_allowed_redeem_count()) {
      set_allowed_redeem_count(from.allowed_redeem_count());
    }
    if (from.has_creation_time()) {
      set_creation_time(from.creation_time());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_expiration_time()) {
      set_expiration_time(from.expiration_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClubTicket::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClubTicket::CopyFrom(const ClubTicket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClubTicket::IsInitialized() const {

  if (has_creator()) {
    if (!this->creator().IsInitialized()) return false;
  }
  if (has_club()) {
    if (!this->club().IsInitialized()) return false;
  }
  return true;
}

void ClubTicket::Swap(ClubTicket* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(creator_, other->creator_);
    std::swap(club_, other->club_);
    std::swap(slot_, other->slot_);
    attribute_.Swap(&other->attribute_);
    std::swap(current_redeem_count_, other->current_redeem_count_);
    std::swap(allowed_redeem_count_, other->allowed_redeem_count_);
    std::swap(creation_time_, other->creation_time_);
    std::swap(expiration_time_, other->expiration_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClubTicket::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClubTicket_descriptor_;
  metadata.reflection = ClubTicket_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace club
}  // namespace protocol
}  // namespace bgs

// @@protoc_insertion_point(global_scope)
