// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: event_view_types.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "event_view_types.pb.h"

#include <algorithm>
#include <utility>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
#include "Log.h"
// @@protoc_insertion_point(includes)

namespace bgs {
namespace protocol {

namespace {

const ::google::protobuf::Descriptor* GetEventOptions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetEventOptions_reflection_ = NULL;
const ::google::protobuf::Descriptor* ViewMarker_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ViewMarker_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EventOrder_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_event_5fview_5ftypes_2eproto() {
  protobuf_AddDesc_event_5fview_5ftypes_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "event_view_types.proto");
  GOOGLE_CHECK(file != NULL);
  GetEventOptions_descriptor_ = file->message_type(0);
  static const int GetEventOptions_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetEventOptions, fetch_from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetEventOptions, fetch_until_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetEventOptions, max_events_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetEventOptions, order_),
  };
  GetEventOptions_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetEventOptions_descriptor_,
      GetEventOptions::default_instance_,
      GetEventOptions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetEventOptions, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetEventOptions, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetEventOptions));
  ViewMarker_descriptor_ = file->message_type(1);
  static const int ViewMarker_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewMarker, last_read_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewMarker, last_message_time_),
  };
  ViewMarker_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ViewMarker_descriptor_,
      ViewMarker::default_instance_,
      ViewMarker_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewMarker, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewMarker, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ViewMarker));
  EventOrder_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_event_5fview_5ftypes_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetEventOptions_descriptor_, &GetEventOptions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ViewMarker_descriptor_, &ViewMarker::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_event_5fview_5ftypes_2eproto() {
  delete GetEventOptions::default_instance_;
  delete GetEventOptions_reflection_;
  delete ViewMarker::default_instance_;
  delete ViewMarker_reflection_;
}

void protobuf_AddDesc_event_5fview_5ftypes_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026event_view_types.proto\022\014bgs.protocol\"w"
    "\n\017GetEventOptions\022\022\n\nfetch_from\030\001 \001(\004\022\023\n"
    "\013fetch_until\030\002 \001(\004\022\022\n\nmax_events\030\003 \001(\r\022\'"
    "\n\005order\030\004 \001(\0162\030.bgs.protocol.EventOrder\""
    "\?\n\nViewMarker\022\026\n\016last_read_time\030\001 \001(\004\022\031\n"
    "\021last_message_time\030\002 \001(\004*7\n\nEventOrder\022\024"
    "\n\020EVENT_DESCENDING\020\000\022\023\n\017EVENT_ASCENDING\020"
    "\001B\002H\001", 285);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "event_view_types.proto", &protobuf_RegisterTypes);
  GetEventOptions::default_instance_ = new GetEventOptions();
  ViewMarker::default_instance_ = new ViewMarker();
  GetEventOptions::default_instance_->InitAsDefaultInstance();
  ViewMarker::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_event_5fview_5ftypes_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_event_5fview_5ftypes_2eproto {
  StaticDescriptorInitializer_event_5fview_5ftypes_2eproto() {
    protobuf_AddDesc_event_5fview_5ftypes_2eproto();
  }
} static_descriptor_initializer_event_5fview_5ftypes_2eproto_;
const ::google::protobuf::EnumDescriptor* EventOrder_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EventOrder_descriptor_;
}
bool EventOrder_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int GetEventOptions::kFetchFromFieldNumber;
const int GetEventOptions::kFetchUntilFieldNumber;
const int GetEventOptions::kMaxEventsFieldNumber;
const int GetEventOptions::kOrderFieldNumber;
#endif  // !_MSC_VER

GetEventOptions::GetEventOptions()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.GetEventOptions)
}

void GetEventOptions::InitAsDefaultInstance() {
}

GetEventOptions::GetEventOptions(const GetEventOptions& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.GetEventOptions)
}

void GetEventOptions::SharedCtor() {
  _cached_size_ = 0;
  fetch_from_ = GOOGLE_ULONGLONG(0);
  fetch_until_ = GOOGLE_ULONGLONG(0);
  max_events_ = 0u;
  order_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetEventOptions::~GetEventOptions() {
  // @@protoc_insertion_point(destructor:bgs.protocol.GetEventOptions)
  SharedDtor();
}

void GetEventOptions::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetEventOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetEventOptions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetEventOptions_descriptor_;
}

const GetEventOptions& GetEventOptions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_5fview_5ftypes_2eproto();
  return *default_instance_;
}

GetEventOptions* GetEventOptions::default_instance_ = NULL;

GetEventOptions* GetEventOptions::New() const {
  return new GetEventOptions;
}

void GetEventOptions::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GetEventOptions*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(fetch_from_, order_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetEventOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bgs.protocol.GetEventOptions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 fetch_from = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fetch_from_)));
          set_has_fetch_from();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_fetch_until;
        break;
      }

      // optional uint64 fetch_until = 2;
      case 2: {
        if (tag == 16) {
         parse_fetch_until:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fetch_until_)));
          set_has_fetch_until();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_max_events;
        break;
      }

      // optional uint32 max_events = 3;
      case 3: {
        if (tag == 24) {
         parse_max_events:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_events_)));
          set_has_max_events();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_order;
        break;
      }

      // optional .bgs.protocol.EventOrder order = 4;
      case 4: {
        if (tag == 32) {
         parse_order:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::bgs::protocol::EventOrder_IsValid(value)) {
            set_order(static_cast< ::bgs::protocol::EventOrder >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bgs.protocol.GetEventOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bgs.protocol.GetEventOptions)
  return false;
#undef DO_
}

void GetEventOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bgs.protocol.GetEventOptions)
  // optional uint64 fetch_from = 1;
  if (has_fetch_from()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->fetch_from(), output);
  }

  // optional uint64 fetch_until = 2;
  if (has_fetch_until()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->fetch_until(), output);
  }

  // optional uint32 max_events = 3;
  if (has_max_events()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->max_events(), output);
  }

  // optional .bgs.protocol.EventOrder order = 4;
  if (has_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->order(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bgs.protocol.GetEventOptions)
}

::google::protobuf::uint8* GetEventOptions::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.GetEventOptions)
  // optional uint64 fetch_from = 1;
  if (has_fetch_from()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->fetch_from(), target);
  }

  // optional uint64 fetch_until = 2;
  if (has_fetch_until()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->fetch_until(), target);
  }

  // optional uint32 max_events = 3;
  if (has_max_events()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->max_events(), target);
  }

  // optional .bgs.protocol.EventOrder order = 4;
  if (has_order()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->order(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.GetEventOptions)
  return target;
}

int GetEventOptions::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 fetch_from = 1;
    if (has_fetch_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fetch_from());
    }

    // optional uint64 fetch_until = 2;
    if (has_fetch_until()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fetch_until());
    }

    // optional uint32 max_events = 3;
    if (has_max_events()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_events());
    }

    // optional .bgs.protocol.EventOrder order = 4;
    if (has_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->order());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetEventOptions::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetEventOptions* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetEventOptions*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetEventOptions::MergeFrom(const GetEventOptions& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fetch_from()) {
      set_fetch_from(from.fetch_from());
    }
    if (from.has_fetch_until()) {
      set_fetch_until(from.fetch_until());
    }
    if (from.has_max_events()) {
      set_max_events(from.max_events());
    }
    if (from.has_order()) {
      set_order(from.order());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetEventOptions::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetEventOptions::CopyFrom(const GetEventOptions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetEventOptions::IsInitialized() const {

  return true;
}

void GetEventOptions::Swap(GetEventOptions* other) {
  if (other != this) {
    std::swap(fetch_from_, other->fetch_from_);
    std::swap(fetch_until_, other->fetch_until_);
    std::swap(max_events_, other->max_events_);
    std::swap(order_, other->order_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetEventOptions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetEventOptions_descriptor_;
  metadata.reflection = GetEventOptions_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ViewMarker::kLastReadTimeFieldNumber;
const int ViewMarker::kLastMessageTimeFieldNumber;
#endif  // !_MSC_VER

ViewMarker::ViewMarker()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.ViewMarker)
}

void ViewMarker::InitAsDefaultInstance() {
}

ViewMarker::ViewMarker(const ViewMarker& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.ViewMarker)
}

void ViewMarker::SharedCtor() {
  _cached_size_ = 0;
  last_read_time_ = GOOGLE_ULONGLONG(0);
  last_message_time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ViewMarker::~ViewMarker() {
  // @@protoc_insertion_point(destructor:bgs.protocol.ViewMarker)
  SharedDtor();
}

void ViewMarker::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ViewMarker::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ViewMarker::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ViewMarker_descriptor_;
}

const ViewMarker& ViewMarker::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_5fview_5ftypes_2eproto();
  return *default_instance_;
}

ViewMarker* ViewMarker::default_instance_ = NULL;

ViewMarker* ViewMarker::New() const {
  return new ViewMarker;
}

void ViewMarker::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ViewMarker*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(last_read_time_, last_message_time_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ViewMarker::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bgs.protocol.ViewMarker)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 last_read_time = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_read_time_)));
          set_has_last_read_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_last_message_time;
        break;
      }

      // optional uint64 last_message_time = 2;
      case 2: {
        if (tag == 16) {
         parse_last_message_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_message_time_)));
          set_has_last_message_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bgs.protocol.ViewMarker)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bgs.protocol.ViewMarker)
  return false;
#undef DO_
}

void ViewMarker::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bgs.protocol.ViewMarker)
  // optional uint64 last_read_time = 1;
  if (has_last_read_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->last_read_time(), output);
  }

  // optional uint64 last_message_time = 2;
  if (has_last_message_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->last_message_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bgs.protocol.ViewMarker)
}

::google::protobuf::uint8* ViewMarker::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.ViewMarker)
  // optional uint64 last_read_time = 1;
  if (has_last_read_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->last_read_time(), target);
  }

  // optional uint64 last_message_time = 2;
  if (has_last_message_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->last_message_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.ViewMarker)
  return target;
}

int ViewMarker::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 last_read_time = 1;
    if (has_last_read_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_read_time());
    }

    // optional uint64 last_message_time = 2;
    if (has_last_message_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_message_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ViewMarker::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ViewMarker* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ViewMarker*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ViewMarker::MergeFrom(const ViewMarker& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_last_read_time()) {
      set_last_read_time(from.last_read_time());
    }
    if (from.has_last_message_time()) {
      set_last_message_time(from.last_message_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ViewMarker::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ViewMarker::CopyFrom(const ViewMarker& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ViewMarker::IsInitialized() const {

  return true;
}

void ViewMarker::Swap(ViewMarker* other) {
  if (other != this) {
    std::swap(last_read_time_, other->last_read_time_);
    std::swap(last_message_time_, other->last_message_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ViewMarker::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ViewMarker_descriptor_;
  metadata.reflection = ViewMarker_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace bgs

// @@protoc_insertion_point(global_scope)
