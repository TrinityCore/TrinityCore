// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: connection_service.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "connection_service.pb.h"

#include <utility>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
#include "BattlenetRpcErrorCodes.h"
// @@protoc_insertion_point(includes)

namespace bgs {
namespace protocol {
namespace connection {
namespace v1 {

namespace {

const ::google::protobuf::Descriptor* ConnectRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConnectRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConnectionMeteringContentHandles_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConnectionMeteringContentHandles_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConnectResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConnectResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* BoundService_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BoundService_reflection_ = NULL;
const ::google::protobuf::Descriptor* BindRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BindRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* BindResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BindResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* EchoRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EchoRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* EchoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EchoResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* DisconnectRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DisconnectRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* DisconnectNotification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DisconnectNotification_reflection_ = NULL;
const ::google::protobuf::Descriptor* EncryptRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EncryptRequest_reflection_ = NULL;
const ::google::protobuf::ServiceDescriptor* ConnectionService_descriptor_ = NULL;

}  // namespace

void protobuf_AssignDesc_connection_5fservice_2eproto() {
  protobuf_AddDesc_connection_5fservice_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "connection_service.proto");
  GOOGLE_CHECK(file != NULL);
  ConnectRequest_descriptor_ = file->message_type(0);
  static const int ConnectRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectRequest, client_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectRequest, bind_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectRequest, use_bindless_rpc_),
  };
  ConnectRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConnectRequest_descriptor_,
      ConnectRequest::default_instance_,
      ConnectRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConnectRequest));
  ConnectionMeteringContentHandles_descriptor_ = file->message_type(1);
  static const int ConnectionMeteringContentHandles_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionMeteringContentHandles, content_handle_),
  };
  ConnectionMeteringContentHandles_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConnectionMeteringContentHandles_descriptor_,
      ConnectionMeteringContentHandles::default_instance_,
      ConnectionMeteringContentHandles_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionMeteringContentHandles, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionMeteringContentHandles, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConnectionMeteringContentHandles));
  ConnectResponse_descriptor_ = file->message_type(2);
  static const int ConnectResponse_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectResponse, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectResponse, client_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectResponse, bind_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectResponse, bind_response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectResponse, content_handle_array_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectResponse, server_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectResponse, use_bindless_rpc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectResponse, binary_content_handle_array_),
  };
  ConnectResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConnectResponse_descriptor_,
      ConnectResponse::default_instance_,
      ConnectResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConnectResponse));
  BoundService_descriptor_ = file->message_type(3);
  static const int BoundService_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoundService, hash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoundService, id_),
  };
  BoundService_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BoundService_descriptor_,
      BoundService::default_instance_,
      BoundService_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoundService, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoundService, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BoundService));
  BindRequest_descriptor_ = file->message_type(4);
  static const int BindRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindRequest, deprecated_imported_service_hash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindRequest, deprecated_exported_service_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindRequest, exported_service_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindRequest, imported_service_),
  };
  BindRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BindRequest_descriptor_,
      BindRequest::default_instance_,
      BindRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BindRequest));
  BindResponse_descriptor_ = file->message_type(5);
  static const int BindResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindResponse, imported_service_id_),
  };
  BindResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BindResponse_descriptor_,
      BindResponse::default_instance_,
      BindResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BindResponse));
  EchoRequest_descriptor_ = file->message_type(6);
  static const int EchoRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EchoRequest, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EchoRequest, network_only_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EchoRequest, payload_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EchoRequest, forward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EchoRequest, forward_client_id_),
  };
  EchoRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EchoRequest_descriptor_,
      EchoRequest::default_instance_,
      EchoRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EchoRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EchoRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EchoRequest));
  EchoResponse_descriptor_ = file->message_type(7);
  static const int EchoResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EchoResponse, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EchoResponse, payload_),
  };
  EchoResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EchoResponse_descriptor_,
      EchoResponse::default_instance_,
      EchoResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EchoResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EchoResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EchoResponse));
  DisconnectRequest_descriptor_ = file->message_type(8);
  static const int DisconnectRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisconnectRequest, error_code_),
  };
  DisconnectRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DisconnectRequest_descriptor_,
      DisconnectRequest::default_instance_,
      DisconnectRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisconnectRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisconnectRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DisconnectRequest));
  DisconnectNotification_descriptor_ = file->message_type(9);
  static const int DisconnectNotification_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisconnectNotification, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisconnectNotification, reason_),
  };
  DisconnectNotification_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DisconnectNotification_descriptor_,
      DisconnectNotification::default_instance_,
      DisconnectNotification_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisconnectNotification, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisconnectNotification, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DisconnectNotification));
  EncryptRequest_descriptor_ = file->message_type(10);
  static const int EncryptRequest_offsets_[1] = {
  };
  EncryptRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EncryptRequest_descriptor_,
      EncryptRequest::default_instance_,
      EncryptRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncryptRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncryptRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EncryptRequest));
  ConnectionService_descriptor_ = file->service(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_connection_5fservice_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConnectRequest_descriptor_, &ConnectRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConnectionMeteringContentHandles_descriptor_, &ConnectionMeteringContentHandles::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConnectResponse_descriptor_, &ConnectResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BoundService_descriptor_, &BoundService::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BindRequest_descriptor_, &BindRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BindResponse_descriptor_, &BindResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EchoRequest_descriptor_, &EchoRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EchoResponse_descriptor_, &EchoResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DisconnectRequest_descriptor_, &DisconnectRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DisconnectNotification_descriptor_, &DisconnectNotification::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EncryptRequest_descriptor_, &EncryptRequest::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_connection_5fservice_2eproto() {
  delete ConnectRequest::default_instance_;
  delete ConnectRequest_reflection_;
  delete ConnectionMeteringContentHandles::default_instance_;
  delete ConnectionMeteringContentHandles_reflection_;
  delete ConnectResponse::default_instance_;
  delete ConnectResponse_reflection_;
  delete BoundService::default_instance_;
  delete BoundService_reflection_;
  delete BindRequest::default_instance_;
  delete BindRequest_reflection_;
  delete BindResponse::default_instance_;
  delete BindResponse_reflection_;
  delete EchoRequest::default_instance_;
  delete EchoRequest_reflection_;
  delete EchoResponse::default_instance_;
  delete EchoResponse_reflection_;
  delete DisconnectRequest::default_instance_;
  delete DisconnectRequest_reflection_;
  delete DisconnectNotification::default_instance_;
  delete DisconnectNotification_reflection_;
  delete EncryptRequest::default_instance_;
  delete EncryptRequest_reflection_;
}

void protobuf_AddDesc_connection_5fservice_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::bgs::protocol::protobuf_AddDesc_content_5fhandle_5ftypes_2eproto();
  ::bgs::protocol::protobuf_AddDesc_rpc_5ftypes_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030connection_service.proto\022\032bgs.protocol"
    ".connection.v1\032\032content_handle_types.pro"
    "to\032\017rpc_types.proto\"\233\001\n\016ConnectRequest\022*"
    "\n\tclient_id\030\001 \001(\0132\027.bgs.protocol.Process"
    "Id\022=\n\014bind_request\030\002 \001(\0132\'.bgs.protocol."
    "connection.v1.BindRequest\022\036\n\020use_bindles"
    "s_rpc\030\003 \001(\010:\004true\"W\n ConnectionMeteringC"
    "ontentHandles\0223\n\016content_handle\030\001 \003(\0132\033."
    "bgs.protocol.ContentHandle\"\264\003\n\017ConnectRe"
    "sponse\022*\n\tserver_id\030\001 \002(\0132\027.bgs.protocol"
    ".ProcessId\022*\n\tclient_id\030\002 \001(\0132\027.bgs.prot"
    "ocol.ProcessId\022\023\n\013bind_result\030\003 \001(\r\022\?\n\rb"
    "ind_response\030\004 \001(\0132(.bgs.protocol.connec"
    "tion.v1.BindResponse\022Z\n\024content_handle_a"
    "rray\030\005 \001(\0132<.bgs.protocol.connection.v1."
    "ConnectionMeteringContentHandles\022\023\n\013serv"
    "er_time\030\006 \001(\004\022\037\n\020use_bindless_rpc\030\007 \001(\010:"
    "\005false\022a\n\033binary_content_handle_array\030\010 "
    "\001(\0132<.bgs.protocol.connection.v1.Connect"
    "ionMeteringContentHandles\"(\n\014BoundServic"
    "e\022\014\n\004hash\030\001 \002(\007\022\n\n\002id\030\002 \002(\r\"\230\002\n\013BindRequ"
    "est\022.\n deprecated_imported_service_hash\030"
    "\001 \003(\007B\004\020\001\030\001\022Q\n\033deprecated_exported_servi"
    "ce\030\002 \003(\0132(.bgs.protocol.connection.v1.Bo"
    "undServiceB\002\030\001\022B\n\020exported_service\030\003 \003(\013"
    "2(.bgs.protocol.connection.v1.BoundServi"
    "ce\022B\n\020imported_service\030\004 \003(\0132(.bgs.proto"
    "col.connection.v1.BoundService\"1\n\014BindRe"
    "sponse\022!\n\023imported_service_id\030\001 \003(\rB\004\020\001\030"
    "\001\"\216\001\n\013EchoRequest\022\014\n\004time\030\001 \001(\006\022\033\n\014netwo"
    "rk_only\030\002 \001(\010:\005false\022\017\n\007payload\030\003 \001(\014\022(\n"
    "\007forward\030\004 \001(\0132\027.bgs.protocol.ProcessId\022"
    "\031\n\021forward_client_id\030\005 \001(\t\"-\n\014EchoRespon"
    "se\022\014\n\004time\030\001 \001(\006\022\017\n\007payload\030\002 \001(\014\"\'\n\021Dis"
    "connectRequest\022\022\n\nerror_code\030\001 \002(\r\"<\n\026Di"
    "sconnectNotification\022\022\n\nerror_code\030\001 \002(\r"
    "\022\016\n\006reason\030\002 \001(\t\"\020\n\016EncryptRequest2\375\005\n\021C"
    "onnectionService\022j\n\007Connect\022*.bgs.protoc"
    "ol.connection.v1.ConnectRequest\032+.bgs.pr"
    "otocol.connection.v1.ConnectResponse\"\006\202\371"
    "+\002\010\001\022d\n\004Bind\022\'.bgs.protocol.connection.v"
    "1.BindRequest\032(.bgs.protocol.connection."
    "v1.BindResponse\"\t\210\002\001\202\371+\002\010\002\022a\n\004Echo\022\'.bgs"
    ".protocol.connection.v1.EchoRequest\032(.bg"
    "s.protocol.connection.v1.EchoResponse\"\006\202"
    "\371+\002\010\003\022h\n\017ForceDisconnect\0222.bgs.protocol."
    "connection.v1.DisconnectNotification\032\031.b"
    "gs.protocol.NO_RESPONSE\"\006\202\371+\002\010\004\022D\n\tKeepA"
    "live\022\024.bgs.protocol.NoData\032\031.bgs.protoco"
    "l.NO_RESPONSE\"\006\202\371+\002\010\005\022V\n\007Encrypt\022*.bgs.p"
    "rotocol.connection.v1.EncryptRequest\032\024.b"
    "gs.protocol.NoData\"\t\210\002\001\202\371+\002\010\006\022e\n\021Request"
    "Disconnect\022-.bgs.protocol.connection.v1."
    "DisconnectRequest\032\031.bgs.protocol.NO_RESP"
    "ONSE\"\006\202\371+\002\010\007\032D\202\371+8\n*bnet.protocol.connec"
    "tion.ConnectionService*\nconnection\212\371+\004\010\001"
    "\020\001B=\n\033bnet.protocol.connection.v1B\026Conne"
    "ctionServiceProtoH\002\200\001\000\210\001\001", 2305);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "connection_service.proto", &protobuf_RegisterTypes);
  ConnectRequest::default_instance_ = new ConnectRequest();
  ConnectionMeteringContentHandles::default_instance_ = new ConnectionMeteringContentHandles();
  ConnectResponse::default_instance_ = new ConnectResponse();
  BoundService::default_instance_ = new BoundService();
  BindRequest::default_instance_ = new BindRequest();
  BindResponse::default_instance_ = new BindResponse();
  EchoRequest::default_instance_ = new EchoRequest();
  EchoResponse::default_instance_ = new EchoResponse();
  DisconnectRequest::default_instance_ = new DisconnectRequest();
  DisconnectNotification::default_instance_ = new DisconnectNotification();
  EncryptRequest::default_instance_ = new EncryptRequest();
  ConnectRequest::default_instance_->InitAsDefaultInstance();
  ConnectionMeteringContentHandles::default_instance_->InitAsDefaultInstance();
  ConnectResponse::default_instance_->InitAsDefaultInstance();
  BoundService::default_instance_->InitAsDefaultInstance();
  BindRequest::default_instance_->InitAsDefaultInstance();
  BindResponse::default_instance_->InitAsDefaultInstance();
  EchoRequest::default_instance_->InitAsDefaultInstance();
  EchoResponse::default_instance_->InitAsDefaultInstance();
  DisconnectRequest::default_instance_->InitAsDefaultInstance();
  DisconnectNotification::default_instance_->InitAsDefaultInstance();
  EncryptRequest::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_connection_5fservice_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_connection_5fservice_2eproto {
  StaticDescriptorInitializer_connection_5fservice_2eproto() {
    protobuf_AddDesc_connection_5fservice_2eproto();
  }
} static_descriptor_initializer_connection_5fservice_2eproto_;
// ===================================================================

#ifndef _MSC_VER
const int ConnectRequest::kClientIdFieldNumber;
const int ConnectRequest::kBindRequestFieldNumber;
const int ConnectRequest::kUseBindlessRpcFieldNumber;
#endif  // !_MSC_VER

ConnectRequest::ConnectRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.connection.v1.ConnectRequest)
}

void ConnectRequest::InitAsDefaultInstance() {
  client_id_ = const_cast< ::bgs::protocol::ProcessId*>(&::bgs::protocol::ProcessId::default_instance());
  bind_request_ = const_cast< ::bgs::protocol::connection::v1::BindRequest*>(&::bgs::protocol::connection::v1::BindRequest::default_instance());
}

ConnectRequest::ConnectRequest(const ConnectRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.connection.v1.ConnectRequest)
}

void ConnectRequest::SharedCtor() {
  _cached_size_ = 0;
  client_id_ = NULL;
  bind_request_ = NULL;
  use_bindless_rpc_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConnectRequest::~ConnectRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.connection.v1.ConnectRequest)
  SharedDtor();
}

void ConnectRequest::SharedDtor() {
  if (this != default_instance_) {
    delete client_id_;
    delete bind_request_;
  }
}

void ConnectRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConnectRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConnectRequest_descriptor_;
}

const ConnectRequest& ConnectRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_connection_5fservice_2eproto();
  return *default_instance_;
}

ConnectRequest* ConnectRequest::default_instance_ = NULL;

ConnectRequest* ConnectRequest::New() const {
  return new ConnectRequest;
}

void ConnectRequest::Swap(ConnectRequest* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata ConnectRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConnectRequest_descriptor_;
  metadata.reflection = ConnectRequest_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int ConnectionMeteringContentHandles::kContentHandleFieldNumber;
#endif  // !_MSC_VER

ConnectionMeteringContentHandles::ConnectionMeteringContentHandles()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.connection.v1.ConnectionMeteringContentHandles)
}

void ConnectionMeteringContentHandles::InitAsDefaultInstance() {
}

ConnectionMeteringContentHandles::ConnectionMeteringContentHandles(const ConnectionMeteringContentHandles& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.connection.v1.ConnectionMeteringContentHandles)
}

void ConnectionMeteringContentHandles::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConnectionMeteringContentHandles::~ConnectionMeteringContentHandles() {
  // @@protoc_insertion_point(destructor:bgs.protocol.connection.v1.ConnectionMeteringContentHandles)
  SharedDtor();
}

void ConnectionMeteringContentHandles::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ConnectionMeteringContentHandles::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConnectionMeteringContentHandles::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConnectionMeteringContentHandles_descriptor_;
}

const ConnectionMeteringContentHandles& ConnectionMeteringContentHandles::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_connection_5fservice_2eproto();
  return *default_instance_;
}

ConnectionMeteringContentHandles* ConnectionMeteringContentHandles::default_instance_ = NULL;

ConnectionMeteringContentHandles* ConnectionMeteringContentHandles::New() const {
  return new ConnectionMeteringContentHandles;
}

void ConnectionMeteringContentHandles::Swap(ConnectionMeteringContentHandles* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata ConnectionMeteringContentHandles::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConnectionMeteringContentHandles_descriptor_;
  metadata.reflection = ConnectionMeteringContentHandles_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int ConnectResponse::kServerIdFieldNumber;
const int ConnectResponse::kClientIdFieldNumber;
const int ConnectResponse::kBindResultFieldNumber;
const int ConnectResponse::kBindResponseFieldNumber;
const int ConnectResponse::kContentHandleArrayFieldNumber;
const int ConnectResponse::kServerTimeFieldNumber;
const int ConnectResponse::kUseBindlessRpcFieldNumber;
const int ConnectResponse::kBinaryContentHandleArrayFieldNumber;
#endif  // !_MSC_VER

ConnectResponse::ConnectResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.connection.v1.ConnectResponse)
}

void ConnectResponse::InitAsDefaultInstance() {
  server_id_ = const_cast< ::bgs::protocol::ProcessId*>(&::bgs::protocol::ProcessId::default_instance());
  client_id_ = const_cast< ::bgs::protocol::ProcessId*>(&::bgs::protocol::ProcessId::default_instance());
  bind_response_ = const_cast< ::bgs::protocol::connection::v1::BindResponse*>(&::bgs::protocol::connection::v1::BindResponse::default_instance());
  content_handle_array_ = const_cast< ::bgs::protocol::connection::v1::ConnectionMeteringContentHandles*>(&::bgs::protocol::connection::v1::ConnectionMeteringContentHandles::default_instance());
  binary_content_handle_array_ = const_cast< ::bgs::protocol::connection::v1::ConnectionMeteringContentHandles*>(&::bgs::protocol::connection::v1::ConnectionMeteringContentHandles::default_instance());
}

ConnectResponse::ConnectResponse(const ConnectResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.connection.v1.ConnectResponse)
}

void ConnectResponse::SharedCtor() {
  _cached_size_ = 0;
  server_id_ = NULL;
  client_id_ = NULL;
  bind_result_ = 0u;
  bind_response_ = NULL;
  content_handle_array_ = NULL;
  server_time_ = GOOGLE_ULONGLONG(0);
  use_bindless_rpc_ = false;
  binary_content_handle_array_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConnectResponse::~ConnectResponse() {
  // @@protoc_insertion_point(destructor:bgs.protocol.connection.v1.ConnectResponse)
  SharedDtor();
}

void ConnectResponse::SharedDtor() {
  if (this != default_instance_) {
    delete server_id_;
    delete client_id_;
    delete bind_response_;
    delete content_handle_array_;
    delete binary_content_handle_array_;
  }
}

void ConnectResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConnectResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConnectResponse_descriptor_;
}

const ConnectResponse& ConnectResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_connection_5fservice_2eproto();
  return *default_instance_;
}

ConnectResponse* ConnectResponse::default_instance_ = NULL;

ConnectResponse* ConnectResponse::New() const {
  return new ConnectResponse;
}

void ConnectResponse::Swap(ConnectResponse* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata ConnectResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConnectResponse_descriptor_;
  metadata.reflection = ConnectResponse_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int BoundService::kHashFieldNumber;
const int BoundService::kIdFieldNumber;
#endif  // !_MSC_VER

BoundService::BoundService()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.connection.v1.BoundService)
}

void BoundService::InitAsDefaultInstance() {
}

BoundService::BoundService(const BoundService& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.connection.v1.BoundService)
}

void BoundService::SharedCtor() {
  _cached_size_ = 0;
  hash_ = 0u;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BoundService::~BoundService() {
  // @@protoc_insertion_point(destructor:bgs.protocol.connection.v1.BoundService)
  SharedDtor();
}

void BoundService::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BoundService::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BoundService::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BoundService_descriptor_;
}

const BoundService& BoundService::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_connection_5fservice_2eproto();
  return *default_instance_;
}

BoundService* BoundService::default_instance_ = NULL;

BoundService* BoundService::New() const {
  return new BoundService;
}

void BoundService::Swap(BoundService* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata BoundService::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BoundService_descriptor_;
  metadata.reflection = BoundService_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int BindRequest::kDeprecatedImportedServiceHashFieldNumber;
const int BindRequest::kDeprecatedExportedServiceFieldNumber;
const int BindRequest::kExportedServiceFieldNumber;
const int BindRequest::kImportedServiceFieldNumber;
#endif  // !_MSC_VER

BindRequest::BindRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.connection.v1.BindRequest)
}

void BindRequest::InitAsDefaultInstance() {
}

BindRequest::BindRequest(const BindRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.connection.v1.BindRequest)
}

void BindRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BindRequest::~BindRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.connection.v1.BindRequest)
  SharedDtor();
}

void BindRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BindRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BindRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BindRequest_descriptor_;
}

const BindRequest& BindRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_connection_5fservice_2eproto();
  return *default_instance_;
}

BindRequest* BindRequest::default_instance_ = NULL;

BindRequest* BindRequest::New() const {
  return new BindRequest;
}

void BindRequest::Swap(BindRequest* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata BindRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BindRequest_descriptor_;
  metadata.reflection = BindRequest_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int BindResponse::kImportedServiceIdFieldNumber;
#endif  // !_MSC_VER

BindResponse::BindResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.connection.v1.BindResponse)
}

void BindResponse::InitAsDefaultInstance() {
}

BindResponse::BindResponse(const BindResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.connection.v1.BindResponse)
}

void BindResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BindResponse::~BindResponse() {
  // @@protoc_insertion_point(destructor:bgs.protocol.connection.v1.BindResponse)
  SharedDtor();
}

void BindResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BindResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BindResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BindResponse_descriptor_;
}

const BindResponse& BindResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_connection_5fservice_2eproto();
  return *default_instance_;
}

BindResponse* BindResponse::default_instance_ = NULL;

BindResponse* BindResponse::New() const {
  return new BindResponse;
}

void BindResponse::Swap(BindResponse* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata BindResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BindResponse_descriptor_;
  metadata.reflection = BindResponse_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int EchoRequest::kTimeFieldNumber;
const int EchoRequest::kNetworkOnlyFieldNumber;
const int EchoRequest::kPayloadFieldNumber;
const int EchoRequest::kForwardFieldNumber;
const int EchoRequest::kForwardClientIdFieldNumber;
#endif  // !_MSC_VER

EchoRequest::EchoRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.connection.v1.EchoRequest)
}

void EchoRequest::InitAsDefaultInstance() {
  forward_ = const_cast< ::bgs::protocol::ProcessId*>(&::bgs::protocol::ProcessId::default_instance());
}

EchoRequest::EchoRequest(const EchoRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.connection.v1.EchoRequest)
}

void EchoRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  time_ = GOOGLE_ULONGLONG(0);
  network_only_ = false;
  payload_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  forward_ = NULL;
  forward_client_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EchoRequest::~EchoRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.connection.v1.EchoRequest)
  SharedDtor();
}

void EchoRequest::SharedDtor() {
  if (payload_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete payload_;
  }
  if (forward_client_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete forward_client_id_;
  }
  if (this != default_instance_) {
    delete forward_;
  }
}

void EchoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EchoRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EchoRequest_descriptor_;
}

const EchoRequest& EchoRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_connection_5fservice_2eproto();
  return *default_instance_;
}

EchoRequest* EchoRequest::default_instance_ = NULL;

EchoRequest* EchoRequest::New() const {
  return new EchoRequest;
}

void EchoRequest::Swap(EchoRequest* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata EchoRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EchoRequest_descriptor_;
  metadata.reflection = EchoRequest_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int EchoResponse::kTimeFieldNumber;
const int EchoResponse::kPayloadFieldNumber;
#endif  // !_MSC_VER

EchoResponse::EchoResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.connection.v1.EchoResponse)
}

void EchoResponse::InitAsDefaultInstance() {
}

EchoResponse::EchoResponse(const EchoResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.connection.v1.EchoResponse)
}

void EchoResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  time_ = GOOGLE_ULONGLONG(0);
  payload_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EchoResponse::~EchoResponse() {
  // @@protoc_insertion_point(destructor:bgs.protocol.connection.v1.EchoResponse)
  SharedDtor();
}

void EchoResponse::SharedDtor() {
  if (payload_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete payload_;
  }
  if (this != default_instance_) {
  }
}

void EchoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EchoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EchoResponse_descriptor_;
}

const EchoResponse& EchoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_connection_5fservice_2eproto();
  return *default_instance_;
}

EchoResponse* EchoResponse::default_instance_ = NULL;

EchoResponse* EchoResponse::New() const {
  return new EchoResponse;
}

void EchoResponse::Swap(EchoResponse* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata EchoResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EchoResponse_descriptor_;
  metadata.reflection = EchoResponse_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int DisconnectRequest::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

DisconnectRequest::DisconnectRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.connection.v1.DisconnectRequest)
}

void DisconnectRequest::InitAsDefaultInstance() {
}

DisconnectRequest::DisconnectRequest(const DisconnectRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.connection.v1.DisconnectRequest)
}

void DisconnectRequest::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DisconnectRequest::~DisconnectRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.connection.v1.DisconnectRequest)
  SharedDtor();
}

void DisconnectRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DisconnectRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DisconnectRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DisconnectRequest_descriptor_;
}

const DisconnectRequest& DisconnectRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_connection_5fservice_2eproto();
  return *default_instance_;
}

DisconnectRequest* DisconnectRequest::default_instance_ = NULL;

DisconnectRequest* DisconnectRequest::New() const {
  return new DisconnectRequest;
}

void DisconnectRequest::Swap(DisconnectRequest* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata DisconnectRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DisconnectRequest_descriptor_;
  metadata.reflection = DisconnectRequest_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int DisconnectNotification::kErrorCodeFieldNumber;
const int DisconnectNotification::kReasonFieldNumber;
#endif  // !_MSC_VER

DisconnectNotification::DisconnectNotification()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.connection.v1.DisconnectNotification)
}

void DisconnectNotification::InitAsDefaultInstance() {
}

DisconnectNotification::DisconnectNotification(const DisconnectNotification& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.connection.v1.DisconnectNotification)
}

void DisconnectNotification::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  error_code_ = 0u;
  reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DisconnectNotification::~DisconnectNotification() {
  // @@protoc_insertion_point(destructor:bgs.protocol.connection.v1.DisconnectNotification)
  SharedDtor();
}

void DisconnectNotification::SharedDtor() {
  if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reason_;
  }
  if (this != default_instance_) {
  }
}

void DisconnectNotification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DisconnectNotification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DisconnectNotification_descriptor_;
}

const DisconnectNotification& DisconnectNotification::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_connection_5fservice_2eproto();
  return *default_instance_;
}

DisconnectNotification* DisconnectNotification::default_instance_ = NULL;

DisconnectNotification* DisconnectNotification::New() const {
  return new DisconnectNotification;
}

void DisconnectNotification::Swap(DisconnectNotification* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata DisconnectNotification::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DisconnectNotification_descriptor_;
  metadata.reflection = DisconnectNotification_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

EncryptRequest::EncryptRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.connection.v1.EncryptRequest)
}

void EncryptRequest::InitAsDefaultInstance() {
}

EncryptRequest::EncryptRequest(const EncryptRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.connection.v1.EncryptRequest)
}

void EncryptRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EncryptRequest::~EncryptRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.connection.v1.EncryptRequest)
  SharedDtor();
}

void EncryptRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EncryptRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EncryptRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EncryptRequest_descriptor_;
}

const EncryptRequest& EncryptRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_connection_5fservice_2eproto();
  return *default_instance_;
}

EncryptRequest* EncryptRequest::default_instance_ = NULL;

EncryptRequest* EncryptRequest::New() const {
  return new EncryptRequest;
}

void EncryptRequest::Swap(EncryptRequest* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata EncryptRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EncryptRequest_descriptor_;
  metadata.reflection = EncryptRequest_reflection_;
  return metadata;
}

// ===================================================================

ConnectionService::ConnectionService(bool use_original_hash) : ServiceBase(use_original_hash ? OriginalHash::value : NameHash::value) {
}

ConnectionService::~ConnectionService() {
}

google::protobuf::ServiceDescriptor const* ConnectionService::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConnectionService_descriptor_;
}

void ConnectionService::Connect(::bgs::protocol::connection::v1::ConnectRequest const* request, std::function<void(::bgs::protocol::connection::v1::ConnectResponse const*)> responseCallback, bool client /*= false*/, bool server /*= false*/) {
  LogCallClientMethod("ConnectionService.Connect", "bgs.protocol.connection.v1.ConnectRequest", request);
  std::function<void(MessageBuffer)> callback = [responseCallback](MessageBuffer buffer) -> void {
    ::bgs::protocol::connection::v1::ConnectResponse response;
    if (response.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize()))
      responseCallback(&response);
  };
  SendRequest(service_hash_, 1 | (client ? 0x40000000 : 0) | (server ? 0x80000000 : 0), request, std::move(callback));
}

void ConnectionService::Bind(::bgs::protocol::connection::v1::BindRequest const* request, std::function<void(::bgs::protocol::connection::v1::BindResponse const*)> responseCallback, bool client /*= false*/, bool server /*= false*/) {
  LogCallClientMethod("ConnectionService.Bind", "bgs.protocol.connection.v1.BindRequest", request);
  std::function<void(MessageBuffer)> callback = [responseCallback](MessageBuffer buffer) -> void {
    ::bgs::protocol::connection::v1::BindResponse response;
    if (response.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize()))
      responseCallback(&response);
  };
  SendRequest(service_hash_, 2 | (client ? 0x40000000 : 0) | (server ? 0x80000000 : 0), request, std::move(callback));
}

void ConnectionService::Echo(::bgs::protocol::connection::v1::EchoRequest const* request, std::function<void(::bgs::protocol::connection::v1::EchoResponse const*)> responseCallback, bool client /*= false*/, bool server /*= false*/) {
  LogCallClientMethod("ConnectionService.Echo", "bgs.protocol.connection.v1.EchoRequest", request);
  std::function<void(MessageBuffer)> callback = [responseCallback](MessageBuffer buffer) -> void {
    ::bgs::protocol::connection::v1::EchoResponse response;
    if (response.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize()))
      responseCallback(&response);
  };
  SendRequest(service_hash_, 3 | (client ? 0x40000000 : 0) | (server ? 0x80000000 : 0), request, std::move(callback));
}

void ConnectionService::ForceDisconnect(::bgs::protocol::connection::v1::DisconnectNotification const* request, bool client /*= false*/, bool server /*= false*/) {
  LogCallClientMethod("ConnectionService.ForceDisconnect", "bgs.protocol.connection.v1.DisconnectNotification", request);
  SendRequest(service_hash_, 4 | (client ? 0x40000000 : 0) | (server ? 0x80000000 : 0), request);
}

void ConnectionService::KeepAlive(::bgs::protocol::NoData const* request, bool client /*= false*/, bool server /*= false*/) {
  LogCallClientMethod("ConnectionService.KeepAlive", "bgs.protocol.NoData", request);
  SendRequest(service_hash_, 5 | (client ? 0x40000000 : 0) | (server ? 0x80000000 : 0), request);
}

void ConnectionService::Encrypt(::bgs::protocol::connection::v1::EncryptRequest const* request, std::function<void(::bgs::protocol::NoData const*)> responseCallback, bool client /*= false*/, bool server /*= false*/) {
  LogCallClientMethod("ConnectionService.Encrypt", "bgs.protocol.connection.v1.EncryptRequest", request);
  std::function<void(MessageBuffer)> callback = [responseCallback](MessageBuffer buffer) -> void {
    ::bgs::protocol::NoData response;
    if (response.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize()))
      responseCallback(&response);
  };
  SendRequest(service_hash_, 6 | (client ? 0x40000000 : 0) | (server ? 0x80000000 : 0), request, std::move(callback));
}

void ConnectionService::RequestDisconnect(::bgs::protocol::connection::v1::DisconnectRequest const* request, bool client /*= false*/, bool server /*= false*/) {
  LogCallClientMethod("ConnectionService.RequestDisconnect", "bgs.protocol.connection.v1.DisconnectRequest", request);
  SendRequest(service_hash_, 7 | (client ? 0x40000000 : 0) | (server ? 0x80000000 : 0), request);
}

void ConnectionService::CallServerMethod(uint32 token, uint32 methodId, MessageBuffer buffer) {
  switch(methodId & 0x3FFFFFFF) {
    case 1:
      ParseAndHandleConnect(token, methodId, buffer);
      break;
    case 2:
      ParseAndHandleBind(token, methodId, buffer);
      break;
    case 3:
      ParseAndHandleEcho(token, methodId, buffer);
      break;
    case 4:
      ParseAndHandleForceDisconnect(token, methodId, buffer);
      break;
    case 5:
      ParseAndHandleKeepAlive(token, methodId, buffer);
      break;
    case 6:
      ParseAndHandleEncrypt(token, methodId, buffer);
      break;
    case 7:
      ParseAndHandleRequestDisconnect(token, methodId, buffer);
      break;
    default:
      LogInvalidMethod(methodId);
      SendResponse(service_hash_, methodId, token, ERROR_RPC_INVALID_METHOD);
      break;
    }
}

uint32 ConnectionService::HandleConnect(::bgs::protocol::connection::v1::ConnectRequest const* request, ::bgs::protocol::connection::v1::ConnectResponse* /*response*/, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& /*continuation*/) {
  LogUnimplementedServerMethod("ConnectionService.Connect", request);
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 ConnectionService::HandleBind(::bgs::protocol::connection::v1::BindRequest const* request, ::bgs::protocol::connection::v1::BindResponse* /*response*/, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& /*continuation*/) {
  LogUnimplementedServerMethod("ConnectionService.Bind", request);
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 ConnectionService::HandleEcho(::bgs::protocol::connection::v1::EchoRequest const* request, ::bgs::protocol::connection::v1::EchoResponse* /*response*/, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& /*continuation*/) {
  LogUnimplementedServerMethod("ConnectionService.Echo", request);
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 ConnectionService::HandleForceDisconnect(::bgs::protocol::connection::v1::DisconnectNotification const* request) {
  LogUnimplementedServerMethod("ConnectionService.ForceDisconnect", request);
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 ConnectionService::HandleKeepAlive(::bgs::protocol::NoData const* request) {
  LogUnimplementedServerMethod("ConnectionService.KeepAlive", request);
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 ConnectionService::HandleEncrypt(::bgs::protocol::connection::v1::EncryptRequest const* request, ::bgs::protocol::NoData* /*response*/, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& /*continuation*/) {
  LogUnimplementedServerMethod("ConnectionService.Encrypt", request);
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 ConnectionService::HandleRequestDisconnect(::bgs::protocol::connection::v1::DisconnectRequest const* request) {
  LogUnimplementedServerMethod("ConnectionService.RequestDisconnect", request);
  return ERROR_RPC_NOT_IMPLEMENTED;
}

void ConnectionService::ParseAndHandleConnect(uint32 token, uint32 methodId, MessageBuffer& buffer) {
  ::bgs::protocol::connection::v1::ConnectRequest request;
  if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
    LogFailedParsingRequest("ConnectionService.Connect");
    SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
    return;
  }
  LogCallServerMethod("ConnectionService.Connect", "bgs.protocol.connection.v1.ConnectRequest", &request);
  std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = CreateServerContinuation(token, methodId, "ConnectionService.Connect", ::bgs::protocol::connection::v1::ConnectResponse::descriptor());
  ::bgs::protocol::connection::v1::ConnectResponse response;
  uint32 status = HandleConnect(&request, &response, continuation);
  if (continuation)
    continuation(this, status, &response);
}

void ConnectionService::ParseAndHandleBind(uint32 token, uint32 methodId, MessageBuffer& buffer) {
  ::bgs::protocol::connection::v1::BindRequest request;
  if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
    LogFailedParsingRequest("ConnectionService.Bind");
    SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
    return;
  }
  LogCallServerMethod("ConnectionService.Bind", "bgs.protocol.connection.v1.BindRequest", &request);
  std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = CreateServerContinuation(token, methodId, "ConnectionService.Bind", ::bgs::protocol::connection::v1::BindResponse::descriptor());
  ::bgs::protocol::connection::v1::BindResponse response;
  uint32 status = HandleBind(&request, &response, continuation);
  if (continuation)
    continuation(this, status, &response);
}

void ConnectionService::ParseAndHandleEcho(uint32 token, uint32 methodId, MessageBuffer& buffer) {
  ::bgs::protocol::connection::v1::EchoRequest request;
  if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
    LogFailedParsingRequest("ConnectionService.Echo");
    SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
    return;
  }
  LogCallServerMethod("ConnectionService.Echo", "bgs.protocol.connection.v1.EchoRequest", &request);
  std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = CreateServerContinuation(token, methodId, "ConnectionService.Echo", ::bgs::protocol::connection::v1::EchoResponse::descriptor());
  ::bgs::protocol::connection::v1::EchoResponse response;
  uint32 status = HandleEcho(&request, &response, continuation);
  if (continuation)
    continuation(this, status, &response);
}

void ConnectionService::ParseAndHandleForceDisconnect(uint32 token, uint32 methodId, MessageBuffer& buffer) {
  ::bgs::protocol::connection::v1::DisconnectNotification request;
  if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
    LogFailedParsingRequest("ConnectionService.ForceDisconnect");
    SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
    return;
  }
  uint32 status = HandleForceDisconnect(&request);
  LogCallServerMethod("ConnectionService.ForceDisconnect", "bgs.protocol.connection.v1.DisconnectNotification", &request);
  if (status)
    SendResponse(service_hash_, methodId, token, status);
}

void ConnectionService::ParseAndHandleKeepAlive(uint32 token, uint32 methodId, MessageBuffer& buffer) {
  ::bgs::protocol::NoData request;
  if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
    LogFailedParsingRequest("ConnectionService.KeepAlive");
    SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
    return;
  }
  uint32 status = HandleKeepAlive(&request);
  LogCallServerMethod("ConnectionService.KeepAlive", "bgs.protocol.NoData", &request);
  if (status)
    SendResponse(service_hash_, methodId, token, status);
}

void ConnectionService::ParseAndHandleEncrypt(uint32 token, uint32 methodId, MessageBuffer& buffer) {
  ::bgs::protocol::connection::v1::EncryptRequest request;
  if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
    LogFailedParsingRequest("ConnectionService.Encrypt");
    SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
    return;
  }
  LogCallServerMethod("ConnectionService.Encrypt", "bgs.protocol.connection.v1.EncryptRequest", &request);
  std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = CreateServerContinuation(token, methodId, "ConnectionService.Encrypt", ::bgs::protocol::NoData::descriptor());
  ::bgs::protocol::NoData response;
  uint32 status = HandleEncrypt(&request, &response, continuation);
  if (continuation)
    continuation(this, status, &response);
}

void ConnectionService::ParseAndHandleRequestDisconnect(uint32 token, uint32 methodId, MessageBuffer& buffer) {
  ::bgs::protocol::connection::v1::DisconnectRequest request;
  if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
    LogFailedParsingRequest("ConnectionService.RequestDisconnect");
    SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
    return;
  }
  uint32 status = HandleRequestDisconnect(&request);
  LogCallServerMethod("ConnectionService.RequestDisconnect", "bgs.protocol.connection.v1.DisconnectRequest", &request);
  if (status)
    SendResponse(service_hash_, methodId, token, status);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace connection
}  // namespace protocol
}  // namespace bgs

// @@protoc_insertion_point(global_scope)
