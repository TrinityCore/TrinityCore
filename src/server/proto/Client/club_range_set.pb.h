// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: club_range_set.proto

#ifndef PROTOBUF_club_5frange_5fset_2eproto__INCLUDED
#define PROTOBUF_club_5frange_5fset_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "global_extensions/range.pb.h"
#include "Define.h" // for TC_PROTO_API
// @@protoc_insertion_point(includes)

namespace bgs {
namespace protocol {
namespace club {
namespace v1 {

// Internal implementation detail -- do not call these.
void TC_PROTO_API protobuf_AddDesc_club_5frange_5fset_2eproto();
void protobuf_AssignDesc_club_5frange_5fset_2eproto();
void protobuf_ShutdownFile_club_5frange_5fset_2eproto();

class ClubTypeRangeSet;
class ClubMemberRangeSet;
class ClubStreamRangeSet;
class ClubInvitationRangeSet;
class ClubSuggestionRangeSet;
class ClubTicketRangeSet;
class ClubBanRangeSet;

// ===================================================================

class TC_PROTO_API ClubTypeRangeSet : public ::google::protobuf::Message {
 public:
  ClubTypeRangeSet();
  virtual ~ClubTypeRangeSet();

  ClubTypeRangeSet(const ClubTypeRangeSet& from);

  inline ClubTypeRangeSet& operator=(const ClubTypeRangeSet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClubTypeRangeSet& default_instance();

  void Swap(ClubTypeRangeSet* other);

  // implements Message ----------------------------------------------

  ClubTypeRangeSet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClubTypeRangeSet& from);
  void MergeFrom(const ClubTypeRangeSet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .bgs.protocol.UnsignedIntRange name_range = 2;
  inline bool has_name_range() const;
  inline void clear_name_range();
  static const int kNameRangeFieldNumber = 2;
  inline const ::bgs::protocol::UnsignedIntRange& name_range() const;
  inline ::bgs::protocol::UnsignedIntRange* mutable_name_range();
  inline ::bgs::protocol::UnsignedIntRange* release_name_range();
  inline void set_allocated_name_range(::bgs::protocol::UnsignedIntRange* name_range);

  // optional .bgs.protocol.UnsignedIntRange description_range = 3;
  inline bool has_description_range() const;
  inline void clear_description_range();
  static const int kDescriptionRangeFieldNumber = 3;
  inline const ::bgs::protocol::UnsignedIntRange& description_range() const;
  inline ::bgs::protocol::UnsignedIntRange* mutable_description_range();
  inline ::bgs::protocol::UnsignedIntRange* release_description_range();
  inline void set_allocated_description_range(::bgs::protocol::UnsignedIntRange* description_range);

  // optional .bgs.protocol.UnsignedIntRange broadcast_range = 4;
  inline bool has_broadcast_range() const;
  inline void clear_broadcast_range();
  static const int kBroadcastRangeFieldNumber = 4;
  inline const ::bgs::protocol::UnsignedIntRange& broadcast_range() const;
  inline ::bgs::protocol::UnsignedIntRange* mutable_broadcast_range();
  inline ::bgs::protocol::UnsignedIntRange* release_broadcast_range();
  inline void set_allocated_broadcast_range(::bgs::protocol::UnsignedIntRange* broadcast_range);

  // optional .bgs.protocol.UnsignedIntRange short_name_range = 7;
  inline bool has_short_name_range() const;
  inline void clear_short_name_range();
  static const int kShortNameRangeFieldNumber = 7;
  inline const ::bgs::protocol::UnsignedIntRange& short_name_range() const;
  inline ::bgs::protocol::UnsignedIntRange* mutable_short_name_range();
  inline ::bgs::protocol::UnsignedIntRange* release_short_name_range();
  inline void set_allocated_short_name_range(::bgs::protocol::UnsignedIntRange* short_name_range);

  // optional .bgs.protocol.club.v1.ClubMemberRangeSet member = 25;
  inline bool has_member() const;
  inline void clear_member();
  static const int kMemberFieldNumber = 25;
  inline const ::bgs::protocol::club::v1::ClubMemberRangeSet& member() const;
  inline ::bgs::protocol::club::v1::ClubMemberRangeSet* mutable_member();
  inline ::bgs::protocol::club::v1::ClubMemberRangeSet* release_member();
  inline void set_allocated_member(::bgs::protocol::club::v1::ClubMemberRangeSet* member);

  // optional .bgs.protocol.club.v1.ClubStreamRangeSet stream = 26;
  inline bool has_stream() const;
  inline void clear_stream();
  static const int kStreamFieldNumber = 26;
  inline const ::bgs::protocol::club::v1::ClubStreamRangeSet& stream() const;
  inline ::bgs::protocol::club::v1::ClubStreamRangeSet* mutable_stream();
  inline ::bgs::protocol::club::v1::ClubStreamRangeSet* release_stream();
  inline void set_allocated_stream(::bgs::protocol::club::v1::ClubStreamRangeSet* stream);

  // optional .bgs.protocol.club.v1.ClubInvitationRangeSet invitation = 27;
  inline bool has_invitation() const;
  inline void clear_invitation();
  static const int kInvitationFieldNumber = 27;
  inline const ::bgs::protocol::club::v1::ClubInvitationRangeSet& invitation() const;
  inline ::bgs::protocol::club::v1::ClubInvitationRangeSet* mutable_invitation();
  inline ::bgs::protocol::club::v1::ClubInvitationRangeSet* release_invitation();
  inline void set_allocated_invitation(::bgs::protocol::club::v1::ClubInvitationRangeSet* invitation);

  // optional .bgs.protocol.club.v1.ClubSuggestionRangeSet suggestion = 28;
  inline bool has_suggestion() const;
  inline void clear_suggestion();
  static const int kSuggestionFieldNumber = 28;
  inline const ::bgs::protocol::club::v1::ClubSuggestionRangeSet& suggestion() const;
  inline ::bgs::protocol::club::v1::ClubSuggestionRangeSet* mutable_suggestion();
  inline ::bgs::protocol::club::v1::ClubSuggestionRangeSet* release_suggestion();
  inline void set_allocated_suggestion(::bgs::protocol::club::v1::ClubSuggestionRangeSet* suggestion);

  // optional .bgs.protocol.club.v1.ClubTicketRangeSet ticket = 29;
  inline bool has_ticket() const;
  inline void clear_ticket();
  static const int kTicketFieldNumber = 29;
  inline const ::bgs::protocol::club::v1::ClubTicketRangeSet& ticket() const;
  inline ::bgs::protocol::club::v1::ClubTicketRangeSet* mutable_ticket();
  inline ::bgs::protocol::club::v1::ClubTicketRangeSet* release_ticket();
  inline void set_allocated_ticket(::bgs::protocol::club::v1::ClubTicketRangeSet* ticket);

  // optional .bgs.protocol.club.v1.ClubBanRangeSet ban = 30;
  inline bool has_ban() const;
  inline void clear_ban();
  static const int kBanFieldNumber = 30;
  inline const ::bgs::protocol::club::v1::ClubBanRangeSet& ban() const;
  inline ::bgs::protocol::club::v1::ClubBanRangeSet* mutable_ban();
  inline ::bgs::protocol::club::v1::ClubBanRangeSet* release_ban();
  inline void set_allocated_ban(::bgs::protocol::club::v1::ClubBanRangeSet* ban);

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.ClubTypeRangeSet)
 private:
  inline void set_has_name_range();
  inline void clear_has_name_range();
  inline void set_has_description_range();
  inline void clear_has_description_range();
  inline void set_has_broadcast_range();
  inline void clear_has_broadcast_range();
  inline void set_has_short_name_range();
  inline void clear_has_short_name_range();
  inline void set_has_member();
  inline void clear_has_member();
  inline void set_has_stream();
  inline void clear_has_stream();
  inline void set_has_invitation();
  inline void clear_has_invitation();
  inline void set_has_suggestion();
  inline void clear_has_suggestion();
  inline void set_has_ticket();
  inline void clear_has_ticket();
  inline void set_has_ban();
  inline void clear_has_ban();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::bgs::protocol::UnsignedIntRange* name_range_;
  ::bgs::protocol::UnsignedIntRange* description_range_;
  ::bgs::protocol::UnsignedIntRange* broadcast_range_;
  ::bgs::protocol::UnsignedIntRange* short_name_range_;
  ::bgs::protocol::club::v1::ClubMemberRangeSet* member_;
  ::bgs::protocol::club::v1::ClubStreamRangeSet* stream_;
  ::bgs::protocol::club::v1::ClubInvitationRangeSet* invitation_;
  ::bgs::protocol::club::v1::ClubSuggestionRangeSet* suggestion_;
  ::bgs::protocol::club::v1::ClubTicketRangeSet* ticket_;
  ::bgs::protocol::club::v1::ClubBanRangeSet* ban_;
  friend void TC_PROTO_API protobuf_AddDesc_club_5frange_5fset_2eproto();
  friend void protobuf_AssignDesc_club_5frange_5fset_2eproto();
  friend void protobuf_ShutdownFile_club_5frange_5fset_2eproto();

  void InitAsDefaultInstance();
  static ClubTypeRangeSet* default_instance_;
};
// -------------------------------------------------------------------

class TC_PROTO_API ClubMemberRangeSet : public ::google::protobuf::Message {
 public:
  ClubMemberRangeSet();
  virtual ~ClubMemberRangeSet();

  ClubMemberRangeSet(const ClubMemberRangeSet& from);

  inline ClubMemberRangeSet& operator=(const ClubMemberRangeSet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClubMemberRangeSet& default_instance();

  void Swap(ClubMemberRangeSet* other);

  // implements Message ----------------------------------------------

  ClubMemberRangeSet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClubMemberRangeSet& from);
  void MergeFrom(const ClubMemberRangeSet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .bgs.protocol.UnsignedIntRange count = 1;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 1;
  inline const ::bgs::protocol::UnsignedIntRange& count() const;
  inline ::bgs::protocol::UnsignedIntRange* mutable_count();
  inline ::bgs::protocol::UnsignedIntRange* release_count();
  inline void set_allocated_count(::bgs::protocol::UnsignedIntRange* count);

  // optional .bgs.protocol.UnsignedIntRange voice = 3;
  inline bool has_voice() const;
  inline void clear_voice();
  static const int kVoiceFieldNumber = 3;
  inline const ::bgs::protocol::UnsignedIntRange& voice() const;
  inline ::bgs::protocol::UnsignedIntRange* mutable_voice();
  inline ::bgs::protocol::UnsignedIntRange* release_voice();
  inline void set_allocated_voice(::bgs::protocol::UnsignedIntRange* voice);

  // optional .bgs.protocol.UnsignedIntRange stream_subscriptions = 5;
  inline bool has_stream_subscriptions() const;
  inline void clear_stream_subscriptions();
  static const int kStreamSubscriptionsFieldNumber = 5;
  inline const ::bgs::protocol::UnsignedIntRange& stream_subscriptions() const;
  inline ::bgs::protocol::UnsignedIntRange* mutable_stream_subscriptions();
  inline ::bgs::protocol::UnsignedIntRange* release_stream_subscriptions();
  inline void set_allocated_stream_subscriptions(::bgs::protocol::UnsignedIntRange* stream_subscriptions);

  // optional .bgs.protocol.UnsignedIntRange note_range = 7;
  inline bool has_note_range() const;
  inline void clear_note_range();
  static const int kNoteRangeFieldNumber = 7;
  inline const ::bgs::protocol::UnsignedIntRange& note_range() const;
  inline ::bgs::protocol::UnsignedIntRange* mutable_note_range();
  inline ::bgs::protocol::UnsignedIntRange* release_note_range();
  inline void set_allocated_note_range(::bgs::protocol::UnsignedIntRange* note_range);

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.ClubMemberRangeSet)
 private:
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_voice();
  inline void clear_has_voice();
  inline void set_has_stream_subscriptions();
  inline void clear_has_stream_subscriptions();
  inline void set_has_note_range();
  inline void clear_has_note_range();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::bgs::protocol::UnsignedIntRange* count_;
  ::bgs::protocol::UnsignedIntRange* voice_;
  ::bgs::protocol::UnsignedIntRange* stream_subscriptions_;
  ::bgs::protocol::UnsignedIntRange* note_range_;
  friend void TC_PROTO_API protobuf_AddDesc_club_5frange_5fset_2eproto();
  friend void protobuf_AssignDesc_club_5frange_5fset_2eproto();
  friend void protobuf_ShutdownFile_club_5frange_5fset_2eproto();

  void InitAsDefaultInstance();
  static ClubMemberRangeSet* default_instance_;
};
// -------------------------------------------------------------------

class TC_PROTO_API ClubStreamRangeSet : public ::google::protobuf::Message {
 public:
  ClubStreamRangeSet();
  virtual ~ClubStreamRangeSet();

  ClubStreamRangeSet(const ClubStreamRangeSet& from);

  inline ClubStreamRangeSet& operator=(const ClubStreamRangeSet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClubStreamRangeSet& default_instance();

  void Swap(ClubStreamRangeSet* other);

  // implements Message ----------------------------------------------

  ClubStreamRangeSet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClubStreamRangeSet& from);
  void MergeFrom(const ClubStreamRangeSet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .bgs.protocol.UnsignedIntRange count = 1;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 1;
  inline const ::bgs::protocol::UnsignedIntRange& count() const;
  inline ::bgs::protocol::UnsignedIntRange* mutable_count();
  inline ::bgs::protocol::UnsignedIntRange* release_count();
  inline void set_allocated_count(::bgs::protocol::UnsignedIntRange* count);

  // optional .bgs.protocol.UnsignedIntRange name_range = 3;
  inline bool has_name_range() const;
  inline void clear_name_range();
  static const int kNameRangeFieldNumber = 3;
  inline const ::bgs::protocol::UnsignedIntRange& name_range() const;
  inline ::bgs::protocol::UnsignedIntRange* mutable_name_range();
  inline ::bgs::protocol::UnsignedIntRange* release_name_range();
  inline void set_allocated_name_range(::bgs::protocol::UnsignedIntRange* name_range);

  // optional .bgs.protocol.UnsignedIntRange subject_range = 4;
  inline bool has_subject_range() const;
  inline void clear_subject_range();
  static const int kSubjectRangeFieldNumber = 4;
  inline const ::bgs::protocol::UnsignedIntRange& subject_range() const;
  inline ::bgs::protocol::UnsignedIntRange* mutable_subject_range();
  inline ::bgs::protocol::UnsignedIntRange* release_subject_range();
  inline void set_allocated_subject_range(::bgs::protocol::UnsignedIntRange* subject_range);

  // optional .bgs.protocol.UnsignedIntRange message_range = 5;
  inline bool has_message_range() const;
  inline void clear_message_range();
  static const int kMessageRangeFieldNumber = 5;
  inline const ::bgs::protocol::UnsignedIntRange& message_range() const;
  inline ::bgs::protocol::UnsignedIntRange* mutable_message_range();
  inline ::bgs::protocol::UnsignedIntRange* release_message_range();
  inline void set_allocated_message_range(::bgs::protocol::UnsignedIntRange* message_range);

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.ClubStreamRangeSet)
 private:
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_name_range();
  inline void clear_has_name_range();
  inline void set_has_subject_range();
  inline void clear_has_subject_range();
  inline void set_has_message_range();
  inline void clear_has_message_range();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::bgs::protocol::UnsignedIntRange* count_;
  ::bgs::protocol::UnsignedIntRange* name_range_;
  ::bgs::protocol::UnsignedIntRange* subject_range_;
  ::bgs::protocol::UnsignedIntRange* message_range_;
  friend void TC_PROTO_API protobuf_AddDesc_club_5frange_5fset_2eproto();
  friend void protobuf_AssignDesc_club_5frange_5fset_2eproto();
  friend void protobuf_ShutdownFile_club_5frange_5fset_2eproto();

  void InitAsDefaultInstance();
  static ClubStreamRangeSet* default_instance_;
};
// -------------------------------------------------------------------

class TC_PROTO_API ClubInvitationRangeSet : public ::google::protobuf::Message {
 public:
  ClubInvitationRangeSet();
  virtual ~ClubInvitationRangeSet();

  ClubInvitationRangeSet(const ClubInvitationRangeSet& from);

  inline ClubInvitationRangeSet& operator=(const ClubInvitationRangeSet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClubInvitationRangeSet& default_instance();

  void Swap(ClubInvitationRangeSet* other);

  // implements Message ----------------------------------------------

  ClubInvitationRangeSet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClubInvitationRangeSet& from);
  void MergeFrom(const ClubInvitationRangeSet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .bgs.protocol.UnsignedIntRange count = 1;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 1;
  inline const ::bgs::protocol::UnsignedIntRange& count() const;
  inline ::bgs::protocol::UnsignedIntRange* mutable_count();
  inline ::bgs::protocol::UnsignedIntRange* release_count();
  inline void set_allocated_count(::bgs::protocol::UnsignedIntRange* count);

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.ClubInvitationRangeSet)
 private:
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::bgs::protocol::UnsignedIntRange* count_;
  friend void TC_PROTO_API protobuf_AddDesc_club_5frange_5fset_2eproto();
  friend void protobuf_AssignDesc_club_5frange_5fset_2eproto();
  friend void protobuf_ShutdownFile_club_5frange_5fset_2eproto();

  void InitAsDefaultInstance();
  static ClubInvitationRangeSet* default_instance_;
};
// -------------------------------------------------------------------

class TC_PROTO_API ClubSuggestionRangeSet : public ::google::protobuf::Message {
 public:
  ClubSuggestionRangeSet();
  virtual ~ClubSuggestionRangeSet();

  ClubSuggestionRangeSet(const ClubSuggestionRangeSet& from);

  inline ClubSuggestionRangeSet& operator=(const ClubSuggestionRangeSet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClubSuggestionRangeSet& default_instance();

  void Swap(ClubSuggestionRangeSet* other);

  // implements Message ----------------------------------------------

  ClubSuggestionRangeSet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClubSuggestionRangeSet& from);
  void MergeFrom(const ClubSuggestionRangeSet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .bgs.protocol.UnsignedIntRange count = 1;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 1;
  inline const ::bgs::protocol::UnsignedIntRange& count() const;
  inline ::bgs::protocol::UnsignedIntRange* mutable_count();
  inline ::bgs::protocol::UnsignedIntRange* release_count();
  inline void set_allocated_count(::bgs::protocol::UnsignedIntRange* count);

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.ClubSuggestionRangeSet)
 private:
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::bgs::protocol::UnsignedIntRange* count_;
  friend void TC_PROTO_API protobuf_AddDesc_club_5frange_5fset_2eproto();
  friend void protobuf_AssignDesc_club_5frange_5fset_2eproto();
  friend void protobuf_ShutdownFile_club_5frange_5fset_2eproto();

  void InitAsDefaultInstance();
  static ClubSuggestionRangeSet* default_instance_;
};
// -------------------------------------------------------------------

class TC_PROTO_API ClubTicketRangeSet : public ::google::protobuf::Message {
 public:
  ClubTicketRangeSet();
  virtual ~ClubTicketRangeSet();

  ClubTicketRangeSet(const ClubTicketRangeSet& from);

  inline ClubTicketRangeSet& operator=(const ClubTicketRangeSet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClubTicketRangeSet& default_instance();

  void Swap(ClubTicketRangeSet* other);

  // implements Message ----------------------------------------------

  ClubTicketRangeSet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClubTicketRangeSet& from);
  void MergeFrom(const ClubTicketRangeSet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .bgs.protocol.UnsignedIntRange count = 1;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 1;
  inline const ::bgs::protocol::UnsignedIntRange& count() const;
  inline ::bgs::protocol::UnsignedIntRange* mutable_count();
  inline ::bgs::protocol::UnsignedIntRange* release_count();
  inline void set_allocated_count(::bgs::protocol::UnsignedIntRange* count);

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.ClubTicketRangeSet)
 private:
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::bgs::protocol::UnsignedIntRange* count_;
  friend void TC_PROTO_API protobuf_AddDesc_club_5frange_5fset_2eproto();
  friend void protobuf_AssignDesc_club_5frange_5fset_2eproto();
  friend void protobuf_ShutdownFile_club_5frange_5fset_2eproto();

  void InitAsDefaultInstance();
  static ClubTicketRangeSet* default_instance_;
};
// -------------------------------------------------------------------

class TC_PROTO_API ClubBanRangeSet : public ::google::protobuf::Message {
 public:
  ClubBanRangeSet();
  virtual ~ClubBanRangeSet();

  ClubBanRangeSet(const ClubBanRangeSet& from);

  inline ClubBanRangeSet& operator=(const ClubBanRangeSet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClubBanRangeSet& default_instance();

  void Swap(ClubBanRangeSet* other);

  // implements Message ----------------------------------------------

  ClubBanRangeSet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClubBanRangeSet& from);
  void MergeFrom(const ClubBanRangeSet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .bgs.protocol.UnsignedIntRange count = 1;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 1;
  inline const ::bgs::protocol::UnsignedIntRange& count() const;
  inline ::bgs::protocol::UnsignedIntRange* mutable_count();
  inline ::bgs::protocol::UnsignedIntRange* release_count();
  inline void set_allocated_count(::bgs::protocol::UnsignedIntRange* count);

  // optional .bgs.protocol.UnsignedIntRange reason_range = 3;
  inline bool has_reason_range() const;
  inline void clear_reason_range();
  static const int kReasonRangeFieldNumber = 3;
  inline const ::bgs::protocol::UnsignedIntRange& reason_range() const;
  inline ::bgs::protocol::UnsignedIntRange* mutable_reason_range();
  inline ::bgs::protocol::UnsignedIntRange* release_reason_range();
  inline void set_allocated_reason_range(::bgs::protocol::UnsignedIntRange* reason_range);

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.ClubBanRangeSet)
 private:
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_reason_range();
  inline void clear_has_reason_range();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::bgs::protocol::UnsignedIntRange* count_;
  ::bgs::protocol::UnsignedIntRange* reason_range_;
  friend void TC_PROTO_API protobuf_AddDesc_club_5frange_5fset_2eproto();
  friend void protobuf_AssignDesc_club_5frange_5fset_2eproto();
  friend void protobuf_ShutdownFile_club_5frange_5fset_2eproto();

  void InitAsDefaultInstance();
  static ClubBanRangeSet* default_instance_;
};
// ===================================================================


// ===================================================================


// ===================================================================

// ClubTypeRangeSet

// optional .bgs.protocol.UnsignedIntRange name_range = 2;
inline bool ClubTypeRangeSet::has_name_range() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClubTypeRangeSet::set_has_name_range() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClubTypeRangeSet::clear_has_name_range() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClubTypeRangeSet::clear_name_range() {
  if (name_range_ != NULL) name_range_->::bgs::protocol::UnsignedIntRange::Clear();
  clear_has_name_range();
}
inline const ::bgs::protocol::UnsignedIntRange& ClubTypeRangeSet::name_range() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubTypeRangeSet.name_range)
  return name_range_ != NULL ? *name_range_ : *default_instance_->name_range_;
}
inline ::bgs::protocol::UnsignedIntRange* ClubTypeRangeSet::mutable_name_range() {
  set_has_name_range();
  if (name_range_ == NULL) name_range_ = new ::bgs::protocol::UnsignedIntRange;
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubTypeRangeSet.name_range)
  return name_range_;
}
inline ::bgs::protocol::UnsignedIntRange* ClubTypeRangeSet::release_name_range() {
  clear_has_name_range();
  ::bgs::protocol::UnsignedIntRange* temp = name_range_;
  name_range_ = NULL;
  return temp;
}
inline void ClubTypeRangeSet::set_allocated_name_range(::bgs::protocol::UnsignedIntRange* name_range) {
  delete name_range_;
  name_range_ = name_range;
  if (name_range) {
    set_has_name_range();
  } else {
    clear_has_name_range();
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.ClubTypeRangeSet.name_range)
}

// optional .bgs.protocol.UnsignedIntRange description_range = 3;
inline bool ClubTypeRangeSet::has_description_range() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClubTypeRangeSet::set_has_description_range() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ClubTypeRangeSet::clear_has_description_range() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ClubTypeRangeSet::clear_description_range() {
  if (description_range_ != NULL) description_range_->::bgs::protocol::UnsignedIntRange::Clear();
  clear_has_description_range();
}
inline const ::bgs::protocol::UnsignedIntRange& ClubTypeRangeSet::description_range() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubTypeRangeSet.description_range)
  return description_range_ != NULL ? *description_range_ : *default_instance_->description_range_;
}
inline ::bgs::protocol::UnsignedIntRange* ClubTypeRangeSet::mutable_description_range() {
  set_has_description_range();
  if (description_range_ == NULL) description_range_ = new ::bgs::protocol::UnsignedIntRange;
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubTypeRangeSet.description_range)
  return description_range_;
}
inline ::bgs::protocol::UnsignedIntRange* ClubTypeRangeSet::release_description_range() {
  clear_has_description_range();
  ::bgs::protocol::UnsignedIntRange* temp = description_range_;
  description_range_ = NULL;
  return temp;
}
inline void ClubTypeRangeSet::set_allocated_description_range(::bgs::protocol::UnsignedIntRange* description_range) {
  delete description_range_;
  description_range_ = description_range;
  if (description_range) {
    set_has_description_range();
  } else {
    clear_has_description_range();
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.ClubTypeRangeSet.description_range)
}

// optional .bgs.protocol.UnsignedIntRange broadcast_range = 4;
inline bool ClubTypeRangeSet::has_broadcast_range() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ClubTypeRangeSet::set_has_broadcast_range() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ClubTypeRangeSet::clear_has_broadcast_range() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ClubTypeRangeSet::clear_broadcast_range() {
  if (broadcast_range_ != NULL) broadcast_range_->::bgs::protocol::UnsignedIntRange::Clear();
  clear_has_broadcast_range();
}
inline const ::bgs::protocol::UnsignedIntRange& ClubTypeRangeSet::broadcast_range() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubTypeRangeSet.broadcast_range)
  return broadcast_range_ != NULL ? *broadcast_range_ : *default_instance_->broadcast_range_;
}
inline ::bgs::protocol::UnsignedIntRange* ClubTypeRangeSet::mutable_broadcast_range() {
  set_has_broadcast_range();
  if (broadcast_range_ == NULL) broadcast_range_ = new ::bgs::protocol::UnsignedIntRange;
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubTypeRangeSet.broadcast_range)
  return broadcast_range_;
}
inline ::bgs::protocol::UnsignedIntRange* ClubTypeRangeSet::release_broadcast_range() {
  clear_has_broadcast_range();
  ::bgs::protocol::UnsignedIntRange* temp = broadcast_range_;
  broadcast_range_ = NULL;
  return temp;
}
inline void ClubTypeRangeSet::set_allocated_broadcast_range(::bgs::protocol::UnsignedIntRange* broadcast_range) {
  delete broadcast_range_;
  broadcast_range_ = broadcast_range;
  if (broadcast_range) {
    set_has_broadcast_range();
  } else {
    clear_has_broadcast_range();
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.ClubTypeRangeSet.broadcast_range)
}

// optional .bgs.protocol.UnsignedIntRange short_name_range = 7;
inline bool ClubTypeRangeSet::has_short_name_range() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ClubTypeRangeSet::set_has_short_name_range() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ClubTypeRangeSet::clear_has_short_name_range() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ClubTypeRangeSet::clear_short_name_range() {
  if (short_name_range_ != NULL) short_name_range_->::bgs::protocol::UnsignedIntRange::Clear();
  clear_has_short_name_range();
}
inline const ::bgs::protocol::UnsignedIntRange& ClubTypeRangeSet::short_name_range() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubTypeRangeSet.short_name_range)
  return short_name_range_ != NULL ? *short_name_range_ : *default_instance_->short_name_range_;
}
inline ::bgs::protocol::UnsignedIntRange* ClubTypeRangeSet::mutable_short_name_range() {
  set_has_short_name_range();
  if (short_name_range_ == NULL) short_name_range_ = new ::bgs::protocol::UnsignedIntRange;
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubTypeRangeSet.short_name_range)
  return short_name_range_;
}
inline ::bgs::protocol::UnsignedIntRange* ClubTypeRangeSet::release_short_name_range() {
  clear_has_short_name_range();
  ::bgs::protocol::UnsignedIntRange* temp = short_name_range_;
  short_name_range_ = NULL;
  return temp;
}
inline void ClubTypeRangeSet::set_allocated_short_name_range(::bgs::protocol::UnsignedIntRange* short_name_range) {
  delete short_name_range_;
  short_name_range_ = short_name_range;
  if (short_name_range) {
    set_has_short_name_range();
  } else {
    clear_has_short_name_range();
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.ClubTypeRangeSet.short_name_range)
}

// optional .bgs.protocol.club.v1.ClubMemberRangeSet member = 25;
inline bool ClubTypeRangeSet::has_member() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ClubTypeRangeSet::set_has_member() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ClubTypeRangeSet::clear_has_member() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ClubTypeRangeSet::clear_member() {
  if (member_ != NULL) member_->::bgs::protocol::club::v1::ClubMemberRangeSet::Clear();
  clear_has_member();
}
inline const ::bgs::protocol::club::v1::ClubMemberRangeSet& ClubTypeRangeSet::member() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubTypeRangeSet.member)
  return member_ != NULL ? *member_ : *default_instance_->member_;
}
inline ::bgs::protocol::club::v1::ClubMemberRangeSet* ClubTypeRangeSet::mutable_member() {
  set_has_member();
  if (member_ == NULL) member_ = new ::bgs::protocol::club::v1::ClubMemberRangeSet;
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubTypeRangeSet.member)
  return member_;
}
inline ::bgs::protocol::club::v1::ClubMemberRangeSet* ClubTypeRangeSet::release_member() {
  clear_has_member();
  ::bgs::protocol::club::v1::ClubMemberRangeSet* temp = member_;
  member_ = NULL;
  return temp;
}
inline void ClubTypeRangeSet::set_allocated_member(::bgs::protocol::club::v1::ClubMemberRangeSet* member) {
  delete member_;
  member_ = member;
  if (member) {
    set_has_member();
  } else {
    clear_has_member();
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.ClubTypeRangeSet.member)
}

// optional .bgs.protocol.club.v1.ClubStreamRangeSet stream = 26;
inline bool ClubTypeRangeSet::has_stream() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ClubTypeRangeSet::set_has_stream() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ClubTypeRangeSet::clear_has_stream() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ClubTypeRangeSet::clear_stream() {
  if (stream_ != NULL) stream_->::bgs::protocol::club::v1::ClubStreamRangeSet::Clear();
  clear_has_stream();
}
inline const ::bgs::protocol::club::v1::ClubStreamRangeSet& ClubTypeRangeSet::stream() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubTypeRangeSet.stream)
  return stream_ != NULL ? *stream_ : *default_instance_->stream_;
}
inline ::bgs::protocol::club::v1::ClubStreamRangeSet* ClubTypeRangeSet::mutable_stream() {
  set_has_stream();
  if (stream_ == NULL) stream_ = new ::bgs::protocol::club::v1::ClubStreamRangeSet;
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubTypeRangeSet.stream)
  return stream_;
}
inline ::bgs::protocol::club::v1::ClubStreamRangeSet* ClubTypeRangeSet::release_stream() {
  clear_has_stream();
  ::bgs::protocol::club::v1::ClubStreamRangeSet* temp = stream_;
  stream_ = NULL;
  return temp;
}
inline void ClubTypeRangeSet::set_allocated_stream(::bgs::protocol::club::v1::ClubStreamRangeSet* stream) {
  delete stream_;
  stream_ = stream;
  if (stream) {
    set_has_stream();
  } else {
    clear_has_stream();
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.ClubTypeRangeSet.stream)
}

// optional .bgs.protocol.club.v1.ClubInvitationRangeSet invitation = 27;
inline bool ClubTypeRangeSet::has_invitation() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ClubTypeRangeSet::set_has_invitation() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ClubTypeRangeSet::clear_has_invitation() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ClubTypeRangeSet::clear_invitation() {
  if (invitation_ != NULL) invitation_->::bgs::protocol::club::v1::ClubInvitationRangeSet::Clear();
  clear_has_invitation();
}
inline const ::bgs::protocol::club::v1::ClubInvitationRangeSet& ClubTypeRangeSet::invitation() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubTypeRangeSet.invitation)
  return invitation_ != NULL ? *invitation_ : *default_instance_->invitation_;
}
inline ::bgs::protocol::club::v1::ClubInvitationRangeSet* ClubTypeRangeSet::mutable_invitation() {
  set_has_invitation();
  if (invitation_ == NULL) invitation_ = new ::bgs::protocol::club::v1::ClubInvitationRangeSet;
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubTypeRangeSet.invitation)
  return invitation_;
}
inline ::bgs::protocol::club::v1::ClubInvitationRangeSet* ClubTypeRangeSet::release_invitation() {
  clear_has_invitation();
  ::bgs::protocol::club::v1::ClubInvitationRangeSet* temp = invitation_;
  invitation_ = NULL;
  return temp;
}
inline void ClubTypeRangeSet::set_allocated_invitation(::bgs::protocol::club::v1::ClubInvitationRangeSet* invitation) {
  delete invitation_;
  invitation_ = invitation;
  if (invitation) {
    set_has_invitation();
  } else {
    clear_has_invitation();
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.ClubTypeRangeSet.invitation)
}

// optional .bgs.protocol.club.v1.ClubSuggestionRangeSet suggestion = 28;
inline bool ClubTypeRangeSet::has_suggestion() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ClubTypeRangeSet::set_has_suggestion() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ClubTypeRangeSet::clear_has_suggestion() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ClubTypeRangeSet::clear_suggestion() {
  if (suggestion_ != NULL) suggestion_->::bgs::protocol::club::v1::ClubSuggestionRangeSet::Clear();
  clear_has_suggestion();
}
inline const ::bgs::protocol::club::v1::ClubSuggestionRangeSet& ClubTypeRangeSet::suggestion() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubTypeRangeSet.suggestion)
  return suggestion_ != NULL ? *suggestion_ : *default_instance_->suggestion_;
}
inline ::bgs::protocol::club::v1::ClubSuggestionRangeSet* ClubTypeRangeSet::mutable_suggestion() {
  set_has_suggestion();
  if (suggestion_ == NULL) suggestion_ = new ::bgs::protocol::club::v1::ClubSuggestionRangeSet;
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubTypeRangeSet.suggestion)
  return suggestion_;
}
inline ::bgs::protocol::club::v1::ClubSuggestionRangeSet* ClubTypeRangeSet::release_suggestion() {
  clear_has_suggestion();
  ::bgs::protocol::club::v1::ClubSuggestionRangeSet* temp = suggestion_;
  suggestion_ = NULL;
  return temp;
}
inline void ClubTypeRangeSet::set_allocated_suggestion(::bgs::protocol::club::v1::ClubSuggestionRangeSet* suggestion) {
  delete suggestion_;
  suggestion_ = suggestion;
  if (suggestion) {
    set_has_suggestion();
  } else {
    clear_has_suggestion();
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.ClubTypeRangeSet.suggestion)
}

// optional .bgs.protocol.club.v1.ClubTicketRangeSet ticket = 29;
inline bool ClubTypeRangeSet::has_ticket() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ClubTypeRangeSet::set_has_ticket() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ClubTypeRangeSet::clear_has_ticket() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ClubTypeRangeSet::clear_ticket() {
  if (ticket_ != NULL) ticket_->::bgs::protocol::club::v1::ClubTicketRangeSet::Clear();
  clear_has_ticket();
}
inline const ::bgs::protocol::club::v1::ClubTicketRangeSet& ClubTypeRangeSet::ticket() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubTypeRangeSet.ticket)
  return ticket_ != NULL ? *ticket_ : *default_instance_->ticket_;
}
inline ::bgs::protocol::club::v1::ClubTicketRangeSet* ClubTypeRangeSet::mutable_ticket() {
  set_has_ticket();
  if (ticket_ == NULL) ticket_ = new ::bgs::protocol::club::v1::ClubTicketRangeSet;
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubTypeRangeSet.ticket)
  return ticket_;
}
inline ::bgs::protocol::club::v1::ClubTicketRangeSet* ClubTypeRangeSet::release_ticket() {
  clear_has_ticket();
  ::bgs::protocol::club::v1::ClubTicketRangeSet* temp = ticket_;
  ticket_ = NULL;
  return temp;
}
inline void ClubTypeRangeSet::set_allocated_ticket(::bgs::protocol::club::v1::ClubTicketRangeSet* ticket) {
  delete ticket_;
  ticket_ = ticket;
  if (ticket) {
    set_has_ticket();
  } else {
    clear_has_ticket();
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.ClubTypeRangeSet.ticket)
}

// optional .bgs.protocol.club.v1.ClubBanRangeSet ban = 30;
inline bool ClubTypeRangeSet::has_ban() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ClubTypeRangeSet::set_has_ban() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ClubTypeRangeSet::clear_has_ban() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ClubTypeRangeSet::clear_ban() {
  if (ban_ != NULL) ban_->::bgs::protocol::club::v1::ClubBanRangeSet::Clear();
  clear_has_ban();
}
inline const ::bgs::protocol::club::v1::ClubBanRangeSet& ClubTypeRangeSet::ban() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubTypeRangeSet.ban)
  return ban_ != NULL ? *ban_ : *default_instance_->ban_;
}
inline ::bgs::protocol::club::v1::ClubBanRangeSet* ClubTypeRangeSet::mutable_ban() {
  set_has_ban();
  if (ban_ == NULL) ban_ = new ::bgs::protocol::club::v1::ClubBanRangeSet;
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubTypeRangeSet.ban)
  return ban_;
}
inline ::bgs::protocol::club::v1::ClubBanRangeSet* ClubTypeRangeSet::release_ban() {
  clear_has_ban();
  ::bgs::protocol::club::v1::ClubBanRangeSet* temp = ban_;
  ban_ = NULL;
  return temp;
}
inline void ClubTypeRangeSet::set_allocated_ban(::bgs::protocol::club::v1::ClubBanRangeSet* ban) {
  delete ban_;
  ban_ = ban;
  if (ban) {
    set_has_ban();
  } else {
    clear_has_ban();
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.ClubTypeRangeSet.ban)
}

// -------------------------------------------------------------------

// ClubMemberRangeSet

// optional .bgs.protocol.UnsignedIntRange count = 1;
inline bool ClubMemberRangeSet::has_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClubMemberRangeSet::set_has_count() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClubMemberRangeSet::clear_has_count() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClubMemberRangeSet::clear_count() {
  if (count_ != NULL) count_->::bgs::protocol::UnsignedIntRange::Clear();
  clear_has_count();
}
inline const ::bgs::protocol::UnsignedIntRange& ClubMemberRangeSet::count() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubMemberRangeSet.count)
  return count_ != NULL ? *count_ : *default_instance_->count_;
}
inline ::bgs::protocol::UnsignedIntRange* ClubMemberRangeSet::mutable_count() {
  set_has_count();
  if (count_ == NULL) count_ = new ::bgs::protocol::UnsignedIntRange;
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubMemberRangeSet.count)
  return count_;
}
inline ::bgs::protocol::UnsignedIntRange* ClubMemberRangeSet::release_count() {
  clear_has_count();
  ::bgs::protocol::UnsignedIntRange* temp = count_;
  count_ = NULL;
  return temp;
}
inline void ClubMemberRangeSet::set_allocated_count(::bgs::protocol::UnsignedIntRange* count) {
  delete count_;
  count_ = count;
  if (count) {
    set_has_count();
  } else {
    clear_has_count();
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.ClubMemberRangeSet.count)
}

// optional .bgs.protocol.UnsignedIntRange voice = 3;
inline bool ClubMemberRangeSet::has_voice() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClubMemberRangeSet::set_has_voice() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ClubMemberRangeSet::clear_has_voice() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ClubMemberRangeSet::clear_voice() {
  if (voice_ != NULL) voice_->::bgs::protocol::UnsignedIntRange::Clear();
  clear_has_voice();
}
inline const ::bgs::protocol::UnsignedIntRange& ClubMemberRangeSet::voice() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubMemberRangeSet.voice)
  return voice_ != NULL ? *voice_ : *default_instance_->voice_;
}
inline ::bgs::protocol::UnsignedIntRange* ClubMemberRangeSet::mutable_voice() {
  set_has_voice();
  if (voice_ == NULL) voice_ = new ::bgs::protocol::UnsignedIntRange;
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubMemberRangeSet.voice)
  return voice_;
}
inline ::bgs::protocol::UnsignedIntRange* ClubMemberRangeSet::release_voice() {
  clear_has_voice();
  ::bgs::protocol::UnsignedIntRange* temp = voice_;
  voice_ = NULL;
  return temp;
}
inline void ClubMemberRangeSet::set_allocated_voice(::bgs::protocol::UnsignedIntRange* voice) {
  delete voice_;
  voice_ = voice;
  if (voice) {
    set_has_voice();
  } else {
    clear_has_voice();
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.ClubMemberRangeSet.voice)
}

// optional .bgs.protocol.UnsignedIntRange stream_subscriptions = 5;
inline bool ClubMemberRangeSet::has_stream_subscriptions() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ClubMemberRangeSet::set_has_stream_subscriptions() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ClubMemberRangeSet::clear_has_stream_subscriptions() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ClubMemberRangeSet::clear_stream_subscriptions() {
  if (stream_subscriptions_ != NULL) stream_subscriptions_->::bgs::protocol::UnsignedIntRange::Clear();
  clear_has_stream_subscriptions();
}
inline const ::bgs::protocol::UnsignedIntRange& ClubMemberRangeSet::stream_subscriptions() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubMemberRangeSet.stream_subscriptions)
  return stream_subscriptions_ != NULL ? *stream_subscriptions_ : *default_instance_->stream_subscriptions_;
}
inline ::bgs::protocol::UnsignedIntRange* ClubMemberRangeSet::mutable_stream_subscriptions() {
  set_has_stream_subscriptions();
  if (stream_subscriptions_ == NULL) stream_subscriptions_ = new ::bgs::protocol::UnsignedIntRange;
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubMemberRangeSet.stream_subscriptions)
  return stream_subscriptions_;
}
inline ::bgs::protocol::UnsignedIntRange* ClubMemberRangeSet::release_stream_subscriptions() {
  clear_has_stream_subscriptions();
  ::bgs::protocol::UnsignedIntRange* temp = stream_subscriptions_;
  stream_subscriptions_ = NULL;
  return temp;
}
inline void ClubMemberRangeSet::set_allocated_stream_subscriptions(::bgs::protocol::UnsignedIntRange* stream_subscriptions) {
  delete stream_subscriptions_;
  stream_subscriptions_ = stream_subscriptions;
  if (stream_subscriptions) {
    set_has_stream_subscriptions();
  } else {
    clear_has_stream_subscriptions();
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.ClubMemberRangeSet.stream_subscriptions)
}

// optional .bgs.protocol.UnsignedIntRange note_range = 7;
inline bool ClubMemberRangeSet::has_note_range() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ClubMemberRangeSet::set_has_note_range() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ClubMemberRangeSet::clear_has_note_range() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ClubMemberRangeSet::clear_note_range() {
  if (note_range_ != NULL) note_range_->::bgs::protocol::UnsignedIntRange::Clear();
  clear_has_note_range();
}
inline const ::bgs::protocol::UnsignedIntRange& ClubMemberRangeSet::note_range() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubMemberRangeSet.note_range)
  return note_range_ != NULL ? *note_range_ : *default_instance_->note_range_;
}
inline ::bgs::protocol::UnsignedIntRange* ClubMemberRangeSet::mutable_note_range() {
  set_has_note_range();
  if (note_range_ == NULL) note_range_ = new ::bgs::protocol::UnsignedIntRange;
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubMemberRangeSet.note_range)
  return note_range_;
}
inline ::bgs::protocol::UnsignedIntRange* ClubMemberRangeSet::release_note_range() {
  clear_has_note_range();
  ::bgs::protocol::UnsignedIntRange* temp = note_range_;
  note_range_ = NULL;
  return temp;
}
inline void ClubMemberRangeSet::set_allocated_note_range(::bgs::protocol::UnsignedIntRange* note_range) {
  delete note_range_;
  note_range_ = note_range;
  if (note_range) {
    set_has_note_range();
  } else {
    clear_has_note_range();
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.ClubMemberRangeSet.note_range)
}

// -------------------------------------------------------------------

// ClubStreamRangeSet

// optional .bgs.protocol.UnsignedIntRange count = 1;
inline bool ClubStreamRangeSet::has_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClubStreamRangeSet::set_has_count() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClubStreamRangeSet::clear_has_count() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClubStreamRangeSet::clear_count() {
  if (count_ != NULL) count_->::bgs::protocol::UnsignedIntRange::Clear();
  clear_has_count();
}
inline const ::bgs::protocol::UnsignedIntRange& ClubStreamRangeSet::count() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubStreamRangeSet.count)
  return count_ != NULL ? *count_ : *default_instance_->count_;
}
inline ::bgs::protocol::UnsignedIntRange* ClubStreamRangeSet::mutable_count() {
  set_has_count();
  if (count_ == NULL) count_ = new ::bgs::protocol::UnsignedIntRange;
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubStreamRangeSet.count)
  return count_;
}
inline ::bgs::protocol::UnsignedIntRange* ClubStreamRangeSet::release_count() {
  clear_has_count();
  ::bgs::protocol::UnsignedIntRange* temp = count_;
  count_ = NULL;
  return temp;
}
inline void ClubStreamRangeSet::set_allocated_count(::bgs::protocol::UnsignedIntRange* count) {
  delete count_;
  count_ = count;
  if (count) {
    set_has_count();
  } else {
    clear_has_count();
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.ClubStreamRangeSet.count)
}

// optional .bgs.protocol.UnsignedIntRange name_range = 3;
inline bool ClubStreamRangeSet::has_name_range() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClubStreamRangeSet::set_has_name_range() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ClubStreamRangeSet::clear_has_name_range() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ClubStreamRangeSet::clear_name_range() {
  if (name_range_ != NULL) name_range_->::bgs::protocol::UnsignedIntRange::Clear();
  clear_has_name_range();
}
inline const ::bgs::protocol::UnsignedIntRange& ClubStreamRangeSet::name_range() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubStreamRangeSet.name_range)
  return name_range_ != NULL ? *name_range_ : *default_instance_->name_range_;
}
inline ::bgs::protocol::UnsignedIntRange* ClubStreamRangeSet::mutable_name_range() {
  set_has_name_range();
  if (name_range_ == NULL) name_range_ = new ::bgs::protocol::UnsignedIntRange;
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubStreamRangeSet.name_range)
  return name_range_;
}
inline ::bgs::protocol::UnsignedIntRange* ClubStreamRangeSet::release_name_range() {
  clear_has_name_range();
  ::bgs::protocol::UnsignedIntRange* temp = name_range_;
  name_range_ = NULL;
  return temp;
}
inline void ClubStreamRangeSet::set_allocated_name_range(::bgs::protocol::UnsignedIntRange* name_range) {
  delete name_range_;
  name_range_ = name_range;
  if (name_range) {
    set_has_name_range();
  } else {
    clear_has_name_range();
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.ClubStreamRangeSet.name_range)
}

// optional .bgs.protocol.UnsignedIntRange subject_range = 4;
inline bool ClubStreamRangeSet::has_subject_range() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ClubStreamRangeSet::set_has_subject_range() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ClubStreamRangeSet::clear_has_subject_range() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ClubStreamRangeSet::clear_subject_range() {
  if (subject_range_ != NULL) subject_range_->::bgs::protocol::UnsignedIntRange::Clear();
  clear_has_subject_range();
}
inline const ::bgs::protocol::UnsignedIntRange& ClubStreamRangeSet::subject_range() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubStreamRangeSet.subject_range)
  return subject_range_ != NULL ? *subject_range_ : *default_instance_->subject_range_;
}
inline ::bgs::protocol::UnsignedIntRange* ClubStreamRangeSet::mutable_subject_range() {
  set_has_subject_range();
  if (subject_range_ == NULL) subject_range_ = new ::bgs::protocol::UnsignedIntRange;
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubStreamRangeSet.subject_range)
  return subject_range_;
}
inline ::bgs::protocol::UnsignedIntRange* ClubStreamRangeSet::release_subject_range() {
  clear_has_subject_range();
  ::bgs::protocol::UnsignedIntRange* temp = subject_range_;
  subject_range_ = NULL;
  return temp;
}
inline void ClubStreamRangeSet::set_allocated_subject_range(::bgs::protocol::UnsignedIntRange* subject_range) {
  delete subject_range_;
  subject_range_ = subject_range;
  if (subject_range) {
    set_has_subject_range();
  } else {
    clear_has_subject_range();
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.ClubStreamRangeSet.subject_range)
}

// optional .bgs.protocol.UnsignedIntRange message_range = 5;
inline bool ClubStreamRangeSet::has_message_range() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ClubStreamRangeSet::set_has_message_range() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ClubStreamRangeSet::clear_has_message_range() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ClubStreamRangeSet::clear_message_range() {
  if (message_range_ != NULL) message_range_->::bgs::protocol::UnsignedIntRange::Clear();
  clear_has_message_range();
}
inline const ::bgs::protocol::UnsignedIntRange& ClubStreamRangeSet::message_range() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubStreamRangeSet.message_range)
  return message_range_ != NULL ? *message_range_ : *default_instance_->message_range_;
}
inline ::bgs::protocol::UnsignedIntRange* ClubStreamRangeSet::mutable_message_range() {
  set_has_message_range();
  if (message_range_ == NULL) message_range_ = new ::bgs::protocol::UnsignedIntRange;
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubStreamRangeSet.message_range)
  return message_range_;
}
inline ::bgs::protocol::UnsignedIntRange* ClubStreamRangeSet::release_message_range() {
  clear_has_message_range();
  ::bgs::protocol::UnsignedIntRange* temp = message_range_;
  message_range_ = NULL;
  return temp;
}
inline void ClubStreamRangeSet::set_allocated_message_range(::bgs::protocol::UnsignedIntRange* message_range) {
  delete message_range_;
  message_range_ = message_range;
  if (message_range) {
    set_has_message_range();
  } else {
    clear_has_message_range();
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.ClubStreamRangeSet.message_range)
}

// -------------------------------------------------------------------

// ClubInvitationRangeSet

// optional .bgs.protocol.UnsignedIntRange count = 1;
inline bool ClubInvitationRangeSet::has_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClubInvitationRangeSet::set_has_count() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClubInvitationRangeSet::clear_has_count() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClubInvitationRangeSet::clear_count() {
  if (count_ != NULL) count_->::bgs::protocol::UnsignedIntRange::Clear();
  clear_has_count();
}
inline const ::bgs::protocol::UnsignedIntRange& ClubInvitationRangeSet::count() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubInvitationRangeSet.count)
  return count_ != NULL ? *count_ : *default_instance_->count_;
}
inline ::bgs::protocol::UnsignedIntRange* ClubInvitationRangeSet::mutable_count() {
  set_has_count();
  if (count_ == NULL) count_ = new ::bgs::protocol::UnsignedIntRange;
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubInvitationRangeSet.count)
  return count_;
}
inline ::bgs::protocol::UnsignedIntRange* ClubInvitationRangeSet::release_count() {
  clear_has_count();
  ::bgs::protocol::UnsignedIntRange* temp = count_;
  count_ = NULL;
  return temp;
}
inline void ClubInvitationRangeSet::set_allocated_count(::bgs::protocol::UnsignedIntRange* count) {
  delete count_;
  count_ = count;
  if (count) {
    set_has_count();
  } else {
    clear_has_count();
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.ClubInvitationRangeSet.count)
}

// -------------------------------------------------------------------

// ClubSuggestionRangeSet

// optional .bgs.protocol.UnsignedIntRange count = 1;
inline bool ClubSuggestionRangeSet::has_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClubSuggestionRangeSet::set_has_count() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClubSuggestionRangeSet::clear_has_count() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClubSuggestionRangeSet::clear_count() {
  if (count_ != NULL) count_->::bgs::protocol::UnsignedIntRange::Clear();
  clear_has_count();
}
inline const ::bgs::protocol::UnsignedIntRange& ClubSuggestionRangeSet::count() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubSuggestionRangeSet.count)
  return count_ != NULL ? *count_ : *default_instance_->count_;
}
inline ::bgs::protocol::UnsignedIntRange* ClubSuggestionRangeSet::mutable_count() {
  set_has_count();
  if (count_ == NULL) count_ = new ::bgs::protocol::UnsignedIntRange;
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubSuggestionRangeSet.count)
  return count_;
}
inline ::bgs::protocol::UnsignedIntRange* ClubSuggestionRangeSet::release_count() {
  clear_has_count();
  ::bgs::protocol::UnsignedIntRange* temp = count_;
  count_ = NULL;
  return temp;
}
inline void ClubSuggestionRangeSet::set_allocated_count(::bgs::protocol::UnsignedIntRange* count) {
  delete count_;
  count_ = count;
  if (count) {
    set_has_count();
  } else {
    clear_has_count();
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.ClubSuggestionRangeSet.count)
}

// -------------------------------------------------------------------

// ClubTicketRangeSet

// optional .bgs.protocol.UnsignedIntRange count = 1;
inline bool ClubTicketRangeSet::has_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClubTicketRangeSet::set_has_count() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClubTicketRangeSet::clear_has_count() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClubTicketRangeSet::clear_count() {
  if (count_ != NULL) count_->::bgs::protocol::UnsignedIntRange::Clear();
  clear_has_count();
}
inline const ::bgs::protocol::UnsignedIntRange& ClubTicketRangeSet::count() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubTicketRangeSet.count)
  return count_ != NULL ? *count_ : *default_instance_->count_;
}
inline ::bgs::protocol::UnsignedIntRange* ClubTicketRangeSet::mutable_count() {
  set_has_count();
  if (count_ == NULL) count_ = new ::bgs::protocol::UnsignedIntRange;
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubTicketRangeSet.count)
  return count_;
}
inline ::bgs::protocol::UnsignedIntRange* ClubTicketRangeSet::release_count() {
  clear_has_count();
  ::bgs::protocol::UnsignedIntRange* temp = count_;
  count_ = NULL;
  return temp;
}
inline void ClubTicketRangeSet::set_allocated_count(::bgs::protocol::UnsignedIntRange* count) {
  delete count_;
  count_ = count;
  if (count) {
    set_has_count();
  } else {
    clear_has_count();
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.ClubTicketRangeSet.count)
}

// -------------------------------------------------------------------

// ClubBanRangeSet

// optional .bgs.protocol.UnsignedIntRange count = 1;
inline bool ClubBanRangeSet::has_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClubBanRangeSet::set_has_count() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClubBanRangeSet::clear_has_count() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClubBanRangeSet::clear_count() {
  if (count_ != NULL) count_->::bgs::protocol::UnsignedIntRange::Clear();
  clear_has_count();
}
inline const ::bgs::protocol::UnsignedIntRange& ClubBanRangeSet::count() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubBanRangeSet.count)
  return count_ != NULL ? *count_ : *default_instance_->count_;
}
inline ::bgs::protocol::UnsignedIntRange* ClubBanRangeSet::mutable_count() {
  set_has_count();
  if (count_ == NULL) count_ = new ::bgs::protocol::UnsignedIntRange;
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubBanRangeSet.count)
  return count_;
}
inline ::bgs::protocol::UnsignedIntRange* ClubBanRangeSet::release_count() {
  clear_has_count();
  ::bgs::protocol::UnsignedIntRange* temp = count_;
  count_ = NULL;
  return temp;
}
inline void ClubBanRangeSet::set_allocated_count(::bgs::protocol::UnsignedIntRange* count) {
  delete count_;
  count_ = count;
  if (count) {
    set_has_count();
  } else {
    clear_has_count();
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.ClubBanRangeSet.count)
}

// optional .bgs.protocol.UnsignedIntRange reason_range = 3;
inline bool ClubBanRangeSet::has_reason_range() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClubBanRangeSet::set_has_reason_range() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ClubBanRangeSet::clear_has_reason_range() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ClubBanRangeSet::clear_reason_range() {
  if (reason_range_ != NULL) reason_range_->::bgs::protocol::UnsignedIntRange::Clear();
  clear_has_reason_range();
}
inline const ::bgs::protocol::UnsignedIntRange& ClubBanRangeSet::reason_range() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.ClubBanRangeSet.reason_range)
  return reason_range_ != NULL ? *reason_range_ : *default_instance_->reason_range_;
}
inline ::bgs::protocol::UnsignedIntRange* ClubBanRangeSet::mutable_reason_range() {
  set_has_reason_range();
  if (reason_range_ == NULL) reason_range_ = new ::bgs::protocol::UnsignedIntRange;
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.ClubBanRangeSet.reason_range)
  return reason_range_;
}
inline ::bgs::protocol::UnsignedIntRange* ClubBanRangeSet::release_reason_range() {
  clear_has_reason_range();
  ::bgs::protocol::UnsignedIntRange* temp = reason_range_;
  reason_range_ = NULL;
  return temp;
}
inline void ClubBanRangeSet::set_allocated_reason_range(::bgs::protocol::UnsignedIntRange* reason_range) {
  delete reason_range_;
  reason_range_ = reason_range;
  if (reason_range) {
    set_has_reason_range();
  } else {
    clear_has_reason_range();
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.ClubBanRangeSet.reason_range)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace club
}  // namespace protocol
}  // namespace bgs

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_club_5frange_5fset_2eproto__INCLUDED
