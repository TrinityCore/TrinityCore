// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/common/v2/whisper_types.proto

#ifndef PROTOBUF_api_2fcommon_2fv2_2fwhisper_5ftypes_2eproto__INCLUDED
#define PROTOBUF_api_2fcommon_2fv2_2fwhisper_5ftypes_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "api/common/v1/embed_types.pb.h"
#include "api/common/v1/event_view_types.pb.h"
#include "api/common/v1/message_types.pb.h"
#include "rpc_types.pb.h"
#include "Define.h" // for TC_PROTO_API
// @@protoc_insertion_point(includes)

namespace bgs {
namespace protocol {
namespace whisper {
namespace v2 {

// Internal implementation detail -- do not call these.
void TC_PROTO_API protobuf_AddDesc_api_2fcommon_2fv2_2fwhisper_5ftypes_2eproto();
void protobuf_AssignDesc_api_2fcommon_2fv2_2fwhisper_5ftypes_2eproto();
void protobuf_ShutdownFile_api_2fcommon_2fv2_2fwhisper_5ftypes_2eproto();

class Whisper;
class WhisperView;
class SendWhisperOptions;

// ===================================================================

class TC_PROTO_API Whisper : public ::google::protobuf::Message {
 public:
  Whisper();
  virtual ~Whisper();

  Whisper(const Whisper& from);

  inline Whisper& operator=(const Whisper& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Whisper& default_instance();

  void Swap(Whisper* other);

  // implements Message ----------------------------------------------

  Whisper* New() const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .bgs.protocol.MessageId whisper_id = 1;
  inline bool has_whisper_id() const;
  inline void clear_whisper_id();
  static const int kWhisperIdFieldNumber = 1;
  inline const ::bgs::protocol::MessageId& whisper_id() const;
  inline ::bgs::protocol::MessageId* mutable_whisper_id();
  inline ::bgs::protocol::MessageId* release_whisper_id();
  inline void set_allocated_whisper_id(::bgs::protocol::MessageId* whisper_id);

  // optional uint64 sender_account_id = 2;
  inline bool has_sender_account_id() const;
  inline void clear_sender_account_id();
  static const int kSenderAccountIdFieldNumber = 2;
  inline ::google::protobuf::uint64 sender_account_id() const;
  inline void set_sender_account_id(::google::protobuf::uint64 value);

  // optional uint64 receiver_account_id = 3;
  inline bool has_receiver_account_id() const;
  inline void clear_receiver_account_id();
  static const int kReceiverAccountIdFieldNumber = 3;
  inline ::google::protobuf::uint64 receiver_account_id() const;
  inline void set_receiver_account_id(::google::protobuf::uint64 value);

  // optional uint32 title_id = 4;
  inline bool has_title_id() const;
  inline void clear_title_id();
  static const int kTitleIdFieldNumber = 4;
  inline ::google::protobuf::uint32 title_id() const;
  inline void set_title_id(::google::protobuf::uint32 value);

  // optional string content = 5;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 5;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // repeated .bgs.protocol.EmbedInfo embeds = 6;
  inline int embeds_size() const;
  inline void clear_embeds();
  static const int kEmbedsFieldNumber = 6;
  inline const ::bgs::protocol::EmbedInfo& embeds(int index) const;
  inline ::bgs::protocol::EmbedInfo* mutable_embeds(int index);
  inline ::bgs::protocol::EmbedInfo* add_embeds();
  inline const ::google::protobuf::RepeatedPtrField< ::bgs::protocol::EmbedInfo >&
      embeds() const;
  inline ::google::protobuf::RepeatedPtrField< ::bgs::protocol::EmbedInfo >*
      mutable_embeds();

  // @@protoc_insertion_point(class_scope:bgs.protocol.whisper.v2.Whisper)
 private:
  inline void set_has_whisper_id();
  inline void clear_has_whisper_id();
  inline void set_has_sender_account_id();
  inline void clear_has_sender_account_id();
  inline void set_has_receiver_account_id();
  inline void clear_has_receiver_account_id();
  inline void set_has_title_id();
  inline void clear_has_title_id();
  inline void set_has_content();
  inline void clear_has_content();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::bgs::protocol::MessageId* whisper_id_;
  ::google::protobuf::uint64 sender_account_id_;
  ::google::protobuf::uint64 receiver_account_id_;
  ::std::string* content_;
  ::google::protobuf::RepeatedPtrField< ::bgs::protocol::EmbedInfo > embeds_;
  ::google::protobuf::uint32 title_id_;
  friend void TC_PROTO_API protobuf_AddDesc_api_2fcommon_2fv2_2fwhisper_5ftypes_2eproto();
  friend void protobuf_AssignDesc_api_2fcommon_2fv2_2fwhisper_5ftypes_2eproto();
  friend void protobuf_ShutdownFile_api_2fcommon_2fv2_2fwhisper_5ftypes_2eproto();

  void InitAsDefaultInstance();
  static Whisper* default_instance_;
};
// -------------------------------------------------------------------

class TC_PROTO_API WhisperView : public ::google::protobuf::Message {
 public:
  WhisperView();
  virtual ~WhisperView();

  WhisperView(const WhisperView& from);

  inline WhisperView& operator=(const WhisperView& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WhisperView& default_instance();

  void Swap(WhisperView* other);

  // implements Message ----------------------------------------------

  WhisperView* New() const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 target_account_id = 1;
  inline bool has_target_account_id() const;
  inline void clear_target_account_id();
  static const int kTargetAccountIdFieldNumber = 1;
  inline ::google::protobuf::uint64 target_account_id() const;
  inline void set_target_account_id(::google::protobuf::uint64 value);

  // optional .bgs.protocol.ViewMarker view_marker = 2;
  inline bool has_view_marker() const;
  inline void clear_view_marker();
  static const int kViewMarkerFieldNumber = 2;
  inline const ::bgs::protocol::ViewMarker& view_marker() const;
  inline ::bgs::protocol::ViewMarker* mutable_view_marker();
  inline ::bgs::protocol::ViewMarker* release_view_marker();
  inline void set_allocated_view_marker(::bgs::protocol::ViewMarker* view_marker);

  // optional string target_battle_tag = 3;
  inline bool has_target_battle_tag() const;
  inline void clear_target_battle_tag();
  static const int kTargetBattleTagFieldNumber = 3;
  inline const ::std::string& target_battle_tag() const;
  inline void set_target_battle_tag(const ::std::string& value);
  inline void set_target_battle_tag(const char* value);
  inline void set_target_battle_tag(const char* value, size_t size);
  inline ::std::string* mutable_target_battle_tag();
  inline ::std::string* release_target_battle_tag();
  inline void set_allocated_target_battle_tag(::std::string* target_battle_tag);

  // @@protoc_insertion_point(class_scope:bgs.protocol.whisper.v2.WhisperView)
 private:
  inline void set_has_target_account_id();
  inline void clear_has_target_account_id();
  inline void set_has_view_marker();
  inline void clear_has_view_marker();
  inline void set_has_target_battle_tag();
  inline void clear_has_target_battle_tag();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 target_account_id_;
  ::bgs::protocol::ViewMarker* view_marker_;
  ::std::string* target_battle_tag_;
  friend void TC_PROTO_API protobuf_AddDesc_api_2fcommon_2fv2_2fwhisper_5ftypes_2eproto();
  friend void protobuf_AssignDesc_api_2fcommon_2fv2_2fwhisper_5ftypes_2eproto();
  friend void protobuf_ShutdownFile_api_2fcommon_2fv2_2fwhisper_5ftypes_2eproto();

  void InitAsDefaultInstance();
  static WhisperView* default_instance_;
};
// -------------------------------------------------------------------

class TC_PROTO_API SendWhisperOptions : public ::google::protobuf::Message {
 public:
  SendWhisperOptions();
  virtual ~SendWhisperOptions();

  SendWhisperOptions(const SendWhisperOptions& from);

  inline SendWhisperOptions& operator=(const SendWhisperOptions& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SendWhisperOptions& default_instance();

  void Swap(SendWhisperOptions* other);

  // implements Message ----------------------------------------------

  SendWhisperOptions* New() const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string content = 1;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 1;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // @@protoc_insertion_point(class_scope:bgs.protocol.whisper.v2.SendWhisperOptions)
 private:
  inline void set_has_content();
  inline void clear_has_content();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* content_;
  friend void TC_PROTO_API protobuf_AddDesc_api_2fcommon_2fv2_2fwhisper_5ftypes_2eproto();
  friend void protobuf_AssignDesc_api_2fcommon_2fv2_2fwhisper_5ftypes_2eproto();
  friend void protobuf_ShutdownFile_api_2fcommon_2fv2_2fwhisper_5ftypes_2eproto();

  void InitAsDefaultInstance();
  static SendWhisperOptions* default_instance_;
};
// ===================================================================

// ===================================================================

// ===================================================================

// Whisper

// optional .bgs.protocol.MessageId whisper_id = 1;
inline bool Whisper::has_whisper_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Whisper::set_has_whisper_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Whisper::clear_has_whisper_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Whisper::clear_whisper_id() {
  if (whisper_id_ != NULL) whisper_id_->::bgs::protocol::MessageId::Clear();
  clear_has_whisper_id();
}
inline const ::bgs::protocol::MessageId& Whisper::whisper_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.whisper.v2.Whisper.whisper_id)
  return whisper_id_ != NULL ? *whisper_id_ : *default_instance_->whisper_id_;
}
inline ::bgs::protocol::MessageId* Whisper::mutable_whisper_id() {
  set_has_whisper_id();
  if (whisper_id_ == NULL) whisper_id_ = new ::bgs::protocol::MessageId;
  // @@protoc_insertion_point(field_mutable:bgs.protocol.whisper.v2.Whisper.whisper_id)
  return whisper_id_;
}
inline ::bgs::protocol::MessageId* Whisper::release_whisper_id() {
  clear_has_whisper_id();
  ::bgs::protocol::MessageId* temp = whisper_id_;
  whisper_id_ = NULL;
  return temp;
}
inline void Whisper::set_allocated_whisper_id(::bgs::protocol::MessageId* whisper_id) {
  delete whisper_id_;
  whisper_id_ = whisper_id;
  if (whisper_id) {
    set_has_whisper_id();
  } else {
    clear_has_whisper_id();
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.whisper.v2.Whisper.whisper_id)
}

// optional uint64 sender_account_id = 2;
inline bool Whisper::has_sender_account_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Whisper::set_has_sender_account_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Whisper::clear_has_sender_account_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Whisper::clear_sender_account_id() {
  sender_account_id_ = GOOGLE_ULONGLONG(0);
  clear_has_sender_account_id();
}
inline ::google::protobuf::uint64 Whisper::sender_account_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.whisper.v2.Whisper.sender_account_id)
  return sender_account_id_;
}
inline void Whisper::set_sender_account_id(::google::protobuf::uint64 value) {
  set_has_sender_account_id();
  sender_account_id_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.whisper.v2.Whisper.sender_account_id)
}

// optional uint64 receiver_account_id = 3;
inline bool Whisper::has_receiver_account_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Whisper::set_has_receiver_account_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Whisper::clear_has_receiver_account_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Whisper::clear_receiver_account_id() {
  receiver_account_id_ = GOOGLE_ULONGLONG(0);
  clear_has_receiver_account_id();
}
inline ::google::protobuf::uint64 Whisper::receiver_account_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.whisper.v2.Whisper.receiver_account_id)
  return receiver_account_id_;
}
inline void Whisper::set_receiver_account_id(::google::protobuf::uint64 value) {
  set_has_receiver_account_id();
  receiver_account_id_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.whisper.v2.Whisper.receiver_account_id)
}

// optional uint32 title_id = 4;
inline bool Whisper::has_title_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Whisper::set_has_title_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Whisper::clear_has_title_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Whisper::clear_title_id() {
  title_id_ = 0u;
  clear_has_title_id();
}
inline ::google::protobuf::uint32 Whisper::title_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.whisper.v2.Whisper.title_id)
  return title_id_;
}
inline void Whisper::set_title_id(::google::protobuf::uint32 value) {
  set_has_title_id();
  title_id_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.whisper.v2.Whisper.title_id)
}

// optional string content = 5;
inline bool Whisper::has_content() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Whisper::set_has_content() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Whisper::clear_has_content() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Whisper::clear_content() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& Whisper::content() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.whisper.v2.Whisper.content)
  return *content_;
}
inline void Whisper::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.whisper.v2.Whisper.content)
}
inline void Whisper::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set_char:bgs.protocol.whisper.v2.Whisper.content)
}
inline void Whisper::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.whisper.v2.Whisper.content)
}
inline ::std::string* Whisper::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:bgs.protocol.whisper.v2.Whisper.content)
  return content_;
}
inline ::std::string* Whisper::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Whisper::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.whisper.v2.Whisper.content)
}

// repeated .bgs.protocol.EmbedInfo embeds = 6;
inline int Whisper::embeds_size() const {
  return embeds_.size();
}
inline void Whisper::clear_embeds() {
  embeds_.Clear();
}
inline const ::bgs::protocol::EmbedInfo& Whisper::embeds(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.whisper.v2.Whisper.embeds)
  return embeds_.Get(index);
}
inline ::bgs::protocol::EmbedInfo* Whisper::mutable_embeds(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.whisper.v2.Whisper.embeds)
  return embeds_.Mutable(index);
}
inline ::bgs::protocol::EmbedInfo* Whisper::add_embeds() {
  // @@protoc_insertion_point(field_add:bgs.protocol.whisper.v2.Whisper.embeds)
  return embeds_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bgs::protocol::EmbedInfo >&
Whisper::embeds() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.whisper.v2.Whisper.embeds)
  return embeds_;
}
inline ::google::protobuf::RepeatedPtrField< ::bgs::protocol::EmbedInfo >*
Whisper::mutable_embeds() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.whisper.v2.Whisper.embeds)
  return &embeds_;
}

// -------------------------------------------------------------------

// WhisperView

// optional uint64 target_account_id = 1;
inline bool WhisperView::has_target_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WhisperView::set_has_target_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WhisperView::clear_has_target_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WhisperView::clear_target_account_id() {
  target_account_id_ = GOOGLE_ULONGLONG(0);
  clear_has_target_account_id();
}
inline ::google::protobuf::uint64 WhisperView::target_account_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.whisper.v2.WhisperView.target_account_id)
  return target_account_id_;
}
inline void WhisperView::set_target_account_id(::google::protobuf::uint64 value) {
  set_has_target_account_id();
  target_account_id_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.whisper.v2.WhisperView.target_account_id)
}

// optional .bgs.protocol.ViewMarker view_marker = 2;
inline bool WhisperView::has_view_marker() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WhisperView::set_has_view_marker() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WhisperView::clear_has_view_marker() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WhisperView::clear_view_marker() {
  if (view_marker_ != NULL) view_marker_->::bgs::protocol::ViewMarker::Clear();
  clear_has_view_marker();
}
inline const ::bgs::protocol::ViewMarker& WhisperView::view_marker() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.whisper.v2.WhisperView.view_marker)
  return view_marker_ != NULL ? *view_marker_ : *default_instance_->view_marker_;
}
inline ::bgs::protocol::ViewMarker* WhisperView::mutable_view_marker() {
  set_has_view_marker();
  if (view_marker_ == NULL) view_marker_ = new ::bgs::protocol::ViewMarker;
  // @@protoc_insertion_point(field_mutable:bgs.protocol.whisper.v2.WhisperView.view_marker)
  return view_marker_;
}
inline ::bgs::protocol::ViewMarker* WhisperView::release_view_marker() {
  clear_has_view_marker();
  ::bgs::protocol::ViewMarker* temp = view_marker_;
  view_marker_ = NULL;
  return temp;
}
inline void WhisperView::set_allocated_view_marker(::bgs::protocol::ViewMarker* view_marker) {
  delete view_marker_;
  view_marker_ = view_marker;
  if (view_marker) {
    set_has_view_marker();
  } else {
    clear_has_view_marker();
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.whisper.v2.WhisperView.view_marker)
}

// optional string target_battle_tag = 3;
inline bool WhisperView::has_target_battle_tag() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WhisperView::set_has_target_battle_tag() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WhisperView::clear_has_target_battle_tag() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WhisperView::clear_target_battle_tag() {
  if (target_battle_tag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    target_battle_tag_->clear();
  }
  clear_has_target_battle_tag();
}
inline const ::std::string& WhisperView::target_battle_tag() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.whisper.v2.WhisperView.target_battle_tag)
  return *target_battle_tag_;
}
inline void WhisperView::set_target_battle_tag(const ::std::string& value) {
  set_has_target_battle_tag();
  if (target_battle_tag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    target_battle_tag_ = new ::std::string;
  }
  target_battle_tag_->assign(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.whisper.v2.WhisperView.target_battle_tag)
}
inline void WhisperView::set_target_battle_tag(const char* value) {
  set_has_target_battle_tag();
  if (target_battle_tag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    target_battle_tag_ = new ::std::string;
  }
  target_battle_tag_->assign(value);
  // @@protoc_insertion_point(field_set_char:bgs.protocol.whisper.v2.WhisperView.target_battle_tag)
}
inline void WhisperView::set_target_battle_tag(const char* value, size_t size) {
  set_has_target_battle_tag();
  if (target_battle_tag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    target_battle_tag_ = new ::std::string;
  }
  target_battle_tag_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.whisper.v2.WhisperView.target_battle_tag)
}
inline ::std::string* WhisperView::mutable_target_battle_tag() {
  set_has_target_battle_tag();
  if (target_battle_tag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    target_battle_tag_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:bgs.protocol.whisper.v2.WhisperView.target_battle_tag)
  return target_battle_tag_;
}
inline ::std::string* WhisperView::release_target_battle_tag() {
  clear_has_target_battle_tag();
  if (target_battle_tag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = target_battle_tag_;
    target_battle_tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void WhisperView::set_allocated_target_battle_tag(::std::string* target_battle_tag) {
  if (target_battle_tag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete target_battle_tag_;
  }
  if (target_battle_tag) {
    set_has_target_battle_tag();
    target_battle_tag_ = target_battle_tag;
  } else {
    clear_has_target_battle_tag();
    target_battle_tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.whisper.v2.WhisperView.target_battle_tag)
}

// -------------------------------------------------------------------

// SendWhisperOptions

// optional string content = 1;
inline bool SendWhisperOptions::has_content() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SendWhisperOptions::set_has_content() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SendWhisperOptions::clear_has_content() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SendWhisperOptions::clear_content() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& SendWhisperOptions::content() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.whisper.v2.SendWhisperOptions.content)
  return *content_;
}
inline void SendWhisperOptions::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set:bgs.protocol.whisper.v2.SendWhisperOptions.content)
}
inline void SendWhisperOptions::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set_char:bgs.protocol.whisper.v2.SendWhisperOptions.content)
}
inline void SendWhisperOptions::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:bgs.protocol.whisper.v2.SendWhisperOptions.content)
}
inline ::std::string* SendWhisperOptions::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:bgs.protocol.whisper.v2.SendWhisperOptions.content)
  return content_;
}
inline ::std::string* SendWhisperOptions::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SendWhisperOptions::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.whisper.v2.SendWhisperOptions.content)
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace v2
}  // namespace whisper
}  // namespace protocol
}  // namespace bgs

#ifndef SWIG
namespace google {
namespace protobuf {
}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_api_2fcommon_2fv2_2fwhisper_5ftypes_2eproto__INCLUDED
