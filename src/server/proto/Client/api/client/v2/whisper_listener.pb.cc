// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/client/v2/whisper_listener.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "api/client/v2/whisper_listener.pb.h"

#include <utility>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
#include "BattlenetRpcErrorCodes.h"
// @@protoc_insertion_point(includes)

namespace bgs {
namespace protocol {
namespace whisper {
namespace v2 {
namespace client {

namespace {

const ::google::protobuf::Descriptor* WhisperNotification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WhisperNotification_reflection_ = NULL;
const ::google::protobuf::Descriptor* WhisperEchoNotification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WhisperEchoNotification_reflection_ = NULL;
const ::google::protobuf::Descriptor* WhisperUpdatedNotification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WhisperUpdatedNotification_reflection_ = NULL;
const ::google::protobuf::Descriptor* TypingIndicatorNotification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TypingIndicatorNotification_reflection_ = NULL;
const ::google::protobuf::Descriptor* AdvanceViewTimeNotification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AdvanceViewTimeNotification_reflection_ = NULL;
const ::google::protobuf::Descriptor* AdvanceClearTimeNotification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AdvanceClearTimeNotification_reflection_ = NULL;
const ::google::protobuf::ServiceDescriptor* WhisperListener_descriptor_ = NULL;

}  // namespace

void protobuf_AssignDesc_api_2fclient_2fv2_2fwhisper_5flistener_2eproto() {
  protobuf_AddDesc_api_2fclient_2fv2_2fwhisper_5flistener_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "api/client/v2/whisper_listener.proto");
  GOOGLE_CHECK(file != NULL);
  WhisperNotification_descriptor_ = file->message_type(0);
  static const int WhisperNotification_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhisperNotification, subscriber_account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhisperNotification, whisper_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhisperNotification, target_battle_tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhisperNotification, target_game_account_),
  };
  WhisperNotification_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WhisperNotification_descriptor_,
      WhisperNotification::default_instance_,
      WhisperNotification_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhisperNotification, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhisperNotification, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WhisperNotification));
  WhisperEchoNotification_descriptor_ = file->message_type(1);
  static const int WhisperEchoNotification_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhisperEchoNotification, subscriber_account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhisperEchoNotification, whisper_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhisperEchoNotification, message_origin_),
  };
  WhisperEchoNotification_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WhisperEchoNotification_descriptor_,
      WhisperEchoNotification::default_instance_,
      WhisperEchoNotification_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhisperEchoNotification, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhisperEchoNotification, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WhisperEchoNotification));
  WhisperUpdatedNotification_descriptor_ = file->message_type(2);
  static const int WhisperUpdatedNotification_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhisperUpdatedNotification, subscriber_account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhisperUpdatedNotification, whisper_),
  };
  WhisperUpdatedNotification_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WhisperUpdatedNotification_descriptor_,
      WhisperUpdatedNotification::default_instance_,
      WhisperUpdatedNotification_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhisperUpdatedNotification, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhisperUpdatedNotification, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WhisperUpdatedNotification));
  TypingIndicatorNotification_descriptor_ = file->message_type(3);
  static const int TypingIndicatorNotification_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TypingIndicatorNotification, subscriber_account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TypingIndicatorNotification, target_account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TypingIndicatorNotification, indicator_),
  };
  TypingIndicatorNotification_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TypingIndicatorNotification_descriptor_,
      TypingIndicatorNotification::default_instance_,
      TypingIndicatorNotification_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TypingIndicatorNotification, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TypingIndicatorNotification, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TypingIndicatorNotification));
  AdvanceViewTimeNotification_descriptor_ = file->message_type(4);
  static const int AdvanceViewTimeNotification_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdvanceViewTimeNotification, subscriber_account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdvanceViewTimeNotification, target_account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdvanceViewTimeNotification, view_time_us_),
  };
  AdvanceViewTimeNotification_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AdvanceViewTimeNotification_descriptor_,
      AdvanceViewTimeNotification::default_instance_,
      AdvanceViewTimeNotification_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdvanceViewTimeNotification, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdvanceViewTimeNotification, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AdvanceViewTimeNotification));
  AdvanceClearTimeNotification_descriptor_ = file->message_type(5);
  static const int AdvanceClearTimeNotification_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdvanceClearTimeNotification, subscriber_account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdvanceClearTimeNotification, target_account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdvanceClearTimeNotification, clear_time_us_),
  };
  AdvanceClearTimeNotification_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AdvanceClearTimeNotification_descriptor_,
      AdvanceClearTimeNotification::default_instance_,
      AdvanceClearTimeNotification_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdvanceClearTimeNotification, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdvanceClearTimeNotification, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AdvanceClearTimeNotification));
  WhisperListener_descriptor_ = file->service(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_api_2fclient_2fv2_2fwhisper_5flistener_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WhisperNotification_descriptor_, &WhisperNotification::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WhisperEchoNotification_descriptor_, &WhisperEchoNotification::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WhisperUpdatedNotification_descriptor_, &WhisperUpdatedNotification::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TypingIndicatorNotification_descriptor_, &TypingIndicatorNotification::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AdvanceViewTimeNotification_descriptor_, &AdvanceViewTimeNotification::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AdvanceClearTimeNotification_descriptor_, &AdvanceClearTimeNotification::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_api_2fclient_2fv2_2fwhisper_5flistener_2eproto() {
  delete WhisperNotification::default_instance_;
  delete WhisperNotification_reflection_;
  delete WhisperEchoNotification::default_instance_;
  delete WhisperEchoNotification_reflection_;
  delete WhisperUpdatedNotification::default_instance_;
  delete WhisperUpdatedNotification_reflection_;
  delete TypingIndicatorNotification::default_instance_;
  delete TypingIndicatorNotification_reflection_;
  delete AdvanceViewTimeNotification::default_instance_;
  delete AdvanceViewTimeNotification_reflection_;
  delete AdvanceClearTimeNotification::default_instance_;
  delete AdvanceClearTimeNotification_reflection_;
}

void protobuf_AddDesc_api_2fclient_2fv2_2fwhisper_5flistener_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::bgs::protocol::protobuf_AddDesc_api_2fcommon_2fv1_2fmessage_5ftypes_2eproto();
  ::bgs::protocol::account::v2::protobuf_AddDesc_api_2fcommon_2fv2_2fgame_5faccount_5fhandle_2eproto();
  ::bgs::protocol::whisper::v2::protobuf_AddDesc_api_2fcommon_2fv2_2fwhisper_5ftypes_2eproto();
  ::bgs::protocol::protobuf_AddDesc_rpc_5ftypes_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n$api/client/v2/whisper_listener.proto\022\036"
    "bgs.protocol.whisper.v2.client\032!api/comm"
    "on/v1/message_types.proto\032\'api/common/v2"
    "/game_account_handle.proto\032!api/common/v"
    "2/whisper_types.proto\032\017rpc_types.proto\"\323"
    "\001\n\023WhisperNotification\022\035\n\025subscriber_acc"
    "ount_id\030\001 \001(\004\0221\n\007whisper\030\002 \001(\0132 .bgs.pro"
    "tocol.whisper.v2.Whisper\022!\n\021target_battl"
    "e_tag\030\003 \001(\tB\006\202\371+\002\010\001\022G\n\023target_game_accou"
    "nt\030\004 \001(\0132*.bgs.protocol.account.v2.GameA"
    "ccountHandle\"\230\001\n\027WhisperEchoNotification"
    "\022\035\n\025subscriber_account_id\030\001 \001(\004\0221\n\007whisp"
    "er\030\002 \001(\0132 .bgs.protocol.whisper.v2.Whisp"
    "er\022+\n\016message_origin\030\003 \001(\rB\023\202\371+\017*\rMessag"
    "eOrigin\"n\n\032WhisperUpdatedNotification\022\035\n"
    "\025subscriber_account_id\030\001 \001(\004\0221\n\007whisper\030"
    "\002 \001(\0132 .bgs.protocol.whisper.v2.Whisper\""
    "\211\001\n\033TypingIndicatorNotification\022\035\n\025subsc"
    "riber_account_id\030\001 \001(\004\022\031\n\021target_account"
    "_id\030\002 \001(\004\0220\n\tindicator\030\003 \001(\0162\035.bgs.proto"
    "col.TypingIndicator\"m\n\033AdvanceViewTimeNo"
    "tification\022\035\n\025subscriber_account_id\030\001 \001("
    "\004\022\031\n\021target_account_id\030\002 \001(\004\022\024\n\014view_tim"
    "e_us\030\003 \001(\004\"o\n\034AdvanceClearTimeNotificati"
    "on\022\035\n\025subscriber_account_id\030\001 \001(\004\022\031\n\021tar"
    "get_account_id\030\002 \001(\004\022\025\n\rclear_time_us\030\003 "
    "\001(\0042\372\005\n\017WhisperListener\022e\n\tOnWhisper\0223.b"
    "gs.protocol.whisper.v2.client.WhisperNot"
    "ification\032\031.bgs.protocol.NO_RESPONSE\"\010\202\371"
    "+\004\010\0018\001\022k\n\rOnWhisperEcho\0227.bgs.protocol.w"
    "hisper.v2.client.WhisperEchoNotification"
    "\032\031.bgs.protocol.NO_RESPONSE\"\006\202\371+\002\010\002\022q\n\020O"
    "nWhisperUpdated\022:.bgs.protocol.whisper.v"
    "2.client.WhisperUpdatedNotification\032\031.bg"
    "s.protocol.NO_RESPONSE\"\006\202\371+\002\010\003\022s\n\021OnAdva"
    "nceViewTime\022;.bgs.protocol.whisper.v2.cl"
    "ient.AdvanceViewTimeNotification\032\031.bgs.p"
    "rotocol.NO_RESPONSE\"\006\202\371+\002\010\004\022u\n\022OnAdvance"
    "ClearTime\022<.bgs.protocol.whisper.v2.clie"
    "nt.AdvanceClearTimeNotification\032\031.bgs.pr"
    "otocol.NO_RESPONSE\"\006\202\371+\002\010\005\022s\n\021OnTypingIn"
    "dicator\022;.bgs.protocol.whisper.v2.client"
    ".TypingIndicatorNotification\032\031.bgs.proto"
    "col.NO_RESPONSE\"\006\202\371+\002\010\006\032\?\202\371+3\n/bnet.prot"
    "ocol.whisper.v2.client.WhisperListener8\001"
    "\212\371+\004\010\001\030\001B\002H\002", 1812);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "api/client/v2/whisper_listener.proto", &protobuf_RegisterTypes);
  WhisperNotification::default_instance_ = new WhisperNotification();
  WhisperEchoNotification::default_instance_ = new WhisperEchoNotification();
  WhisperUpdatedNotification::default_instance_ = new WhisperUpdatedNotification();
  TypingIndicatorNotification::default_instance_ = new TypingIndicatorNotification();
  AdvanceViewTimeNotification::default_instance_ = new AdvanceViewTimeNotification();
  AdvanceClearTimeNotification::default_instance_ = new AdvanceClearTimeNotification();
  WhisperNotification::default_instance_->InitAsDefaultInstance();
  WhisperEchoNotification::default_instance_->InitAsDefaultInstance();
  WhisperUpdatedNotification::default_instance_->InitAsDefaultInstance();
  TypingIndicatorNotification::default_instance_->InitAsDefaultInstance();
  AdvanceViewTimeNotification::default_instance_->InitAsDefaultInstance();
  AdvanceClearTimeNotification::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_api_2fclient_2fv2_2fwhisper_5flistener_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_api_2fclient_2fv2_2fwhisper_5flistener_2eproto {
  StaticDescriptorInitializer_api_2fclient_2fv2_2fwhisper_5flistener_2eproto() {
    protobuf_AddDesc_api_2fclient_2fv2_2fwhisper_5flistener_2eproto();
  }
} static_descriptor_initializer_api_2fclient_2fv2_2fwhisper_5flistener_2eproto_;
// ===================================================================

#ifndef _MSC_VER
const int WhisperNotification::kSubscriberAccountIdFieldNumber;
const int WhisperNotification::kWhisperFieldNumber;
const int WhisperNotification::kTargetBattleTagFieldNumber;
const int WhisperNotification::kTargetGameAccountFieldNumber;
#endif  // !_MSC_VER

WhisperNotification::WhisperNotification()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.whisper.v2.client.WhisperNotification)
}

void WhisperNotification::InitAsDefaultInstance() {
  whisper_ = const_cast< ::bgs::protocol::whisper::v2::Whisper*>(&::bgs::protocol::whisper::v2::Whisper::default_instance());
  target_game_account_ = const_cast< ::bgs::protocol::account::v2::GameAccountHandle*>(&::bgs::protocol::account::v2::GameAccountHandle::default_instance());
}

WhisperNotification::WhisperNotification(const WhisperNotification& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.whisper.v2.client.WhisperNotification)
}

void WhisperNotification::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  subscriber_account_id_ = GOOGLE_ULONGLONG(0);
  whisper_ = NULL;
  target_battle_tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  target_game_account_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WhisperNotification::~WhisperNotification() {
  // @@protoc_insertion_point(destructor:bgs.protocol.whisper.v2.client.WhisperNotification)
  SharedDtor();
}

void WhisperNotification::SharedDtor() {
  if (target_battle_tag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete target_battle_tag_;
  }
  if (this != default_instance_) {
    delete whisper_;
    delete target_game_account_;
  }
}

void WhisperNotification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WhisperNotification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WhisperNotification_descriptor_;
}

const WhisperNotification& WhisperNotification::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_api_2fclient_2fv2_2fwhisper_5flistener_2eproto();
  return *default_instance_;
}

WhisperNotification* WhisperNotification::default_instance_ = NULL;

WhisperNotification* WhisperNotification::New() const {
  return new WhisperNotification;
}

void WhisperNotification::Swap(WhisperNotification* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata WhisperNotification::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WhisperNotification_descriptor_;
  metadata.reflection = WhisperNotification_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int WhisperEchoNotification::kSubscriberAccountIdFieldNumber;
const int WhisperEchoNotification::kWhisperFieldNumber;
const int WhisperEchoNotification::kMessageOriginFieldNumber;
#endif  // !_MSC_VER

WhisperEchoNotification::WhisperEchoNotification()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.whisper.v2.client.WhisperEchoNotification)
}

void WhisperEchoNotification::InitAsDefaultInstance() {
  whisper_ = const_cast< ::bgs::protocol::whisper::v2::Whisper*>(&::bgs::protocol::whisper::v2::Whisper::default_instance());
}

WhisperEchoNotification::WhisperEchoNotification(const WhisperEchoNotification& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.whisper.v2.client.WhisperEchoNotification)
}

void WhisperEchoNotification::SharedCtor() {
  _cached_size_ = 0;
  subscriber_account_id_ = GOOGLE_ULONGLONG(0);
  whisper_ = NULL;
  message_origin_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WhisperEchoNotification::~WhisperEchoNotification() {
  // @@protoc_insertion_point(destructor:bgs.protocol.whisper.v2.client.WhisperEchoNotification)
  SharedDtor();
}

void WhisperEchoNotification::SharedDtor() {
  if (this != default_instance_) {
    delete whisper_;
  }
}

void WhisperEchoNotification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WhisperEchoNotification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WhisperEchoNotification_descriptor_;
}

const WhisperEchoNotification& WhisperEchoNotification::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_api_2fclient_2fv2_2fwhisper_5flistener_2eproto();
  return *default_instance_;
}

WhisperEchoNotification* WhisperEchoNotification::default_instance_ = NULL;

WhisperEchoNotification* WhisperEchoNotification::New() const {
  return new WhisperEchoNotification;
}

void WhisperEchoNotification::Swap(WhisperEchoNotification* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata WhisperEchoNotification::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WhisperEchoNotification_descriptor_;
  metadata.reflection = WhisperEchoNotification_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int WhisperUpdatedNotification::kSubscriberAccountIdFieldNumber;
const int WhisperUpdatedNotification::kWhisperFieldNumber;
#endif  // !_MSC_VER

WhisperUpdatedNotification::WhisperUpdatedNotification()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.whisper.v2.client.WhisperUpdatedNotification)
}

void WhisperUpdatedNotification::InitAsDefaultInstance() {
  whisper_ = const_cast< ::bgs::protocol::whisper::v2::Whisper*>(&::bgs::protocol::whisper::v2::Whisper::default_instance());
}

WhisperUpdatedNotification::WhisperUpdatedNotification(const WhisperUpdatedNotification& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.whisper.v2.client.WhisperUpdatedNotification)
}

void WhisperUpdatedNotification::SharedCtor() {
  _cached_size_ = 0;
  subscriber_account_id_ = GOOGLE_ULONGLONG(0);
  whisper_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WhisperUpdatedNotification::~WhisperUpdatedNotification() {
  // @@protoc_insertion_point(destructor:bgs.protocol.whisper.v2.client.WhisperUpdatedNotification)
  SharedDtor();
}

void WhisperUpdatedNotification::SharedDtor() {
  if (this != default_instance_) {
    delete whisper_;
  }
}

void WhisperUpdatedNotification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WhisperUpdatedNotification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WhisperUpdatedNotification_descriptor_;
}

const WhisperUpdatedNotification& WhisperUpdatedNotification::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_api_2fclient_2fv2_2fwhisper_5flistener_2eproto();
  return *default_instance_;
}

WhisperUpdatedNotification* WhisperUpdatedNotification::default_instance_ = NULL;

WhisperUpdatedNotification* WhisperUpdatedNotification::New() const {
  return new WhisperUpdatedNotification;
}

void WhisperUpdatedNotification::Swap(WhisperUpdatedNotification* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata WhisperUpdatedNotification::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WhisperUpdatedNotification_descriptor_;
  metadata.reflection = WhisperUpdatedNotification_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int TypingIndicatorNotification::kSubscriberAccountIdFieldNumber;
const int TypingIndicatorNotification::kTargetAccountIdFieldNumber;
const int TypingIndicatorNotification::kIndicatorFieldNumber;
#endif  // !_MSC_VER

TypingIndicatorNotification::TypingIndicatorNotification()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.whisper.v2.client.TypingIndicatorNotification)
}

void TypingIndicatorNotification::InitAsDefaultInstance() {
}

TypingIndicatorNotification::TypingIndicatorNotification(const TypingIndicatorNotification& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.whisper.v2.client.TypingIndicatorNotification)
}

void TypingIndicatorNotification::SharedCtor() {
  _cached_size_ = 0;
  subscriber_account_id_ = GOOGLE_ULONGLONG(0);
  target_account_id_ = GOOGLE_ULONGLONG(0);
  indicator_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TypingIndicatorNotification::~TypingIndicatorNotification() {
  // @@protoc_insertion_point(destructor:bgs.protocol.whisper.v2.client.TypingIndicatorNotification)
  SharedDtor();
}

void TypingIndicatorNotification::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TypingIndicatorNotification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TypingIndicatorNotification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TypingIndicatorNotification_descriptor_;
}

const TypingIndicatorNotification& TypingIndicatorNotification::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_api_2fclient_2fv2_2fwhisper_5flistener_2eproto();
  return *default_instance_;
}

TypingIndicatorNotification* TypingIndicatorNotification::default_instance_ = NULL;

TypingIndicatorNotification* TypingIndicatorNotification::New() const {
  return new TypingIndicatorNotification;
}

void TypingIndicatorNotification::Swap(TypingIndicatorNotification* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata TypingIndicatorNotification::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TypingIndicatorNotification_descriptor_;
  metadata.reflection = TypingIndicatorNotification_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int AdvanceViewTimeNotification::kSubscriberAccountIdFieldNumber;
const int AdvanceViewTimeNotification::kTargetAccountIdFieldNumber;
const int AdvanceViewTimeNotification::kViewTimeUsFieldNumber;
#endif  // !_MSC_VER

AdvanceViewTimeNotification::AdvanceViewTimeNotification()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.whisper.v2.client.AdvanceViewTimeNotification)
}

void AdvanceViewTimeNotification::InitAsDefaultInstance() {
}

AdvanceViewTimeNotification::AdvanceViewTimeNotification(const AdvanceViewTimeNotification& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.whisper.v2.client.AdvanceViewTimeNotification)
}

void AdvanceViewTimeNotification::SharedCtor() {
  _cached_size_ = 0;
  subscriber_account_id_ = GOOGLE_ULONGLONG(0);
  target_account_id_ = GOOGLE_ULONGLONG(0);
  view_time_us_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AdvanceViewTimeNotification::~AdvanceViewTimeNotification() {
  // @@protoc_insertion_point(destructor:bgs.protocol.whisper.v2.client.AdvanceViewTimeNotification)
  SharedDtor();
}

void AdvanceViewTimeNotification::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AdvanceViewTimeNotification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AdvanceViewTimeNotification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdvanceViewTimeNotification_descriptor_;
}

const AdvanceViewTimeNotification& AdvanceViewTimeNotification::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_api_2fclient_2fv2_2fwhisper_5flistener_2eproto();
  return *default_instance_;
}

AdvanceViewTimeNotification* AdvanceViewTimeNotification::default_instance_ = NULL;

AdvanceViewTimeNotification* AdvanceViewTimeNotification::New() const {
  return new AdvanceViewTimeNotification;
}

void AdvanceViewTimeNotification::Swap(AdvanceViewTimeNotification* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata AdvanceViewTimeNotification::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AdvanceViewTimeNotification_descriptor_;
  metadata.reflection = AdvanceViewTimeNotification_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int AdvanceClearTimeNotification::kSubscriberAccountIdFieldNumber;
const int AdvanceClearTimeNotification::kTargetAccountIdFieldNumber;
const int AdvanceClearTimeNotification::kClearTimeUsFieldNumber;
#endif  // !_MSC_VER

AdvanceClearTimeNotification::AdvanceClearTimeNotification()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.whisper.v2.client.AdvanceClearTimeNotification)
}

void AdvanceClearTimeNotification::InitAsDefaultInstance() {
}

AdvanceClearTimeNotification::AdvanceClearTimeNotification(const AdvanceClearTimeNotification& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.whisper.v2.client.AdvanceClearTimeNotification)
}

void AdvanceClearTimeNotification::SharedCtor() {
  _cached_size_ = 0;
  subscriber_account_id_ = GOOGLE_ULONGLONG(0);
  target_account_id_ = GOOGLE_ULONGLONG(0);
  clear_time_us_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AdvanceClearTimeNotification::~AdvanceClearTimeNotification() {
  // @@protoc_insertion_point(destructor:bgs.protocol.whisper.v2.client.AdvanceClearTimeNotification)
  SharedDtor();
}

void AdvanceClearTimeNotification::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AdvanceClearTimeNotification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AdvanceClearTimeNotification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdvanceClearTimeNotification_descriptor_;
}

const AdvanceClearTimeNotification& AdvanceClearTimeNotification::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_api_2fclient_2fv2_2fwhisper_5flistener_2eproto();
  return *default_instance_;
}

AdvanceClearTimeNotification* AdvanceClearTimeNotification::default_instance_ = NULL;

AdvanceClearTimeNotification* AdvanceClearTimeNotification::New() const {
  return new AdvanceClearTimeNotification;
}

void AdvanceClearTimeNotification::Swap(AdvanceClearTimeNotification* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata AdvanceClearTimeNotification::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AdvanceClearTimeNotification_descriptor_;
  metadata.reflection = AdvanceClearTimeNotification_reflection_;
  return metadata;
}

// ===================================================================

WhisperListener::WhisperListener(bool use_original_hash) : ServiceBase(use_original_hash ? OriginalHash::value : NameHash::value) {
}

WhisperListener::~WhisperListener() {
}

google::protobuf::ServiceDescriptor const* WhisperListener::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WhisperListener_descriptor_;
}

void WhisperListener::OnWhisper(::bgs::protocol::whisper::v2::client::WhisperNotification const* request, bool client /*= false*/, bool server /*= false*/) {
  LogCallClientMethod("WhisperListener.OnWhisper", "bgs.protocol.whisper.v2.client.WhisperNotification", request);
  SendRequest(service_hash_, 1 | (client ? 0x40000000 : 0) | (server ? 0x80000000 : 0), request);
}

void WhisperListener::OnWhisperEcho(::bgs::protocol::whisper::v2::client::WhisperEchoNotification const* request, bool client /*= false*/, bool server /*= false*/) {
  LogCallClientMethod("WhisperListener.OnWhisperEcho", "bgs.protocol.whisper.v2.client.WhisperEchoNotification", request);
  SendRequest(service_hash_, 2 | (client ? 0x40000000 : 0) | (server ? 0x80000000 : 0), request);
}

void WhisperListener::OnWhisperUpdated(::bgs::protocol::whisper::v2::client::WhisperUpdatedNotification const* request, bool client /*= false*/, bool server /*= false*/) {
  LogCallClientMethod("WhisperListener.OnWhisperUpdated", "bgs.protocol.whisper.v2.client.WhisperUpdatedNotification", request);
  SendRequest(service_hash_, 3 | (client ? 0x40000000 : 0) | (server ? 0x80000000 : 0), request);
}

void WhisperListener::OnAdvanceViewTime(::bgs::protocol::whisper::v2::client::AdvanceViewTimeNotification const* request, bool client /*= false*/, bool server /*= false*/) {
  LogCallClientMethod("WhisperListener.OnAdvanceViewTime", "bgs.protocol.whisper.v2.client.AdvanceViewTimeNotification", request);
  SendRequest(service_hash_, 4 | (client ? 0x40000000 : 0) | (server ? 0x80000000 : 0), request);
}

void WhisperListener::OnAdvanceClearTime(::bgs::protocol::whisper::v2::client::AdvanceClearTimeNotification const* request, bool client /*= false*/, bool server /*= false*/) {
  LogCallClientMethod("WhisperListener.OnAdvanceClearTime", "bgs.protocol.whisper.v2.client.AdvanceClearTimeNotification", request);
  SendRequest(service_hash_, 5 | (client ? 0x40000000 : 0) | (server ? 0x80000000 : 0), request);
}

void WhisperListener::OnTypingIndicator(::bgs::protocol::whisper::v2::client::TypingIndicatorNotification const* request, bool client /*= false*/, bool server /*= false*/) {
  LogCallClientMethod("WhisperListener.OnTypingIndicator", "bgs.protocol.whisper.v2.client.TypingIndicatorNotification", request);
  SendRequest(service_hash_, 6 | (client ? 0x40000000 : 0) | (server ? 0x80000000 : 0), request);
}

void WhisperListener::CallServerMethod(uint32 /*token*/, uint32 methodId, MessageBuffer /*buffer*/) {
  LogDisallowedMethod(methodId);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace client
}  // namespace v2
}  // namespace whisper
}  // namespace protocol
}  // namespace bgs

// @@protoc_insertion_point(global_scope)
