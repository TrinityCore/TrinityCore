// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/client/v2/whisper_service.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "api/client/v2/whisper_service.pb.h"

#include <utility>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
#include "BattlenetRpcErrorCodes.h"
// @@protoc_insertion_point(includes)

namespace bgs {
namespace protocol {
namespace whisper {
namespace v2 {
namespace client {

namespace {

const ::google::protobuf::Descriptor* SubscribeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubscribeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubscribeResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubscribeResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* UnsubscribeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnsubscribeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetWhisperHistoryRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetWhisperHistoryRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetWhisperHistoryResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetWhisperHistoryResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SendWhisperRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SendWhisperRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SendWhisperResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SendWhisperResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetTypingIndicatorRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetTypingIndicatorRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AdvanceViewTimeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AdvanceViewTimeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AdvanceClearTimeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AdvanceClearTimeRequest_reflection_ = NULL;
const ::google::protobuf::ServiceDescriptor* WhisperService_descriptor_ = NULL;

}  // namespace

void protobuf_AssignDesc_api_2fclient_2fv2_2fwhisper_5fservice_2eproto() {
  protobuf_AddDesc_api_2fclient_2fv2_2fwhisper_5fservice_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "api/client/v2/whisper_service.proto");
  GOOGLE_CHECK(file != NULL);
  SubscribeRequest_descriptor_ = file->message_type(0);
  static const int SubscribeRequest_offsets_[1] = {
  };
  SubscribeRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SubscribeRequest_descriptor_,
      SubscribeRequest::default_instance_,
      SubscribeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SubscribeRequest));
  SubscribeResponse_descriptor_ = file->message_type(1);
  static const int SubscribeResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeResponse, view_),
  };
  SubscribeResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SubscribeResponse_descriptor_,
      SubscribeResponse::default_instance_,
      SubscribeResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SubscribeResponse));
  UnsubscribeRequest_descriptor_ = file->message_type(2);
  static const int UnsubscribeRequest_offsets_[1] = {
  };
  UnsubscribeRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UnsubscribeRequest_descriptor_,
      UnsubscribeRequest::default_instance_,
      UnsubscribeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnsubscribeRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnsubscribeRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UnsubscribeRequest));
  GetWhisperHistoryRequest_descriptor_ = file->message_type(3);
  static const int GetWhisperHistoryRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetWhisperHistoryRequest, target_account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetWhisperHistoryRequest, options_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetWhisperHistoryRequest, continuation_),
  };
  GetWhisperHistoryRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetWhisperHistoryRequest_descriptor_,
      GetWhisperHistoryRequest::default_instance_,
      GetWhisperHistoryRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetWhisperHistoryRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetWhisperHistoryRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetWhisperHistoryRequest));
  GetWhisperHistoryResponse_descriptor_ = file->message_type(4);
  static const int GetWhisperHistoryResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetWhisperHistoryResponse, whispers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetWhisperHistoryResponse, continuation_),
  };
  GetWhisperHistoryResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetWhisperHistoryResponse_descriptor_,
      GetWhisperHistoryResponse::default_instance_,
      GetWhisperHistoryResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetWhisperHistoryResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetWhisperHistoryResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetWhisperHistoryResponse));
  SendWhisperRequest_descriptor_ = file->message_type(5);
  static const int SendWhisperRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendWhisperRequest, target_account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendWhisperRequest, options_),
  };
  SendWhisperRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SendWhisperRequest_descriptor_,
      SendWhisperRequest::default_instance_,
      SendWhisperRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendWhisperRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendWhisperRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SendWhisperRequest));
  SendWhisperResponse_descriptor_ = file->message_type(6);
  static const int SendWhisperResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendWhisperResponse, whisper_),
  };
  SendWhisperResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SendWhisperResponse_descriptor_,
      SendWhisperResponse::default_instance_,
      SendWhisperResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendWhisperResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendWhisperResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SendWhisperResponse));
  SetTypingIndicatorRequest_descriptor_ = file->message_type(7);
  static const int SetTypingIndicatorRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetTypingIndicatorRequest, target_account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetTypingIndicatorRequest, indicator_),
  };
  SetTypingIndicatorRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetTypingIndicatorRequest_descriptor_,
      SetTypingIndicatorRequest::default_instance_,
      SetTypingIndicatorRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetTypingIndicatorRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetTypingIndicatorRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetTypingIndicatorRequest));
  AdvanceViewTimeRequest_descriptor_ = file->message_type(8);
  static const int AdvanceViewTimeRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdvanceViewTimeRequest, target_account_id_),
  };
  AdvanceViewTimeRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AdvanceViewTimeRequest_descriptor_,
      AdvanceViewTimeRequest::default_instance_,
      AdvanceViewTimeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdvanceViewTimeRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdvanceViewTimeRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AdvanceViewTimeRequest));
  AdvanceClearTimeRequest_descriptor_ = file->message_type(9);
  static const int AdvanceClearTimeRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdvanceClearTimeRequest, target_account_id_),
  };
  AdvanceClearTimeRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AdvanceClearTimeRequest_descriptor_,
      AdvanceClearTimeRequest::default_instance_,
      AdvanceClearTimeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdvanceClearTimeRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdvanceClearTimeRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AdvanceClearTimeRequest));
  WhisperService_descriptor_ = file->service(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_api_2fclient_2fv2_2fwhisper_5fservice_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SubscribeRequest_descriptor_, &SubscribeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SubscribeResponse_descriptor_, &SubscribeResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UnsubscribeRequest_descriptor_, &UnsubscribeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetWhisperHistoryRequest_descriptor_, &GetWhisperHistoryRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetWhisperHistoryResponse_descriptor_, &GetWhisperHistoryResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SendWhisperRequest_descriptor_, &SendWhisperRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SendWhisperResponse_descriptor_, &SendWhisperResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetTypingIndicatorRequest_descriptor_, &SetTypingIndicatorRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AdvanceViewTimeRequest_descriptor_, &AdvanceViewTimeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AdvanceClearTimeRequest_descriptor_, &AdvanceClearTimeRequest::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_api_2fclient_2fv2_2fwhisper_5fservice_2eproto() {
  delete SubscribeRequest::default_instance_;
  delete SubscribeRequest_reflection_;
  delete SubscribeResponse::default_instance_;
  delete SubscribeResponse_reflection_;
  delete UnsubscribeRequest::default_instance_;
  delete UnsubscribeRequest_reflection_;
  delete GetWhisperHistoryRequest::default_instance_;
  delete GetWhisperHistoryRequest_reflection_;
  delete GetWhisperHistoryResponse::default_instance_;
  delete GetWhisperHistoryResponse_reflection_;
  delete SendWhisperRequest::default_instance_;
  delete SendWhisperRequest_reflection_;
  delete SendWhisperResponse::default_instance_;
  delete SendWhisperResponse_reflection_;
  delete SetTypingIndicatorRequest::default_instance_;
  delete SetTypingIndicatorRequest_reflection_;
  delete AdvanceViewTimeRequest::default_instance_;
  delete AdvanceViewTimeRequest_reflection_;
  delete AdvanceClearTimeRequest::default_instance_;
  delete AdvanceClearTimeRequest_reflection_;
}

void protobuf_AddDesc_api_2fclient_2fv2_2fwhisper_5fservice_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::bgs::protocol::protobuf_AddDesc_api_2fcommon_2fv1_2fevent_5fview_5ftypes_2eproto();
  ::bgs::protocol::protobuf_AddDesc_api_2fcommon_2fv1_2fmessage_5ftypes_2eproto();
  ::bgs::protocol::whisper::v2::protobuf_AddDesc_api_2fcommon_2fv2_2fwhisper_5ftypes_2eproto();
  ::bgs::protocol::protobuf_AddDesc_rpc_5ftypes_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n#api/client/v2/whisper_service.proto\022\036b"
    "gs.protocol.whisper.v2.client\032$api/commo"
    "n/v1/event_view_types.proto\032!api/common/"
    "v1/message_types.proto\032!api/common/v2/wh"
    "isper_types.proto\032\017rpc_types.proto\"\022\n\020Su"
    "bscribeRequest\"G\n\021SubscribeResponse\0222\n\004v"
    "iew\030\001 \003(\0132$.bgs.protocol.whisper.v2.Whis"
    "perView\"\024\n\022UnsubscribeRequest\"{\n\030GetWhis"
    "perHistoryRequest\022\031\n\021target_account_id\030\001"
    " \001(\004\022.\n\007options\030\002 \001(\0132\035.bgs.protocol.Get"
    "EventOptions\022\024\n\014continuation\030\004 \001(\004\"e\n\031Ge"
    "tWhisperHistoryResponse\0222\n\010whispers\030\001 \003("
    "\0132 .bgs.protocol.whisper.v2.Whisper\022\024\n\014c"
    "ontinuation\030\002 \001(\004\"m\n\022SendWhisperRequest\022"
    "\031\n\021target_account_id\030\001 \001(\004\022<\n\007options\030\002 "
    "\001(\0132+.bgs.protocol.whisper.v2.SendWhispe"
    "rOptions\"H\n\023SendWhisperResponse\0221\n\007whisp"
    "er\030\001 \001(\0132 .bgs.protocol.whisper.v2.Whisp"
    "er\"h\n\031SetTypingIndicatorRequest\022\031\n\021targe"
    "t_account_id\030\001 \001(\004\0220\n\tindicator\030\002 \001(\0162\035."
    "bgs.protocol.TypingIndicator\"3\n\026AdvanceV"
    "iewTimeRequest\022\031\n\021target_account_id\030\001 \001("
    "\004\"4\n\027AdvanceClearTimeRequest\022\031\n\021target_a"
    "ccount_id\030\001 \001(\0042\231\007\n\016WhisperService\022z\n\tSu"
    "bscribe\0220.bgs.protocol.whisper.v2.client"
    ".SubscribeRequest\0321.bgs.protocol.whisper"
    ".v2.client.SubscribeResponse\"\010\202\371+\004\010\001\020\001\022a"
    "\n\013Unsubscribe\0222.bgs.protocol.whisper.v2."
    "client.UnsubscribeRequest\032\024.bgs.protocol"
    ".NoData\"\010\202\371+\004\010\002\020\001\022\222\001\n\021GetWhisperHistory\022"
    "8.bgs.protocol.whisper.v2.client.GetWhis"
    "perHistoryRequest\0329.bgs.protocol.whisper"
    ".v2.client.GetWhisperHistoryResponse\"\010\202\371"
    "+\004\010\003\020\001\022\200\001\n\013SendWhisper\0222.bgs.protocol.wh"
    "isper.v2.client.SendWhisperRequest\0323.bgs"
    ".protocol.whisper.v2.client.SendWhisperR"
    "esponse\"\010\202\371+\004\010\004\020\001\022i\n\017AdvanceViewTime\0226.b"
    "gs.protocol.whisper.v2.client.AdvanceVie"
    "wTimeRequest\032\024.bgs.protocol.NoData\"\010\202\371+\004"
    "\010\005\020\001\022k\n\020AdvanceClearTime\0227.bgs.protocol."
    "whisper.v2.client.AdvanceClearTimeReques"
    "t\032\024.bgs.protocol.NoData\"\010\202\371+\004\010\006\020\001\022o\n\022Set"
    "TypingIndicator\0229.bgs.protocol.whisper.v"
    "2.client.SetTypingIndicatorRequest\032\024.bgs"
    ".protocol.NoData\"\010\202\371+\004\010\007\020\001\032G\202\371+;\n.bnet.p"
    "rotocol.whisper.v2.client.WhisperService"
    "*\007whisperH\001\212\371+\004\020\001\030\001B\005H\002\200\001\000", 1866);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "api/client/v2/whisper_service.proto", &protobuf_RegisterTypes);
  SubscribeRequest::default_instance_ = new SubscribeRequest();
  SubscribeResponse::default_instance_ = new SubscribeResponse();
  UnsubscribeRequest::default_instance_ = new UnsubscribeRequest();
  GetWhisperHistoryRequest::default_instance_ = new GetWhisperHistoryRequest();
  GetWhisperHistoryResponse::default_instance_ = new GetWhisperHistoryResponse();
  SendWhisperRequest::default_instance_ = new SendWhisperRequest();
  SendWhisperResponse::default_instance_ = new SendWhisperResponse();
  SetTypingIndicatorRequest::default_instance_ = new SetTypingIndicatorRequest();
  AdvanceViewTimeRequest::default_instance_ = new AdvanceViewTimeRequest();
  AdvanceClearTimeRequest::default_instance_ = new AdvanceClearTimeRequest();
  SubscribeRequest::default_instance_->InitAsDefaultInstance();
  SubscribeResponse::default_instance_->InitAsDefaultInstance();
  UnsubscribeRequest::default_instance_->InitAsDefaultInstance();
  GetWhisperHistoryRequest::default_instance_->InitAsDefaultInstance();
  GetWhisperHistoryResponse::default_instance_->InitAsDefaultInstance();
  SendWhisperRequest::default_instance_->InitAsDefaultInstance();
  SendWhisperResponse::default_instance_->InitAsDefaultInstance();
  SetTypingIndicatorRequest::default_instance_->InitAsDefaultInstance();
  AdvanceViewTimeRequest::default_instance_->InitAsDefaultInstance();
  AdvanceClearTimeRequest::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_api_2fclient_2fv2_2fwhisper_5fservice_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_api_2fclient_2fv2_2fwhisper_5fservice_2eproto {
  StaticDescriptorInitializer_api_2fclient_2fv2_2fwhisper_5fservice_2eproto() {
    protobuf_AddDesc_api_2fclient_2fv2_2fwhisper_5fservice_2eproto();
  }
} static_descriptor_initializer_api_2fclient_2fv2_2fwhisper_5fservice_2eproto_;
// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

SubscribeRequest::SubscribeRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.whisper.v2.client.SubscribeRequest)
}

void SubscribeRequest::InitAsDefaultInstance() {
}

SubscribeRequest::SubscribeRequest(const SubscribeRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.whisper.v2.client.SubscribeRequest)
}

void SubscribeRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubscribeRequest::~SubscribeRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.whisper.v2.client.SubscribeRequest)
  SharedDtor();
}

void SubscribeRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SubscribeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubscribeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubscribeRequest_descriptor_;
}

const SubscribeRequest& SubscribeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_api_2fclient_2fv2_2fwhisper_5fservice_2eproto();
  return *default_instance_;
}

SubscribeRequest* SubscribeRequest::default_instance_ = NULL;

SubscribeRequest* SubscribeRequest::New() const {
  return new SubscribeRequest;
}

void SubscribeRequest::Swap(SubscribeRequest* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata SubscribeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubscribeRequest_descriptor_;
  metadata.reflection = SubscribeRequest_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int SubscribeResponse::kViewFieldNumber;
#endif  // !_MSC_VER

SubscribeResponse::SubscribeResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.whisper.v2.client.SubscribeResponse)
}

void SubscribeResponse::InitAsDefaultInstance() {
}

SubscribeResponse::SubscribeResponse(const SubscribeResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.whisper.v2.client.SubscribeResponse)
}

void SubscribeResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubscribeResponse::~SubscribeResponse() {
  // @@protoc_insertion_point(destructor:bgs.protocol.whisper.v2.client.SubscribeResponse)
  SharedDtor();
}

void SubscribeResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SubscribeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubscribeResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubscribeResponse_descriptor_;
}

const SubscribeResponse& SubscribeResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_api_2fclient_2fv2_2fwhisper_5fservice_2eproto();
  return *default_instance_;
}

SubscribeResponse* SubscribeResponse::default_instance_ = NULL;

SubscribeResponse* SubscribeResponse::New() const {
  return new SubscribeResponse;
}

void SubscribeResponse::Swap(SubscribeResponse* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata SubscribeResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubscribeResponse_descriptor_;
  metadata.reflection = SubscribeResponse_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

UnsubscribeRequest::UnsubscribeRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.whisper.v2.client.UnsubscribeRequest)
}

void UnsubscribeRequest::InitAsDefaultInstance() {
}

UnsubscribeRequest::UnsubscribeRequest(const UnsubscribeRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.whisper.v2.client.UnsubscribeRequest)
}

void UnsubscribeRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnsubscribeRequest::~UnsubscribeRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.whisper.v2.client.UnsubscribeRequest)
  SharedDtor();
}

void UnsubscribeRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UnsubscribeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnsubscribeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnsubscribeRequest_descriptor_;
}

const UnsubscribeRequest& UnsubscribeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_api_2fclient_2fv2_2fwhisper_5fservice_2eproto();
  return *default_instance_;
}

UnsubscribeRequest* UnsubscribeRequest::default_instance_ = NULL;

UnsubscribeRequest* UnsubscribeRequest::New() const {
  return new UnsubscribeRequest;
}

void UnsubscribeRequest::Swap(UnsubscribeRequest* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata UnsubscribeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnsubscribeRequest_descriptor_;
  metadata.reflection = UnsubscribeRequest_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int GetWhisperHistoryRequest::kTargetAccountIdFieldNumber;
const int GetWhisperHistoryRequest::kOptionsFieldNumber;
const int GetWhisperHistoryRequest::kContinuationFieldNumber;
#endif  // !_MSC_VER

GetWhisperHistoryRequest::GetWhisperHistoryRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.whisper.v2.client.GetWhisperHistoryRequest)
}

void GetWhisperHistoryRequest::InitAsDefaultInstance() {
  options_ = const_cast< ::bgs::protocol::GetEventOptions*>(&::bgs::protocol::GetEventOptions::default_instance());
}

GetWhisperHistoryRequest::GetWhisperHistoryRequest(const GetWhisperHistoryRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.whisper.v2.client.GetWhisperHistoryRequest)
}

void GetWhisperHistoryRequest::SharedCtor() {
  _cached_size_ = 0;
  target_account_id_ = GOOGLE_ULONGLONG(0);
  options_ = NULL;
  continuation_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetWhisperHistoryRequest::~GetWhisperHistoryRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.whisper.v2.client.GetWhisperHistoryRequest)
  SharedDtor();
}

void GetWhisperHistoryRequest::SharedDtor() {
  if (this != default_instance_) {
    delete options_;
  }
}

void GetWhisperHistoryRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetWhisperHistoryRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetWhisperHistoryRequest_descriptor_;
}

const GetWhisperHistoryRequest& GetWhisperHistoryRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_api_2fclient_2fv2_2fwhisper_5fservice_2eproto();
  return *default_instance_;
}

GetWhisperHistoryRequest* GetWhisperHistoryRequest::default_instance_ = NULL;

GetWhisperHistoryRequest* GetWhisperHistoryRequest::New() const {
  return new GetWhisperHistoryRequest;
}

void GetWhisperHistoryRequest::Swap(GetWhisperHistoryRequest* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata GetWhisperHistoryRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetWhisperHistoryRequest_descriptor_;
  metadata.reflection = GetWhisperHistoryRequest_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int GetWhisperHistoryResponse::kWhispersFieldNumber;
const int GetWhisperHistoryResponse::kContinuationFieldNumber;
#endif  // !_MSC_VER

GetWhisperHistoryResponse::GetWhisperHistoryResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.whisper.v2.client.GetWhisperHistoryResponse)
}

void GetWhisperHistoryResponse::InitAsDefaultInstance() {
}

GetWhisperHistoryResponse::GetWhisperHistoryResponse(const GetWhisperHistoryResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.whisper.v2.client.GetWhisperHistoryResponse)
}

void GetWhisperHistoryResponse::SharedCtor() {
  _cached_size_ = 0;
  continuation_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetWhisperHistoryResponse::~GetWhisperHistoryResponse() {
  // @@protoc_insertion_point(destructor:bgs.protocol.whisper.v2.client.GetWhisperHistoryResponse)
  SharedDtor();
}

void GetWhisperHistoryResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetWhisperHistoryResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetWhisperHistoryResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetWhisperHistoryResponse_descriptor_;
}

const GetWhisperHistoryResponse& GetWhisperHistoryResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_api_2fclient_2fv2_2fwhisper_5fservice_2eproto();
  return *default_instance_;
}

GetWhisperHistoryResponse* GetWhisperHistoryResponse::default_instance_ = NULL;

GetWhisperHistoryResponse* GetWhisperHistoryResponse::New() const {
  return new GetWhisperHistoryResponse;
}

void GetWhisperHistoryResponse::Swap(GetWhisperHistoryResponse* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata GetWhisperHistoryResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetWhisperHistoryResponse_descriptor_;
  metadata.reflection = GetWhisperHistoryResponse_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int SendWhisperRequest::kTargetAccountIdFieldNumber;
const int SendWhisperRequest::kOptionsFieldNumber;
#endif  // !_MSC_VER

SendWhisperRequest::SendWhisperRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.whisper.v2.client.SendWhisperRequest)
}

void SendWhisperRequest::InitAsDefaultInstance() {
  options_ = const_cast< ::bgs::protocol::whisper::v2::SendWhisperOptions*>(&::bgs::protocol::whisper::v2::SendWhisperOptions::default_instance());
}

SendWhisperRequest::SendWhisperRequest(const SendWhisperRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.whisper.v2.client.SendWhisperRequest)
}

void SendWhisperRequest::SharedCtor() {
  _cached_size_ = 0;
  target_account_id_ = GOOGLE_ULONGLONG(0);
  options_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SendWhisperRequest::~SendWhisperRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.whisper.v2.client.SendWhisperRequest)
  SharedDtor();
}

void SendWhisperRequest::SharedDtor() {
  if (this != default_instance_) {
    delete options_;
  }
}

void SendWhisperRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendWhisperRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SendWhisperRequest_descriptor_;
}

const SendWhisperRequest& SendWhisperRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_api_2fclient_2fv2_2fwhisper_5fservice_2eproto();
  return *default_instance_;
}

SendWhisperRequest* SendWhisperRequest::default_instance_ = NULL;

SendWhisperRequest* SendWhisperRequest::New() const {
  return new SendWhisperRequest;
}

void SendWhisperRequest::Swap(SendWhisperRequest* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata SendWhisperRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SendWhisperRequest_descriptor_;
  metadata.reflection = SendWhisperRequest_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int SendWhisperResponse::kWhisperFieldNumber;
#endif  // !_MSC_VER

SendWhisperResponse::SendWhisperResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.whisper.v2.client.SendWhisperResponse)
}

void SendWhisperResponse::InitAsDefaultInstance() {
  whisper_ = const_cast< ::bgs::protocol::whisper::v2::Whisper*>(&::bgs::protocol::whisper::v2::Whisper::default_instance());
}

SendWhisperResponse::SendWhisperResponse(const SendWhisperResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.whisper.v2.client.SendWhisperResponse)
}

void SendWhisperResponse::SharedCtor() {
  _cached_size_ = 0;
  whisper_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SendWhisperResponse::~SendWhisperResponse() {
  // @@protoc_insertion_point(destructor:bgs.protocol.whisper.v2.client.SendWhisperResponse)
  SharedDtor();
}

void SendWhisperResponse::SharedDtor() {
  if (this != default_instance_) {
    delete whisper_;
  }
}

void SendWhisperResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendWhisperResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SendWhisperResponse_descriptor_;
}

const SendWhisperResponse& SendWhisperResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_api_2fclient_2fv2_2fwhisper_5fservice_2eproto();
  return *default_instance_;
}

SendWhisperResponse* SendWhisperResponse::default_instance_ = NULL;

SendWhisperResponse* SendWhisperResponse::New() const {
  return new SendWhisperResponse;
}

void SendWhisperResponse::Swap(SendWhisperResponse* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata SendWhisperResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SendWhisperResponse_descriptor_;
  metadata.reflection = SendWhisperResponse_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int SetTypingIndicatorRequest::kTargetAccountIdFieldNumber;
const int SetTypingIndicatorRequest::kIndicatorFieldNumber;
#endif  // !_MSC_VER

SetTypingIndicatorRequest::SetTypingIndicatorRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.whisper.v2.client.SetTypingIndicatorRequest)
}

void SetTypingIndicatorRequest::InitAsDefaultInstance() {
}

SetTypingIndicatorRequest::SetTypingIndicatorRequest(const SetTypingIndicatorRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.whisper.v2.client.SetTypingIndicatorRequest)
}

void SetTypingIndicatorRequest::SharedCtor() {
  _cached_size_ = 0;
  target_account_id_ = GOOGLE_ULONGLONG(0);
  indicator_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetTypingIndicatorRequest::~SetTypingIndicatorRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.whisper.v2.client.SetTypingIndicatorRequest)
  SharedDtor();
}

void SetTypingIndicatorRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetTypingIndicatorRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetTypingIndicatorRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetTypingIndicatorRequest_descriptor_;
}

const SetTypingIndicatorRequest& SetTypingIndicatorRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_api_2fclient_2fv2_2fwhisper_5fservice_2eproto();
  return *default_instance_;
}

SetTypingIndicatorRequest* SetTypingIndicatorRequest::default_instance_ = NULL;

SetTypingIndicatorRequest* SetTypingIndicatorRequest::New() const {
  return new SetTypingIndicatorRequest;
}

void SetTypingIndicatorRequest::Swap(SetTypingIndicatorRequest* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata SetTypingIndicatorRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetTypingIndicatorRequest_descriptor_;
  metadata.reflection = SetTypingIndicatorRequest_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int AdvanceViewTimeRequest::kTargetAccountIdFieldNumber;
#endif  // !_MSC_VER

AdvanceViewTimeRequest::AdvanceViewTimeRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.whisper.v2.client.AdvanceViewTimeRequest)
}

void AdvanceViewTimeRequest::InitAsDefaultInstance() {
}

AdvanceViewTimeRequest::AdvanceViewTimeRequest(const AdvanceViewTimeRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.whisper.v2.client.AdvanceViewTimeRequest)
}

void AdvanceViewTimeRequest::SharedCtor() {
  _cached_size_ = 0;
  target_account_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AdvanceViewTimeRequest::~AdvanceViewTimeRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.whisper.v2.client.AdvanceViewTimeRequest)
  SharedDtor();
}

void AdvanceViewTimeRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AdvanceViewTimeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AdvanceViewTimeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdvanceViewTimeRequest_descriptor_;
}

const AdvanceViewTimeRequest& AdvanceViewTimeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_api_2fclient_2fv2_2fwhisper_5fservice_2eproto();
  return *default_instance_;
}

AdvanceViewTimeRequest* AdvanceViewTimeRequest::default_instance_ = NULL;

AdvanceViewTimeRequest* AdvanceViewTimeRequest::New() const {
  return new AdvanceViewTimeRequest;
}

void AdvanceViewTimeRequest::Swap(AdvanceViewTimeRequest* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata AdvanceViewTimeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AdvanceViewTimeRequest_descriptor_;
  metadata.reflection = AdvanceViewTimeRequest_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int AdvanceClearTimeRequest::kTargetAccountIdFieldNumber;
#endif  // !_MSC_VER

AdvanceClearTimeRequest::AdvanceClearTimeRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.whisper.v2.client.AdvanceClearTimeRequest)
}

void AdvanceClearTimeRequest::InitAsDefaultInstance() {
}

AdvanceClearTimeRequest::AdvanceClearTimeRequest(const AdvanceClearTimeRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.whisper.v2.client.AdvanceClearTimeRequest)
}

void AdvanceClearTimeRequest::SharedCtor() {
  _cached_size_ = 0;
  target_account_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AdvanceClearTimeRequest::~AdvanceClearTimeRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.whisper.v2.client.AdvanceClearTimeRequest)
  SharedDtor();
}

void AdvanceClearTimeRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AdvanceClearTimeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AdvanceClearTimeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdvanceClearTimeRequest_descriptor_;
}

const AdvanceClearTimeRequest& AdvanceClearTimeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_api_2fclient_2fv2_2fwhisper_5fservice_2eproto();
  return *default_instance_;
}

AdvanceClearTimeRequest* AdvanceClearTimeRequest::default_instance_ = NULL;

AdvanceClearTimeRequest* AdvanceClearTimeRequest::New() const {
  return new AdvanceClearTimeRequest;
}

void AdvanceClearTimeRequest::Swap(AdvanceClearTimeRequest* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata AdvanceClearTimeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AdvanceClearTimeRequest_descriptor_;
  metadata.reflection = AdvanceClearTimeRequest_reflection_;
  return metadata;
}

// ===================================================================

WhisperService::WhisperService(bool use_original_hash) : ServiceBase(use_original_hash ? OriginalHash::value : NameHash::value) {
}

WhisperService::~WhisperService() {
}

google::protobuf::ServiceDescriptor const* WhisperService::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WhisperService_descriptor_;
}

void WhisperService::CallServerMethod(uint32 token, uint32 methodId, MessageBuffer buffer) {
  switch(methodId & 0x3FFFFFFF) {
    case 1:
      ParseAndHandleSubscribe(token, methodId, buffer);
      break;
    case 2:
      ParseAndHandleUnsubscribe(token, methodId, buffer);
      break;
    case 3:
      ParseAndHandleGetWhisperHistory(token, methodId, buffer);
      break;
    case 4:
      ParseAndHandleSendWhisper(token, methodId, buffer);
      break;
    case 5:
      ParseAndHandleAdvanceViewTime(token, methodId, buffer);
      break;
    case 6:
      ParseAndHandleAdvanceClearTime(token, methodId, buffer);
      break;
    case 7:
      ParseAndHandleSetTypingIndicator(token, methodId, buffer);
      break;
    default:
      LogInvalidMethod(methodId);
      SendResponse(service_hash_, methodId, token, ERROR_RPC_INVALID_METHOD);
      break;
    }
}

uint32 WhisperService::HandleSubscribe(::bgs::protocol::whisper::v2::client::SubscribeRequest const* request, ::bgs::protocol::whisper::v2::client::SubscribeResponse* /*response*/, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& /*continuation*/) {
  LogUnimplementedServerMethod("WhisperService.Subscribe", request);
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 WhisperService::HandleUnsubscribe(::bgs::protocol::whisper::v2::client::UnsubscribeRequest const* request, ::bgs::protocol::NoData* /*response*/, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& /*continuation*/) {
  LogUnimplementedServerMethod("WhisperService.Unsubscribe", request);
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 WhisperService::HandleGetWhisperHistory(::bgs::protocol::whisper::v2::client::GetWhisperHistoryRequest const* request, ::bgs::protocol::whisper::v2::client::GetWhisperHistoryResponse* /*response*/, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& /*continuation*/) {
  LogUnimplementedServerMethod("WhisperService.GetWhisperHistory", request);
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 WhisperService::HandleSendWhisper(::bgs::protocol::whisper::v2::client::SendWhisperRequest const* request, ::bgs::protocol::whisper::v2::client::SendWhisperResponse* /*response*/, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& /*continuation*/) {
  LogUnimplementedServerMethod("WhisperService.SendWhisper", request);
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 WhisperService::HandleAdvanceViewTime(::bgs::protocol::whisper::v2::client::AdvanceViewTimeRequest const* request, ::bgs::protocol::NoData* /*response*/, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& /*continuation*/) {
  LogUnimplementedServerMethod("WhisperService.AdvanceViewTime", request);
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 WhisperService::HandleAdvanceClearTime(::bgs::protocol::whisper::v2::client::AdvanceClearTimeRequest const* request, ::bgs::protocol::NoData* /*response*/, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& /*continuation*/) {
  LogUnimplementedServerMethod("WhisperService.AdvanceClearTime", request);
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 WhisperService::HandleSetTypingIndicator(::bgs::protocol::whisper::v2::client::SetTypingIndicatorRequest const* request, ::bgs::protocol::NoData* /*response*/, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& /*continuation*/) {
  LogUnimplementedServerMethod("WhisperService.SetTypingIndicator", request);
  return ERROR_RPC_NOT_IMPLEMENTED;
}

void WhisperService::ParseAndHandleSubscribe(uint32 token, uint32 methodId, MessageBuffer& buffer) {
  ::bgs::protocol::whisper::v2::client::SubscribeRequest request;
  if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
    LogFailedParsingRequest("WhisperService.Subscribe");
    SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
    return;
  }
  LogCallServerMethod("WhisperService.Subscribe", "bgs.protocol.whisper.v2.client.SubscribeRequest", &request);
  std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = CreateServerContinuation(token, methodId, "WhisperService.Subscribe", ::bgs::protocol::whisper::v2::client::SubscribeResponse::descriptor());
  ::bgs::protocol::whisper::v2::client::SubscribeResponse response;
  uint32 status = HandleSubscribe(&request, &response, continuation);
  if (continuation)
    continuation(this, status, &response);
}

void WhisperService::ParseAndHandleUnsubscribe(uint32 token, uint32 methodId, MessageBuffer& buffer) {
  ::bgs::protocol::whisper::v2::client::UnsubscribeRequest request;
  if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
    LogFailedParsingRequest("WhisperService.Unsubscribe");
    SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
    return;
  }
  LogCallServerMethod("WhisperService.Unsubscribe", "bgs.protocol.whisper.v2.client.UnsubscribeRequest", &request);
  std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = CreateServerContinuation(token, methodId, "WhisperService.Unsubscribe", ::bgs::protocol::NoData::descriptor());
  ::bgs::protocol::NoData response;
  uint32 status = HandleUnsubscribe(&request, &response, continuation);
  if (continuation)
    continuation(this, status, &response);
}

void WhisperService::ParseAndHandleGetWhisperHistory(uint32 token, uint32 methodId, MessageBuffer& buffer) {
  ::bgs::protocol::whisper::v2::client::GetWhisperHistoryRequest request;
  if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
    LogFailedParsingRequest("WhisperService.GetWhisperHistory");
    SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
    return;
  }
  LogCallServerMethod("WhisperService.GetWhisperHistory", "bgs.protocol.whisper.v2.client.GetWhisperHistoryRequest", &request);
  std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = CreateServerContinuation(token, methodId, "WhisperService.GetWhisperHistory", ::bgs::protocol::whisper::v2::client::GetWhisperHistoryResponse::descriptor());
  ::bgs::protocol::whisper::v2::client::GetWhisperHistoryResponse response;
  uint32 status = HandleGetWhisperHistory(&request, &response, continuation);
  if (continuation)
    continuation(this, status, &response);
}

void WhisperService::ParseAndHandleSendWhisper(uint32 token, uint32 methodId, MessageBuffer& buffer) {
  ::bgs::protocol::whisper::v2::client::SendWhisperRequest request;
  if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
    LogFailedParsingRequest("WhisperService.SendWhisper");
    SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
    return;
  }
  LogCallServerMethod("WhisperService.SendWhisper", "bgs.protocol.whisper.v2.client.SendWhisperRequest", &request);
  std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = CreateServerContinuation(token, methodId, "WhisperService.SendWhisper", ::bgs::protocol::whisper::v2::client::SendWhisperResponse::descriptor());
  ::bgs::protocol::whisper::v2::client::SendWhisperResponse response;
  uint32 status = HandleSendWhisper(&request, &response, continuation);
  if (continuation)
    continuation(this, status, &response);
}

void WhisperService::ParseAndHandleAdvanceViewTime(uint32 token, uint32 methodId, MessageBuffer& buffer) {
  ::bgs::protocol::whisper::v2::client::AdvanceViewTimeRequest request;
  if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
    LogFailedParsingRequest("WhisperService.AdvanceViewTime");
    SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
    return;
  }
  LogCallServerMethod("WhisperService.AdvanceViewTime", "bgs.protocol.whisper.v2.client.AdvanceViewTimeRequest", &request);
  std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = CreateServerContinuation(token, methodId, "WhisperService.AdvanceViewTime", ::bgs::protocol::NoData::descriptor());
  ::bgs::protocol::NoData response;
  uint32 status = HandleAdvanceViewTime(&request, &response, continuation);
  if (continuation)
    continuation(this, status, &response);
}

void WhisperService::ParseAndHandleAdvanceClearTime(uint32 token, uint32 methodId, MessageBuffer& buffer) {
  ::bgs::protocol::whisper::v2::client::AdvanceClearTimeRequest request;
  if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
    LogFailedParsingRequest("WhisperService.AdvanceClearTime");
    SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
    return;
  }
  LogCallServerMethod("WhisperService.AdvanceClearTime", "bgs.protocol.whisper.v2.client.AdvanceClearTimeRequest", &request);
  std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = CreateServerContinuation(token, methodId, "WhisperService.AdvanceClearTime", ::bgs::protocol::NoData::descriptor());
  ::bgs::protocol::NoData response;
  uint32 status = HandleAdvanceClearTime(&request, &response, continuation);
  if (continuation)
    continuation(this, status, &response);
}

void WhisperService::ParseAndHandleSetTypingIndicator(uint32 token, uint32 methodId, MessageBuffer& buffer) {
  ::bgs::protocol::whisper::v2::client::SetTypingIndicatorRequest request;
  if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
    LogFailedParsingRequest("WhisperService.SetTypingIndicator");
    SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
    return;
  }
  LogCallServerMethod("WhisperService.SetTypingIndicator", "bgs.protocol.whisper.v2.client.SetTypingIndicatorRequest", &request);
  std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = CreateServerContinuation(token, methodId, "WhisperService.SetTypingIndicator", ::bgs::protocol::NoData::descriptor());
  ::bgs::protocol::NoData response;
  uint32 status = HandleSetTypingIndicator(&request, &response, continuation);
  if (continuation)
    continuation(this, status, &response);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace client
}  // namespace v2
}  // namespace whisper
}  // namespace protocol
}  // namespace bgs

// @@protoc_insertion_point(global_scope)
