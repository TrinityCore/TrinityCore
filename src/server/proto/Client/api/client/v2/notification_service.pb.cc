// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/client/v2/notification_service.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "api/client/v2/notification_service.pb.h"

#include <utility>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
#include "BattlenetRpcErrorCodes.h"
// @@protoc_insertion_point(includes)

namespace bgs {
namespace protocol {
namespace notification {
namespace v2 {
namespace client {

namespace {

const ::google::protobuf::Descriptor* SendNotificationRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SendNotificationRequest_reflection_ = NULL;
const ::google::protobuf::ServiceDescriptor* NotificationService_descriptor_ = NULL;

}  // namespace

void protobuf_AssignDesc_api_2fclient_2fv2_2fnotification_5fservice_2eproto() {
  protobuf_AddDesc_api_2fclient_2fv2_2fnotification_5fservice_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "api/client/v2/notification_service.proto");
  GOOGLE_CHECK(file != NULL);
  SendNotificationRequest_descriptor_ = file->message_type(0);
  static const int SendNotificationRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendNotificationRequest, options_),
  };
  SendNotificationRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SendNotificationRequest_descriptor_,
      SendNotificationRequest::default_instance_,
      SendNotificationRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendNotificationRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendNotificationRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SendNotificationRequest));
  NotificationService_descriptor_ = file->service(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_api_2fclient_2fv2_2fnotification_5fservice_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SendNotificationRequest_descriptor_, &SendNotificationRequest::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_api_2fclient_2fv2_2fnotification_5fservice_2eproto() {
  delete SendNotificationRequest::default_instance_;
  delete SendNotificationRequest_reflection_;
}

void protobuf_AddDesc_api_2fclient_2fv2_2fnotification_5fservice_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::bgs::protocol::notification::v2::client::protobuf_AddDesc_api_2fclient_2fv2_2fnotification_5ftypes_2eproto();
  ::bgs::protocol::protobuf_AddDesc_rpc_5ftypes_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n(api/client/v2/notification_service.pro"
    "to\022#bgs.protocol.notification.v2.client\032"
    "&api/client/v2/notification_types.proto\032"
    "\017rpc_types.proto\"h\n\027SendNotificationRequ"
    "est\022M\n\007options\030\002 \001(\0132<.bgs.protocol.noti"
    "fication.v2.client.SendNotificationOptio"
    "ns2\337\001\n\023NotificationService\022p\n\020SendNotifi"
    "cation\022<.bgs.protocol.notification.v2.cl"
    "ient.SendNotificationRequest\032\024.bgs.proto"
    "col.NoData\"\010\202\371+\004\010\001\020\001\032V\202\371+J\n8bnet.protoco"
    "l.notification.v2.client.NotificationSer"
    "vice*\014notificationH\001\212\371+\004\020\001\030\001B\005H\002\200\001\000", 475);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "api/client/v2/notification_service.proto", &protobuf_RegisterTypes);
  SendNotificationRequest::default_instance_ = new SendNotificationRequest();
  SendNotificationRequest::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_api_2fclient_2fv2_2fnotification_5fservice_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_api_2fclient_2fv2_2fnotification_5fservice_2eproto {
  StaticDescriptorInitializer_api_2fclient_2fv2_2fnotification_5fservice_2eproto() {
    protobuf_AddDesc_api_2fclient_2fv2_2fnotification_5fservice_2eproto();
  }
} static_descriptor_initializer_api_2fclient_2fv2_2fnotification_5fservice_2eproto_;
// ===================================================================

#ifndef _MSC_VER
const int SendNotificationRequest::kOptionsFieldNumber;
#endif  // !_MSC_VER

SendNotificationRequest::SendNotificationRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.notification.v2.client.SendNotificationRequest)
}

void SendNotificationRequest::InitAsDefaultInstance() {
  options_ = const_cast< ::bgs::protocol::notification::v2::client::SendNotificationOptions*>(&::bgs::protocol::notification::v2::client::SendNotificationOptions::default_instance());
}

SendNotificationRequest::SendNotificationRequest(const SendNotificationRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.notification.v2.client.SendNotificationRequest)
}

void SendNotificationRequest::SharedCtor() {
  _cached_size_ = 0;
  options_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SendNotificationRequest::~SendNotificationRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.notification.v2.client.SendNotificationRequest)
  SharedDtor();
}

void SendNotificationRequest::SharedDtor() {
  if (this != default_instance_) {
    delete options_;
  }
}

void SendNotificationRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendNotificationRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SendNotificationRequest_descriptor_;
}

const SendNotificationRequest& SendNotificationRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_api_2fclient_2fv2_2fnotification_5fservice_2eproto();
  return *default_instance_;
}

SendNotificationRequest* SendNotificationRequest::default_instance_ = NULL;

SendNotificationRequest* SendNotificationRequest::New() const {
  return new SendNotificationRequest;
}

void SendNotificationRequest::Swap(SendNotificationRequest* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata SendNotificationRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SendNotificationRequest_descriptor_;
  metadata.reflection = SendNotificationRequest_reflection_;
  return metadata;
}

// ===================================================================

NotificationService::NotificationService(bool use_original_hash) : ServiceBase(use_original_hash ? OriginalHash::value : NameHash::value) {
}

NotificationService::~NotificationService() {
}

google::protobuf::ServiceDescriptor const* NotificationService::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotificationService_descriptor_;
}

void NotificationService::CallServerMethod(uint32 token, uint32 methodId, MessageBuffer buffer) {
  switch(methodId & 0x3FFFFFFF) {
    case 1:
      ParseAndHandleSendNotification(token, methodId, buffer);
      break;
    default:
      LogInvalidMethod(methodId);
      SendResponse(service_hash_, methodId, token, ERROR_RPC_INVALID_METHOD);
      break;
    }
}

uint32 NotificationService::HandleSendNotification(::bgs::protocol::notification::v2::client::SendNotificationRequest const* request, ::bgs::protocol::NoData* /*response*/, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& /*continuation*/) {
  LogUnimplementedServerMethod("NotificationService.SendNotification", request);
  return ERROR_RPC_NOT_IMPLEMENTED;
}

void NotificationService::ParseAndHandleSendNotification(uint32 token, uint32 methodId, MessageBuffer& buffer) {
  ::bgs::protocol::notification::v2::client::SendNotificationRequest request;
  if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
    LogFailedParsingRequest("NotificationService.SendNotification");
    SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
    return;
  }
  LogCallServerMethod("NotificationService.SendNotification", "bgs.protocol.notification.v2.client.SendNotificationRequest", &request);
  std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = CreateServerContinuation(token, methodId, "NotificationService.SendNotification", ::bgs::protocol::NoData::descriptor());
  ::bgs::protocol::NoData response;
  uint32 status = HandleSendNotification(&request, &response, continuation);
  if (continuation)
    continuation(this, status, &response);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace client
}  // namespace v2
}  // namespace notification
}  // namespace protocol
}  // namespace bgs

// @@protoc_insertion_point(global_scope)
