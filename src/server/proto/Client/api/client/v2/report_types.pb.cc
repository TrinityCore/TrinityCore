// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/client/v2/report_types.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "api/client/v2/report_types.pb.h"

#include <algorithm>
#include <utility>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
#include "Log.h"
// @@protoc_insertion_point(includes)

namespace bgs {
namespace protocol {
namespace report {
namespace v2 {

namespace {

const ::google::protobuf::Descriptor* ReportItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReportItem_reflection_ = NULL;
struct ReportItemOneofInstance {
  const ::bgs::protocol::MessageId* message_id_;
}* ReportItem_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* UserOptions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserOptions_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClubOptions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClubOptions_reflection_ = NULL;
const ::google::protobuf::Descriptor* EntityOptions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EntityOptions_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* IssueType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* UserSource_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ClubSource_descriptor_ = NULL;

}  // namespace

void protobuf_AssignDesc_api_2fclient_2fv2_2freport_5ftypes_2eproto() {
  protobuf_AddDesc_api_2fclient_2fv2_2freport_5ftypes_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "api/client/v2/report_types.proto");
  GOOGLE_CHECK(file != NULL);
  ReportItem_descriptor_ = file->message_type(0);
  static const int ReportItem_offsets_[2] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ReportItem_default_oneof_instance_, message_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportItem, type_),
  };
  ReportItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReportItem_descriptor_,
      ReportItem::default_instance_,
      ReportItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportItem, _unknown_fields_),
      -1,
      ReportItem_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportItem, _oneof_case_[0]),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReportItem));
  UserOptions_descriptor_ = file->message_type(1);
  static const int UserOptions_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserOptions, target_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserOptions, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserOptions, source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserOptions, item_),
  };
  UserOptions_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserOptions_descriptor_,
      UserOptions::default_instance_,
      UserOptions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserOptions, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserOptions, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserOptions));
  ClubOptions_descriptor_ = file->message_type(2);
  static const int ClubOptions_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubOptions, club_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubOptions, stream_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubOptions, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubOptions, source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubOptions, item_),
  };
  ClubOptions_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClubOptions_descriptor_,
      ClubOptions::default_instance_,
      ClubOptions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubOptions, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClubOptions, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClubOptions));
  EntityOptions_descriptor_ = file->message_type(3);
  static const int EntityOptions_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityOptions, entity_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityOptions, entity_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityOptions, attribute_),
  };
  EntityOptions_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EntityOptions_descriptor_,
      EntityOptions::default_instance_,
      EntityOptions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityOptions, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityOptions, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EntityOptions));
  IssueType_descriptor_ = file->enum_type(0);
  UserSource_descriptor_ = file->enum_type(1);
  ClubSource_descriptor_ = file->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_api_2fclient_2fv2_2freport_5ftypes_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReportItem_descriptor_, &ReportItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserOptions_descriptor_, &UserOptions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClubOptions_descriptor_, &ClubOptions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EntityOptions_descriptor_, &EntityOptions::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_api_2fclient_2fv2_2freport_5ftypes_2eproto() {
  delete ReportItem::default_instance_;
  delete ReportItem_default_oneof_instance_;
  delete ReportItem_reflection_;
  delete UserOptions::default_instance_;
  delete UserOptions_reflection_;
  delete ClubOptions::default_instance_;
  delete ClubOptions_reflection_;
  delete EntityOptions::default_instance_;
  delete EntityOptions_reflection_;
}

void protobuf_AddDesc_api_2fclient_2fv2_2freport_5ftypes_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::bgs::protocol::v2::protobuf_AddDesc_api_2fclient_2fv2_2fattribute_5ftypes_2eproto();
  ::bgs::protocol::account::v1::protobuf_AddDesc_account_5ftypes_2eproto();
  ::bgs::protocol::protobuf_AddDesc_rpc_5ftypes_2eproto();
  ::bgs::protocol::protobuf_AddDesc_message_5ftypes_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n api/client/v2/report_types.proto\022\026bgs."
    "protocol.report.v2\032#api/client/v2/attrib"
    "ute_types.proto\032\023account_types.proto\032\017rp"
    "c_types.proto\032\023message_types.proto\"C\n\nRe"
    "portItem\022-\n\nmessage_id\030\001 \001(\0132\027.bgs.proto"
    "col.MessageIdH\000B\006\n\004type\"\333\001\n\013UserOptions\022"
    "5\n\ttarget_id\030\001 \001(\0132\".bgs.protocol.accoun"
    "t.v1.AccountId\022/\n\004type\030\002 \001(\0162!.bgs.proto"
    "col.report.v2.IssueType\0222\n\006source\030\003 \001(\0162"
    "\".bgs.protocol.report.v2.UserSource\0220\n\004i"
    "tem\030\004 \001(\0132\".bgs.protocol.report.v2.Repor"
    "tItem\"\310\001\n\013ClubOptions\022\017\n\007club_id\030\001 \001(\004\022\021"
    "\n\tstream_id\030\002 \001(\004\022/\n\004type\030\003 \001(\0162!.bgs.pr"
    "otocol.report.v2.IssueType\0222\n\006source\030\004 \001"
    "(\0162\".bgs.protocol.report.v2.ClubSource\0220"
    "\n\004item\030\005 \001(\0132\".bgs.protocol.report.v2.Re"
    "portItem\"\203\001\n\rEntityOptions\022 \n\tentity_id\030"
    "\001 \001(\tB\r\212\371+\t\"\007\n\005\010\001\020\310\001\022!\n\013entity_type\030\002 \001("
    "\tB\014\212\371+\010\"\006\n\004\010\001\020d\022-\n\tattribute\030\005 \003(\0132\032.bgs"
    ".protocol.v2.Attribute*\215\001\n\tIssueType\022\023\n\017"
    "ISSUE_TYPE_SPAM\020\000\022\031\n\025ISSUE_TYPE_HARASSME"
    "NT\020\001\022 \n\034ISSUE_TYPE_OFFENSIVE_CONTENT\020\003\022\026"
    "\n\022ISSUE_TYPE_HACKING\020\004\022\026\n\022ISSUE_TYPE_BOT"
    "TING\020\005*\301\001\n\nUserSource\022\025\n\021USER_SOURCE_OTH"
    "ER\020\000\022\027\n\023USER_SOURCE_WHISPER\020\001\022\027\n\023USER_SO"
    "URCE_PROFILE\020\002\022\032\n\026USER_SOURCE_BATTLE_TAG"
    "\020\003\022\024\n\020USER_SOURCE_CHAT\020\004\022!\n\035USER_SOURCE_"
    "FRIEND_INVITATION\020\005\022\025\n\021USER_SOURCE_VOICE"
    "\020\006*t\n\nClubSource\022\025\n\021CLUB_SOURCE_OTHER\020\000\022"
    "\027\n\023CLUB_SOURCE_MESSAGE\020\001\022\031\n\025CLUB_SOURCE_"
    "CLUB_NAME\020\002\022\033\n\027CLUB_SOURCE_STREAM_NAME\020\003"
    "B\005H\001\200\001\000", 1247);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "api/client/v2/report_types.proto", &protobuf_RegisterTypes);
  ReportItem::default_instance_ = new ReportItem();
  ReportItem_default_oneof_instance_ = new ReportItemOneofInstance;
  UserOptions::default_instance_ = new UserOptions();
  ClubOptions::default_instance_ = new ClubOptions();
  EntityOptions::default_instance_ = new EntityOptions();
  ReportItem::default_instance_->InitAsDefaultInstance();
  UserOptions::default_instance_->InitAsDefaultInstance();
  ClubOptions::default_instance_->InitAsDefaultInstance();
  EntityOptions::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_api_2fclient_2fv2_2freport_5ftypes_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_api_2fclient_2fv2_2freport_5ftypes_2eproto {
  StaticDescriptorInitializer_api_2fclient_2fv2_2freport_5ftypes_2eproto() {
    protobuf_AddDesc_api_2fclient_2fv2_2freport_5ftypes_2eproto();
  }
} static_descriptor_initializer_api_2fclient_2fv2_2freport_5ftypes_2eproto_;
const ::google::protobuf::EnumDescriptor* IssueType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IssueType_descriptor_;
}
bool IssueType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* UserSource_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserSource_descriptor_;
}
bool UserSource_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ClubSource_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClubSource_descriptor_;
}
bool ClubSource_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

// ===================================================================

#ifndef _MSC_VER
const int ReportItem::kMessageIdFieldNumber;
#endif  // !_MSC_VER

ReportItem::ReportItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.report.v2.ReportItem)
}

void ReportItem::InitAsDefaultInstance() {
  ReportItem_default_oneof_instance_->message_id_ = const_cast< ::bgs::protocol::MessageId*>(&::bgs::protocol::MessageId::default_instance());
}

ReportItem::ReportItem(const ReportItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.report.v2.ReportItem)
}

void ReportItem::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_type();
}

ReportItem::~ReportItem() {
  // @@protoc_insertion_point(destructor:bgs.protocol.report.v2.ReportItem)
  SharedDtor();
}

void ReportItem::SharedDtor() {
  if (has_type()) {
    clear_type();
  }
  if (this != default_instance_) {
  }
}

void ReportItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReportItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReportItem_descriptor_;
}

const ReportItem& ReportItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_api_2fclient_2fv2_2freport_5ftypes_2eproto();
  return *default_instance_;
}

ReportItem* ReportItem::default_instance_ = NULL;

ReportItem* ReportItem::New() const {
  return new ReportItem;
}

void ReportItem::clear_type() {
  switch(type_case()) {
    case kMessageId: {
      delete type_.message_id_;
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPE_NOT_SET;
}

void ReportItem::Clear() {
  clear_type();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReportItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bgs.protocol.report.v2.ReportItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .bgs.protocol.MessageId message_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_message_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bgs.protocol.report.v2.ReportItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bgs.protocol.report.v2.ReportItem)
  return false;
#undef DO_
}

void ReportItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bgs.protocol.report.v2.ReportItem)
  // optional .bgs.protocol.MessageId message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->message_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bgs.protocol.report.v2.ReportItem)
}

::google::protobuf::uint8* ReportItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.report.v2.ReportItem)
  // optional .bgs.protocol.MessageId message_id = 1;
  if (has_message_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->message_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.report.v2.ReportItem)
  return target;
}

int ReportItem::ByteSize() const {
  int total_size = 0;

  switch (type_case()) {
    // optional .bgs.protocol.MessageId message_id = 1;
    case kMessageId: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->message_id());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReportItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReportItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReportItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReportItem::MergeFrom(const ReportItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  switch (from.type_case()) {
    case kMessageId: {
      mutable_message_id()->::bgs::protocol::MessageId::MergeFrom(from.message_id());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReportItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportItem::CopyFrom(const ReportItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportItem::IsInitialized() const {
  return true;
}

void ReportItem::Swap(ReportItem* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_oneof_case_[0], other->_oneof_case_[0]);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReportItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReportItem_descriptor_;
  metadata.reflection = ReportItem_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int UserOptions::kTargetIdFieldNumber;
const int UserOptions::kTypeFieldNumber;
const int UserOptions::kSourceFieldNumber;
const int UserOptions::kItemFieldNumber;
#endif  // !_MSC_VER

UserOptions::UserOptions()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.report.v2.UserOptions)
}

void UserOptions::InitAsDefaultInstance() {
  target_id_ = const_cast< ::bgs::protocol::account::v1::AccountId*>(&::bgs::protocol::account::v1::AccountId::default_instance());
  item_ = const_cast< ::bgs::protocol::report::v2::ReportItem*>(&::bgs::protocol::report::v2::ReportItem::default_instance());
}

UserOptions::UserOptions(const UserOptions& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.report.v2.UserOptions)
}

void UserOptions::SharedCtor() {
  _cached_size_ = 0;
  target_id_ = NULL;
  type_ = 0;
  source_ = 0;
  item_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserOptions::~UserOptions() {
  // @@protoc_insertion_point(destructor:bgs.protocol.report.v2.UserOptions)
  SharedDtor();
}

void UserOptions::SharedDtor() {
  if (this != default_instance_) {
    delete target_id_;
    delete item_;
  }
}

void UserOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserOptions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserOptions_descriptor_;
}

const UserOptions& UserOptions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_api_2fclient_2fv2_2freport_5ftypes_2eproto();
  return *default_instance_;
}

UserOptions* UserOptions::default_instance_ = NULL;

UserOptions* UserOptions::New() const {
  return new UserOptions;
}

void UserOptions::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UserOptions*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(type_, source_);
    if (has_target_id()) {
      if (target_id_ != NULL) target_id_->::bgs::protocol::account::v1::AccountId::Clear();
    }
    if (has_item()) {
      if (item_ != NULL) item_->::bgs::protocol::report::v2::ReportItem::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bgs.protocol.report.v2.UserOptions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .bgs.protocol.account.v1.AccountId target_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_target_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .bgs.protocol.report.v2.IssueType type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::bgs::protocol::report::v2::IssueType_IsValid(value)) {
            set_type(static_cast< ::bgs::protocol::report::v2::IssueType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_source;
        break;
      }

      // optional .bgs.protocol.report.v2.UserSource source = 3;
      case 3: {
        if (tag == 24) {
         parse_source:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::bgs::protocol::report::v2::UserSource_IsValid(value)) {
            set_source(static_cast< ::bgs::protocol::report::v2::UserSource >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_item;
        break;
      }

      // optional .bgs.protocol.report.v2.ReportItem item = 4;
      case 4: {
        if (tag == 34) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bgs.protocol.report.v2.UserOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bgs.protocol.report.v2.UserOptions)
  return false;
#undef DO_
}

void UserOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bgs.protocol.report.v2.UserOptions)
  // optional .bgs.protocol.account.v1.AccountId target_id = 1;
  if (has_target_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->target_id(), output);
  }

  // optional .bgs.protocol.report.v2.IssueType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional .bgs.protocol.report.v2.UserSource source = 3;
  if (has_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->source(), output);
  }

  // optional .bgs.protocol.report.v2.ReportItem item = 4;
  if (has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->item(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bgs.protocol.report.v2.UserOptions)
}

::google::protobuf::uint8* UserOptions::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.report.v2.UserOptions)
  // optional .bgs.protocol.account.v1.AccountId target_id = 1;
  if (has_target_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->target_id(), target);
  }

  // optional .bgs.protocol.report.v2.IssueType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional .bgs.protocol.report.v2.UserSource source = 3;
  if (has_source()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->source(), target);
  }

  // optional .bgs.protocol.report.v2.ReportItem item = 4;
  if (has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->item(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.report.v2.UserOptions)
  return target;
}

int UserOptions::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .bgs.protocol.account.v1.AccountId target_id = 1;
    if (has_target_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->target_id());
    }

    // optional .bgs.protocol.report.v2.IssueType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .bgs.protocol.report.v2.UserSource source = 3;
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->source());
    }

    // optional .bgs.protocol.report.v2.ReportItem item = 4;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserOptions::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserOptions* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserOptions*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserOptions::MergeFrom(const UserOptions& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_target_id()) {
      mutable_target_id()->::bgs::protocol::account::v1::AccountId::MergeFrom(from.target_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_source()) {
      set_source(from.source());
    }
    if (from.has_item()) {
      mutable_item()->::bgs::protocol::report::v2::ReportItem::MergeFrom(from.item());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserOptions::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserOptions::CopyFrom(const UserOptions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserOptions::IsInitialized() const {
  if (has_target_id()) {
    if (!this->target_id().IsInitialized()) return false;
  }
  return true;
}

void UserOptions::Swap(UserOptions* other) {
  if (other != this) {
    std::swap(target_id_, other->target_id_);
    std::swap(type_, other->type_);
    std::swap(source_, other->source_);
    std::swap(item_, other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserOptions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserOptions_descriptor_;
  metadata.reflection = UserOptions_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int ClubOptions::kClubIdFieldNumber;
const int ClubOptions::kStreamIdFieldNumber;
const int ClubOptions::kTypeFieldNumber;
const int ClubOptions::kSourceFieldNumber;
const int ClubOptions::kItemFieldNumber;
#endif  // !_MSC_VER

ClubOptions::ClubOptions()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.report.v2.ClubOptions)
}

void ClubOptions::InitAsDefaultInstance() {
  item_ = const_cast< ::bgs::protocol::report::v2::ReportItem*>(&::bgs::protocol::report::v2::ReportItem::default_instance());
}

ClubOptions::ClubOptions(const ClubOptions& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.report.v2.ClubOptions)
}

void ClubOptions::SharedCtor() {
  _cached_size_ = 0;
  club_id_ = GOOGLE_ULONGLONG(0);
  stream_id_ = GOOGLE_ULONGLONG(0);
  type_ = 0;
  source_ = 0;
  item_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClubOptions::~ClubOptions() {
  // @@protoc_insertion_point(destructor:bgs.protocol.report.v2.ClubOptions)
  SharedDtor();
}

void ClubOptions::SharedDtor() {
  if (this != default_instance_) {
    delete item_;
  }
}

void ClubOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClubOptions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClubOptions_descriptor_;
}

const ClubOptions& ClubOptions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_api_2fclient_2fv2_2freport_5ftypes_2eproto();
  return *default_instance_;
}

ClubOptions* ClubOptions::default_instance_ = NULL;

ClubOptions* ClubOptions::New() const {
  return new ClubOptions;
}

void ClubOptions::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ClubOptions*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(club_id_, source_);
    if (has_item()) {
      if (item_ != NULL) item_->::bgs::protocol::report::v2::ReportItem::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClubOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bgs.protocol.report.v2.ClubOptions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 club_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &club_id_)));
          set_has_club_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_stream_id;
        break;
      }

      // optional uint64 stream_id = 2;
      case 2: {
        if (tag == 16) {
         parse_stream_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &stream_id_)));
          set_has_stream_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .bgs.protocol.report.v2.IssueType type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::bgs::protocol::report::v2::IssueType_IsValid(value)) {
            set_type(static_cast< ::bgs::protocol::report::v2::IssueType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_source;
        break;
      }

      // optional .bgs.protocol.report.v2.ClubSource source = 4;
      case 4: {
        if (tag == 32) {
         parse_source:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::bgs::protocol::report::v2::ClubSource_IsValid(value)) {
            set_source(static_cast< ::bgs::protocol::report::v2::ClubSource >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_item;
        break;
      }

      // optional .bgs.protocol.report.v2.ReportItem item = 5;
      case 5: {
        if (tag == 42) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bgs.protocol.report.v2.ClubOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bgs.protocol.report.v2.ClubOptions)
  return false;
#undef DO_
}

void ClubOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bgs.protocol.report.v2.ClubOptions)
  // optional uint64 club_id = 1;
  if (has_club_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->club_id(), output);
  }

  // optional uint64 stream_id = 2;
  if (has_stream_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->stream_id(), output);
  }

  // optional .bgs.protocol.report.v2.IssueType type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // optional .bgs.protocol.report.v2.ClubSource source = 4;
  if (has_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->source(), output);
  }

  // optional .bgs.protocol.report.v2.ReportItem item = 5;
  if (has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->item(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bgs.protocol.report.v2.ClubOptions)
}

::google::protobuf::uint8* ClubOptions::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.report.v2.ClubOptions)
  // optional uint64 club_id = 1;
  if (has_club_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->club_id(), target);
  }

  // optional uint64 stream_id = 2;
  if (has_stream_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->stream_id(), target);
  }

  // optional .bgs.protocol.report.v2.IssueType type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // optional .bgs.protocol.report.v2.ClubSource source = 4;
  if (has_source()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->source(), target);
  }

  // optional .bgs.protocol.report.v2.ReportItem item = 5;
  if (has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->item(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.report.v2.ClubOptions)
  return target;
}

int ClubOptions::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 club_id = 1;
    if (has_club_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->club_id());
    }

    // optional uint64 stream_id = 2;
    if (has_stream_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->stream_id());
    }

    // optional .bgs.protocol.report.v2.IssueType type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .bgs.protocol.report.v2.ClubSource source = 4;
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->source());
    }

    // optional .bgs.protocol.report.v2.ReportItem item = 5;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClubOptions::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClubOptions* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClubOptions*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClubOptions::MergeFrom(const ClubOptions& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_club_id()) {
      set_club_id(from.club_id());
    }
    if (from.has_stream_id()) {
      set_stream_id(from.stream_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_source()) {
      set_source(from.source());
    }
    if (from.has_item()) {
      mutable_item()->::bgs::protocol::report::v2::ReportItem::MergeFrom(from.item());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClubOptions::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClubOptions::CopyFrom(const ClubOptions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClubOptions::IsInitialized() const {
  return true;
}

void ClubOptions::Swap(ClubOptions* other) {
  if (other != this) {
    std::swap(club_id_, other->club_id_);
    std::swap(stream_id_, other->stream_id_);
    std::swap(type_, other->type_);
    std::swap(source_, other->source_);
    std::swap(item_, other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClubOptions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClubOptions_descriptor_;
  metadata.reflection = ClubOptions_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int EntityOptions::kEntityIdFieldNumber;
const int EntityOptions::kEntityTypeFieldNumber;
const int EntityOptions::kAttributeFieldNumber;
#endif  // !_MSC_VER

EntityOptions::EntityOptions()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.report.v2.EntityOptions)
}

void EntityOptions::InitAsDefaultInstance() {
}

EntityOptions::EntityOptions(const EntityOptions& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.report.v2.EntityOptions)
}

void EntityOptions::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  entity_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  entity_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EntityOptions::~EntityOptions() {
  // @@protoc_insertion_point(destructor:bgs.protocol.report.v2.EntityOptions)
  SharedDtor();
}

void EntityOptions::SharedDtor() {
  if (entity_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete entity_id_;
  }
  if (entity_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete entity_type_;
  }
  if (this != default_instance_) {
  }
}

void EntityOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EntityOptions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EntityOptions_descriptor_;
}

const EntityOptions& EntityOptions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_api_2fclient_2fv2_2freport_5ftypes_2eproto();
  return *default_instance_;
}

EntityOptions* EntityOptions::default_instance_ = NULL;

EntityOptions* EntityOptions::New() const {
  return new EntityOptions;
}

void EntityOptions::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_entity_id()) {
      if (entity_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        entity_id_->clear();
      }
    }
    if (has_entity_type()) {
      if (entity_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        entity_type_->clear();
      }
    }
  }
  attribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EntityOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bgs.protocol.report.v2.EntityOptions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string entity_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_entity_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->entity_id().data(), this->entity_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "entity_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_entity_type;
        break;
      }

      // optional string entity_type = 2;
      case 2: {
        if (tag == 18) {
         parse_entity_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_entity_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->entity_type().data(), this->entity_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "entity_type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_attribute;
        break;
      }

      // repeated .bgs.protocol.v2.Attribute attribute = 5;
      case 5: {
        if (tag == 42) {
         parse_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attribute()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_attribute;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bgs.protocol.report.v2.EntityOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bgs.protocol.report.v2.EntityOptions)
  return false;
#undef DO_
}

void EntityOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bgs.protocol.report.v2.EntityOptions)
  // optional string entity_id = 1;
  if (has_entity_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->entity_id().data(), this->entity_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "entity_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->entity_id(), output);
  }

  // optional string entity_type = 2;
  if (has_entity_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->entity_type().data(), this->entity_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "entity_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->entity_type(), output);
  }

  // repeated .bgs.protocol.v2.Attribute attribute = 5;
  for (int i = 0; i < this->attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->attribute(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bgs.protocol.report.v2.EntityOptions)
}

::google::protobuf::uint8* EntityOptions::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.report.v2.EntityOptions)
  // optional string entity_id = 1;
  if (has_entity_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->entity_id().data(), this->entity_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "entity_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->entity_id(), target);
  }

  // optional string entity_type = 2;
  if (has_entity_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->entity_type().data(), this->entity_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "entity_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->entity_type(), target);
  }

  // repeated .bgs.protocol.v2.Attribute attribute = 5;
  for (int i = 0; i < this->attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->attribute(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.report.v2.EntityOptions)
  return target;
}

int EntityOptions::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string entity_id = 1;
    if (has_entity_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->entity_id());
    }

    // optional string entity_type = 2;
    if (has_entity_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->entity_type());
    }

  }
  // repeated .bgs.protocol.v2.Attribute attribute = 5;
  total_size += 1 * this->attribute_size();
  for (int i = 0; i < this->attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attribute(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EntityOptions::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EntityOptions* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EntityOptions*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EntityOptions::MergeFrom(const EntityOptions& from) {
  GOOGLE_CHECK_NE(&from, this);
  attribute_.MergeFrom(from.attribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_entity_id()) {
      set_entity_id(from.entity_id());
    }
    if (from.has_entity_type()) {
      set_entity_type(from.entity_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EntityOptions::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EntityOptions::CopyFrom(const EntityOptions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntityOptions::IsInitialized() const {
  return true;
}

void EntityOptions::Swap(EntityOptions* other) {
  if (other != this) {
    std::swap(entity_id_, other->entity_id_);
    std::swap(entity_type_, other->entity_type_);
    attribute_.Swap(&other->attribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EntityOptions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EntityOptions_descriptor_;
  metadata.reflection = EntityOptions_reflection_;
  return metadata;
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace v2
}  // namespace report
}  // namespace protocol
}  // namespace bgs

// @@protoc_insertion_point(global_scope)
