// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/client/v1/club_notification.proto

#ifndef PROTOBUF_api_2fclient_2fv1_2fclub_5fnotification_2eproto__INCLUDED
#define PROTOBUF_api_2fclient_2fv1_2fclub_5fnotification_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "api/client/v1/club_types.pb.h"  // IWYU pragma: export
#include "api/common/v1/invitation_types.pb.h"  // IWYU pragma: export
#include "rpc_types.pb.h"  // IWYU pragma: export
#include "Define.h" // for TC_PROTO_API
// @@protoc_insertion_point(includes)

namespace bgs {
namespace protocol {
namespace club {
namespace v1 {
namespace client {

// Internal implementation detail -- do not call these.
void TC_PROTO_API protobuf_AddDesc_api_2fclient_2fv1_2fclub_5fnotification_2eproto();
void protobuf_AssignDesc_api_2fclient_2fv1_2fclub_5fnotification_2eproto();
void protobuf_ShutdownFile_api_2fclient_2fv1_2fclub_5fnotification_2eproto();

class SubscribeNotification;
class UnsubscribeNotification;
class StateChangedNotification;
class SettingsChangedNotification;
class MemberAddedNotification;
class MemberRemovedNotification;
class MemberStateChangedNotification;
class SubscriberStateChangedNotification;
class MemberRoleChangedNotification;
class InvitationAddedNotification;
class InvitationRemovedNotification;
class SuggestionAddedNotification;
class SuggestionRemovedNotification;
class StreamAddedNotification;
class StreamRemovedNotification;
class StreamStateChangedNotification;
class StreamMessageAddedNotification;
class StreamMessageUpdatedNotification;
class StreamTypingIndicatorNotification;
class StreamUnreadIndicatorNotification;
class StreamAdvanceViewTimeNotification;

// ===================================================================

class TC_PROTO_API SubscribeNotification : public ::google::protobuf::Message {
 public:
  SubscribeNotification();
  virtual ~SubscribeNotification();

  SubscribeNotification(const SubscribeNotification& from);

  inline SubscribeNotification& operator=(const SubscribeNotification& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SubscribeNotification& default_instance();

  void Swap(SubscribeNotification* other);

  // implements Message ----------------------------------------------

  SubscribeNotification* New() const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  inline bool has_agent_id() const;
  inline void clear_agent_id();
  static const int kAgentIdFieldNumber = 1;
  inline const ::bgs::protocol::club::v1::MemberId& agent_id() const;
  inline ::bgs::protocol::club::v1::MemberId* mutable_agent_id();
  inline ::bgs::protocol::club::v1::MemberId* release_agent_id();
  inline void set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id);

  // optional uint64 club_id = 3;
  inline bool has_club_id() const;
  inline void clear_club_id();
  static const int kClubIdFieldNumber = 3;
  inline ::google::protobuf::uint64 club_id() const;
  inline void set_club_id(::google::protobuf::uint64 value);

  // optional .bgs.protocol.club.v1.client.Club club = 4;
  inline bool has_club() const;
  inline void clear_club();
  static const int kClubFieldNumber = 4;
  inline const ::bgs::protocol::club::v1::client::Club& club() const;
  inline ::bgs::protocol::club::v1::client::Club* mutable_club();
  inline ::bgs::protocol::club::v1::client::Club* release_club();
  inline void set_allocated_club(::bgs::protocol::club::v1::client::Club* club);

  // optional .bgs.protocol.club.v1.client.ClubView view = 5;
  inline bool has_view() const;
  inline void clear_view();
  static const int kViewFieldNumber = 5;
  inline const ::bgs::protocol::club::v1::client::ClubView& view() const;
  inline ::bgs::protocol::club::v1::client::ClubView* mutable_view();
  inline ::bgs::protocol::club::v1::client::ClubView* release_view();
  inline void set_allocated_view(::bgs::protocol::club::v1::client::ClubView* view);

  // optional .bgs.protocol.club.v1.client.ClubSettings settings = 10;
  inline bool has_settings() const;
  inline void clear_settings();
  static const int kSettingsFieldNumber = 10;
  inline const ::bgs::protocol::club::v1::client::ClubSettings& settings() const;
  inline ::bgs::protocol::club::v1::client::ClubSettings* mutable_settings();
  inline ::bgs::protocol::club::v1::client::ClubSettings* release_settings();
  inline void set_allocated_settings(::bgs::protocol::club::v1::client::ClubSettings* settings);

  // optional .bgs.protocol.club.v1.client.Member member = 11;
  inline bool has_member() const;
  inline void clear_member();
  static const int kMemberFieldNumber = 11;
  inline const ::bgs::protocol::club::v1::client::Member& member() const;
  inline ::bgs::protocol::club::v1::client::Member* mutable_member();
  inline ::bgs::protocol::club::v1::client::Member* release_member();
  inline void set_allocated_member(::bgs::protocol::club::v1::client::Member* member);

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.client.SubscribeNotification)
 private:
  inline void set_has_agent_id();
  inline void clear_has_agent_id();
  inline void set_has_club_id();
  inline void clear_has_club_id();
  inline void set_has_club();
  inline void clear_has_club();
  inline void set_has_view();
  inline void clear_has_view();
  inline void set_has_settings();
  inline void clear_has_settings();
  inline void set_has_member();
  inline void clear_has_member();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::bgs::protocol::club::v1::MemberId* agent_id_;
  ::google::protobuf::uint64 club_id_;
  ::bgs::protocol::club::v1::client::Club* club_;
  ::bgs::protocol::club::v1::client::ClubView* view_;
  ::bgs::protocol::club::v1::client::ClubSettings* settings_;
  ::bgs::protocol::club::v1::client::Member* member_;
  friend void TC_PROTO_API protobuf_AddDesc_api_2fclient_2fv1_2fclub_5fnotification_2eproto();
  friend void protobuf_AssignDesc_api_2fclient_2fv1_2fclub_5fnotification_2eproto();
  friend void protobuf_ShutdownFile_api_2fclient_2fv1_2fclub_5fnotification_2eproto();

  void InitAsDefaultInstance();
  static SubscribeNotification* default_instance_;
};
// -------------------------------------------------------------------

class TC_PROTO_API UnsubscribeNotification : public ::google::protobuf::Message {
 public:
  UnsubscribeNotification();
  virtual ~UnsubscribeNotification();

  UnsubscribeNotification(const UnsubscribeNotification& from);

  inline UnsubscribeNotification& operator=(const UnsubscribeNotification& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UnsubscribeNotification& default_instance();

  void Swap(UnsubscribeNotification* other);

  // implements Message ----------------------------------------------

  UnsubscribeNotification* New() const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  inline bool has_agent_id() const;
  inline void clear_agent_id();
  static const int kAgentIdFieldNumber = 1;
  inline const ::bgs::protocol::club::v1::MemberId& agent_id() const;
  inline ::bgs::protocol::club::v1::MemberId* mutable_agent_id();
  inline ::bgs::protocol::club::v1::MemberId* release_agent_id();
  inline void set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id);

  // optional uint64 club_id = 3;
  inline bool has_club_id() const;
  inline void clear_club_id();
  static const int kClubIdFieldNumber = 3;
  inline ::google::protobuf::uint64 club_id() const;
  inline void set_club_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.client.UnsubscribeNotification)
 private:
  inline void set_has_agent_id();
  inline void clear_has_agent_id();
  inline void set_has_club_id();
  inline void clear_has_club_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::bgs::protocol::club::v1::MemberId* agent_id_;
  ::google::protobuf::uint64 club_id_;
  friend void TC_PROTO_API protobuf_AddDesc_api_2fclient_2fv1_2fclub_5fnotification_2eproto();
  friend void protobuf_AssignDesc_api_2fclient_2fv1_2fclub_5fnotification_2eproto();
  friend void protobuf_ShutdownFile_api_2fclient_2fv1_2fclub_5fnotification_2eproto();

  void InitAsDefaultInstance();
  static UnsubscribeNotification* default_instance_;
};
// -------------------------------------------------------------------

class TC_PROTO_API StateChangedNotification : public ::google::protobuf::Message {
 public:
  StateChangedNotification();
  virtual ~StateChangedNotification();

  StateChangedNotification(const StateChangedNotification& from);

  inline StateChangedNotification& operator=(const StateChangedNotification& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StateChangedNotification& default_instance();

  void Swap(StateChangedNotification* other);

  // implements Message ----------------------------------------------

  StateChangedNotification* New() const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  inline bool has_agent_id() const;
  inline void clear_agent_id();
  static const int kAgentIdFieldNumber = 1;
  inline const ::bgs::protocol::club::v1::MemberId& agent_id() const;
  inline ::bgs::protocol::club::v1::MemberId* mutable_agent_id();
  inline ::bgs::protocol::club::v1::MemberId* release_agent_id();
  inline void set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id);

  // optional uint64 club_id = 3;
  inline bool has_club_id() const;
  inline void clear_club_id();
  static const int kClubIdFieldNumber = 3;
  inline ::google::protobuf::uint64 club_id() const;
  inline void set_club_id(::google::protobuf::uint64 value);

  // optional .bgs.protocol.club.v1.client.ClubStateAssignment assignment = 5;
  inline bool has_assignment() const;
  inline void clear_assignment();
  static const int kAssignmentFieldNumber = 5;
  inline const ::bgs::protocol::club::v1::client::ClubStateAssignment& assignment() const;
  inline ::bgs::protocol::club::v1::client::ClubStateAssignment* mutable_assignment();
  inline ::bgs::protocol::club::v1::client::ClubStateAssignment* release_assignment();
  inline void set_allocated_assignment(::bgs::protocol::club::v1::client::ClubStateAssignment* assignment);

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.client.StateChangedNotification)
 private:
  inline void set_has_agent_id();
  inline void clear_has_agent_id();
  inline void set_has_club_id();
  inline void clear_has_club_id();
  inline void set_has_assignment();
  inline void clear_has_assignment();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::bgs::protocol::club::v1::MemberId* agent_id_;
  ::google::protobuf::uint64 club_id_;
  ::bgs::protocol::club::v1::client::ClubStateAssignment* assignment_;
  friend void TC_PROTO_API protobuf_AddDesc_api_2fclient_2fv1_2fclub_5fnotification_2eproto();
  friend void protobuf_AssignDesc_api_2fclient_2fv1_2fclub_5fnotification_2eproto();
  friend void protobuf_ShutdownFile_api_2fclient_2fv1_2fclub_5fnotification_2eproto();

  void InitAsDefaultInstance();
  static StateChangedNotification* default_instance_;
};
// -------------------------------------------------------------------

class TC_PROTO_API SettingsChangedNotification : public ::google::protobuf::Message {
 public:
  SettingsChangedNotification();
  virtual ~SettingsChangedNotification();

  SettingsChangedNotification(const SettingsChangedNotification& from);

  inline SettingsChangedNotification& operator=(const SettingsChangedNotification& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SettingsChangedNotification& default_instance();

  void Swap(SettingsChangedNotification* other);

  // implements Message ----------------------------------------------

  SettingsChangedNotification* New() const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  inline bool has_agent_id() const;
  inline void clear_agent_id();
  static const int kAgentIdFieldNumber = 1;
  inline const ::bgs::protocol::club::v1::MemberId& agent_id() const;
  inline ::bgs::protocol::club::v1::MemberId* mutable_agent_id();
  inline ::bgs::protocol::club::v1::MemberId* release_agent_id();
  inline void set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id);

  // optional uint64 club_id = 3;
  inline bool has_club_id() const;
  inline void clear_club_id();
  static const int kClubIdFieldNumber = 3;
  inline ::google::protobuf::uint64 club_id() const;
  inline void set_club_id(::google::protobuf::uint64 value);

  // optional .bgs.protocol.club.v1.client.ClubSettingsAssignment assignment = 4;
  inline bool has_assignment() const;
  inline void clear_assignment();
  static const int kAssignmentFieldNumber = 4;
  inline const ::bgs::protocol::club::v1::client::ClubSettingsAssignment& assignment() const;
  inline ::bgs::protocol::club::v1::client::ClubSettingsAssignment* mutable_assignment();
  inline ::bgs::protocol::club::v1::client::ClubSettingsAssignment* release_assignment();
  inline void set_allocated_assignment(::bgs::protocol::club::v1::client::ClubSettingsAssignment* assignment);

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.client.SettingsChangedNotification)
 private:
  inline void set_has_agent_id();
  inline void clear_has_agent_id();
  inline void set_has_club_id();
  inline void clear_has_club_id();
  inline void set_has_assignment();
  inline void clear_has_assignment();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::bgs::protocol::club::v1::MemberId* agent_id_;
  ::google::protobuf::uint64 club_id_;
  ::bgs::protocol::club::v1::client::ClubSettingsAssignment* assignment_;
  friend void TC_PROTO_API protobuf_AddDesc_api_2fclient_2fv1_2fclub_5fnotification_2eproto();
  friend void protobuf_AssignDesc_api_2fclient_2fv1_2fclub_5fnotification_2eproto();
  friend void protobuf_ShutdownFile_api_2fclient_2fv1_2fclub_5fnotification_2eproto();

  void InitAsDefaultInstance();
  static SettingsChangedNotification* default_instance_;
};
// -------------------------------------------------------------------

class TC_PROTO_API MemberAddedNotification : public ::google::protobuf::Message {
 public:
  MemberAddedNotification();
  virtual ~MemberAddedNotification();

  MemberAddedNotification(const MemberAddedNotification& from);

  inline MemberAddedNotification& operator=(const MemberAddedNotification& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MemberAddedNotification& default_instance();

  void Swap(MemberAddedNotification* other);

  // implements Message ----------------------------------------------

  MemberAddedNotification* New() const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  inline bool has_agent_id() const;
  inline void clear_agent_id();
  static const int kAgentIdFieldNumber = 1;
  inline const ::bgs::protocol::club::v1::MemberId& agent_id() const;
  inline ::bgs::protocol::club::v1::MemberId* mutable_agent_id();
  inline ::bgs::protocol::club::v1::MemberId* release_agent_id();
  inline void set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id);

  // optional uint64 club_id = 3;
  inline bool has_club_id() const;
  inline void clear_club_id();
  static const int kClubIdFieldNumber = 3;
  inline ::google::protobuf::uint64 club_id() const;
  inline void set_club_id(::google::protobuf::uint64 value);

  // repeated .bgs.protocol.club.v1.client.Member member = 4;
  inline int member_size() const;
  inline void clear_member();
  static const int kMemberFieldNumber = 4;
  inline const ::bgs::protocol::club::v1::client::Member& member(int index) const;
  inline ::bgs::protocol::club::v1::client::Member* mutable_member(int index);
  inline ::bgs::protocol::club::v1::client::Member* add_member();
  inline const ::google::protobuf::RepeatedPtrField< ::bgs::protocol::club::v1::client::Member >&
      member() const;
  inline ::google::protobuf::RepeatedPtrField< ::bgs::protocol::club::v1::client::Member >*
      mutable_member();

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.client.MemberAddedNotification)
 private:
  inline void set_has_agent_id();
  inline void clear_has_agent_id();
  inline void set_has_club_id();
  inline void clear_has_club_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::bgs::protocol::club::v1::MemberId* agent_id_;
  ::google::protobuf::uint64 club_id_;
  ::google::protobuf::RepeatedPtrField< ::bgs::protocol::club::v1::client::Member > member_;
  friend void TC_PROTO_API protobuf_AddDesc_api_2fclient_2fv1_2fclub_5fnotification_2eproto();
  friend void protobuf_AssignDesc_api_2fclient_2fv1_2fclub_5fnotification_2eproto();
  friend void protobuf_ShutdownFile_api_2fclient_2fv1_2fclub_5fnotification_2eproto();

  void InitAsDefaultInstance();
  static MemberAddedNotification* default_instance_;
};
// -------------------------------------------------------------------

class TC_PROTO_API MemberRemovedNotification : public ::google::protobuf::Message {
 public:
  MemberRemovedNotification();
  virtual ~MemberRemovedNotification();

  MemberRemovedNotification(const MemberRemovedNotification& from);

  inline MemberRemovedNotification& operator=(const MemberRemovedNotification& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MemberRemovedNotification& default_instance();

  void Swap(MemberRemovedNotification* other);

  // implements Message ----------------------------------------------

  MemberRemovedNotification* New() const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  inline bool has_agent_id() const;
  inline void clear_agent_id();
  static const int kAgentIdFieldNumber = 1;
  inline const ::bgs::protocol::club::v1::MemberId& agent_id() const;
  inline ::bgs::protocol::club::v1::MemberId* mutable_agent_id();
  inline ::bgs::protocol::club::v1::MemberId* release_agent_id();
  inline void set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id);

  // optional uint64 club_id = 3;
  inline bool has_club_id() const;
  inline void clear_club_id();
  static const int kClubIdFieldNumber = 3;
  inline ::google::protobuf::uint64 club_id() const;
  inline void set_club_id(::google::protobuf::uint64 value);

  // repeated .bgs.protocol.club.v1.client.MemberRemovedAssignment member = 4;
  inline int member_size() const;
  inline void clear_member();
  static const int kMemberFieldNumber = 4;
  inline const ::bgs::protocol::club::v1::client::MemberRemovedAssignment& member(int index) const;
  inline ::bgs::protocol::club::v1::client::MemberRemovedAssignment* mutable_member(int index);
  inline ::bgs::protocol::club::v1::client::MemberRemovedAssignment* add_member();
  inline const ::google::protobuf::RepeatedPtrField< ::bgs::protocol::club::v1::client::MemberRemovedAssignment >&
      member() const;
  inline ::google::protobuf::RepeatedPtrField< ::bgs::protocol::club::v1::client::MemberRemovedAssignment >*
      mutable_member();

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.client.MemberRemovedNotification)
 private:
  inline void set_has_agent_id();
  inline void clear_has_agent_id();
  inline void set_has_club_id();
  inline void clear_has_club_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::bgs::protocol::club::v1::MemberId* agent_id_;
  ::google::protobuf::uint64 club_id_;
  ::google::protobuf::RepeatedPtrField< ::bgs::protocol::club::v1::client::MemberRemovedAssignment > member_;
  friend void TC_PROTO_API protobuf_AddDesc_api_2fclient_2fv1_2fclub_5fnotification_2eproto();
  friend void protobuf_AssignDesc_api_2fclient_2fv1_2fclub_5fnotification_2eproto();
  friend void protobuf_ShutdownFile_api_2fclient_2fv1_2fclub_5fnotification_2eproto();

  void InitAsDefaultInstance();
  static MemberRemovedNotification* default_instance_;
};
// -------------------------------------------------------------------

class TC_PROTO_API MemberStateChangedNotification : public ::google::protobuf::Message {
 public:
  MemberStateChangedNotification();
  virtual ~MemberStateChangedNotification();

  MemberStateChangedNotification(const MemberStateChangedNotification& from);

  inline MemberStateChangedNotification& operator=(const MemberStateChangedNotification& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MemberStateChangedNotification& default_instance();

  void Swap(MemberStateChangedNotification* other);

  // implements Message ----------------------------------------------

  MemberStateChangedNotification* New() const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  inline bool has_agent_id() const;
  inline void clear_agent_id();
  static const int kAgentIdFieldNumber = 1;
  inline const ::bgs::protocol::club::v1::MemberId& agent_id() const;
  inline ::bgs::protocol::club::v1::MemberId* mutable_agent_id();
  inline ::bgs::protocol::club::v1::MemberId* release_agent_id();
  inline void set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id);

  // optional uint64 club_id = 3;
  inline bool has_club_id() const;
  inline void clear_club_id();
  static const int kClubIdFieldNumber = 3;
  inline ::google::protobuf::uint64 club_id() const;
  inline void set_club_id(::google::protobuf::uint64 value);

  // repeated .bgs.protocol.club.v1.client.MemberStateAssignment assignment = 4;
  inline int assignment_size() const;
  inline void clear_assignment();
  static const int kAssignmentFieldNumber = 4;
  inline const ::bgs::protocol::club::v1::client::MemberStateAssignment& assignment(int index) const;
  inline ::bgs::protocol::club::v1::client::MemberStateAssignment* mutable_assignment(int index);
  inline ::bgs::protocol::club::v1::client::MemberStateAssignment* add_assignment();
  inline const ::google::protobuf::RepeatedPtrField< ::bgs::protocol::club::v1::client::MemberStateAssignment >&
      assignment() const;
  inline ::google::protobuf::RepeatedPtrField< ::bgs::protocol::club::v1::client::MemberStateAssignment >*
      mutable_assignment();

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.client.MemberStateChangedNotification)
 private:
  inline void set_has_agent_id();
  inline void clear_has_agent_id();
  inline void set_has_club_id();
  inline void clear_has_club_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::bgs::protocol::club::v1::MemberId* agent_id_;
  ::google::protobuf::uint64 club_id_;
  ::google::protobuf::RepeatedPtrField< ::bgs::protocol::club::v1::client::MemberStateAssignment > assignment_;
  friend void TC_PROTO_API protobuf_AddDesc_api_2fclient_2fv1_2fclub_5fnotification_2eproto();
  friend void protobuf_AssignDesc_api_2fclient_2fv1_2fclub_5fnotification_2eproto();
  friend void protobuf_ShutdownFile_api_2fclient_2fv1_2fclub_5fnotification_2eproto();

  void InitAsDefaultInstance();
  static MemberStateChangedNotification* default_instance_;
};
// -------------------------------------------------------------------

class TC_PROTO_API SubscriberStateChangedNotification : public ::google::protobuf::Message {
 public:
  SubscriberStateChangedNotification();
  virtual ~SubscriberStateChangedNotification();

  SubscriberStateChangedNotification(const SubscriberStateChangedNotification& from);

  inline SubscriberStateChangedNotification& operator=(const SubscriberStateChangedNotification& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SubscriberStateChangedNotification& default_instance();

  void Swap(SubscriberStateChangedNotification* other);

  // implements Message ----------------------------------------------

  SubscriberStateChangedNotification* New() const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  inline bool has_agent_id() const;
  inline void clear_agent_id();
  static const int kAgentIdFieldNumber = 1;
  inline const ::bgs::protocol::club::v1::MemberId& agent_id() const;
  inline ::bgs::protocol::club::v1::MemberId* mutable_agent_id();
  inline ::bgs::protocol::club::v1::MemberId* release_agent_id();
  inline void set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id);

  // optional uint64 club_id = 3;
  inline bool has_club_id() const;
  inline void clear_club_id();
  static const int kClubIdFieldNumber = 3;
  inline ::google::protobuf::uint64 club_id() const;
  inline void set_club_id(::google::protobuf::uint64 value);

  // repeated .bgs.protocol.club.v1.client.SubscriberStateAssignment assignment = 4;
  inline int assignment_size() const;
  inline void clear_assignment();
  static const int kAssignmentFieldNumber = 4;
  inline const ::bgs::protocol::club::v1::client::SubscriberStateAssignment& assignment(int index) const;
  inline ::bgs::protocol::club::v1::client::SubscriberStateAssignment* mutable_assignment(int index);
  inline ::bgs::protocol::club::v1::client::SubscriberStateAssignment* add_assignment();
  inline const ::google::protobuf::RepeatedPtrField< ::bgs::protocol::club::v1::client::SubscriberStateAssignment >&
      assignment() const;
  inline ::google::protobuf::RepeatedPtrField< ::bgs::protocol::club::v1::client::SubscriberStateAssignment >*
      mutable_assignment();

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.client.SubscriberStateChangedNotification)
 private:
  inline void set_has_agent_id();
  inline void clear_has_agent_id();
  inline void set_has_club_id();
  inline void clear_has_club_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::bgs::protocol::club::v1::MemberId* agent_id_;
  ::google::protobuf::uint64 club_id_;
  ::google::protobuf::RepeatedPtrField< ::bgs::protocol::club::v1::client::SubscriberStateAssignment > assignment_;
  friend void TC_PROTO_API protobuf_AddDesc_api_2fclient_2fv1_2fclub_5fnotification_2eproto();
  friend void protobuf_AssignDesc_api_2fclient_2fv1_2fclub_5fnotification_2eproto();
  friend void protobuf_ShutdownFile_api_2fclient_2fv1_2fclub_5fnotification_2eproto();

  void InitAsDefaultInstance();
  static SubscriberStateChangedNotification* default_instance_;
};
// -------------------------------------------------------------------

class TC_PROTO_API MemberRoleChangedNotification : public ::google::protobuf::Message {
 public:
  MemberRoleChangedNotification();
  virtual ~MemberRoleChangedNotification();

  MemberRoleChangedNotification(const MemberRoleChangedNotification& from);

  inline MemberRoleChangedNotification& operator=(const MemberRoleChangedNotification& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MemberRoleChangedNotification& default_instance();

  void Swap(MemberRoleChangedNotification* other);

  // implements Message ----------------------------------------------

  MemberRoleChangedNotification* New() const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  inline bool has_agent_id() const;
  inline void clear_agent_id();
  static const int kAgentIdFieldNumber = 1;
  inline const ::bgs::protocol::club::v1::MemberId& agent_id() const;
  inline ::bgs::protocol::club::v1::MemberId* mutable_agent_id();
  inline ::bgs::protocol::club::v1::MemberId* release_agent_id();
  inline void set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id);

  // optional uint64 club_id = 3;
  inline bool has_club_id() const;
  inline void clear_club_id();
  static const int kClubIdFieldNumber = 3;
  inline ::google::protobuf::uint64 club_id() const;
  inline void set_club_id(::google::protobuf::uint64 value);

  // repeated .bgs.protocol.club.v1.client.RoleAssignment assignment = 4;
  inline int assignment_size() const;
  inline void clear_assignment();
  static const int kAssignmentFieldNumber = 4;
  inline const ::bgs::protocol::club::v1::client::RoleAssignment& assignment(int index) const;
  inline ::bgs::protocol::club::v1::client::RoleAssignment* mutable_assignment(int index);
  inline ::bgs::protocol::club::v1::client::RoleAssignment* add_assignment();
  inline const ::google::protobuf::RepeatedPtrField< ::bgs::protocol::club::v1::client::RoleAssignment >&
      assignment() const;
  inline ::google::protobuf::RepeatedPtrField< ::bgs::protocol::club::v1::client::RoleAssignment >*
      mutable_assignment();

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.client.MemberRoleChangedNotification)
 private:
  inline void set_has_agent_id();
  inline void clear_has_agent_id();
  inline void set_has_club_id();
  inline void clear_has_club_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::bgs::protocol::club::v1::MemberId* agent_id_;
  ::google::protobuf::uint64 club_id_;
  ::google::protobuf::RepeatedPtrField< ::bgs::protocol::club::v1::client::RoleAssignment > assignment_;
  friend void TC_PROTO_API protobuf_AddDesc_api_2fclient_2fv1_2fclub_5fnotification_2eproto();
  friend void protobuf_AssignDesc_api_2fclient_2fv1_2fclub_5fnotification_2eproto();
  friend void protobuf_ShutdownFile_api_2fclient_2fv1_2fclub_5fnotification_2eproto();

  void InitAsDefaultInstance();
  static MemberRoleChangedNotification* default_instance_;
};
// -------------------------------------------------------------------

class TC_PROTO_API InvitationAddedNotification : public ::google::protobuf::Message {
 public:
  InvitationAddedNotification();
  virtual ~InvitationAddedNotification();

  InvitationAddedNotification(const InvitationAddedNotification& from);

  inline InvitationAddedNotification& operator=(const InvitationAddedNotification& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InvitationAddedNotification& default_instance();

  void Swap(InvitationAddedNotification* other);

  // implements Message ----------------------------------------------

  InvitationAddedNotification* New() const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  inline bool has_agent_id() const;
  inline void clear_agent_id();
  static const int kAgentIdFieldNumber = 1;
  inline const ::bgs::protocol::club::v1::MemberId& agent_id() const;
  inline ::bgs::protocol::club::v1::MemberId* mutable_agent_id();
  inline ::bgs::protocol::club::v1::MemberId* release_agent_id();
  inline void set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id);

  // optional uint64 club_id = 3;
  inline bool has_club_id() const;
  inline void clear_club_id();
  static const int kClubIdFieldNumber = 3;
  inline ::google::protobuf::uint64 club_id() const;
  inline void set_club_id(::google::protobuf::uint64 value);

  // optional .bgs.protocol.club.v1.client.ClubInvitation invitation = 4;
  inline bool has_invitation() const;
  inline void clear_invitation();
  static const int kInvitationFieldNumber = 4;
  inline const ::bgs::protocol::club::v1::client::ClubInvitation& invitation() const;
  inline ::bgs::protocol::club::v1::client::ClubInvitation* mutable_invitation();
  inline ::bgs::protocol::club::v1::client::ClubInvitation* release_invitation();
  inline void set_allocated_invitation(::bgs::protocol::club::v1::client::ClubInvitation* invitation);

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.client.InvitationAddedNotification)
 private:
  inline void set_has_agent_id();
  inline void clear_has_agent_id();
  inline void set_has_club_id();
  inline void clear_has_club_id();
  inline void set_has_invitation();
  inline void clear_has_invitation();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::bgs::protocol::club::v1::MemberId* agent_id_;
  ::google::protobuf::uint64 club_id_;
  ::bgs::protocol::club::v1::client::ClubInvitation* invitation_;
  friend void TC_PROTO_API protobuf_AddDesc_api_2fclient_2fv1_2fclub_5fnotification_2eproto();
  friend void protobuf_AssignDesc_api_2fclient_2fv1_2fclub_5fnotification_2eproto();
  friend void protobuf_ShutdownFile_api_2fclient_2fv1_2fclub_5fnotification_2eproto();

  void InitAsDefaultInstance();
  static InvitationAddedNotification* default_instance_;
};
// -------------------------------------------------------------------

class TC_PROTO_API InvitationRemovedNotification : public ::google::protobuf::Message {
 public:
  InvitationRemovedNotification();
  virtual ~InvitationRemovedNotification();

  InvitationRemovedNotification(const InvitationRemovedNotification& from);

  inline InvitationRemovedNotification& operator=(const InvitationRemovedNotification& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InvitationRemovedNotification& default_instance();

  void Swap(InvitationRemovedNotification* other);

  // implements Message ----------------------------------------------

  InvitationRemovedNotification* New() const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  inline bool has_agent_id() const;
  inline void clear_agent_id();
  static const int kAgentIdFieldNumber = 1;
  inline const ::bgs::protocol::club::v1::MemberId& agent_id() const;
  inline ::bgs::protocol::club::v1::MemberId* mutable_agent_id();
  inline ::bgs::protocol::club::v1::MemberId* release_agent_id();
  inline void set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id);

  // optional uint64 club_id = 3;
  inline bool has_club_id() const;
  inline void clear_club_id();
  static const int kClubIdFieldNumber = 3;
  inline ::google::protobuf::uint64 club_id() const;
  inline void set_club_id(::google::protobuf::uint64 value);

  // optional fixed64 invitation_id = 4;
  inline bool has_invitation_id() const;
  inline void clear_invitation_id();
  static const int kInvitationIdFieldNumber = 4;
  inline ::google::protobuf::uint64 invitation_id() const;
  inline void set_invitation_id(::google::protobuf::uint64 value);

  // optional .bgs.protocol.InvitationRemovedReason reason = 5;
  inline bool has_reason() const;
  inline void clear_reason();
  static const int kReasonFieldNumber = 5;
  inline ::bgs::protocol::InvitationRemovedReason reason() const;
  inline void set_reason(::bgs::protocol::InvitationRemovedReason value);

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.client.InvitationRemovedNotification)
 private:
  inline void set_has_agent_id();
  inline void clear_has_agent_id();
  inline void set_has_club_id();
  inline void clear_has_club_id();
  inline void set_has_invitation_id();
  inline void clear_has_invitation_id();
  inline void set_has_reason();
  inline void clear_has_reason();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::bgs::protocol::club::v1::MemberId* agent_id_;
  ::google::protobuf::uint64 club_id_;
  ::google::protobuf::uint64 invitation_id_;
  int reason_;
  friend void TC_PROTO_API protobuf_AddDesc_api_2fclient_2fv1_2fclub_5fnotification_2eproto();
  friend void protobuf_AssignDesc_api_2fclient_2fv1_2fclub_5fnotification_2eproto();
  friend void protobuf_ShutdownFile_api_2fclient_2fv1_2fclub_5fnotification_2eproto();

  void InitAsDefaultInstance();
  static InvitationRemovedNotification* default_instance_;
};
// -------------------------------------------------------------------

class TC_PROTO_API SuggestionAddedNotification : public ::google::protobuf::Message {
 public:
  SuggestionAddedNotification();
  virtual ~SuggestionAddedNotification();

  SuggestionAddedNotification(const SuggestionAddedNotification& from);

  inline SuggestionAddedNotification& operator=(const SuggestionAddedNotification& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SuggestionAddedNotification& default_instance();

  void Swap(SuggestionAddedNotification* other);

  // implements Message ----------------------------------------------

  SuggestionAddedNotification* New() const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  inline bool has_agent_id() const;
  inline void clear_agent_id();
  static const int kAgentIdFieldNumber = 1;
  inline const ::bgs::protocol::club::v1::MemberId& agent_id() const;
  inline ::bgs::protocol::club::v1::MemberId* mutable_agent_id();
  inline ::bgs::protocol::club::v1::MemberId* release_agent_id();
  inline void set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id);

  // optional uint64 club_id = 3;
  inline bool has_club_id() const;
  inline void clear_club_id();
  static const int kClubIdFieldNumber = 3;
  inline ::google::protobuf::uint64 club_id() const;
  inline void set_club_id(::google::protobuf::uint64 value);

  // optional .bgs.protocol.club.v1.client.ClubSuggestion suggestion = 4;
  inline bool has_suggestion() const;
  inline void clear_suggestion();
  static const int kSuggestionFieldNumber = 4;
  inline const ::bgs::protocol::club::v1::client::ClubSuggestion& suggestion() const;
  inline ::bgs::protocol::club::v1::client::ClubSuggestion* mutable_suggestion();
  inline ::bgs::protocol::club::v1::client::ClubSuggestion* release_suggestion();
  inline void set_allocated_suggestion(::bgs::protocol::club::v1::client::ClubSuggestion* suggestion);

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.client.SuggestionAddedNotification)
 private:
  inline void set_has_agent_id();
  inline void clear_has_agent_id();
  inline void set_has_club_id();
  inline void clear_has_club_id();
  inline void set_has_suggestion();
  inline void clear_has_suggestion();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::bgs::protocol::club::v1::MemberId* agent_id_;
  ::google::protobuf::uint64 club_id_;
  ::bgs::protocol::club::v1::client::ClubSuggestion* suggestion_;
  friend void TC_PROTO_API protobuf_AddDesc_api_2fclient_2fv1_2fclub_5fnotification_2eproto();
  friend void protobuf_AssignDesc_api_2fclient_2fv1_2fclub_5fnotification_2eproto();
  friend void protobuf_ShutdownFile_api_2fclient_2fv1_2fclub_5fnotification_2eproto();

  void InitAsDefaultInstance();
  static SuggestionAddedNotification* default_instance_;
};
// -------------------------------------------------------------------

class TC_PROTO_API SuggestionRemovedNotification : public ::google::protobuf::Message {
 public:
  SuggestionRemovedNotification();
  virtual ~SuggestionRemovedNotification();

  SuggestionRemovedNotification(const SuggestionRemovedNotification& from);

  inline SuggestionRemovedNotification& operator=(const SuggestionRemovedNotification& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SuggestionRemovedNotification& default_instance();

  void Swap(SuggestionRemovedNotification* other);

  // implements Message ----------------------------------------------

  SuggestionRemovedNotification* New() const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  inline bool has_agent_id() const;
  inline void clear_agent_id();
  static const int kAgentIdFieldNumber = 1;
  inline const ::bgs::protocol::club::v1::MemberId& agent_id() const;
  inline ::bgs::protocol::club::v1::MemberId* mutable_agent_id();
  inline ::bgs::protocol::club::v1::MemberId* release_agent_id();
  inline void set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id);

  // optional uint64 club_id = 3;
  inline bool has_club_id() const;
  inline void clear_club_id();
  static const int kClubIdFieldNumber = 3;
  inline ::google::protobuf::uint64 club_id() const;
  inline void set_club_id(::google::protobuf::uint64 value);

  // optional fixed64 suggestion_id = 4;
  inline bool has_suggestion_id() const;
  inline void clear_suggestion_id();
  static const int kSuggestionIdFieldNumber = 4;
  inline ::google::protobuf::uint64 suggestion_id() const;
  inline void set_suggestion_id(::google::protobuf::uint64 value);

  // optional .bgs.protocol.SuggestionRemovedReason reason = 5;
  inline bool has_reason() const;
  inline void clear_reason();
  static const int kReasonFieldNumber = 5;
  inline ::bgs::protocol::SuggestionRemovedReason reason() const;
  inline void set_reason(::bgs::protocol::SuggestionRemovedReason value);

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.client.SuggestionRemovedNotification)
 private:
  inline void set_has_agent_id();
  inline void clear_has_agent_id();
  inline void set_has_club_id();
  inline void clear_has_club_id();
  inline void set_has_suggestion_id();
  inline void clear_has_suggestion_id();
  inline void set_has_reason();
  inline void clear_has_reason();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::bgs::protocol::club::v1::MemberId* agent_id_;
  ::google::protobuf::uint64 club_id_;
  ::google::protobuf::uint64 suggestion_id_;
  int reason_;
  friend void TC_PROTO_API protobuf_AddDesc_api_2fclient_2fv1_2fclub_5fnotification_2eproto();
  friend void protobuf_AssignDesc_api_2fclient_2fv1_2fclub_5fnotification_2eproto();
  friend void protobuf_ShutdownFile_api_2fclient_2fv1_2fclub_5fnotification_2eproto();

  void InitAsDefaultInstance();
  static SuggestionRemovedNotification* default_instance_;
};
// -------------------------------------------------------------------

class TC_PROTO_API StreamAddedNotification : public ::google::protobuf::Message {
 public:
  StreamAddedNotification();
  virtual ~StreamAddedNotification();

  StreamAddedNotification(const StreamAddedNotification& from);

  inline StreamAddedNotification& operator=(const StreamAddedNotification& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StreamAddedNotification& default_instance();

  void Swap(StreamAddedNotification* other);

  // implements Message ----------------------------------------------

  StreamAddedNotification* New() const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  inline bool has_agent_id() const;
  inline void clear_agent_id();
  static const int kAgentIdFieldNumber = 1;
  inline const ::bgs::protocol::club::v1::MemberId& agent_id() const;
  inline ::bgs::protocol::club::v1::MemberId* mutable_agent_id();
  inline ::bgs::protocol::club::v1::MemberId* release_agent_id();
  inline void set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id);

  // optional uint64 club_id = 3;
  inline bool has_club_id() const;
  inline void clear_club_id();
  static const int kClubIdFieldNumber = 3;
  inline ::google::protobuf::uint64 club_id() const;
  inline void set_club_id(::google::protobuf::uint64 value);

  // optional .bgs.protocol.club.v1.client.Stream stream = 4;
  inline bool has_stream() const;
  inline void clear_stream();
  static const int kStreamFieldNumber = 4;
  inline const ::bgs::protocol::club::v1::client::Stream& stream() const;
  inline ::bgs::protocol::club::v1::client::Stream* mutable_stream();
  inline ::bgs::protocol::club::v1::client::Stream* release_stream();
  inline void set_allocated_stream(::bgs::protocol::club::v1::client::Stream* stream);

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.client.StreamAddedNotification)
 private:
  inline void set_has_agent_id();
  inline void clear_has_agent_id();
  inline void set_has_club_id();
  inline void clear_has_club_id();
  inline void set_has_stream();
  inline void clear_has_stream();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::bgs::protocol::club::v1::MemberId* agent_id_;
  ::google::protobuf::uint64 club_id_;
  ::bgs::protocol::club::v1::client::Stream* stream_;
  friend void TC_PROTO_API protobuf_AddDesc_api_2fclient_2fv1_2fclub_5fnotification_2eproto();
  friend void protobuf_AssignDesc_api_2fclient_2fv1_2fclub_5fnotification_2eproto();
  friend void protobuf_ShutdownFile_api_2fclient_2fv1_2fclub_5fnotification_2eproto();

  void InitAsDefaultInstance();
  static StreamAddedNotification* default_instance_;
};
// -------------------------------------------------------------------

class TC_PROTO_API StreamRemovedNotification : public ::google::protobuf::Message {
 public:
  StreamRemovedNotification();
  virtual ~StreamRemovedNotification();

  StreamRemovedNotification(const StreamRemovedNotification& from);

  inline StreamRemovedNotification& operator=(const StreamRemovedNotification& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StreamRemovedNotification& default_instance();

  void Swap(StreamRemovedNotification* other);

  // implements Message ----------------------------------------------

  StreamRemovedNotification* New() const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  inline bool has_agent_id() const;
  inline void clear_agent_id();
  static const int kAgentIdFieldNumber = 1;
  inline const ::bgs::protocol::club::v1::MemberId& agent_id() const;
  inline ::bgs::protocol::club::v1::MemberId* mutable_agent_id();
  inline ::bgs::protocol::club::v1::MemberId* release_agent_id();
  inline void set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id);

  // optional uint64 club_id = 3;
  inline bool has_club_id() const;
  inline void clear_club_id();
  static const int kClubIdFieldNumber = 3;
  inline ::google::protobuf::uint64 club_id() const;
  inline void set_club_id(::google::protobuf::uint64 value);

  // optional uint64 stream_id = 4;
  inline bool has_stream_id() const;
  inline void clear_stream_id();
  static const int kStreamIdFieldNumber = 4;
  inline ::google::protobuf::uint64 stream_id() const;
  inline void set_stream_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.client.StreamRemovedNotification)
 private:
  inline void set_has_agent_id();
  inline void clear_has_agent_id();
  inline void set_has_club_id();
  inline void clear_has_club_id();
  inline void set_has_stream_id();
  inline void clear_has_stream_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::bgs::protocol::club::v1::MemberId* agent_id_;
  ::google::protobuf::uint64 club_id_;
  ::google::protobuf::uint64 stream_id_;
  friend void TC_PROTO_API protobuf_AddDesc_api_2fclient_2fv1_2fclub_5fnotification_2eproto();
  friend void protobuf_AssignDesc_api_2fclient_2fv1_2fclub_5fnotification_2eproto();
  friend void protobuf_ShutdownFile_api_2fclient_2fv1_2fclub_5fnotification_2eproto();

  void InitAsDefaultInstance();
  static StreamRemovedNotification* default_instance_;
};
// -------------------------------------------------------------------

class TC_PROTO_API StreamStateChangedNotification : public ::google::protobuf::Message {
 public:
  StreamStateChangedNotification();
  virtual ~StreamStateChangedNotification();

  StreamStateChangedNotification(const StreamStateChangedNotification& from);

  inline StreamStateChangedNotification& operator=(const StreamStateChangedNotification& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StreamStateChangedNotification& default_instance();

  void Swap(StreamStateChangedNotification* other);

  // implements Message ----------------------------------------------

  StreamStateChangedNotification* New() const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  inline bool has_agent_id() const;
  inline void clear_agent_id();
  static const int kAgentIdFieldNumber = 1;
  inline const ::bgs::protocol::club::v1::MemberId& agent_id() const;
  inline ::bgs::protocol::club::v1::MemberId* mutable_agent_id();
  inline ::bgs::protocol::club::v1::MemberId* release_agent_id();
  inline void set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id);

  // optional uint64 club_id = 3;
  inline bool has_club_id() const;
  inline void clear_club_id();
  static const int kClubIdFieldNumber = 3;
  inline ::google::protobuf::uint64 club_id() const;
  inline void set_club_id(::google::protobuf::uint64 value);

  // optional uint64 stream_id = 4;
  inline bool has_stream_id() const;
  inline void clear_stream_id();
  static const int kStreamIdFieldNumber = 4;
  inline ::google::protobuf::uint64 stream_id() const;
  inline void set_stream_id(::google::protobuf::uint64 value);

  // optional .bgs.protocol.club.v1.client.StreamStateAssignment assignment = 5;
  inline bool has_assignment() const;
  inline void clear_assignment();
  static const int kAssignmentFieldNumber = 5;
  inline const ::bgs::protocol::club::v1::client::StreamStateAssignment& assignment() const;
  inline ::bgs::protocol::club::v1::client::StreamStateAssignment* mutable_assignment();
  inline ::bgs::protocol::club::v1::client::StreamStateAssignment* release_assignment();
  inline void set_allocated_assignment(::bgs::protocol::club::v1::client::StreamStateAssignment* assignment);

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.client.StreamStateChangedNotification)
 private:
  inline void set_has_agent_id();
  inline void clear_has_agent_id();
  inline void set_has_club_id();
  inline void clear_has_club_id();
  inline void set_has_stream_id();
  inline void clear_has_stream_id();
  inline void set_has_assignment();
  inline void clear_has_assignment();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::bgs::protocol::club::v1::MemberId* agent_id_;
  ::google::protobuf::uint64 club_id_;
  ::google::protobuf::uint64 stream_id_;
  ::bgs::protocol::club::v1::client::StreamStateAssignment* assignment_;
  friend void TC_PROTO_API protobuf_AddDesc_api_2fclient_2fv1_2fclub_5fnotification_2eproto();
  friend void protobuf_AssignDesc_api_2fclient_2fv1_2fclub_5fnotification_2eproto();
  friend void protobuf_ShutdownFile_api_2fclient_2fv1_2fclub_5fnotification_2eproto();

  void InitAsDefaultInstance();
  static StreamStateChangedNotification* default_instance_;
};
// -------------------------------------------------------------------

class TC_PROTO_API StreamMessageAddedNotification : public ::google::protobuf::Message {
 public:
  StreamMessageAddedNotification();
  virtual ~StreamMessageAddedNotification();

  StreamMessageAddedNotification(const StreamMessageAddedNotification& from);

  inline StreamMessageAddedNotification& operator=(const StreamMessageAddedNotification& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StreamMessageAddedNotification& default_instance();

  void Swap(StreamMessageAddedNotification* other);

  // implements Message ----------------------------------------------

  StreamMessageAddedNotification* New() const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  inline bool has_agent_id() const;
  inline void clear_agent_id();
  static const int kAgentIdFieldNumber = 1;
  inline const ::bgs::protocol::club::v1::MemberId& agent_id() const;
  inline ::bgs::protocol::club::v1::MemberId* mutable_agent_id();
  inline ::bgs::protocol::club::v1::MemberId* release_agent_id();
  inline void set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id);

  // optional uint64 club_id = 3;
  inline bool has_club_id() const;
  inline void clear_club_id();
  static const int kClubIdFieldNumber = 3;
  inline ::google::protobuf::uint64 club_id() const;
  inline void set_club_id(::google::protobuf::uint64 value);

  // optional uint64 stream_id = 4;
  inline bool has_stream_id() const;
  inline void clear_stream_id();
  static const int kStreamIdFieldNumber = 4;
  inline ::google::protobuf::uint64 stream_id() const;
  inline void set_stream_id(::google::protobuf::uint64 value);

  // optional .bgs.protocol.club.v1.client.StreamMessage message = 5;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 5;
  inline const ::bgs::protocol::club::v1::client::StreamMessage& message() const;
  inline ::bgs::protocol::club::v1::client::StreamMessage* mutable_message();
  inline ::bgs::protocol::club::v1::client::StreamMessage* release_message();
  inline void set_allocated_message(::bgs::protocol::club::v1::client::StreamMessage* message);

  // optional uint32 message_origin = 6;
  inline bool has_message_origin() const;
  inline void clear_message_origin();
  static const int kMessageOriginFieldNumber = 6;
  inline ::google::protobuf::uint32 message_origin() const;
  inline void set_message_origin(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.client.StreamMessageAddedNotification)
 private:
  inline void set_has_agent_id();
  inline void clear_has_agent_id();
  inline void set_has_club_id();
  inline void clear_has_club_id();
  inline void set_has_stream_id();
  inline void clear_has_stream_id();
  inline void set_has_message();
  inline void clear_has_message();
  inline void set_has_message_origin();
  inline void clear_has_message_origin();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::bgs::protocol::club::v1::MemberId* agent_id_;
  ::google::protobuf::uint64 club_id_;
  ::google::protobuf::uint64 stream_id_;
  ::bgs::protocol::club::v1::client::StreamMessage* message_;
  ::google::protobuf::uint32 message_origin_;
  friend void TC_PROTO_API protobuf_AddDesc_api_2fclient_2fv1_2fclub_5fnotification_2eproto();
  friend void protobuf_AssignDesc_api_2fclient_2fv1_2fclub_5fnotification_2eproto();
  friend void protobuf_ShutdownFile_api_2fclient_2fv1_2fclub_5fnotification_2eproto();

  void InitAsDefaultInstance();
  static StreamMessageAddedNotification* default_instance_;
};
// -------------------------------------------------------------------

class TC_PROTO_API StreamMessageUpdatedNotification : public ::google::protobuf::Message {
 public:
  StreamMessageUpdatedNotification();
  virtual ~StreamMessageUpdatedNotification();

  StreamMessageUpdatedNotification(const StreamMessageUpdatedNotification& from);

  inline StreamMessageUpdatedNotification& operator=(const StreamMessageUpdatedNotification& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StreamMessageUpdatedNotification& default_instance();

  void Swap(StreamMessageUpdatedNotification* other);

  // implements Message ----------------------------------------------

  StreamMessageUpdatedNotification* New() const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  inline bool has_agent_id() const;
  inline void clear_agent_id();
  static const int kAgentIdFieldNumber = 1;
  inline const ::bgs::protocol::club::v1::MemberId& agent_id() const;
  inline ::bgs::protocol::club::v1::MemberId* mutable_agent_id();
  inline ::bgs::protocol::club::v1::MemberId* release_agent_id();
  inline void set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id);

  // optional uint64 club_id = 3;
  inline bool has_club_id() const;
  inline void clear_club_id();
  static const int kClubIdFieldNumber = 3;
  inline ::google::protobuf::uint64 club_id() const;
  inline void set_club_id(::google::protobuf::uint64 value);

  // optional uint64 stream_id = 4;
  inline bool has_stream_id() const;
  inline void clear_stream_id();
  static const int kStreamIdFieldNumber = 4;
  inline ::google::protobuf::uint64 stream_id() const;
  inline void set_stream_id(::google::protobuf::uint64 value);

  // optional .bgs.protocol.club.v1.client.StreamMessage message = 5;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 5;
  inline const ::bgs::protocol::club::v1::client::StreamMessage& message() const;
  inline ::bgs::protocol::club::v1::client::StreamMessage* mutable_message();
  inline ::bgs::protocol::club::v1::client::StreamMessage* release_message();
  inline void set_allocated_message(::bgs::protocol::club::v1::client::StreamMessage* message);

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.client.StreamMessageUpdatedNotification)
 private:
  inline void set_has_agent_id();
  inline void clear_has_agent_id();
  inline void set_has_club_id();
  inline void clear_has_club_id();
  inline void set_has_stream_id();
  inline void clear_has_stream_id();
  inline void set_has_message();
  inline void clear_has_message();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::bgs::protocol::club::v1::MemberId* agent_id_;
  ::google::protobuf::uint64 club_id_;
  ::google::protobuf::uint64 stream_id_;
  ::bgs::protocol::club::v1::client::StreamMessage* message_;
  friend void TC_PROTO_API protobuf_AddDesc_api_2fclient_2fv1_2fclub_5fnotification_2eproto();
  friend void protobuf_AssignDesc_api_2fclient_2fv1_2fclub_5fnotification_2eproto();
  friend void protobuf_ShutdownFile_api_2fclient_2fv1_2fclub_5fnotification_2eproto();

  void InitAsDefaultInstance();
  static StreamMessageUpdatedNotification* default_instance_;
};
// -------------------------------------------------------------------

class TC_PROTO_API StreamTypingIndicatorNotification : public ::google::protobuf::Message {
 public:
  StreamTypingIndicatorNotification();
  virtual ~StreamTypingIndicatorNotification();

  StreamTypingIndicatorNotification(const StreamTypingIndicatorNotification& from);

  inline StreamTypingIndicatorNotification& operator=(const StreamTypingIndicatorNotification& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StreamTypingIndicatorNotification& default_instance();

  void Swap(StreamTypingIndicatorNotification* other);

  // implements Message ----------------------------------------------

  StreamTypingIndicatorNotification* New() const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  inline bool has_agent_id() const;
  inline void clear_agent_id();
  static const int kAgentIdFieldNumber = 1;
  inline const ::bgs::protocol::club::v1::MemberId& agent_id() const;
  inline ::bgs::protocol::club::v1::MemberId* mutable_agent_id();
  inline ::bgs::protocol::club::v1::MemberId* release_agent_id();
  inline void set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id);

  // optional uint64 club_id = 3;
  inline bool has_club_id() const;
  inline void clear_club_id();
  static const int kClubIdFieldNumber = 3;
  inline ::google::protobuf::uint64 club_id() const;
  inline void set_club_id(::google::protobuf::uint64 value);

  // optional uint64 stream_id = 4;
  inline bool has_stream_id() const;
  inline void clear_stream_id();
  static const int kStreamIdFieldNumber = 4;
  inline ::google::protobuf::uint64 stream_id() const;
  inline void set_stream_id(::google::protobuf::uint64 value);

  // repeated .bgs.protocol.club.v1.client.StreamTypingIndicator indicator = 5;
  inline int indicator_size() const;
  inline void clear_indicator();
  static const int kIndicatorFieldNumber = 5;
  inline const ::bgs::protocol::club::v1::client::StreamTypingIndicator& indicator(int index) const;
  inline ::bgs::protocol::club::v1::client::StreamTypingIndicator* mutable_indicator(int index);
  inline ::bgs::protocol::club::v1::client::StreamTypingIndicator* add_indicator();
  inline const ::google::protobuf::RepeatedPtrField< ::bgs::protocol::club::v1::client::StreamTypingIndicator >&
      indicator() const;
  inline ::google::protobuf::RepeatedPtrField< ::bgs::protocol::club::v1::client::StreamTypingIndicator >*
      mutable_indicator();

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.client.StreamTypingIndicatorNotification)
 private:
  inline void set_has_agent_id();
  inline void clear_has_agent_id();
  inline void set_has_club_id();
  inline void clear_has_club_id();
  inline void set_has_stream_id();
  inline void clear_has_stream_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::bgs::protocol::club::v1::MemberId* agent_id_;
  ::google::protobuf::uint64 club_id_;
  ::google::protobuf::uint64 stream_id_;
  ::google::protobuf::RepeatedPtrField< ::bgs::protocol::club::v1::client::StreamTypingIndicator > indicator_;
  friend void TC_PROTO_API protobuf_AddDesc_api_2fclient_2fv1_2fclub_5fnotification_2eproto();
  friend void protobuf_AssignDesc_api_2fclient_2fv1_2fclub_5fnotification_2eproto();
  friend void protobuf_ShutdownFile_api_2fclient_2fv1_2fclub_5fnotification_2eproto();

  void InitAsDefaultInstance();
  static StreamTypingIndicatorNotification* default_instance_;
};
// -------------------------------------------------------------------

class TC_PROTO_API StreamUnreadIndicatorNotification : public ::google::protobuf::Message {
 public:
  StreamUnreadIndicatorNotification();
  virtual ~StreamUnreadIndicatorNotification();

  StreamUnreadIndicatorNotification(const StreamUnreadIndicatorNotification& from);

  inline StreamUnreadIndicatorNotification& operator=(const StreamUnreadIndicatorNotification& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StreamUnreadIndicatorNotification& default_instance();

  void Swap(StreamUnreadIndicatorNotification* other);

  // implements Message ----------------------------------------------

  StreamUnreadIndicatorNotification* New() const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  inline bool has_agent_id() const;
  inline void clear_agent_id();
  static const int kAgentIdFieldNumber = 1;
  inline const ::bgs::protocol::club::v1::MemberId& agent_id() const;
  inline ::bgs::protocol::club::v1::MemberId* mutable_agent_id();
  inline ::bgs::protocol::club::v1::MemberId* release_agent_id();
  inline void set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id);

  // optional uint64 club_id = 3;
  inline bool has_club_id() const;
  inline void clear_club_id();
  static const int kClubIdFieldNumber = 3;
  inline ::google::protobuf::uint64 club_id() const;
  inline void set_club_id(::google::protobuf::uint64 value);

  // optional .bgs.protocol.club.v1.client.StreamEventTime event = 4;
  inline bool has_event() const;
  inline void clear_event();
  static const int kEventFieldNumber = 4;
  inline const ::bgs::protocol::club::v1::client::StreamEventTime& event() const;
  inline ::bgs::protocol::club::v1::client::StreamEventTime* mutable_event();
  inline ::bgs::protocol::club::v1::client::StreamEventTime* release_event();
  inline void set_allocated_event(::bgs::protocol::club::v1::client::StreamEventTime* event);

  // optional .bgs.protocol.club.v1.client.StreamMessage message = 5;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 5;
  inline const ::bgs::protocol::club::v1::client::StreamMessage& message() const;
  inline ::bgs::protocol::club::v1::client::StreamMessage* mutable_message();
  inline ::bgs::protocol::club::v1::client::StreamMessage* release_message();
  inline void set_allocated_message(::bgs::protocol::club::v1::client::StreamMessage* message);

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.client.StreamUnreadIndicatorNotification)
 private:
  inline void set_has_agent_id();
  inline void clear_has_agent_id();
  inline void set_has_club_id();
  inline void clear_has_club_id();
  inline void set_has_event();
  inline void clear_has_event();
  inline void set_has_message();
  inline void clear_has_message();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::bgs::protocol::club::v1::MemberId* agent_id_;
  ::google::protobuf::uint64 club_id_;
  ::bgs::protocol::club::v1::client::StreamEventTime* event_;
  ::bgs::protocol::club::v1::client::StreamMessage* message_;
  friend void TC_PROTO_API protobuf_AddDesc_api_2fclient_2fv1_2fclub_5fnotification_2eproto();
  friend void protobuf_AssignDesc_api_2fclient_2fv1_2fclub_5fnotification_2eproto();
  friend void protobuf_ShutdownFile_api_2fclient_2fv1_2fclub_5fnotification_2eproto();

  void InitAsDefaultInstance();
  static StreamUnreadIndicatorNotification* default_instance_;
};
// -------------------------------------------------------------------

class TC_PROTO_API StreamAdvanceViewTimeNotification : public ::google::protobuf::Message {
 public:
  StreamAdvanceViewTimeNotification();
  virtual ~StreamAdvanceViewTimeNotification();

  StreamAdvanceViewTimeNotification(const StreamAdvanceViewTimeNotification& from);

  inline StreamAdvanceViewTimeNotification& operator=(const StreamAdvanceViewTimeNotification& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StreamAdvanceViewTimeNotification& default_instance();

  void Swap(StreamAdvanceViewTimeNotification* other);

  // implements Message ----------------------------------------------

  StreamAdvanceViewTimeNotification* New() const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .bgs.protocol.club.v1.MemberId agent_id = 1;
  inline bool has_agent_id() const;
  inline void clear_agent_id();
  static const int kAgentIdFieldNumber = 1;
  inline const ::bgs::protocol::club::v1::MemberId& agent_id() const;
  inline ::bgs::protocol::club::v1::MemberId* mutable_agent_id();
  inline ::bgs::protocol::club::v1::MemberId* release_agent_id();
  inline void set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id);

  // optional uint64 club_id = 3;
  inline bool has_club_id() const;
  inline void clear_club_id();
  static const int kClubIdFieldNumber = 3;
  inline ::google::protobuf::uint64 club_id() const;
  inline void set_club_id(::google::protobuf::uint64 value);

  // repeated .bgs.protocol.club.v1.client.StreamAdvanceViewTime view = 4;
  inline int view_size() const;
  inline void clear_view();
  static const int kViewFieldNumber = 4;
  inline const ::bgs::protocol::club::v1::client::StreamAdvanceViewTime& view(int index) const;
  inline ::bgs::protocol::club::v1::client::StreamAdvanceViewTime* mutable_view(int index);
  inline ::bgs::protocol::club::v1::client::StreamAdvanceViewTime* add_view();
  inline const ::google::protobuf::RepeatedPtrField< ::bgs::protocol::club::v1::client::StreamAdvanceViewTime >&
      view() const;
  inline ::google::protobuf::RepeatedPtrField< ::bgs::protocol::club::v1::client::StreamAdvanceViewTime >*
      mutable_view();

  // @@protoc_insertion_point(class_scope:bgs.protocol.club.v1.client.StreamAdvanceViewTimeNotification)
 private:
  inline void set_has_agent_id();
  inline void clear_has_agent_id();
  inline void set_has_club_id();
  inline void clear_has_club_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::bgs::protocol::club::v1::MemberId* agent_id_;
  ::google::protobuf::uint64 club_id_;
  ::google::protobuf::RepeatedPtrField< ::bgs::protocol::club::v1::client::StreamAdvanceViewTime > view_;
  friend void TC_PROTO_API protobuf_AddDesc_api_2fclient_2fv1_2fclub_5fnotification_2eproto();
  friend void protobuf_AssignDesc_api_2fclient_2fv1_2fclub_5fnotification_2eproto();
  friend void protobuf_ShutdownFile_api_2fclient_2fv1_2fclub_5fnotification_2eproto();

  void InitAsDefaultInstance();
  static StreamAdvanceViewTimeNotification* default_instance_;
};
// ===================================================================

// ===================================================================

// ===================================================================

// SubscribeNotification

// optional .bgs.protocol.club.v1.MemberId agent_id = 1;
inline bool SubscribeNotification::has_agent_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SubscribeNotification::set_has_agent_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SubscribeNotification::clear_has_agent_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SubscribeNotification::clear_agent_id() {
  if (agent_id_ != NULL) agent_id_->::bgs::protocol::club::v1::MemberId::Clear();
  clear_has_agent_id();
}
inline const ::bgs::protocol::club::v1::MemberId& SubscribeNotification::agent_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.client.SubscribeNotification.agent_id)
  return agent_id_ != NULL ? *agent_id_ : *default_instance_->agent_id_;
}
inline ::bgs::protocol::club::v1::MemberId* SubscribeNotification::mutable_agent_id() {
  set_has_agent_id();
  if (agent_id_ == NULL) agent_id_ = new ::bgs::protocol::club::v1::MemberId;
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.client.SubscribeNotification.agent_id)
  return agent_id_;
}
inline ::bgs::protocol::club::v1::MemberId* SubscribeNotification::release_agent_id() {
  clear_has_agent_id();
  ::bgs::protocol::club::v1::MemberId* temp = agent_id_;
  agent_id_ = NULL;
  return temp;
}
inline void SubscribeNotification::set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id) {
  delete agent_id_;
  agent_id_ = agent_id;
  if (agent_id) {
    set_has_agent_id();
  } else {
    clear_has_agent_id();
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.client.SubscribeNotification.agent_id)
}

// optional uint64 club_id = 3;
inline bool SubscribeNotification::has_club_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SubscribeNotification::set_has_club_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SubscribeNotification::clear_has_club_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SubscribeNotification::clear_club_id() {
  club_id_ = GOOGLE_ULONGLONG(0);
  clear_has_club_id();
}
inline ::google::protobuf::uint64 SubscribeNotification::club_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.client.SubscribeNotification.club_id)
  return club_id_;
}
inline void SubscribeNotification::set_club_id(::google::protobuf::uint64 value) {
  set_has_club_id();
  club_id_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.client.SubscribeNotification.club_id)
}

// optional .bgs.protocol.club.v1.client.Club club = 4;
inline bool SubscribeNotification::has_club() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SubscribeNotification::set_has_club() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SubscribeNotification::clear_has_club() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SubscribeNotification::clear_club() {
  if (club_ != NULL) club_->::bgs::protocol::club::v1::client::Club::Clear();
  clear_has_club();
}
inline const ::bgs::protocol::club::v1::client::Club& SubscribeNotification::club() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.client.SubscribeNotification.club)
  return club_ != NULL ? *club_ : *default_instance_->club_;
}
inline ::bgs::protocol::club::v1::client::Club* SubscribeNotification::mutable_club() {
  set_has_club();
  if (club_ == NULL) club_ = new ::bgs::protocol::club::v1::client::Club;
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.client.SubscribeNotification.club)
  return club_;
}
inline ::bgs::protocol::club::v1::client::Club* SubscribeNotification::release_club() {
  clear_has_club();
  ::bgs::protocol::club::v1::client::Club* temp = club_;
  club_ = NULL;
  return temp;
}
inline void SubscribeNotification::set_allocated_club(::bgs::protocol::club::v1::client::Club* club) {
  delete club_;
  club_ = club;
  if (club) {
    set_has_club();
  } else {
    clear_has_club();
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.client.SubscribeNotification.club)
}

// optional .bgs.protocol.club.v1.client.ClubView view = 5;
inline bool SubscribeNotification::has_view() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SubscribeNotification::set_has_view() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SubscribeNotification::clear_has_view() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SubscribeNotification::clear_view() {
  if (view_ != NULL) view_->::bgs::protocol::club::v1::client::ClubView::Clear();
  clear_has_view();
}
inline const ::bgs::protocol::club::v1::client::ClubView& SubscribeNotification::view() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.client.SubscribeNotification.view)
  return view_ != NULL ? *view_ : *default_instance_->view_;
}
inline ::bgs::protocol::club::v1::client::ClubView* SubscribeNotification::mutable_view() {
  set_has_view();
  if (view_ == NULL) view_ = new ::bgs::protocol::club::v1::client::ClubView;
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.client.SubscribeNotification.view)
  return view_;
}
inline ::bgs::protocol::club::v1::client::ClubView* SubscribeNotification::release_view() {
  clear_has_view();
  ::bgs::protocol::club::v1::client::ClubView* temp = view_;
  view_ = NULL;
  return temp;
}
inline void SubscribeNotification::set_allocated_view(::bgs::protocol::club::v1::client::ClubView* view) {
  delete view_;
  view_ = view;
  if (view) {
    set_has_view();
  } else {
    clear_has_view();
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.client.SubscribeNotification.view)
}

// optional .bgs.protocol.club.v1.client.ClubSettings settings = 10;
inline bool SubscribeNotification::has_settings() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SubscribeNotification::set_has_settings() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SubscribeNotification::clear_has_settings() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SubscribeNotification::clear_settings() {
  if (settings_ != NULL) settings_->::bgs::protocol::club::v1::client::ClubSettings::Clear();
  clear_has_settings();
}
inline const ::bgs::protocol::club::v1::client::ClubSettings& SubscribeNotification::settings() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.client.SubscribeNotification.settings)
  return settings_ != NULL ? *settings_ : *default_instance_->settings_;
}
inline ::bgs::protocol::club::v1::client::ClubSettings* SubscribeNotification::mutable_settings() {
  set_has_settings();
  if (settings_ == NULL) settings_ = new ::bgs::protocol::club::v1::client::ClubSettings;
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.client.SubscribeNotification.settings)
  return settings_;
}
inline ::bgs::protocol::club::v1::client::ClubSettings* SubscribeNotification::release_settings() {
  clear_has_settings();
  ::bgs::protocol::club::v1::client::ClubSettings* temp = settings_;
  settings_ = NULL;
  return temp;
}
inline void SubscribeNotification::set_allocated_settings(::bgs::protocol::club::v1::client::ClubSettings* settings) {
  delete settings_;
  settings_ = settings;
  if (settings) {
    set_has_settings();
  } else {
    clear_has_settings();
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.client.SubscribeNotification.settings)
}

// optional .bgs.protocol.club.v1.client.Member member = 11;
inline bool SubscribeNotification::has_member() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SubscribeNotification::set_has_member() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SubscribeNotification::clear_has_member() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SubscribeNotification::clear_member() {
  if (member_ != NULL) member_->::bgs::protocol::club::v1::client::Member::Clear();
  clear_has_member();
}
inline const ::bgs::protocol::club::v1::client::Member& SubscribeNotification::member() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.client.SubscribeNotification.member)
  return member_ != NULL ? *member_ : *default_instance_->member_;
}
inline ::bgs::protocol::club::v1::client::Member* SubscribeNotification::mutable_member() {
  set_has_member();
  if (member_ == NULL) member_ = new ::bgs::protocol::club::v1::client::Member;
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.client.SubscribeNotification.member)
  return member_;
}
inline ::bgs::protocol::club::v1::client::Member* SubscribeNotification::release_member() {
  clear_has_member();
  ::bgs::protocol::club::v1::client::Member* temp = member_;
  member_ = NULL;
  return temp;
}
inline void SubscribeNotification::set_allocated_member(::bgs::protocol::club::v1::client::Member* member) {
  delete member_;
  member_ = member;
  if (member) {
    set_has_member();
  } else {
    clear_has_member();
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.client.SubscribeNotification.member)
}

// -------------------------------------------------------------------

// UnsubscribeNotification

// optional .bgs.protocol.club.v1.MemberId agent_id = 1;
inline bool UnsubscribeNotification::has_agent_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UnsubscribeNotification::set_has_agent_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UnsubscribeNotification::clear_has_agent_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UnsubscribeNotification::clear_agent_id() {
  if (agent_id_ != NULL) agent_id_->::bgs::protocol::club::v1::MemberId::Clear();
  clear_has_agent_id();
}
inline const ::bgs::protocol::club::v1::MemberId& UnsubscribeNotification::agent_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.client.UnsubscribeNotification.agent_id)
  return agent_id_ != NULL ? *agent_id_ : *default_instance_->agent_id_;
}
inline ::bgs::protocol::club::v1::MemberId* UnsubscribeNotification::mutable_agent_id() {
  set_has_agent_id();
  if (agent_id_ == NULL) agent_id_ = new ::bgs::protocol::club::v1::MemberId;
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.client.UnsubscribeNotification.agent_id)
  return agent_id_;
}
inline ::bgs::protocol::club::v1::MemberId* UnsubscribeNotification::release_agent_id() {
  clear_has_agent_id();
  ::bgs::protocol::club::v1::MemberId* temp = agent_id_;
  agent_id_ = NULL;
  return temp;
}
inline void UnsubscribeNotification::set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id) {
  delete agent_id_;
  agent_id_ = agent_id;
  if (agent_id) {
    set_has_agent_id();
  } else {
    clear_has_agent_id();
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.client.UnsubscribeNotification.agent_id)
}

// optional uint64 club_id = 3;
inline bool UnsubscribeNotification::has_club_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UnsubscribeNotification::set_has_club_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UnsubscribeNotification::clear_has_club_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UnsubscribeNotification::clear_club_id() {
  club_id_ = GOOGLE_ULONGLONG(0);
  clear_has_club_id();
}
inline ::google::protobuf::uint64 UnsubscribeNotification::club_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.client.UnsubscribeNotification.club_id)
  return club_id_;
}
inline void UnsubscribeNotification::set_club_id(::google::protobuf::uint64 value) {
  set_has_club_id();
  club_id_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.client.UnsubscribeNotification.club_id)
}

// -------------------------------------------------------------------

// StateChangedNotification

// optional .bgs.protocol.club.v1.MemberId agent_id = 1;
inline bool StateChangedNotification::has_agent_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StateChangedNotification::set_has_agent_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StateChangedNotification::clear_has_agent_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StateChangedNotification::clear_agent_id() {
  if (agent_id_ != NULL) agent_id_->::bgs::protocol::club::v1::MemberId::Clear();
  clear_has_agent_id();
}
inline const ::bgs::protocol::club::v1::MemberId& StateChangedNotification::agent_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.client.StateChangedNotification.agent_id)
  return agent_id_ != NULL ? *agent_id_ : *default_instance_->agent_id_;
}
inline ::bgs::protocol::club::v1::MemberId* StateChangedNotification::mutable_agent_id() {
  set_has_agent_id();
  if (agent_id_ == NULL) agent_id_ = new ::bgs::protocol::club::v1::MemberId;
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.client.StateChangedNotification.agent_id)
  return agent_id_;
}
inline ::bgs::protocol::club::v1::MemberId* StateChangedNotification::release_agent_id() {
  clear_has_agent_id();
  ::bgs::protocol::club::v1::MemberId* temp = agent_id_;
  agent_id_ = NULL;
  return temp;
}
inline void StateChangedNotification::set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id) {
  delete agent_id_;
  agent_id_ = agent_id;
  if (agent_id) {
    set_has_agent_id();
  } else {
    clear_has_agent_id();
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.client.StateChangedNotification.agent_id)
}

// optional uint64 club_id = 3;
inline bool StateChangedNotification::has_club_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StateChangedNotification::set_has_club_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StateChangedNotification::clear_has_club_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StateChangedNotification::clear_club_id() {
  club_id_ = GOOGLE_ULONGLONG(0);
  clear_has_club_id();
}
inline ::google::protobuf::uint64 StateChangedNotification::club_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.client.StateChangedNotification.club_id)
  return club_id_;
}
inline void StateChangedNotification::set_club_id(::google::protobuf::uint64 value) {
  set_has_club_id();
  club_id_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.client.StateChangedNotification.club_id)
}

// optional .bgs.protocol.club.v1.client.ClubStateAssignment assignment = 5;
inline bool StateChangedNotification::has_assignment() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StateChangedNotification::set_has_assignment() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StateChangedNotification::clear_has_assignment() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StateChangedNotification::clear_assignment() {
  if (assignment_ != NULL) assignment_->::bgs::protocol::club::v1::client::ClubStateAssignment::Clear();
  clear_has_assignment();
}
inline const ::bgs::protocol::club::v1::client::ClubStateAssignment& StateChangedNotification::assignment() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.client.StateChangedNotification.assignment)
  return assignment_ != NULL ? *assignment_ : *default_instance_->assignment_;
}
inline ::bgs::protocol::club::v1::client::ClubStateAssignment* StateChangedNotification::mutable_assignment() {
  set_has_assignment();
  if (assignment_ == NULL) assignment_ = new ::bgs::protocol::club::v1::client::ClubStateAssignment;
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.client.StateChangedNotification.assignment)
  return assignment_;
}
inline ::bgs::protocol::club::v1::client::ClubStateAssignment* StateChangedNotification::release_assignment() {
  clear_has_assignment();
  ::bgs::protocol::club::v1::client::ClubStateAssignment* temp = assignment_;
  assignment_ = NULL;
  return temp;
}
inline void StateChangedNotification::set_allocated_assignment(::bgs::protocol::club::v1::client::ClubStateAssignment* assignment) {
  delete assignment_;
  assignment_ = assignment;
  if (assignment) {
    set_has_assignment();
  } else {
    clear_has_assignment();
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.client.StateChangedNotification.assignment)
}

// -------------------------------------------------------------------

// SettingsChangedNotification

// optional .bgs.protocol.club.v1.MemberId agent_id = 1;
inline bool SettingsChangedNotification::has_agent_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SettingsChangedNotification::set_has_agent_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SettingsChangedNotification::clear_has_agent_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SettingsChangedNotification::clear_agent_id() {
  if (agent_id_ != NULL) agent_id_->::bgs::protocol::club::v1::MemberId::Clear();
  clear_has_agent_id();
}
inline const ::bgs::protocol::club::v1::MemberId& SettingsChangedNotification::agent_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.client.SettingsChangedNotification.agent_id)
  return agent_id_ != NULL ? *agent_id_ : *default_instance_->agent_id_;
}
inline ::bgs::protocol::club::v1::MemberId* SettingsChangedNotification::mutable_agent_id() {
  set_has_agent_id();
  if (agent_id_ == NULL) agent_id_ = new ::bgs::protocol::club::v1::MemberId;
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.client.SettingsChangedNotification.agent_id)
  return agent_id_;
}
inline ::bgs::protocol::club::v1::MemberId* SettingsChangedNotification::release_agent_id() {
  clear_has_agent_id();
  ::bgs::protocol::club::v1::MemberId* temp = agent_id_;
  agent_id_ = NULL;
  return temp;
}
inline void SettingsChangedNotification::set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id) {
  delete agent_id_;
  agent_id_ = agent_id;
  if (agent_id) {
    set_has_agent_id();
  } else {
    clear_has_agent_id();
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.client.SettingsChangedNotification.agent_id)
}

// optional uint64 club_id = 3;
inline bool SettingsChangedNotification::has_club_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SettingsChangedNotification::set_has_club_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SettingsChangedNotification::clear_has_club_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SettingsChangedNotification::clear_club_id() {
  club_id_ = GOOGLE_ULONGLONG(0);
  clear_has_club_id();
}
inline ::google::protobuf::uint64 SettingsChangedNotification::club_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.client.SettingsChangedNotification.club_id)
  return club_id_;
}
inline void SettingsChangedNotification::set_club_id(::google::protobuf::uint64 value) {
  set_has_club_id();
  club_id_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.client.SettingsChangedNotification.club_id)
}

// optional .bgs.protocol.club.v1.client.ClubSettingsAssignment assignment = 4;
inline bool SettingsChangedNotification::has_assignment() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SettingsChangedNotification::set_has_assignment() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SettingsChangedNotification::clear_has_assignment() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SettingsChangedNotification::clear_assignment() {
  if (assignment_ != NULL) assignment_->::bgs::protocol::club::v1::client::ClubSettingsAssignment::Clear();
  clear_has_assignment();
}
inline const ::bgs::protocol::club::v1::client::ClubSettingsAssignment& SettingsChangedNotification::assignment() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.client.SettingsChangedNotification.assignment)
  return assignment_ != NULL ? *assignment_ : *default_instance_->assignment_;
}
inline ::bgs::protocol::club::v1::client::ClubSettingsAssignment* SettingsChangedNotification::mutable_assignment() {
  set_has_assignment();
  if (assignment_ == NULL) assignment_ = new ::bgs::protocol::club::v1::client::ClubSettingsAssignment;
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.client.SettingsChangedNotification.assignment)
  return assignment_;
}
inline ::bgs::protocol::club::v1::client::ClubSettingsAssignment* SettingsChangedNotification::release_assignment() {
  clear_has_assignment();
  ::bgs::protocol::club::v1::client::ClubSettingsAssignment* temp = assignment_;
  assignment_ = NULL;
  return temp;
}
inline void SettingsChangedNotification::set_allocated_assignment(::bgs::protocol::club::v1::client::ClubSettingsAssignment* assignment) {
  delete assignment_;
  assignment_ = assignment;
  if (assignment) {
    set_has_assignment();
  } else {
    clear_has_assignment();
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.client.SettingsChangedNotification.assignment)
}

// -------------------------------------------------------------------

// MemberAddedNotification

// optional .bgs.protocol.club.v1.MemberId agent_id = 1;
inline bool MemberAddedNotification::has_agent_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MemberAddedNotification::set_has_agent_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MemberAddedNotification::clear_has_agent_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MemberAddedNotification::clear_agent_id() {
  if (agent_id_ != NULL) agent_id_->::bgs::protocol::club::v1::MemberId::Clear();
  clear_has_agent_id();
}
inline const ::bgs::protocol::club::v1::MemberId& MemberAddedNotification::agent_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.client.MemberAddedNotification.agent_id)
  return agent_id_ != NULL ? *agent_id_ : *default_instance_->agent_id_;
}
inline ::bgs::protocol::club::v1::MemberId* MemberAddedNotification::mutable_agent_id() {
  set_has_agent_id();
  if (agent_id_ == NULL) agent_id_ = new ::bgs::protocol::club::v1::MemberId;
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.client.MemberAddedNotification.agent_id)
  return agent_id_;
}
inline ::bgs::protocol::club::v1::MemberId* MemberAddedNotification::release_agent_id() {
  clear_has_agent_id();
  ::bgs::protocol::club::v1::MemberId* temp = agent_id_;
  agent_id_ = NULL;
  return temp;
}
inline void MemberAddedNotification::set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id) {
  delete agent_id_;
  agent_id_ = agent_id;
  if (agent_id) {
    set_has_agent_id();
  } else {
    clear_has_agent_id();
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.client.MemberAddedNotification.agent_id)
}

// optional uint64 club_id = 3;
inline bool MemberAddedNotification::has_club_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MemberAddedNotification::set_has_club_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MemberAddedNotification::clear_has_club_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MemberAddedNotification::clear_club_id() {
  club_id_ = GOOGLE_ULONGLONG(0);
  clear_has_club_id();
}
inline ::google::protobuf::uint64 MemberAddedNotification::club_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.client.MemberAddedNotification.club_id)
  return club_id_;
}
inline void MemberAddedNotification::set_club_id(::google::protobuf::uint64 value) {
  set_has_club_id();
  club_id_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.client.MemberAddedNotification.club_id)
}

// repeated .bgs.protocol.club.v1.client.Member member = 4;
inline int MemberAddedNotification::member_size() const {
  return member_.size();
}
inline void MemberAddedNotification::clear_member() {
  member_.Clear();
}
inline const ::bgs::protocol::club::v1::client::Member& MemberAddedNotification::member(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.client.MemberAddedNotification.member)
  return member_.Get(index);
}
inline ::bgs::protocol::club::v1::client::Member* MemberAddedNotification::mutable_member(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.client.MemberAddedNotification.member)
  return member_.Mutable(index);
}
inline ::bgs::protocol::club::v1::client::Member* MemberAddedNotification::add_member() {
  // @@protoc_insertion_point(field_add:bgs.protocol.club.v1.client.MemberAddedNotification.member)
  return member_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bgs::protocol::club::v1::client::Member >&
MemberAddedNotification::member() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.club.v1.client.MemberAddedNotification.member)
  return member_;
}
inline ::google::protobuf::RepeatedPtrField< ::bgs::protocol::club::v1::client::Member >*
MemberAddedNotification::mutable_member() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.club.v1.client.MemberAddedNotification.member)
  return &member_;
}

// -------------------------------------------------------------------

// MemberRemovedNotification

// optional .bgs.protocol.club.v1.MemberId agent_id = 1;
inline bool MemberRemovedNotification::has_agent_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MemberRemovedNotification::set_has_agent_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MemberRemovedNotification::clear_has_agent_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MemberRemovedNotification::clear_agent_id() {
  if (agent_id_ != NULL) agent_id_->::bgs::protocol::club::v1::MemberId::Clear();
  clear_has_agent_id();
}
inline const ::bgs::protocol::club::v1::MemberId& MemberRemovedNotification::agent_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.client.MemberRemovedNotification.agent_id)
  return agent_id_ != NULL ? *agent_id_ : *default_instance_->agent_id_;
}
inline ::bgs::protocol::club::v1::MemberId* MemberRemovedNotification::mutable_agent_id() {
  set_has_agent_id();
  if (agent_id_ == NULL) agent_id_ = new ::bgs::protocol::club::v1::MemberId;
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.client.MemberRemovedNotification.agent_id)
  return agent_id_;
}
inline ::bgs::protocol::club::v1::MemberId* MemberRemovedNotification::release_agent_id() {
  clear_has_agent_id();
  ::bgs::protocol::club::v1::MemberId* temp = agent_id_;
  agent_id_ = NULL;
  return temp;
}
inline void MemberRemovedNotification::set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id) {
  delete agent_id_;
  agent_id_ = agent_id;
  if (agent_id) {
    set_has_agent_id();
  } else {
    clear_has_agent_id();
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.client.MemberRemovedNotification.agent_id)
}

// optional uint64 club_id = 3;
inline bool MemberRemovedNotification::has_club_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MemberRemovedNotification::set_has_club_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MemberRemovedNotification::clear_has_club_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MemberRemovedNotification::clear_club_id() {
  club_id_ = GOOGLE_ULONGLONG(0);
  clear_has_club_id();
}
inline ::google::protobuf::uint64 MemberRemovedNotification::club_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.client.MemberRemovedNotification.club_id)
  return club_id_;
}
inline void MemberRemovedNotification::set_club_id(::google::protobuf::uint64 value) {
  set_has_club_id();
  club_id_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.client.MemberRemovedNotification.club_id)
}

// repeated .bgs.protocol.club.v1.client.MemberRemovedAssignment member = 4;
inline int MemberRemovedNotification::member_size() const {
  return member_.size();
}
inline void MemberRemovedNotification::clear_member() {
  member_.Clear();
}
inline const ::bgs::protocol::club::v1::client::MemberRemovedAssignment& MemberRemovedNotification::member(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.client.MemberRemovedNotification.member)
  return member_.Get(index);
}
inline ::bgs::protocol::club::v1::client::MemberRemovedAssignment* MemberRemovedNotification::mutable_member(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.client.MemberRemovedNotification.member)
  return member_.Mutable(index);
}
inline ::bgs::protocol::club::v1::client::MemberRemovedAssignment* MemberRemovedNotification::add_member() {
  // @@protoc_insertion_point(field_add:bgs.protocol.club.v1.client.MemberRemovedNotification.member)
  return member_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bgs::protocol::club::v1::client::MemberRemovedAssignment >&
MemberRemovedNotification::member() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.club.v1.client.MemberRemovedNotification.member)
  return member_;
}
inline ::google::protobuf::RepeatedPtrField< ::bgs::protocol::club::v1::client::MemberRemovedAssignment >*
MemberRemovedNotification::mutable_member() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.club.v1.client.MemberRemovedNotification.member)
  return &member_;
}

// -------------------------------------------------------------------

// MemberStateChangedNotification

// optional .bgs.protocol.club.v1.MemberId agent_id = 1;
inline bool MemberStateChangedNotification::has_agent_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MemberStateChangedNotification::set_has_agent_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MemberStateChangedNotification::clear_has_agent_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MemberStateChangedNotification::clear_agent_id() {
  if (agent_id_ != NULL) agent_id_->::bgs::protocol::club::v1::MemberId::Clear();
  clear_has_agent_id();
}
inline const ::bgs::protocol::club::v1::MemberId& MemberStateChangedNotification::agent_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.client.MemberStateChangedNotification.agent_id)
  return agent_id_ != NULL ? *agent_id_ : *default_instance_->agent_id_;
}
inline ::bgs::protocol::club::v1::MemberId* MemberStateChangedNotification::mutable_agent_id() {
  set_has_agent_id();
  if (agent_id_ == NULL) agent_id_ = new ::bgs::protocol::club::v1::MemberId;
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.client.MemberStateChangedNotification.agent_id)
  return agent_id_;
}
inline ::bgs::protocol::club::v1::MemberId* MemberStateChangedNotification::release_agent_id() {
  clear_has_agent_id();
  ::bgs::protocol::club::v1::MemberId* temp = agent_id_;
  agent_id_ = NULL;
  return temp;
}
inline void MemberStateChangedNotification::set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id) {
  delete agent_id_;
  agent_id_ = agent_id;
  if (agent_id) {
    set_has_agent_id();
  } else {
    clear_has_agent_id();
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.client.MemberStateChangedNotification.agent_id)
}

// optional uint64 club_id = 3;
inline bool MemberStateChangedNotification::has_club_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MemberStateChangedNotification::set_has_club_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MemberStateChangedNotification::clear_has_club_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MemberStateChangedNotification::clear_club_id() {
  club_id_ = GOOGLE_ULONGLONG(0);
  clear_has_club_id();
}
inline ::google::protobuf::uint64 MemberStateChangedNotification::club_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.client.MemberStateChangedNotification.club_id)
  return club_id_;
}
inline void MemberStateChangedNotification::set_club_id(::google::protobuf::uint64 value) {
  set_has_club_id();
  club_id_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.client.MemberStateChangedNotification.club_id)
}

// repeated .bgs.protocol.club.v1.client.MemberStateAssignment assignment = 4;
inline int MemberStateChangedNotification::assignment_size() const {
  return assignment_.size();
}
inline void MemberStateChangedNotification::clear_assignment() {
  assignment_.Clear();
}
inline const ::bgs::protocol::club::v1::client::MemberStateAssignment& MemberStateChangedNotification::assignment(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.client.MemberStateChangedNotification.assignment)
  return assignment_.Get(index);
}
inline ::bgs::protocol::club::v1::client::MemberStateAssignment* MemberStateChangedNotification::mutable_assignment(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.client.MemberStateChangedNotification.assignment)
  return assignment_.Mutable(index);
}
inline ::bgs::protocol::club::v1::client::MemberStateAssignment* MemberStateChangedNotification::add_assignment() {
  // @@protoc_insertion_point(field_add:bgs.protocol.club.v1.client.MemberStateChangedNotification.assignment)
  return assignment_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bgs::protocol::club::v1::client::MemberStateAssignment >&
MemberStateChangedNotification::assignment() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.club.v1.client.MemberStateChangedNotification.assignment)
  return assignment_;
}
inline ::google::protobuf::RepeatedPtrField< ::bgs::protocol::club::v1::client::MemberStateAssignment >*
MemberStateChangedNotification::mutable_assignment() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.club.v1.client.MemberStateChangedNotification.assignment)
  return &assignment_;
}

// -------------------------------------------------------------------

// SubscriberStateChangedNotification

// optional .bgs.protocol.club.v1.MemberId agent_id = 1;
inline bool SubscriberStateChangedNotification::has_agent_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SubscriberStateChangedNotification::set_has_agent_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SubscriberStateChangedNotification::clear_has_agent_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SubscriberStateChangedNotification::clear_agent_id() {
  if (agent_id_ != NULL) agent_id_->::bgs::protocol::club::v1::MemberId::Clear();
  clear_has_agent_id();
}
inline const ::bgs::protocol::club::v1::MemberId& SubscriberStateChangedNotification::agent_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.client.SubscriberStateChangedNotification.agent_id)
  return agent_id_ != NULL ? *agent_id_ : *default_instance_->agent_id_;
}
inline ::bgs::protocol::club::v1::MemberId* SubscriberStateChangedNotification::mutable_agent_id() {
  set_has_agent_id();
  if (agent_id_ == NULL) agent_id_ = new ::bgs::protocol::club::v1::MemberId;
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.client.SubscriberStateChangedNotification.agent_id)
  return agent_id_;
}
inline ::bgs::protocol::club::v1::MemberId* SubscriberStateChangedNotification::release_agent_id() {
  clear_has_agent_id();
  ::bgs::protocol::club::v1::MemberId* temp = agent_id_;
  agent_id_ = NULL;
  return temp;
}
inline void SubscriberStateChangedNotification::set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id) {
  delete agent_id_;
  agent_id_ = agent_id;
  if (agent_id) {
    set_has_agent_id();
  } else {
    clear_has_agent_id();
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.client.SubscriberStateChangedNotification.agent_id)
}

// optional uint64 club_id = 3;
inline bool SubscriberStateChangedNotification::has_club_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SubscriberStateChangedNotification::set_has_club_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SubscriberStateChangedNotification::clear_has_club_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SubscriberStateChangedNotification::clear_club_id() {
  club_id_ = GOOGLE_ULONGLONG(0);
  clear_has_club_id();
}
inline ::google::protobuf::uint64 SubscriberStateChangedNotification::club_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.client.SubscriberStateChangedNotification.club_id)
  return club_id_;
}
inline void SubscriberStateChangedNotification::set_club_id(::google::protobuf::uint64 value) {
  set_has_club_id();
  club_id_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.client.SubscriberStateChangedNotification.club_id)
}

// repeated .bgs.protocol.club.v1.client.SubscriberStateAssignment assignment = 4;
inline int SubscriberStateChangedNotification::assignment_size() const {
  return assignment_.size();
}
inline void SubscriberStateChangedNotification::clear_assignment() {
  assignment_.Clear();
}
inline const ::bgs::protocol::club::v1::client::SubscriberStateAssignment& SubscriberStateChangedNotification::assignment(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.client.SubscriberStateChangedNotification.assignment)
  return assignment_.Get(index);
}
inline ::bgs::protocol::club::v1::client::SubscriberStateAssignment* SubscriberStateChangedNotification::mutable_assignment(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.client.SubscriberStateChangedNotification.assignment)
  return assignment_.Mutable(index);
}
inline ::bgs::protocol::club::v1::client::SubscriberStateAssignment* SubscriberStateChangedNotification::add_assignment() {
  // @@protoc_insertion_point(field_add:bgs.protocol.club.v1.client.SubscriberStateChangedNotification.assignment)
  return assignment_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bgs::protocol::club::v1::client::SubscriberStateAssignment >&
SubscriberStateChangedNotification::assignment() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.club.v1.client.SubscriberStateChangedNotification.assignment)
  return assignment_;
}
inline ::google::protobuf::RepeatedPtrField< ::bgs::protocol::club::v1::client::SubscriberStateAssignment >*
SubscriberStateChangedNotification::mutable_assignment() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.club.v1.client.SubscriberStateChangedNotification.assignment)
  return &assignment_;
}

// -------------------------------------------------------------------

// MemberRoleChangedNotification

// optional .bgs.protocol.club.v1.MemberId agent_id = 1;
inline bool MemberRoleChangedNotification::has_agent_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MemberRoleChangedNotification::set_has_agent_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MemberRoleChangedNotification::clear_has_agent_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MemberRoleChangedNotification::clear_agent_id() {
  if (agent_id_ != NULL) agent_id_->::bgs::protocol::club::v1::MemberId::Clear();
  clear_has_agent_id();
}
inline const ::bgs::protocol::club::v1::MemberId& MemberRoleChangedNotification::agent_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.client.MemberRoleChangedNotification.agent_id)
  return agent_id_ != NULL ? *agent_id_ : *default_instance_->agent_id_;
}
inline ::bgs::protocol::club::v1::MemberId* MemberRoleChangedNotification::mutable_agent_id() {
  set_has_agent_id();
  if (agent_id_ == NULL) agent_id_ = new ::bgs::protocol::club::v1::MemberId;
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.client.MemberRoleChangedNotification.agent_id)
  return agent_id_;
}
inline ::bgs::protocol::club::v1::MemberId* MemberRoleChangedNotification::release_agent_id() {
  clear_has_agent_id();
  ::bgs::protocol::club::v1::MemberId* temp = agent_id_;
  agent_id_ = NULL;
  return temp;
}
inline void MemberRoleChangedNotification::set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id) {
  delete agent_id_;
  agent_id_ = agent_id;
  if (agent_id) {
    set_has_agent_id();
  } else {
    clear_has_agent_id();
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.client.MemberRoleChangedNotification.agent_id)
}

// optional uint64 club_id = 3;
inline bool MemberRoleChangedNotification::has_club_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MemberRoleChangedNotification::set_has_club_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MemberRoleChangedNotification::clear_has_club_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MemberRoleChangedNotification::clear_club_id() {
  club_id_ = GOOGLE_ULONGLONG(0);
  clear_has_club_id();
}
inline ::google::protobuf::uint64 MemberRoleChangedNotification::club_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.client.MemberRoleChangedNotification.club_id)
  return club_id_;
}
inline void MemberRoleChangedNotification::set_club_id(::google::protobuf::uint64 value) {
  set_has_club_id();
  club_id_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.client.MemberRoleChangedNotification.club_id)
}

// repeated .bgs.protocol.club.v1.client.RoleAssignment assignment = 4;
inline int MemberRoleChangedNotification::assignment_size() const {
  return assignment_.size();
}
inline void MemberRoleChangedNotification::clear_assignment() {
  assignment_.Clear();
}
inline const ::bgs::protocol::club::v1::client::RoleAssignment& MemberRoleChangedNotification::assignment(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.client.MemberRoleChangedNotification.assignment)
  return assignment_.Get(index);
}
inline ::bgs::protocol::club::v1::client::RoleAssignment* MemberRoleChangedNotification::mutable_assignment(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.client.MemberRoleChangedNotification.assignment)
  return assignment_.Mutable(index);
}
inline ::bgs::protocol::club::v1::client::RoleAssignment* MemberRoleChangedNotification::add_assignment() {
  // @@protoc_insertion_point(field_add:bgs.protocol.club.v1.client.MemberRoleChangedNotification.assignment)
  return assignment_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bgs::protocol::club::v1::client::RoleAssignment >&
MemberRoleChangedNotification::assignment() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.club.v1.client.MemberRoleChangedNotification.assignment)
  return assignment_;
}
inline ::google::protobuf::RepeatedPtrField< ::bgs::protocol::club::v1::client::RoleAssignment >*
MemberRoleChangedNotification::mutable_assignment() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.club.v1.client.MemberRoleChangedNotification.assignment)
  return &assignment_;
}

// -------------------------------------------------------------------

// InvitationAddedNotification

// optional .bgs.protocol.club.v1.MemberId agent_id = 1;
inline bool InvitationAddedNotification::has_agent_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InvitationAddedNotification::set_has_agent_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InvitationAddedNotification::clear_has_agent_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InvitationAddedNotification::clear_agent_id() {
  if (agent_id_ != NULL) agent_id_->::bgs::protocol::club::v1::MemberId::Clear();
  clear_has_agent_id();
}
inline const ::bgs::protocol::club::v1::MemberId& InvitationAddedNotification::agent_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.client.InvitationAddedNotification.agent_id)
  return agent_id_ != NULL ? *agent_id_ : *default_instance_->agent_id_;
}
inline ::bgs::protocol::club::v1::MemberId* InvitationAddedNotification::mutable_agent_id() {
  set_has_agent_id();
  if (agent_id_ == NULL) agent_id_ = new ::bgs::protocol::club::v1::MemberId;
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.client.InvitationAddedNotification.agent_id)
  return agent_id_;
}
inline ::bgs::protocol::club::v1::MemberId* InvitationAddedNotification::release_agent_id() {
  clear_has_agent_id();
  ::bgs::protocol::club::v1::MemberId* temp = agent_id_;
  agent_id_ = NULL;
  return temp;
}
inline void InvitationAddedNotification::set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id) {
  delete agent_id_;
  agent_id_ = agent_id;
  if (agent_id) {
    set_has_agent_id();
  } else {
    clear_has_agent_id();
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.client.InvitationAddedNotification.agent_id)
}

// optional uint64 club_id = 3;
inline bool InvitationAddedNotification::has_club_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InvitationAddedNotification::set_has_club_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InvitationAddedNotification::clear_has_club_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InvitationAddedNotification::clear_club_id() {
  club_id_ = GOOGLE_ULONGLONG(0);
  clear_has_club_id();
}
inline ::google::protobuf::uint64 InvitationAddedNotification::club_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.client.InvitationAddedNotification.club_id)
  return club_id_;
}
inline void InvitationAddedNotification::set_club_id(::google::protobuf::uint64 value) {
  set_has_club_id();
  club_id_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.client.InvitationAddedNotification.club_id)
}

// optional .bgs.protocol.club.v1.client.ClubInvitation invitation = 4;
inline bool InvitationAddedNotification::has_invitation() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void InvitationAddedNotification::set_has_invitation() {
  _has_bits_[0] |= 0x00000004u;
}
inline void InvitationAddedNotification::clear_has_invitation() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void InvitationAddedNotification::clear_invitation() {
  if (invitation_ != NULL) invitation_->::bgs::protocol::club::v1::client::ClubInvitation::Clear();
  clear_has_invitation();
}
inline const ::bgs::protocol::club::v1::client::ClubInvitation& InvitationAddedNotification::invitation() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.client.InvitationAddedNotification.invitation)
  return invitation_ != NULL ? *invitation_ : *default_instance_->invitation_;
}
inline ::bgs::protocol::club::v1::client::ClubInvitation* InvitationAddedNotification::mutable_invitation() {
  set_has_invitation();
  if (invitation_ == NULL) invitation_ = new ::bgs::protocol::club::v1::client::ClubInvitation;
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.client.InvitationAddedNotification.invitation)
  return invitation_;
}
inline ::bgs::protocol::club::v1::client::ClubInvitation* InvitationAddedNotification::release_invitation() {
  clear_has_invitation();
  ::bgs::protocol::club::v1::client::ClubInvitation* temp = invitation_;
  invitation_ = NULL;
  return temp;
}
inline void InvitationAddedNotification::set_allocated_invitation(::bgs::protocol::club::v1::client::ClubInvitation* invitation) {
  delete invitation_;
  invitation_ = invitation;
  if (invitation) {
    set_has_invitation();
  } else {
    clear_has_invitation();
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.client.InvitationAddedNotification.invitation)
}

// -------------------------------------------------------------------

// InvitationRemovedNotification

// optional .bgs.protocol.club.v1.MemberId agent_id = 1;
inline bool InvitationRemovedNotification::has_agent_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InvitationRemovedNotification::set_has_agent_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InvitationRemovedNotification::clear_has_agent_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InvitationRemovedNotification::clear_agent_id() {
  if (agent_id_ != NULL) agent_id_->::bgs::protocol::club::v1::MemberId::Clear();
  clear_has_agent_id();
}
inline const ::bgs::protocol::club::v1::MemberId& InvitationRemovedNotification::agent_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.client.InvitationRemovedNotification.agent_id)
  return agent_id_ != NULL ? *agent_id_ : *default_instance_->agent_id_;
}
inline ::bgs::protocol::club::v1::MemberId* InvitationRemovedNotification::mutable_agent_id() {
  set_has_agent_id();
  if (agent_id_ == NULL) agent_id_ = new ::bgs::protocol::club::v1::MemberId;
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.client.InvitationRemovedNotification.agent_id)
  return agent_id_;
}
inline ::bgs::protocol::club::v1::MemberId* InvitationRemovedNotification::release_agent_id() {
  clear_has_agent_id();
  ::bgs::protocol::club::v1::MemberId* temp = agent_id_;
  agent_id_ = NULL;
  return temp;
}
inline void InvitationRemovedNotification::set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id) {
  delete agent_id_;
  agent_id_ = agent_id;
  if (agent_id) {
    set_has_agent_id();
  } else {
    clear_has_agent_id();
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.client.InvitationRemovedNotification.agent_id)
}

// optional uint64 club_id = 3;
inline bool InvitationRemovedNotification::has_club_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InvitationRemovedNotification::set_has_club_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InvitationRemovedNotification::clear_has_club_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InvitationRemovedNotification::clear_club_id() {
  club_id_ = GOOGLE_ULONGLONG(0);
  clear_has_club_id();
}
inline ::google::protobuf::uint64 InvitationRemovedNotification::club_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.client.InvitationRemovedNotification.club_id)
  return club_id_;
}
inline void InvitationRemovedNotification::set_club_id(::google::protobuf::uint64 value) {
  set_has_club_id();
  club_id_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.client.InvitationRemovedNotification.club_id)
}

// optional fixed64 invitation_id = 4;
inline bool InvitationRemovedNotification::has_invitation_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void InvitationRemovedNotification::set_has_invitation_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void InvitationRemovedNotification::clear_has_invitation_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void InvitationRemovedNotification::clear_invitation_id() {
  invitation_id_ = GOOGLE_ULONGLONG(0);
  clear_has_invitation_id();
}
inline ::google::protobuf::uint64 InvitationRemovedNotification::invitation_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.client.InvitationRemovedNotification.invitation_id)
  return invitation_id_;
}
inline void InvitationRemovedNotification::set_invitation_id(::google::protobuf::uint64 value) {
  set_has_invitation_id();
  invitation_id_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.client.InvitationRemovedNotification.invitation_id)
}

// optional .bgs.protocol.InvitationRemovedReason reason = 5;
inline bool InvitationRemovedNotification::has_reason() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void InvitationRemovedNotification::set_has_reason() {
  _has_bits_[0] |= 0x00000008u;
}
inline void InvitationRemovedNotification::clear_has_reason() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void InvitationRemovedNotification::clear_reason() {
  reason_ = 0;
  clear_has_reason();
}
inline ::bgs::protocol::InvitationRemovedReason InvitationRemovedNotification::reason() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.client.InvitationRemovedNotification.reason)
  return static_cast< ::bgs::protocol::InvitationRemovedReason >(reason_);
}
inline void InvitationRemovedNotification::set_reason(::bgs::protocol::InvitationRemovedReason value) {
  assert(::bgs::protocol::InvitationRemovedReason_IsValid(value));
  set_has_reason();
  reason_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.client.InvitationRemovedNotification.reason)
}

// -------------------------------------------------------------------

// SuggestionAddedNotification

// optional .bgs.protocol.club.v1.MemberId agent_id = 1;
inline bool SuggestionAddedNotification::has_agent_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SuggestionAddedNotification::set_has_agent_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SuggestionAddedNotification::clear_has_agent_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SuggestionAddedNotification::clear_agent_id() {
  if (agent_id_ != NULL) agent_id_->::bgs::protocol::club::v1::MemberId::Clear();
  clear_has_agent_id();
}
inline const ::bgs::protocol::club::v1::MemberId& SuggestionAddedNotification::agent_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.client.SuggestionAddedNotification.agent_id)
  return agent_id_ != NULL ? *agent_id_ : *default_instance_->agent_id_;
}
inline ::bgs::protocol::club::v1::MemberId* SuggestionAddedNotification::mutable_agent_id() {
  set_has_agent_id();
  if (agent_id_ == NULL) agent_id_ = new ::bgs::protocol::club::v1::MemberId;
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.client.SuggestionAddedNotification.agent_id)
  return agent_id_;
}
inline ::bgs::protocol::club::v1::MemberId* SuggestionAddedNotification::release_agent_id() {
  clear_has_agent_id();
  ::bgs::protocol::club::v1::MemberId* temp = agent_id_;
  agent_id_ = NULL;
  return temp;
}
inline void SuggestionAddedNotification::set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id) {
  delete agent_id_;
  agent_id_ = agent_id;
  if (agent_id) {
    set_has_agent_id();
  } else {
    clear_has_agent_id();
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.client.SuggestionAddedNotification.agent_id)
}

// optional uint64 club_id = 3;
inline bool SuggestionAddedNotification::has_club_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SuggestionAddedNotification::set_has_club_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SuggestionAddedNotification::clear_has_club_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SuggestionAddedNotification::clear_club_id() {
  club_id_ = GOOGLE_ULONGLONG(0);
  clear_has_club_id();
}
inline ::google::protobuf::uint64 SuggestionAddedNotification::club_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.client.SuggestionAddedNotification.club_id)
  return club_id_;
}
inline void SuggestionAddedNotification::set_club_id(::google::protobuf::uint64 value) {
  set_has_club_id();
  club_id_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.client.SuggestionAddedNotification.club_id)
}

// optional .bgs.protocol.club.v1.client.ClubSuggestion suggestion = 4;
inline bool SuggestionAddedNotification::has_suggestion() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SuggestionAddedNotification::set_has_suggestion() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SuggestionAddedNotification::clear_has_suggestion() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SuggestionAddedNotification::clear_suggestion() {
  if (suggestion_ != NULL) suggestion_->::bgs::protocol::club::v1::client::ClubSuggestion::Clear();
  clear_has_suggestion();
}
inline const ::bgs::protocol::club::v1::client::ClubSuggestion& SuggestionAddedNotification::suggestion() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.client.SuggestionAddedNotification.suggestion)
  return suggestion_ != NULL ? *suggestion_ : *default_instance_->suggestion_;
}
inline ::bgs::protocol::club::v1::client::ClubSuggestion* SuggestionAddedNotification::mutable_suggestion() {
  set_has_suggestion();
  if (suggestion_ == NULL) suggestion_ = new ::bgs::protocol::club::v1::client::ClubSuggestion;
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.client.SuggestionAddedNotification.suggestion)
  return suggestion_;
}
inline ::bgs::protocol::club::v1::client::ClubSuggestion* SuggestionAddedNotification::release_suggestion() {
  clear_has_suggestion();
  ::bgs::protocol::club::v1::client::ClubSuggestion* temp = suggestion_;
  suggestion_ = NULL;
  return temp;
}
inline void SuggestionAddedNotification::set_allocated_suggestion(::bgs::protocol::club::v1::client::ClubSuggestion* suggestion) {
  delete suggestion_;
  suggestion_ = suggestion;
  if (suggestion) {
    set_has_suggestion();
  } else {
    clear_has_suggestion();
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.client.SuggestionAddedNotification.suggestion)
}

// -------------------------------------------------------------------

// SuggestionRemovedNotification

// optional .bgs.protocol.club.v1.MemberId agent_id = 1;
inline bool SuggestionRemovedNotification::has_agent_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SuggestionRemovedNotification::set_has_agent_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SuggestionRemovedNotification::clear_has_agent_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SuggestionRemovedNotification::clear_agent_id() {
  if (agent_id_ != NULL) agent_id_->::bgs::protocol::club::v1::MemberId::Clear();
  clear_has_agent_id();
}
inline const ::bgs::protocol::club::v1::MemberId& SuggestionRemovedNotification::agent_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.client.SuggestionRemovedNotification.agent_id)
  return agent_id_ != NULL ? *agent_id_ : *default_instance_->agent_id_;
}
inline ::bgs::protocol::club::v1::MemberId* SuggestionRemovedNotification::mutable_agent_id() {
  set_has_agent_id();
  if (agent_id_ == NULL) agent_id_ = new ::bgs::protocol::club::v1::MemberId;
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.client.SuggestionRemovedNotification.agent_id)
  return agent_id_;
}
inline ::bgs::protocol::club::v1::MemberId* SuggestionRemovedNotification::release_agent_id() {
  clear_has_agent_id();
  ::bgs::protocol::club::v1::MemberId* temp = agent_id_;
  agent_id_ = NULL;
  return temp;
}
inline void SuggestionRemovedNotification::set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id) {
  delete agent_id_;
  agent_id_ = agent_id;
  if (agent_id) {
    set_has_agent_id();
  } else {
    clear_has_agent_id();
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.client.SuggestionRemovedNotification.agent_id)
}

// optional uint64 club_id = 3;
inline bool SuggestionRemovedNotification::has_club_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SuggestionRemovedNotification::set_has_club_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SuggestionRemovedNotification::clear_has_club_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SuggestionRemovedNotification::clear_club_id() {
  club_id_ = GOOGLE_ULONGLONG(0);
  clear_has_club_id();
}
inline ::google::protobuf::uint64 SuggestionRemovedNotification::club_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.client.SuggestionRemovedNotification.club_id)
  return club_id_;
}
inline void SuggestionRemovedNotification::set_club_id(::google::protobuf::uint64 value) {
  set_has_club_id();
  club_id_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.client.SuggestionRemovedNotification.club_id)
}

// optional fixed64 suggestion_id = 4;
inline bool SuggestionRemovedNotification::has_suggestion_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SuggestionRemovedNotification::set_has_suggestion_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SuggestionRemovedNotification::clear_has_suggestion_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SuggestionRemovedNotification::clear_suggestion_id() {
  suggestion_id_ = GOOGLE_ULONGLONG(0);
  clear_has_suggestion_id();
}
inline ::google::protobuf::uint64 SuggestionRemovedNotification::suggestion_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.client.SuggestionRemovedNotification.suggestion_id)
  return suggestion_id_;
}
inline void SuggestionRemovedNotification::set_suggestion_id(::google::protobuf::uint64 value) {
  set_has_suggestion_id();
  suggestion_id_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.client.SuggestionRemovedNotification.suggestion_id)
}

// optional .bgs.protocol.SuggestionRemovedReason reason = 5;
inline bool SuggestionRemovedNotification::has_reason() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SuggestionRemovedNotification::set_has_reason() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SuggestionRemovedNotification::clear_has_reason() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SuggestionRemovedNotification::clear_reason() {
  reason_ = 0;
  clear_has_reason();
}
inline ::bgs::protocol::SuggestionRemovedReason SuggestionRemovedNotification::reason() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.client.SuggestionRemovedNotification.reason)
  return static_cast< ::bgs::protocol::SuggestionRemovedReason >(reason_);
}
inline void SuggestionRemovedNotification::set_reason(::bgs::protocol::SuggestionRemovedReason value) {
  assert(::bgs::protocol::SuggestionRemovedReason_IsValid(value));
  set_has_reason();
  reason_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.client.SuggestionRemovedNotification.reason)
}

// -------------------------------------------------------------------

// StreamAddedNotification

// optional .bgs.protocol.club.v1.MemberId agent_id = 1;
inline bool StreamAddedNotification::has_agent_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StreamAddedNotification::set_has_agent_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StreamAddedNotification::clear_has_agent_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StreamAddedNotification::clear_agent_id() {
  if (agent_id_ != NULL) agent_id_->::bgs::protocol::club::v1::MemberId::Clear();
  clear_has_agent_id();
}
inline const ::bgs::protocol::club::v1::MemberId& StreamAddedNotification::agent_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.client.StreamAddedNotification.agent_id)
  return agent_id_ != NULL ? *agent_id_ : *default_instance_->agent_id_;
}
inline ::bgs::protocol::club::v1::MemberId* StreamAddedNotification::mutable_agent_id() {
  set_has_agent_id();
  if (agent_id_ == NULL) agent_id_ = new ::bgs::protocol::club::v1::MemberId;
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.client.StreamAddedNotification.agent_id)
  return agent_id_;
}
inline ::bgs::protocol::club::v1::MemberId* StreamAddedNotification::release_agent_id() {
  clear_has_agent_id();
  ::bgs::protocol::club::v1::MemberId* temp = agent_id_;
  agent_id_ = NULL;
  return temp;
}
inline void StreamAddedNotification::set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id) {
  delete agent_id_;
  agent_id_ = agent_id;
  if (agent_id) {
    set_has_agent_id();
  } else {
    clear_has_agent_id();
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.client.StreamAddedNotification.agent_id)
}

// optional uint64 club_id = 3;
inline bool StreamAddedNotification::has_club_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StreamAddedNotification::set_has_club_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StreamAddedNotification::clear_has_club_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StreamAddedNotification::clear_club_id() {
  club_id_ = GOOGLE_ULONGLONG(0);
  clear_has_club_id();
}
inline ::google::protobuf::uint64 StreamAddedNotification::club_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.client.StreamAddedNotification.club_id)
  return club_id_;
}
inline void StreamAddedNotification::set_club_id(::google::protobuf::uint64 value) {
  set_has_club_id();
  club_id_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.client.StreamAddedNotification.club_id)
}

// optional .bgs.protocol.club.v1.client.Stream stream = 4;
inline bool StreamAddedNotification::has_stream() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StreamAddedNotification::set_has_stream() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StreamAddedNotification::clear_has_stream() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StreamAddedNotification::clear_stream() {
  if (stream_ != NULL) stream_->::bgs::protocol::club::v1::client::Stream::Clear();
  clear_has_stream();
}
inline const ::bgs::protocol::club::v1::client::Stream& StreamAddedNotification::stream() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.client.StreamAddedNotification.stream)
  return stream_ != NULL ? *stream_ : *default_instance_->stream_;
}
inline ::bgs::protocol::club::v1::client::Stream* StreamAddedNotification::mutable_stream() {
  set_has_stream();
  if (stream_ == NULL) stream_ = new ::bgs::protocol::club::v1::client::Stream;
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.client.StreamAddedNotification.stream)
  return stream_;
}
inline ::bgs::protocol::club::v1::client::Stream* StreamAddedNotification::release_stream() {
  clear_has_stream();
  ::bgs::protocol::club::v1::client::Stream* temp = stream_;
  stream_ = NULL;
  return temp;
}
inline void StreamAddedNotification::set_allocated_stream(::bgs::protocol::club::v1::client::Stream* stream) {
  delete stream_;
  stream_ = stream;
  if (stream) {
    set_has_stream();
  } else {
    clear_has_stream();
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.client.StreamAddedNotification.stream)
}

// -------------------------------------------------------------------

// StreamRemovedNotification

// optional .bgs.protocol.club.v1.MemberId agent_id = 1;
inline bool StreamRemovedNotification::has_agent_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StreamRemovedNotification::set_has_agent_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StreamRemovedNotification::clear_has_agent_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StreamRemovedNotification::clear_agent_id() {
  if (agent_id_ != NULL) agent_id_->::bgs::protocol::club::v1::MemberId::Clear();
  clear_has_agent_id();
}
inline const ::bgs::protocol::club::v1::MemberId& StreamRemovedNotification::agent_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.client.StreamRemovedNotification.agent_id)
  return agent_id_ != NULL ? *agent_id_ : *default_instance_->agent_id_;
}
inline ::bgs::protocol::club::v1::MemberId* StreamRemovedNotification::mutable_agent_id() {
  set_has_agent_id();
  if (agent_id_ == NULL) agent_id_ = new ::bgs::protocol::club::v1::MemberId;
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.client.StreamRemovedNotification.agent_id)
  return agent_id_;
}
inline ::bgs::protocol::club::v1::MemberId* StreamRemovedNotification::release_agent_id() {
  clear_has_agent_id();
  ::bgs::protocol::club::v1::MemberId* temp = agent_id_;
  agent_id_ = NULL;
  return temp;
}
inline void StreamRemovedNotification::set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id) {
  delete agent_id_;
  agent_id_ = agent_id;
  if (agent_id) {
    set_has_agent_id();
  } else {
    clear_has_agent_id();
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.client.StreamRemovedNotification.agent_id)
}

// optional uint64 club_id = 3;
inline bool StreamRemovedNotification::has_club_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StreamRemovedNotification::set_has_club_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StreamRemovedNotification::clear_has_club_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StreamRemovedNotification::clear_club_id() {
  club_id_ = GOOGLE_ULONGLONG(0);
  clear_has_club_id();
}
inline ::google::protobuf::uint64 StreamRemovedNotification::club_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.client.StreamRemovedNotification.club_id)
  return club_id_;
}
inline void StreamRemovedNotification::set_club_id(::google::protobuf::uint64 value) {
  set_has_club_id();
  club_id_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.client.StreamRemovedNotification.club_id)
}

// optional uint64 stream_id = 4;
inline bool StreamRemovedNotification::has_stream_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StreamRemovedNotification::set_has_stream_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StreamRemovedNotification::clear_has_stream_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StreamRemovedNotification::clear_stream_id() {
  stream_id_ = GOOGLE_ULONGLONG(0);
  clear_has_stream_id();
}
inline ::google::protobuf::uint64 StreamRemovedNotification::stream_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.client.StreamRemovedNotification.stream_id)
  return stream_id_;
}
inline void StreamRemovedNotification::set_stream_id(::google::protobuf::uint64 value) {
  set_has_stream_id();
  stream_id_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.client.StreamRemovedNotification.stream_id)
}

// -------------------------------------------------------------------

// StreamStateChangedNotification

// optional .bgs.protocol.club.v1.MemberId agent_id = 1;
inline bool StreamStateChangedNotification::has_agent_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StreamStateChangedNotification::set_has_agent_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StreamStateChangedNotification::clear_has_agent_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StreamStateChangedNotification::clear_agent_id() {
  if (agent_id_ != NULL) agent_id_->::bgs::protocol::club::v1::MemberId::Clear();
  clear_has_agent_id();
}
inline const ::bgs::protocol::club::v1::MemberId& StreamStateChangedNotification::agent_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.client.StreamStateChangedNotification.agent_id)
  return agent_id_ != NULL ? *agent_id_ : *default_instance_->agent_id_;
}
inline ::bgs::protocol::club::v1::MemberId* StreamStateChangedNotification::mutable_agent_id() {
  set_has_agent_id();
  if (agent_id_ == NULL) agent_id_ = new ::bgs::protocol::club::v1::MemberId;
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.client.StreamStateChangedNotification.agent_id)
  return agent_id_;
}
inline ::bgs::protocol::club::v1::MemberId* StreamStateChangedNotification::release_agent_id() {
  clear_has_agent_id();
  ::bgs::protocol::club::v1::MemberId* temp = agent_id_;
  agent_id_ = NULL;
  return temp;
}
inline void StreamStateChangedNotification::set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id) {
  delete agent_id_;
  agent_id_ = agent_id;
  if (agent_id) {
    set_has_agent_id();
  } else {
    clear_has_agent_id();
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.client.StreamStateChangedNotification.agent_id)
}

// optional uint64 club_id = 3;
inline bool StreamStateChangedNotification::has_club_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StreamStateChangedNotification::set_has_club_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StreamStateChangedNotification::clear_has_club_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StreamStateChangedNotification::clear_club_id() {
  club_id_ = GOOGLE_ULONGLONG(0);
  clear_has_club_id();
}
inline ::google::protobuf::uint64 StreamStateChangedNotification::club_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.client.StreamStateChangedNotification.club_id)
  return club_id_;
}
inline void StreamStateChangedNotification::set_club_id(::google::protobuf::uint64 value) {
  set_has_club_id();
  club_id_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.client.StreamStateChangedNotification.club_id)
}

// optional uint64 stream_id = 4;
inline bool StreamStateChangedNotification::has_stream_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StreamStateChangedNotification::set_has_stream_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StreamStateChangedNotification::clear_has_stream_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StreamStateChangedNotification::clear_stream_id() {
  stream_id_ = GOOGLE_ULONGLONG(0);
  clear_has_stream_id();
}
inline ::google::protobuf::uint64 StreamStateChangedNotification::stream_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.client.StreamStateChangedNotification.stream_id)
  return stream_id_;
}
inline void StreamStateChangedNotification::set_stream_id(::google::protobuf::uint64 value) {
  set_has_stream_id();
  stream_id_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.client.StreamStateChangedNotification.stream_id)
}

// optional .bgs.protocol.club.v1.client.StreamStateAssignment assignment = 5;
inline bool StreamStateChangedNotification::has_assignment() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StreamStateChangedNotification::set_has_assignment() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StreamStateChangedNotification::clear_has_assignment() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StreamStateChangedNotification::clear_assignment() {
  if (assignment_ != NULL) assignment_->::bgs::protocol::club::v1::client::StreamStateAssignment::Clear();
  clear_has_assignment();
}
inline const ::bgs::protocol::club::v1::client::StreamStateAssignment& StreamStateChangedNotification::assignment() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.client.StreamStateChangedNotification.assignment)
  return assignment_ != NULL ? *assignment_ : *default_instance_->assignment_;
}
inline ::bgs::protocol::club::v1::client::StreamStateAssignment* StreamStateChangedNotification::mutable_assignment() {
  set_has_assignment();
  if (assignment_ == NULL) assignment_ = new ::bgs::protocol::club::v1::client::StreamStateAssignment;
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.client.StreamStateChangedNotification.assignment)
  return assignment_;
}
inline ::bgs::protocol::club::v1::client::StreamStateAssignment* StreamStateChangedNotification::release_assignment() {
  clear_has_assignment();
  ::bgs::protocol::club::v1::client::StreamStateAssignment* temp = assignment_;
  assignment_ = NULL;
  return temp;
}
inline void StreamStateChangedNotification::set_allocated_assignment(::bgs::protocol::club::v1::client::StreamStateAssignment* assignment) {
  delete assignment_;
  assignment_ = assignment;
  if (assignment) {
    set_has_assignment();
  } else {
    clear_has_assignment();
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.client.StreamStateChangedNotification.assignment)
}

// -------------------------------------------------------------------

// StreamMessageAddedNotification

// optional .bgs.protocol.club.v1.MemberId agent_id = 1;
inline bool StreamMessageAddedNotification::has_agent_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StreamMessageAddedNotification::set_has_agent_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StreamMessageAddedNotification::clear_has_agent_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StreamMessageAddedNotification::clear_agent_id() {
  if (agent_id_ != NULL) agent_id_->::bgs::protocol::club::v1::MemberId::Clear();
  clear_has_agent_id();
}
inline const ::bgs::protocol::club::v1::MemberId& StreamMessageAddedNotification::agent_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.client.StreamMessageAddedNotification.agent_id)
  return agent_id_ != NULL ? *agent_id_ : *default_instance_->agent_id_;
}
inline ::bgs::protocol::club::v1::MemberId* StreamMessageAddedNotification::mutable_agent_id() {
  set_has_agent_id();
  if (agent_id_ == NULL) agent_id_ = new ::bgs::protocol::club::v1::MemberId;
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.client.StreamMessageAddedNotification.agent_id)
  return agent_id_;
}
inline ::bgs::protocol::club::v1::MemberId* StreamMessageAddedNotification::release_agent_id() {
  clear_has_agent_id();
  ::bgs::protocol::club::v1::MemberId* temp = agent_id_;
  agent_id_ = NULL;
  return temp;
}
inline void StreamMessageAddedNotification::set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id) {
  delete agent_id_;
  agent_id_ = agent_id;
  if (agent_id) {
    set_has_agent_id();
  } else {
    clear_has_agent_id();
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.client.StreamMessageAddedNotification.agent_id)
}

// optional uint64 club_id = 3;
inline bool StreamMessageAddedNotification::has_club_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StreamMessageAddedNotification::set_has_club_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StreamMessageAddedNotification::clear_has_club_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StreamMessageAddedNotification::clear_club_id() {
  club_id_ = GOOGLE_ULONGLONG(0);
  clear_has_club_id();
}
inline ::google::protobuf::uint64 StreamMessageAddedNotification::club_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.client.StreamMessageAddedNotification.club_id)
  return club_id_;
}
inline void StreamMessageAddedNotification::set_club_id(::google::protobuf::uint64 value) {
  set_has_club_id();
  club_id_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.client.StreamMessageAddedNotification.club_id)
}

// optional uint64 stream_id = 4;
inline bool StreamMessageAddedNotification::has_stream_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StreamMessageAddedNotification::set_has_stream_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StreamMessageAddedNotification::clear_has_stream_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StreamMessageAddedNotification::clear_stream_id() {
  stream_id_ = GOOGLE_ULONGLONG(0);
  clear_has_stream_id();
}
inline ::google::protobuf::uint64 StreamMessageAddedNotification::stream_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.client.StreamMessageAddedNotification.stream_id)
  return stream_id_;
}
inline void StreamMessageAddedNotification::set_stream_id(::google::protobuf::uint64 value) {
  set_has_stream_id();
  stream_id_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.client.StreamMessageAddedNotification.stream_id)
}

// optional .bgs.protocol.club.v1.client.StreamMessage message = 5;
inline bool StreamMessageAddedNotification::has_message() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StreamMessageAddedNotification::set_has_message() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StreamMessageAddedNotification::clear_has_message() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StreamMessageAddedNotification::clear_message() {
  if (message_ != NULL) message_->::bgs::protocol::club::v1::client::StreamMessage::Clear();
  clear_has_message();
}
inline const ::bgs::protocol::club::v1::client::StreamMessage& StreamMessageAddedNotification::message() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.client.StreamMessageAddedNotification.message)
  return message_ != NULL ? *message_ : *default_instance_->message_;
}
inline ::bgs::protocol::club::v1::client::StreamMessage* StreamMessageAddedNotification::mutable_message() {
  set_has_message();
  if (message_ == NULL) message_ = new ::bgs::protocol::club::v1::client::StreamMessage;
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.client.StreamMessageAddedNotification.message)
  return message_;
}
inline ::bgs::protocol::club::v1::client::StreamMessage* StreamMessageAddedNotification::release_message() {
  clear_has_message();
  ::bgs::protocol::club::v1::client::StreamMessage* temp = message_;
  message_ = NULL;
  return temp;
}
inline void StreamMessageAddedNotification::set_allocated_message(::bgs::protocol::club::v1::client::StreamMessage* message) {
  delete message_;
  message_ = message;
  if (message) {
    set_has_message();
  } else {
    clear_has_message();
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.client.StreamMessageAddedNotification.message)
}

// optional uint32 message_origin = 6;
inline bool StreamMessageAddedNotification::has_message_origin() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void StreamMessageAddedNotification::set_has_message_origin() {
  _has_bits_[0] |= 0x00000010u;
}
inline void StreamMessageAddedNotification::clear_has_message_origin() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void StreamMessageAddedNotification::clear_message_origin() {
  message_origin_ = 0u;
  clear_has_message_origin();
}
inline ::google::protobuf::uint32 StreamMessageAddedNotification::message_origin() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.client.StreamMessageAddedNotification.message_origin)
  return message_origin_;
}
inline void StreamMessageAddedNotification::set_message_origin(::google::protobuf::uint32 value) {
  set_has_message_origin();
  message_origin_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.client.StreamMessageAddedNotification.message_origin)
}

// -------------------------------------------------------------------

// StreamMessageUpdatedNotification

// optional .bgs.protocol.club.v1.MemberId agent_id = 1;
inline bool StreamMessageUpdatedNotification::has_agent_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StreamMessageUpdatedNotification::set_has_agent_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StreamMessageUpdatedNotification::clear_has_agent_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StreamMessageUpdatedNotification::clear_agent_id() {
  if (agent_id_ != NULL) agent_id_->::bgs::protocol::club::v1::MemberId::Clear();
  clear_has_agent_id();
}
inline const ::bgs::protocol::club::v1::MemberId& StreamMessageUpdatedNotification::agent_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.client.StreamMessageUpdatedNotification.agent_id)
  return agent_id_ != NULL ? *agent_id_ : *default_instance_->agent_id_;
}
inline ::bgs::protocol::club::v1::MemberId* StreamMessageUpdatedNotification::mutable_agent_id() {
  set_has_agent_id();
  if (agent_id_ == NULL) agent_id_ = new ::bgs::protocol::club::v1::MemberId;
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.client.StreamMessageUpdatedNotification.agent_id)
  return agent_id_;
}
inline ::bgs::protocol::club::v1::MemberId* StreamMessageUpdatedNotification::release_agent_id() {
  clear_has_agent_id();
  ::bgs::protocol::club::v1::MemberId* temp = agent_id_;
  agent_id_ = NULL;
  return temp;
}
inline void StreamMessageUpdatedNotification::set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id) {
  delete agent_id_;
  agent_id_ = agent_id;
  if (agent_id) {
    set_has_agent_id();
  } else {
    clear_has_agent_id();
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.client.StreamMessageUpdatedNotification.agent_id)
}

// optional uint64 club_id = 3;
inline bool StreamMessageUpdatedNotification::has_club_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StreamMessageUpdatedNotification::set_has_club_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StreamMessageUpdatedNotification::clear_has_club_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StreamMessageUpdatedNotification::clear_club_id() {
  club_id_ = GOOGLE_ULONGLONG(0);
  clear_has_club_id();
}
inline ::google::protobuf::uint64 StreamMessageUpdatedNotification::club_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.client.StreamMessageUpdatedNotification.club_id)
  return club_id_;
}
inline void StreamMessageUpdatedNotification::set_club_id(::google::protobuf::uint64 value) {
  set_has_club_id();
  club_id_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.client.StreamMessageUpdatedNotification.club_id)
}

// optional uint64 stream_id = 4;
inline bool StreamMessageUpdatedNotification::has_stream_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StreamMessageUpdatedNotification::set_has_stream_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StreamMessageUpdatedNotification::clear_has_stream_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StreamMessageUpdatedNotification::clear_stream_id() {
  stream_id_ = GOOGLE_ULONGLONG(0);
  clear_has_stream_id();
}
inline ::google::protobuf::uint64 StreamMessageUpdatedNotification::stream_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.client.StreamMessageUpdatedNotification.stream_id)
  return stream_id_;
}
inline void StreamMessageUpdatedNotification::set_stream_id(::google::protobuf::uint64 value) {
  set_has_stream_id();
  stream_id_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.client.StreamMessageUpdatedNotification.stream_id)
}

// optional .bgs.protocol.club.v1.client.StreamMessage message = 5;
inline bool StreamMessageUpdatedNotification::has_message() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StreamMessageUpdatedNotification::set_has_message() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StreamMessageUpdatedNotification::clear_has_message() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StreamMessageUpdatedNotification::clear_message() {
  if (message_ != NULL) message_->::bgs::protocol::club::v1::client::StreamMessage::Clear();
  clear_has_message();
}
inline const ::bgs::protocol::club::v1::client::StreamMessage& StreamMessageUpdatedNotification::message() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.client.StreamMessageUpdatedNotification.message)
  return message_ != NULL ? *message_ : *default_instance_->message_;
}
inline ::bgs::protocol::club::v1::client::StreamMessage* StreamMessageUpdatedNotification::mutable_message() {
  set_has_message();
  if (message_ == NULL) message_ = new ::bgs::protocol::club::v1::client::StreamMessage;
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.client.StreamMessageUpdatedNotification.message)
  return message_;
}
inline ::bgs::protocol::club::v1::client::StreamMessage* StreamMessageUpdatedNotification::release_message() {
  clear_has_message();
  ::bgs::protocol::club::v1::client::StreamMessage* temp = message_;
  message_ = NULL;
  return temp;
}
inline void StreamMessageUpdatedNotification::set_allocated_message(::bgs::protocol::club::v1::client::StreamMessage* message) {
  delete message_;
  message_ = message;
  if (message) {
    set_has_message();
  } else {
    clear_has_message();
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.client.StreamMessageUpdatedNotification.message)
}

// -------------------------------------------------------------------

// StreamTypingIndicatorNotification

// optional .bgs.protocol.club.v1.MemberId agent_id = 1;
inline bool StreamTypingIndicatorNotification::has_agent_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StreamTypingIndicatorNotification::set_has_agent_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StreamTypingIndicatorNotification::clear_has_agent_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StreamTypingIndicatorNotification::clear_agent_id() {
  if (agent_id_ != NULL) agent_id_->::bgs::protocol::club::v1::MemberId::Clear();
  clear_has_agent_id();
}
inline const ::bgs::protocol::club::v1::MemberId& StreamTypingIndicatorNotification::agent_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.client.StreamTypingIndicatorNotification.agent_id)
  return agent_id_ != NULL ? *agent_id_ : *default_instance_->agent_id_;
}
inline ::bgs::protocol::club::v1::MemberId* StreamTypingIndicatorNotification::mutable_agent_id() {
  set_has_agent_id();
  if (agent_id_ == NULL) agent_id_ = new ::bgs::protocol::club::v1::MemberId;
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.client.StreamTypingIndicatorNotification.agent_id)
  return agent_id_;
}
inline ::bgs::protocol::club::v1::MemberId* StreamTypingIndicatorNotification::release_agent_id() {
  clear_has_agent_id();
  ::bgs::protocol::club::v1::MemberId* temp = agent_id_;
  agent_id_ = NULL;
  return temp;
}
inline void StreamTypingIndicatorNotification::set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id) {
  delete agent_id_;
  agent_id_ = agent_id;
  if (agent_id) {
    set_has_agent_id();
  } else {
    clear_has_agent_id();
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.client.StreamTypingIndicatorNotification.agent_id)
}

// optional uint64 club_id = 3;
inline bool StreamTypingIndicatorNotification::has_club_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StreamTypingIndicatorNotification::set_has_club_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StreamTypingIndicatorNotification::clear_has_club_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StreamTypingIndicatorNotification::clear_club_id() {
  club_id_ = GOOGLE_ULONGLONG(0);
  clear_has_club_id();
}
inline ::google::protobuf::uint64 StreamTypingIndicatorNotification::club_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.client.StreamTypingIndicatorNotification.club_id)
  return club_id_;
}
inline void StreamTypingIndicatorNotification::set_club_id(::google::protobuf::uint64 value) {
  set_has_club_id();
  club_id_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.client.StreamTypingIndicatorNotification.club_id)
}

// optional uint64 stream_id = 4;
inline bool StreamTypingIndicatorNotification::has_stream_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StreamTypingIndicatorNotification::set_has_stream_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StreamTypingIndicatorNotification::clear_has_stream_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StreamTypingIndicatorNotification::clear_stream_id() {
  stream_id_ = GOOGLE_ULONGLONG(0);
  clear_has_stream_id();
}
inline ::google::protobuf::uint64 StreamTypingIndicatorNotification::stream_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.client.StreamTypingIndicatorNotification.stream_id)
  return stream_id_;
}
inline void StreamTypingIndicatorNotification::set_stream_id(::google::protobuf::uint64 value) {
  set_has_stream_id();
  stream_id_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.client.StreamTypingIndicatorNotification.stream_id)
}

// repeated .bgs.protocol.club.v1.client.StreamTypingIndicator indicator = 5;
inline int StreamTypingIndicatorNotification::indicator_size() const {
  return indicator_.size();
}
inline void StreamTypingIndicatorNotification::clear_indicator() {
  indicator_.Clear();
}
inline const ::bgs::protocol::club::v1::client::StreamTypingIndicator& StreamTypingIndicatorNotification::indicator(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.client.StreamTypingIndicatorNotification.indicator)
  return indicator_.Get(index);
}
inline ::bgs::protocol::club::v1::client::StreamTypingIndicator* StreamTypingIndicatorNotification::mutable_indicator(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.client.StreamTypingIndicatorNotification.indicator)
  return indicator_.Mutable(index);
}
inline ::bgs::protocol::club::v1::client::StreamTypingIndicator* StreamTypingIndicatorNotification::add_indicator() {
  // @@protoc_insertion_point(field_add:bgs.protocol.club.v1.client.StreamTypingIndicatorNotification.indicator)
  return indicator_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bgs::protocol::club::v1::client::StreamTypingIndicator >&
StreamTypingIndicatorNotification::indicator() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.club.v1.client.StreamTypingIndicatorNotification.indicator)
  return indicator_;
}
inline ::google::protobuf::RepeatedPtrField< ::bgs::protocol::club::v1::client::StreamTypingIndicator >*
StreamTypingIndicatorNotification::mutable_indicator() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.club.v1.client.StreamTypingIndicatorNotification.indicator)
  return &indicator_;
}

// -------------------------------------------------------------------

// StreamUnreadIndicatorNotification

// optional .bgs.protocol.club.v1.MemberId agent_id = 1;
inline bool StreamUnreadIndicatorNotification::has_agent_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StreamUnreadIndicatorNotification::set_has_agent_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StreamUnreadIndicatorNotification::clear_has_agent_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StreamUnreadIndicatorNotification::clear_agent_id() {
  if (agent_id_ != NULL) agent_id_->::bgs::protocol::club::v1::MemberId::Clear();
  clear_has_agent_id();
}
inline const ::bgs::protocol::club::v1::MemberId& StreamUnreadIndicatorNotification::agent_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.client.StreamUnreadIndicatorNotification.agent_id)
  return agent_id_ != NULL ? *agent_id_ : *default_instance_->agent_id_;
}
inline ::bgs::protocol::club::v1::MemberId* StreamUnreadIndicatorNotification::mutable_agent_id() {
  set_has_agent_id();
  if (agent_id_ == NULL) agent_id_ = new ::bgs::protocol::club::v1::MemberId;
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.client.StreamUnreadIndicatorNotification.agent_id)
  return agent_id_;
}
inline ::bgs::protocol::club::v1::MemberId* StreamUnreadIndicatorNotification::release_agent_id() {
  clear_has_agent_id();
  ::bgs::protocol::club::v1::MemberId* temp = agent_id_;
  agent_id_ = NULL;
  return temp;
}
inline void StreamUnreadIndicatorNotification::set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id) {
  delete agent_id_;
  agent_id_ = agent_id;
  if (agent_id) {
    set_has_agent_id();
  } else {
    clear_has_agent_id();
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.client.StreamUnreadIndicatorNotification.agent_id)
}

// optional uint64 club_id = 3;
inline bool StreamUnreadIndicatorNotification::has_club_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StreamUnreadIndicatorNotification::set_has_club_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StreamUnreadIndicatorNotification::clear_has_club_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StreamUnreadIndicatorNotification::clear_club_id() {
  club_id_ = GOOGLE_ULONGLONG(0);
  clear_has_club_id();
}
inline ::google::protobuf::uint64 StreamUnreadIndicatorNotification::club_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.client.StreamUnreadIndicatorNotification.club_id)
  return club_id_;
}
inline void StreamUnreadIndicatorNotification::set_club_id(::google::protobuf::uint64 value) {
  set_has_club_id();
  club_id_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.client.StreamUnreadIndicatorNotification.club_id)
}

// optional .bgs.protocol.club.v1.client.StreamEventTime event = 4;
inline bool StreamUnreadIndicatorNotification::has_event() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StreamUnreadIndicatorNotification::set_has_event() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StreamUnreadIndicatorNotification::clear_has_event() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StreamUnreadIndicatorNotification::clear_event() {
  if (event_ != NULL) event_->::bgs::protocol::club::v1::client::StreamEventTime::Clear();
  clear_has_event();
}
inline const ::bgs::protocol::club::v1::client::StreamEventTime& StreamUnreadIndicatorNotification::event() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.client.StreamUnreadIndicatorNotification.event)
  return event_ != NULL ? *event_ : *default_instance_->event_;
}
inline ::bgs::protocol::club::v1::client::StreamEventTime* StreamUnreadIndicatorNotification::mutable_event() {
  set_has_event();
  if (event_ == NULL) event_ = new ::bgs::protocol::club::v1::client::StreamEventTime;
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.client.StreamUnreadIndicatorNotification.event)
  return event_;
}
inline ::bgs::protocol::club::v1::client::StreamEventTime* StreamUnreadIndicatorNotification::release_event() {
  clear_has_event();
  ::bgs::protocol::club::v1::client::StreamEventTime* temp = event_;
  event_ = NULL;
  return temp;
}
inline void StreamUnreadIndicatorNotification::set_allocated_event(::bgs::protocol::club::v1::client::StreamEventTime* event) {
  delete event_;
  event_ = event;
  if (event) {
    set_has_event();
  } else {
    clear_has_event();
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.client.StreamUnreadIndicatorNotification.event)
}

// optional .bgs.protocol.club.v1.client.StreamMessage message = 5;
inline bool StreamUnreadIndicatorNotification::has_message() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StreamUnreadIndicatorNotification::set_has_message() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StreamUnreadIndicatorNotification::clear_has_message() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StreamUnreadIndicatorNotification::clear_message() {
  if (message_ != NULL) message_->::bgs::protocol::club::v1::client::StreamMessage::Clear();
  clear_has_message();
}
inline const ::bgs::protocol::club::v1::client::StreamMessage& StreamUnreadIndicatorNotification::message() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.client.StreamUnreadIndicatorNotification.message)
  return message_ != NULL ? *message_ : *default_instance_->message_;
}
inline ::bgs::protocol::club::v1::client::StreamMessage* StreamUnreadIndicatorNotification::mutable_message() {
  set_has_message();
  if (message_ == NULL) message_ = new ::bgs::protocol::club::v1::client::StreamMessage;
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.client.StreamUnreadIndicatorNotification.message)
  return message_;
}
inline ::bgs::protocol::club::v1::client::StreamMessage* StreamUnreadIndicatorNotification::release_message() {
  clear_has_message();
  ::bgs::protocol::club::v1::client::StreamMessage* temp = message_;
  message_ = NULL;
  return temp;
}
inline void StreamUnreadIndicatorNotification::set_allocated_message(::bgs::protocol::club::v1::client::StreamMessage* message) {
  delete message_;
  message_ = message;
  if (message) {
    set_has_message();
  } else {
    clear_has_message();
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.client.StreamUnreadIndicatorNotification.message)
}

// -------------------------------------------------------------------

// StreamAdvanceViewTimeNotification

// optional .bgs.protocol.club.v1.MemberId agent_id = 1;
inline bool StreamAdvanceViewTimeNotification::has_agent_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StreamAdvanceViewTimeNotification::set_has_agent_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StreamAdvanceViewTimeNotification::clear_has_agent_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StreamAdvanceViewTimeNotification::clear_agent_id() {
  if (agent_id_ != NULL) agent_id_->::bgs::protocol::club::v1::MemberId::Clear();
  clear_has_agent_id();
}
inline const ::bgs::protocol::club::v1::MemberId& StreamAdvanceViewTimeNotification::agent_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.client.StreamAdvanceViewTimeNotification.agent_id)
  return agent_id_ != NULL ? *agent_id_ : *default_instance_->agent_id_;
}
inline ::bgs::protocol::club::v1::MemberId* StreamAdvanceViewTimeNotification::mutable_agent_id() {
  set_has_agent_id();
  if (agent_id_ == NULL) agent_id_ = new ::bgs::protocol::club::v1::MemberId;
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.client.StreamAdvanceViewTimeNotification.agent_id)
  return agent_id_;
}
inline ::bgs::protocol::club::v1::MemberId* StreamAdvanceViewTimeNotification::release_agent_id() {
  clear_has_agent_id();
  ::bgs::protocol::club::v1::MemberId* temp = agent_id_;
  agent_id_ = NULL;
  return temp;
}
inline void StreamAdvanceViewTimeNotification::set_allocated_agent_id(::bgs::protocol::club::v1::MemberId* agent_id) {
  delete agent_id_;
  agent_id_ = agent_id;
  if (agent_id) {
    set_has_agent_id();
  } else {
    clear_has_agent_id();
  }
  // @@protoc_insertion_point(field_set_allocated:bgs.protocol.club.v1.client.StreamAdvanceViewTimeNotification.agent_id)
}

// optional uint64 club_id = 3;
inline bool StreamAdvanceViewTimeNotification::has_club_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StreamAdvanceViewTimeNotification::set_has_club_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StreamAdvanceViewTimeNotification::clear_has_club_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StreamAdvanceViewTimeNotification::clear_club_id() {
  club_id_ = GOOGLE_ULONGLONG(0);
  clear_has_club_id();
}
inline ::google::protobuf::uint64 StreamAdvanceViewTimeNotification::club_id() const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.client.StreamAdvanceViewTimeNotification.club_id)
  return club_id_;
}
inline void StreamAdvanceViewTimeNotification::set_club_id(::google::protobuf::uint64 value) {
  set_has_club_id();
  club_id_ = value;
  // @@protoc_insertion_point(field_set:bgs.protocol.club.v1.client.StreamAdvanceViewTimeNotification.club_id)
}

// repeated .bgs.protocol.club.v1.client.StreamAdvanceViewTime view = 4;
inline int StreamAdvanceViewTimeNotification::view_size() const {
  return view_.size();
}
inline void StreamAdvanceViewTimeNotification::clear_view() {
  view_.Clear();
}
inline const ::bgs::protocol::club::v1::client::StreamAdvanceViewTime& StreamAdvanceViewTimeNotification::view(int index) const {
  // @@protoc_insertion_point(field_get:bgs.protocol.club.v1.client.StreamAdvanceViewTimeNotification.view)
  return view_.Get(index);
}
inline ::bgs::protocol::club::v1::client::StreamAdvanceViewTime* StreamAdvanceViewTimeNotification::mutable_view(int index) {
  // @@protoc_insertion_point(field_mutable:bgs.protocol.club.v1.client.StreamAdvanceViewTimeNotification.view)
  return view_.Mutable(index);
}
inline ::bgs::protocol::club::v1::client::StreamAdvanceViewTime* StreamAdvanceViewTimeNotification::add_view() {
  // @@protoc_insertion_point(field_add:bgs.protocol.club.v1.client.StreamAdvanceViewTimeNotification.view)
  return view_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bgs::protocol::club::v1::client::StreamAdvanceViewTime >&
StreamAdvanceViewTimeNotification::view() const {
  // @@protoc_insertion_point(field_list:bgs.protocol.club.v1.client.StreamAdvanceViewTimeNotification.view)
  return view_;
}
inline ::google::protobuf::RepeatedPtrField< ::bgs::protocol::club::v1::client::StreamAdvanceViewTime >*
StreamAdvanceViewTimeNotification::mutable_view() {
  // @@protoc_insertion_point(field_mutable_list:bgs.protocol.club.v1.client.StreamAdvanceViewTimeNotification.view)
  return &view_;
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace client
}  // namespace v1
}  // namespace club
}  // namespace protocol
}  // namespace bgs

#ifndef SWIG
namespace google {
namespace protobuf {
}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_api_2fclient_2fv1_2fclub_5fnotification_2eproto__INCLUDED
