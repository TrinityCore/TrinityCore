// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/client/v1/club_service.proto

#ifndef PROTOBUF_api_2fclient_2fv1_2fclub_5fservice_2eproto__INCLUDED
#define PROTOBUF_api_2fclient_2fv1_2fclub_5fservice_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include "api/client/v1/club_request.pb.h"
#include "ServiceBase.h"
#include "MessageBuffer.h"
#include <functional>
#include <type_traits>
// @@protoc_insertion_point(includes)

namespace bgs {
namespace protocol {
namespace club {
namespace v1 {
namespace client {

// Internal implementation detail -- do not call these.
void TC_PROTO_API protobuf_AddDesc_api_2fclient_2fv1_2fclub_5fservice_2eproto();
void protobuf_AssignDesc_api_2fclient_2fv1_2fclub_5fservice_2eproto();
void protobuf_ShutdownFile_api_2fclient_2fv1_2fclub_5fservice_2eproto();

// ===================================================================

// ===================================================================

class TC_PROTO_API ClubService : public ServiceBase
{
 public:

  explicit ClubService(bool use_original_hash);
  ClubService(ClubService const&) = delete;
  ClubService(ClubService&&) = delete;
  ClubService& operator=(ClubService const&) = delete;
  ClubService& operator=(ClubService&&) = delete;
  virtual ~ClubService();

  typedef std::integral_constant<uint32, 0xE273DE0Eu> OriginalHash;
  typedef std::integral_constant<uint32, 0x11E68136u> NameHash;

  static google::protobuf::ServiceDescriptor const* descriptor();

  void CallServerMethod(uint32 token, uint32 methodId, MessageBuffer buffer) final;

 protected:
  // server methods --------------------------------------------------
  virtual uint32 HandleSubscribe(::bgs::protocol::club::v1::client::SubscribeRequest const* request, ::bgs::protocol::NoData* response, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& continuation);
  virtual uint32 HandleUnsubscribe(::bgs::protocol::club::v1::client::UnsubscribeRequest const* request, ::bgs::protocol::NoData* response, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& continuation);
  virtual uint32 HandleCreate(::bgs::protocol::club::v1::client::CreateRequest const* request, ::bgs::protocol::club::v1::client::CreateResponse* response, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& continuation);
  virtual uint32 HandleDestroy(::bgs::protocol::club::v1::client::DestroyRequest const* request, ::bgs::protocol::NoData* response, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& continuation);
  virtual uint32 HandleGetDescription(::bgs::protocol::club::v1::client::GetDescriptionRequest const* request, ::bgs::protocol::club::v1::client::GetDescriptionResponse* response, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& continuation);
  virtual uint32 HandleGetClubType(::bgs::protocol::club::v1::client::GetClubTypeRequest const* request, ::bgs::protocol::club::v1::client::GetClubTypeResponse* response, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& continuation);
  virtual uint32 HandleUpdateClubState(::bgs::protocol::club::v1::client::UpdateClubStateRequest const* request, ::bgs::protocol::NoData* response, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& continuation);
  virtual uint32 HandleUpdateClubSettings(::bgs::protocol::club::v1::client::UpdateClubSettingsRequest const* request, ::bgs::protocol::NoData* response, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& continuation);
  virtual uint32 HandleJoin(::bgs::protocol::club::v1::client::JoinRequest const* request, ::bgs::protocol::NoData* response, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& continuation);
  virtual uint32 HandleLeave(::bgs::protocol::club::v1::client::LeaveRequest const* request, ::bgs::protocol::NoData* response, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& continuation);
  virtual uint32 HandleKick(::bgs::protocol::club::v1::client::KickRequest const* request, ::bgs::protocol::NoData* response, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& continuation);
  virtual uint32 HandleGetMember(::bgs::protocol::club::v1::client::GetMemberRequest const* request, ::bgs::protocol::club::v1::client::GetMemberResponse* response, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& continuation);
  virtual uint32 HandleGetMembers(::bgs::protocol::club::v1::client::GetMembersRequest const* request, ::bgs::protocol::club::v1::client::GetMembersResponse* response, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& continuation);
  virtual uint32 HandleUpdateMemberState(::bgs::protocol::club::v1::client::UpdateMemberStateRequest const* request, ::bgs::protocol::NoData* response, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& continuation);
  virtual uint32 HandleUpdateSubscriberState(::bgs::protocol::club::v1::client::UpdateSubscriberStateRequest const* request, ::bgs::protocol::NoData* response, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& continuation);
  virtual uint32 HandleAssignRole(::bgs::protocol::club::v1::client::AssignRoleRequest const* request, ::bgs::protocol::NoData* response, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& continuation);
  virtual uint32 HandleUnassignRole(::bgs::protocol::club::v1::client::UnassignRoleRequest const* request, ::bgs::protocol::NoData* response, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& continuation);
  virtual uint32 HandleSendInvitation(::bgs::protocol::club::v1::client::SendInvitationRequest const* request, ::bgs::protocol::NoData* response, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& continuation);
  virtual uint32 HandleAcceptInvitation(::bgs::protocol::club::v1::client::AcceptInvitationRequest const* request, ::bgs::protocol::NoData* response, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& continuation);
  virtual uint32 HandleDeclineInvitation(::bgs::protocol::club::v1::client::DeclineInvitationRequest const* request, ::bgs::protocol::NoData* response, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& continuation);
  virtual uint32 HandleRevokeInvitation(::bgs::protocol::club::v1::client::RevokeInvitationRequest const* request, ::bgs::protocol::NoData* response, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& continuation);
  virtual uint32 HandleGetInvitation(::bgs::protocol::club::v1::client::GetInvitationRequest const* request, ::bgs::protocol::club::v1::client::GetInvitationResponse* response, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& continuation);
  virtual uint32 HandleGetInvitations(::bgs::protocol::club::v1::client::GetInvitationsRequest const* request, ::bgs::protocol::club::v1::client::GetInvitationsResponse* response, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& continuation);
  virtual uint32 HandleSendSuggestion(::bgs::protocol::club::v1::client::SendSuggestionRequest const* request, ::bgs::protocol::NoData* response, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& continuation);
  virtual uint32 HandleAcceptSuggestion(::bgs::protocol::club::v1::client::AcceptSuggestionRequest const* request, ::bgs::protocol::NoData* response, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& continuation);
  virtual uint32 HandleDeclineSuggestion(::bgs::protocol::club::v1::client::DeclineSuggestionRequest const* request, ::bgs::protocol::NoData* response, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& continuation);
  virtual uint32 HandleGetSuggestion(::bgs::protocol::club::v1::client::GetSuggestionRequest const* request, ::bgs::protocol::club::v1::client::GetSuggestionResponse* response, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& continuation);
  virtual uint32 HandleGetSuggestions(::bgs::protocol::club::v1::client::GetSuggestionsRequest const* request, ::bgs::protocol::club::v1::client::GetSuggestionsResponse* response, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& continuation);
  virtual uint32 HandleCreateTicket(::bgs::protocol::club::v1::client::CreateTicketRequest const* request, ::bgs::protocol::club::v1::client::CreateTicketResponse* response, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& continuation);
  virtual uint32 HandleDestroyTicket(::bgs::protocol::club::v1::client::DestroyTicketRequest const* request, ::bgs::protocol::NoData* response, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& continuation);
  virtual uint32 HandleRedeemTicket(::bgs::protocol::club::v1::client::RedeemTicketRequest const* request, ::bgs::protocol::NoData* response, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& continuation);
  virtual uint32 HandleGetTicket(::bgs::protocol::club::v1::client::GetTicketRequest const* request, ::bgs::protocol::club::v1::client::GetTicketResponse* response, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& continuation);
  virtual uint32 HandleGetTickets(::bgs::protocol::club::v1::client::GetTicketsRequest const* request, ::bgs::protocol::club::v1::client::GetTicketsResponse* response, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& continuation);
  virtual uint32 HandleAddBan(::bgs::protocol::club::v1::client::AddBanRequest const* request, ::bgs::protocol::NoData* response, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& continuation);
  virtual uint32 HandleRemoveBan(::bgs::protocol::club::v1::client::RemoveBanRequest const* request, ::bgs::protocol::NoData* response, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& continuation);
  virtual uint32 HandleGetBan(::bgs::protocol::club::v1::client::GetBanRequest const* request, ::bgs::protocol::club::v1::client::GetBanResponse* response, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& continuation);
  virtual uint32 HandleGetBans(::bgs::protocol::club::v1::client::GetBansRequest const* request, ::bgs::protocol::club::v1::client::GetBansResponse* response, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& continuation);
  virtual uint32 HandleSubscribeStream(::bgs::protocol::club::v1::client::SubscribeStreamRequest const* request, ::bgs::protocol::NoData* response, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& continuation);
  virtual uint32 HandleUnsubscribeStream(::bgs::protocol::club::v1::client::UnsubscribeStreamRequest const* request, ::bgs::protocol::NoData* response, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& continuation);
  virtual uint32 HandleCreateStream(::bgs::protocol::club::v1::client::CreateStreamRequest const* request, ::bgs::protocol::club::v1::client::CreateStreamResponse* response, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& continuation);
  virtual uint32 HandleDestroyStream(::bgs::protocol::club::v1::client::DestroyStreamRequest const* request, ::bgs::protocol::NoData* response, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& continuation);
  virtual uint32 HandleGetStream(::bgs::protocol::club::v1::client::GetStreamRequest const* request, ::bgs::protocol::club::v1::client::GetStreamResponse* response, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& continuation);
  virtual uint32 HandleGetStreams(::bgs::protocol::club::v1::client::GetStreamsRequest const* request, ::bgs::protocol::club::v1::client::GetStreamsResponse* response, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& continuation);
  virtual uint32 HandleUpdateStreamState(::bgs::protocol::club::v1::client::UpdateStreamStateRequest const* request, ::bgs::protocol::NoData* response, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& continuation);
  virtual uint32 HandleSetStreamFocus(::bgs::protocol::club::v1::client::SetStreamFocusRequest const* request, ::bgs::protocol::NoData* response, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& continuation);
  virtual uint32 HandleGetStreamVoiceToken(::bgs::protocol::club::v1::client::GetStreamVoiceTokenRequest const* request, ::bgs::protocol::club::v1::client::GetStreamVoiceTokenResponse* response, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& continuation);
  virtual uint32 HandleKickFromStreamVoice(::bgs::protocol::club::v1::client::KickFromStreamVoiceRequest const* request, ::bgs::protocol::NoData* response, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& continuation);
  virtual uint32 HandleCreateMessage(::bgs::protocol::club::v1::client::CreateMessageRequest const* request, ::bgs::protocol::club::v1::client::CreateMessageResponse* response, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& continuation);
  virtual uint32 HandleDestroyMessage(::bgs::protocol::club::v1::client::DestroyMessageRequest const* request, ::bgs::protocol::club::v1::client::DestroyMessageResponse* response, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& continuation);
  virtual uint32 HandleEditMessage(::bgs::protocol::club::v1::client::EditMessageRequest const* request, ::bgs::protocol::club::v1::client::EditMessageResponse* response, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& continuation);
  virtual uint32 HandleSetMessagePinned(::bgs::protocol::club::v1::client::SetMessagePinnedRequest const* request, ::bgs::protocol::NoData* response, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& continuation);
  virtual uint32 HandleSetTypingIndicator(::bgs::protocol::club::v1::client::SetTypingIndicatorRequest const* request, ::bgs::protocol::NoData* response, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& continuation);
  virtual uint32 HandleAdvanceStreamViewTime(::bgs::protocol::club::v1::client::AdvanceStreamViewTimeRequest const* request, ::bgs::protocol::NoData* response, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& continuation);
  virtual uint32 HandleGetStreamHistory(::bgs::protocol::club::v1::client::GetStreamHistoryRequest const* request, ::bgs::protocol::club::v1::client::GetStreamHistoryResponse* response, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& continuation);
  virtual uint32 HandleGetStreamMessage(::bgs::protocol::club::v1::client::GetStreamMessageRequest const* request, ::bgs::protocol::club::v1::client::GetStreamMessageResponse* response, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& continuation);

 private:
  void ParseAndHandleSubscribe(uint32 token, uint32 methodId, MessageBuffer& buffer);
  void ParseAndHandleUnsubscribe(uint32 token, uint32 methodId, MessageBuffer& buffer);
  void ParseAndHandleCreate(uint32 token, uint32 methodId, MessageBuffer& buffer);
  void ParseAndHandleDestroy(uint32 token, uint32 methodId, MessageBuffer& buffer);
  void ParseAndHandleGetDescription(uint32 token, uint32 methodId, MessageBuffer& buffer);
  void ParseAndHandleGetClubType(uint32 token, uint32 methodId, MessageBuffer& buffer);
  void ParseAndHandleUpdateClubState(uint32 token, uint32 methodId, MessageBuffer& buffer);
  void ParseAndHandleUpdateClubSettings(uint32 token, uint32 methodId, MessageBuffer& buffer);
  void ParseAndHandleJoin(uint32 token, uint32 methodId, MessageBuffer& buffer);
  void ParseAndHandleLeave(uint32 token, uint32 methodId, MessageBuffer& buffer);
  void ParseAndHandleKick(uint32 token, uint32 methodId, MessageBuffer& buffer);
  void ParseAndHandleGetMember(uint32 token, uint32 methodId, MessageBuffer& buffer);
  void ParseAndHandleGetMembers(uint32 token, uint32 methodId, MessageBuffer& buffer);
  void ParseAndHandleUpdateMemberState(uint32 token, uint32 methodId, MessageBuffer& buffer);
  void ParseAndHandleUpdateSubscriberState(uint32 token, uint32 methodId, MessageBuffer& buffer);
  void ParseAndHandleAssignRole(uint32 token, uint32 methodId, MessageBuffer& buffer);
  void ParseAndHandleUnassignRole(uint32 token, uint32 methodId, MessageBuffer& buffer);
  void ParseAndHandleSendInvitation(uint32 token, uint32 methodId, MessageBuffer& buffer);
  void ParseAndHandleAcceptInvitation(uint32 token, uint32 methodId, MessageBuffer& buffer);
  void ParseAndHandleDeclineInvitation(uint32 token, uint32 methodId, MessageBuffer& buffer);
  void ParseAndHandleRevokeInvitation(uint32 token, uint32 methodId, MessageBuffer& buffer);
  void ParseAndHandleGetInvitation(uint32 token, uint32 methodId, MessageBuffer& buffer);
  void ParseAndHandleGetInvitations(uint32 token, uint32 methodId, MessageBuffer& buffer);
  void ParseAndHandleSendSuggestion(uint32 token, uint32 methodId, MessageBuffer& buffer);
  void ParseAndHandleAcceptSuggestion(uint32 token, uint32 methodId, MessageBuffer& buffer);
  void ParseAndHandleDeclineSuggestion(uint32 token, uint32 methodId, MessageBuffer& buffer);
  void ParseAndHandleGetSuggestion(uint32 token, uint32 methodId, MessageBuffer& buffer);
  void ParseAndHandleGetSuggestions(uint32 token, uint32 methodId, MessageBuffer& buffer);
  void ParseAndHandleCreateTicket(uint32 token, uint32 methodId, MessageBuffer& buffer);
  void ParseAndHandleDestroyTicket(uint32 token, uint32 methodId, MessageBuffer& buffer);
  void ParseAndHandleRedeemTicket(uint32 token, uint32 methodId, MessageBuffer& buffer);
  void ParseAndHandleGetTicket(uint32 token, uint32 methodId, MessageBuffer& buffer);
  void ParseAndHandleGetTickets(uint32 token, uint32 methodId, MessageBuffer& buffer);
  void ParseAndHandleAddBan(uint32 token, uint32 methodId, MessageBuffer& buffer);
  void ParseAndHandleRemoveBan(uint32 token, uint32 methodId, MessageBuffer& buffer);
  void ParseAndHandleGetBan(uint32 token, uint32 methodId, MessageBuffer& buffer);
  void ParseAndHandleGetBans(uint32 token, uint32 methodId, MessageBuffer& buffer);
  void ParseAndHandleSubscribeStream(uint32 token, uint32 methodId, MessageBuffer& buffer);
  void ParseAndHandleUnsubscribeStream(uint32 token, uint32 methodId, MessageBuffer& buffer);
  void ParseAndHandleCreateStream(uint32 token, uint32 methodId, MessageBuffer& buffer);
  void ParseAndHandleDestroyStream(uint32 token, uint32 methodId, MessageBuffer& buffer);
  void ParseAndHandleGetStream(uint32 token, uint32 methodId, MessageBuffer& buffer);
  void ParseAndHandleGetStreams(uint32 token, uint32 methodId, MessageBuffer& buffer);
  void ParseAndHandleUpdateStreamState(uint32 token, uint32 methodId, MessageBuffer& buffer);
  void ParseAndHandleSetStreamFocus(uint32 token, uint32 methodId, MessageBuffer& buffer);
  void ParseAndHandleGetStreamVoiceToken(uint32 token, uint32 methodId, MessageBuffer& buffer);
  void ParseAndHandleKickFromStreamVoice(uint32 token, uint32 methodId, MessageBuffer& buffer);
  void ParseAndHandleCreateMessage(uint32 token, uint32 methodId, MessageBuffer& buffer);
  void ParseAndHandleDestroyMessage(uint32 token, uint32 methodId, MessageBuffer& buffer);
  void ParseAndHandleEditMessage(uint32 token, uint32 methodId, MessageBuffer& buffer);
  void ParseAndHandleSetMessagePinned(uint32 token, uint32 methodId, MessageBuffer& buffer);
  void ParseAndHandleSetTypingIndicator(uint32 token, uint32 methodId, MessageBuffer& buffer);
  void ParseAndHandleAdvanceStreamViewTime(uint32 token, uint32 methodId, MessageBuffer& buffer);
  void ParseAndHandleGetStreamHistory(uint32 token, uint32 methodId, MessageBuffer& buffer);
  void ParseAndHandleGetStreamMessage(uint32 token, uint32 methodId, MessageBuffer& buffer);
};

// ===================================================================

// ===================================================================
// @@protoc_insertion_point(namespace_scope)

}  // namespace client
}  // namespace v1
}  // namespace club
}  // namespace protocol
}  // namespace bgs

#ifndef SWIG
namespace google {
namespace protobuf {
}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_api_2fclient_2fv1_2fclub_5fservice_2eproto__INCLUDED
