// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/client/v1/block_list_service.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "api/client/v1/block_list_service.pb.h"

#include <utility>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
#include "BattlenetRpcErrorCodes.h"
// @@protoc_insertion_point(includes)

namespace bgs {
namespace protocol {
namespace block_list {
namespace v1 {
namespace client {

namespace {

const ::google::protobuf::Descriptor* SubscribeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubscribeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubscribeResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubscribeResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* UnsubscribeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnsubscribeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetStateRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetStateRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetStateResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetStateResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlockPlayerRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlockPlayerRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* UnblockPlayerRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnblockPlayerRequest_reflection_ = NULL;
const ::google::protobuf::ServiceDescriptor* BlockListService_descriptor_ = NULL;

}  // namespace

void protobuf_AssignDesc_api_2fclient_2fv1_2fblock_5flist_5fservice_2eproto() {
  protobuf_AddDesc_api_2fclient_2fv1_2fblock_5flist_5fservice_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "api/client/v1/block_list_service.proto");
  GOOGLE_CHECK(file != NULL);
  SubscribeRequest_descriptor_ = file->message_type(0);
  static const int SubscribeRequest_offsets_[1] = {
  };
  SubscribeRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SubscribeRequest_descriptor_,
      SubscribeRequest::default_instance_,
      SubscribeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SubscribeRequest));
  SubscribeResponse_descriptor_ = file->message_type(1);
  static const int SubscribeResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeResponse, state_),
  };
  SubscribeResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SubscribeResponse_descriptor_,
      SubscribeResponse::default_instance_,
      SubscribeResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SubscribeResponse));
  UnsubscribeRequest_descriptor_ = file->message_type(2);
  static const int UnsubscribeRequest_offsets_[1] = {
  };
  UnsubscribeRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UnsubscribeRequest_descriptor_,
      UnsubscribeRequest::default_instance_,
      UnsubscribeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnsubscribeRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnsubscribeRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UnsubscribeRequest));
  GetStateRequest_descriptor_ = file->message_type(3);
  static const int GetStateRequest_offsets_[1] = {
  };
  GetStateRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetStateRequest_descriptor_,
      GetStateRequest::default_instance_,
      GetStateRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStateRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStateRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetStateRequest));
  GetStateResponse_descriptor_ = file->message_type(4);
  static const int GetStateResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStateResponse, state_),
  };
  GetStateResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetStateResponse_descriptor_,
      GetStateResponse::default_instance_,
      GetStateResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStateResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStateResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetStateResponse));
  BlockPlayerRequest_descriptor_ = file->message_type(5);
  static const int BlockPlayerRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockPlayerRequest, options_),
  };
  BlockPlayerRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlockPlayerRequest_descriptor_,
      BlockPlayerRequest::default_instance_,
      BlockPlayerRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockPlayerRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockPlayerRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlockPlayerRequest));
  UnblockPlayerRequest_descriptor_ = file->message_type(6);
  static const int UnblockPlayerRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnblockPlayerRequest, options_),
  };
  UnblockPlayerRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UnblockPlayerRequest_descriptor_,
      UnblockPlayerRequest::default_instance_,
      UnblockPlayerRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnblockPlayerRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnblockPlayerRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UnblockPlayerRequest));
  BlockListService_descriptor_ = file->service(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_api_2fclient_2fv1_2fblock_5flist_5fservice_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SubscribeRequest_descriptor_, &SubscribeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SubscribeResponse_descriptor_, &SubscribeResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UnsubscribeRequest_descriptor_, &UnsubscribeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetStateRequest_descriptor_, &GetStateRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetStateResponse_descriptor_, &GetStateResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlockPlayerRequest_descriptor_, &BlockPlayerRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UnblockPlayerRequest_descriptor_, &UnblockPlayerRequest::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_api_2fclient_2fv1_2fblock_5flist_5fservice_2eproto() {
  delete SubscribeRequest::default_instance_;
  delete SubscribeRequest_reflection_;
  delete SubscribeResponse::default_instance_;
  delete SubscribeResponse_reflection_;
  delete UnsubscribeRequest::default_instance_;
  delete UnsubscribeRequest_reflection_;
  delete GetStateRequest::default_instance_;
  delete GetStateRequest_reflection_;
  delete GetStateResponse::default_instance_;
  delete GetStateResponse_reflection_;
  delete BlockPlayerRequest::default_instance_;
  delete BlockPlayerRequest_reflection_;
  delete UnblockPlayerRequest::default_instance_;
  delete UnblockPlayerRequest_reflection_;
}

void protobuf_AddDesc_api_2fclient_2fv1_2fblock_5flist_5fservice_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::bgs::protocol::block_list::v1::client::protobuf_AddDesc_api_2fclient_2fv1_2fblock_5flist_5ftypes_2eproto();
  ::bgs::protocol::protobuf_AddDesc_rpc_5ftypes_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n&api/client/v1/block_list_service.proto"
    "\022!bgs.protocol.block_list.v1.client\032$api"
    "/client/v1/block_list_types.proto\032\017rpc_t"
    "ypes.proto\"\022\n\020SubscribeRequest\"U\n\021Subscr"
    "ibeResponse\022@\n\005state\030\001 \001(\01321.bgs.protoco"
    "l.block_list.v1.client.BlockListState\"\024\n"
    "\022UnsubscribeRequest\"\021\n\017GetStateRequest\"T"
    "\n\020GetStateResponse\022@\n\005state\030\001 \001(\01321.bgs."
    "protocol.block_list.v1.client.BlockListS"
    "tate\"f\n\022BlockPlayerRequest\022P\n\007options\030\002 "
    "\001(\01325.bgs.protocol.block_list.v1.client."
    "BlockPlayerOptionsB\010\212\371+\0042\002\010\001\"j\n\024UnblockP"
    "layerRequest\022R\n\007options\030\002 \001(\01327.bgs.prot"
    "ocol.block_list.v1.client.UnblockPlayerO"
    "ptionsB\010\212\371+\0042\002\010\0012\211\006\n\020BlockListService\022\200\001"
    "\n\tSubscribe\0223.bgs.protocol.block_list.v1"
    ".client.SubscribeRequest\0324.bgs.protocol."
    "block_list.v1.client.SubscribeResponse\"\010"
    "\202\371+\004\010\001\020\001\022d\n\013Unsubscribe\0225.bgs.protocol.b"
    "lock_list.v1.client.UnsubscribeRequest\032\024"
    ".bgs.protocol.NoData\"\010\202\371+\004\010\002\020\001\022}\n\010GetSta"
    "te\0222.bgs.protocol.block_list.v1.client.G"
    "etStateRequest\0323.bgs.protocol.block_list"
    ".v1.client.GetStateResponse\"\010\202\371+\004\010\003\020\001\022d\n"
    "\013BlockPlayer\0225.bgs.protocol.block_list.v"
    "1.client.BlockPlayerRequest\032\024.bgs.protoc"
    "ol.NoData\"\010\202\371+\004\010\004\020\001\022h\n\rUnblockPlayer\0227.b"
    "gs.protocol.block_list.v1.client.Unblock"
    "PlayerRequest\032\024.bgs.protocol.NoData\"\010\202\371+"
    "\004\010\005\020\001\022n\n\025BlockPlayerForSession\0225.bgs.pro"
    "tocol.block_list.v1.client.BlockPlayerRe"
    "quest\032\024.bgs.protocol.NoData\"\010\202\371+\004\010\006\020\001\032M\202"
    "\371+A\n3bnet.protocol.block_list.v1.client."
    "BlockListService*\nblock_list\212\371+\004\020\001\030\001B\002H\002", 1360);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "api/client/v1/block_list_service.proto", &protobuf_RegisterTypes);
  SubscribeRequest::default_instance_ = new SubscribeRequest();
  SubscribeResponse::default_instance_ = new SubscribeResponse();
  UnsubscribeRequest::default_instance_ = new UnsubscribeRequest();
  GetStateRequest::default_instance_ = new GetStateRequest();
  GetStateResponse::default_instance_ = new GetStateResponse();
  BlockPlayerRequest::default_instance_ = new BlockPlayerRequest();
  UnblockPlayerRequest::default_instance_ = new UnblockPlayerRequest();
  SubscribeRequest::default_instance_->InitAsDefaultInstance();
  SubscribeResponse::default_instance_->InitAsDefaultInstance();
  UnsubscribeRequest::default_instance_->InitAsDefaultInstance();
  GetStateRequest::default_instance_->InitAsDefaultInstance();
  GetStateResponse::default_instance_->InitAsDefaultInstance();
  BlockPlayerRequest::default_instance_->InitAsDefaultInstance();
  UnblockPlayerRequest::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_api_2fclient_2fv1_2fblock_5flist_5fservice_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_api_2fclient_2fv1_2fblock_5flist_5fservice_2eproto {
  StaticDescriptorInitializer_api_2fclient_2fv1_2fblock_5flist_5fservice_2eproto() {
    protobuf_AddDesc_api_2fclient_2fv1_2fblock_5flist_5fservice_2eproto();
  }
} static_descriptor_initializer_api_2fclient_2fv1_2fblock_5flist_5fservice_2eproto_;
// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

SubscribeRequest::SubscribeRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.block_list.v1.client.SubscribeRequest)
}

void SubscribeRequest::InitAsDefaultInstance() {
}

SubscribeRequest::SubscribeRequest(const SubscribeRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.block_list.v1.client.SubscribeRequest)
}

void SubscribeRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubscribeRequest::~SubscribeRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.block_list.v1.client.SubscribeRequest)
  SharedDtor();
}

void SubscribeRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SubscribeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubscribeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubscribeRequest_descriptor_;
}

const SubscribeRequest& SubscribeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_api_2fclient_2fv1_2fblock_5flist_5fservice_2eproto();
  return *default_instance_;
}

SubscribeRequest* SubscribeRequest::default_instance_ = NULL;

SubscribeRequest* SubscribeRequest::New() const {
  return new SubscribeRequest;
}

void SubscribeRequest::Swap(SubscribeRequest* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata SubscribeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubscribeRequest_descriptor_;
  metadata.reflection = SubscribeRequest_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int SubscribeResponse::kStateFieldNumber;
#endif  // !_MSC_VER

SubscribeResponse::SubscribeResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.block_list.v1.client.SubscribeResponse)
}

void SubscribeResponse::InitAsDefaultInstance() {
  state_ = const_cast< ::bgs::protocol::block_list::v1::client::BlockListState*>(&::bgs::protocol::block_list::v1::client::BlockListState::default_instance());
}

SubscribeResponse::SubscribeResponse(const SubscribeResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.block_list.v1.client.SubscribeResponse)
}

void SubscribeResponse::SharedCtor() {
  _cached_size_ = 0;
  state_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubscribeResponse::~SubscribeResponse() {
  // @@protoc_insertion_point(destructor:bgs.protocol.block_list.v1.client.SubscribeResponse)
  SharedDtor();
}

void SubscribeResponse::SharedDtor() {
  if (this != default_instance_) {
    delete state_;
  }
}

void SubscribeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubscribeResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubscribeResponse_descriptor_;
}

const SubscribeResponse& SubscribeResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_api_2fclient_2fv1_2fblock_5flist_5fservice_2eproto();
  return *default_instance_;
}

SubscribeResponse* SubscribeResponse::default_instance_ = NULL;

SubscribeResponse* SubscribeResponse::New() const {
  return new SubscribeResponse;
}

void SubscribeResponse::Swap(SubscribeResponse* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata SubscribeResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubscribeResponse_descriptor_;
  metadata.reflection = SubscribeResponse_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

UnsubscribeRequest::UnsubscribeRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.block_list.v1.client.UnsubscribeRequest)
}

void UnsubscribeRequest::InitAsDefaultInstance() {
}

UnsubscribeRequest::UnsubscribeRequest(const UnsubscribeRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.block_list.v1.client.UnsubscribeRequest)
}

void UnsubscribeRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnsubscribeRequest::~UnsubscribeRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.block_list.v1.client.UnsubscribeRequest)
  SharedDtor();
}

void UnsubscribeRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UnsubscribeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnsubscribeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnsubscribeRequest_descriptor_;
}

const UnsubscribeRequest& UnsubscribeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_api_2fclient_2fv1_2fblock_5flist_5fservice_2eproto();
  return *default_instance_;
}

UnsubscribeRequest* UnsubscribeRequest::default_instance_ = NULL;

UnsubscribeRequest* UnsubscribeRequest::New() const {
  return new UnsubscribeRequest;
}

void UnsubscribeRequest::Swap(UnsubscribeRequest* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata UnsubscribeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnsubscribeRequest_descriptor_;
  metadata.reflection = UnsubscribeRequest_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetStateRequest::GetStateRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.block_list.v1.client.GetStateRequest)
}

void GetStateRequest::InitAsDefaultInstance() {
}

GetStateRequest::GetStateRequest(const GetStateRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.block_list.v1.client.GetStateRequest)
}

void GetStateRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetStateRequest::~GetStateRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.block_list.v1.client.GetStateRequest)
  SharedDtor();
}

void GetStateRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetStateRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetStateRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetStateRequest_descriptor_;
}

const GetStateRequest& GetStateRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_api_2fclient_2fv1_2fblock_5flist_5fservice_2eproto();
  return *default_instance_;
}

GetStateRequest* GetStateRequest::default_instance_ = NULL;

GetStateRequest* GetStateRequest::New() const {
  return new GetStateRequest;
}

void GetStateRequest::Swap(GetStateRequest* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata GetStateRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetStateRequest_descriptor_;
  metadata.reflection = GetStateRequest_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int GetStateResponse::kStateFieldNumber;
#endif  // !_MSC_VER

GetStateResponse::GetStateResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.block_list.v1.client.GetStateResponse)
}

void GetStateResponse::InitAsDefaultInstance() {
  state_ = const_cast< ::bgs::protocol::block_list::v1::client::BlockListState*>(&::bgs::protocol::block_list::v1::client::BlockListState::default_instance());
}

GetStateResponse::GetStateResponse(const GetStateResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.block_list.v1.client.GetStateResponse)
}

void GetStateResponse::SharedCtor() {
  _cached_size_ = 0;
  state_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetStateResponse::~GetStateResponse() {
  // @@protoc_insertion_point(destructor:bgs.protocol.block_list.v1.client.GetStateResponse)
  SharedDtor();
}

void GetStateResponse::SharedDtor() {
  if (this != default_instance_) {
    delete state_;
  }
}

void GetStateResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetStateResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetStateResponse_descriptor_;
}

const GetStateResponse& GetStateResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_api_2fclient_2fv1_2fblock_5flist_5fservice_2eproto();
  return *default_instance_;
}

GetStateResponse* GetStateResponse::default_instance_ = NULL;

GetStateResponse* GetStateResponse::New() const {
  return new GetStateResponse;
}

void GetStateResponse::Swap(GetStateResponse* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata GetStateResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetStateResponse_descriptor_;
  metadata.reflection = GetStateResponse_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int BlockPlayerRequest::kOptionsFieldNumber;
#endif  // !_MSC_VER

BlockPlayerRequest::BlockPlayerRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.block_list.v1.client.BlockPlayerRequest)
}

void BlockPlayerRequest::InitAsDefaultInstance() {
  options_ = const_cast< ::bgs::protocol::block_list::v1::client::BlockPlayerOptions*>(&::bgs::protocol::block_list::v1::client::BlockPlayerOptions::default_instance());
}

BlockPlayerRequest::BlockPlayerRequest(const BlockPlayerRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.block_list.v1.client.BlockPlayerRequest)
}

void BlockPlayerRequest::SharedCtor() {
  _cached_size_ = 0;
  options_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlockPlayerRequest::~BlockPlayerRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.block_list.v1.client.BlockPlayerRequest)
  SharedDtor();
}

void BlockPlayerRequest::SharedDtor() {
  if (this != default_instance_) {
    delete options_;
  }
}

void BlockPlayerRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlockPlayerRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlockPlayerRequest_descriptor_;
}

const BlockPlayerRequest& BlockPlayerRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_api_2fclient_2fv1_2fblock_5flist_5fservice_2eproto();
  return *default_instance_;
}

BlockPlayerRequest* BlockPlayerRequest::default_instance_ = NULL;

BlockPlayerRequest* BlockPlayerRequest::New() const {
  return new BlockPlayerRequest;
}

void BlockPlayerRequest::Swap(BlockPlayerRequest* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata BlockPlayerRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlockPlayerRequest_descriptor_;
  metadata.reflection = BlockPlayerRequest_reflection_;
  return metadata;
}

// ===================================================================

#ifndef _MSC_VER
const int UnblockPlayerRequest::kOptionsFieldNumber;
#endif  // !_MSC_VER

UnblockPlayerRequest::UnblockPlayerRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.block_list.v1.client.UnblockPlayerRequest)
}

void UnblockPlayerRequest::InitAsDefaultInstance() {
  options_ = const_cast< ::bgs::protocol::block_list::v1::client::UnblockPlayerOptions*>(&::bgs::protocol::block_list::v1::client::UnblockPlayerOptions::default_instance());
}

UnblockPlayerRequest::UnblockPlayerRequest(const UnblockPlayerRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.block_list.v1.client.UnblockPlayerRequest)
}

void UnblockPlayerRequest::SharedCtor() {
  _cached_size_ = 0;
  options_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnblockPlayerRequest::~UnblockPlayerRequest() {
  // @@protoc_insertion_point(destructor:bgs.protocol.block_list.v1.client.UnblockPlayerRequest)
  SharedDtor();
}

void UnblockPlayerRequest::SharedDtor() {
  if (this != default_instance_) {
    delete options_;
  }
}

void UnblockPlayerRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnblockPlayerRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnblockPlayerRequest_descriptor_;
}

const UnblockPlayerRequest& UnblockPlayerRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_api_2fclient_2fv1_2fblock_5flist_5fservice_2eproto();
  return *default_instance_;
}

UnblockPlayerRequest* UnblockPlayerRequest::default_instance_ = NULL;

UnblockPlayerRequest* UnblockPlayerRequest::New() const {
  return new UnblockPlayerRequest;
}

void UnblockPlayerRequest::Swap(UnblockPlayerRequest* other) {
  if (other != this) {
    GetReflection()->Swap(this, other);}
}

::google::protobuf::Metadata UnblockPlayerRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnblockPlayerRequest_descriptor_;
  metadata.reflection = UnblockPlayerRequest_reflection_;
  return metadata;
}

// ===================================================================

BlockListService::BlockListService(bool use_original_hash) : ServiceBase(use_original_hash ? OriginalHash::value : NameHash::value) {
}

BlockListService::~BlockListService() {
}

google::protobuf::ServiceDescriptor const* BlockListService::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlockListService_descriptor_;
}

void BlockListService::CallServerMethod(uint32 token, uint32 methodId, MessageBuffer buffer) {
  switch(methodId & 0x3FFFFFFF) {
    case 1:
      ParseAndHandleSubscribe(token, methodId, buffer);
      break;
    case 2:
      ParseAndHandleUnsubscribe(token, methodId, buffer);
      break;
    case 3:
      ParseAndHandleGetState(token, methodId, buffer);
      break;
    case 4:
      ParseAndHandleBlockPlayer(token, methodId, buffer);
      break;
    case 5:
      ParseAndHandleUnblockPlayer(token, methodId, buffer);
      break;
    case 6:
      ParseAndHandleBlockPlayerForSession(token, methodId, buffer);
      break;
    default:
      LogInvalidMethod(methodId);
      SendResponse(service_hash_, methodId, token, ERROR_RPC_INVALID_METHOD);
      break;
    }
}

uint32 BlockListService::HandleSubscribe(::bgs::protocol::block_list::v1::client::SubscribeRequest const* request, ::bgs::protocol::block_list::v1::client::SubscribeResponse* /*response*/, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& /*continuation*/) {
  LogUnimplementedServerMethod("BlockListService.Subscribe", request);
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 BlockListService::HandleUnsubscribe(::bgs::protocol::block_list::v1::client::UnsubscribeRequest const* request, ::bgs::protocol::NoData* /*response*/, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& /*continuation*/) {
  LogUnimplementedServerMethod("BlockListService.Unsubscribe", request);
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 BlockListService::HandleGetState(::bgs::protocol::block_list::v1::client::GetStateRequest const* request, ::bgs::protocol::block_list::v1::client::GetStateResponse* /*response*/, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& /*continuation*/) {
  LogUnimplementedServerMethod("BlockListService.GetState", request);
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 BlockListService::HandleBlockPlayer(::bgs::protocol::block_list::v1::client::BlockPlayerRequest const* request, ::bgs::protocol::NoData* /*response*/, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& /*continuation*/) {
  LogUnimplementedServerMethod("BlockListService.BlockPlayer", request);
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 BlockListService::HandleUnblockPlayer(::bgs::protocol::block_list::v1::client::UnblockPlayerRequest const* request, ::bgs::protocol::NoData* /*response*/, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& /*continuation*/) {
  LogUnimplementedServerMethod("BlockListService.UnblockPlayer", request);
  return ERROR_RPC_NOT_IMPLEMENTED;
}

uint32 BlockListService::HandleBlockPlayerForSession(::bgs::protocol::block_list::v1::client::BlockPlayerRequest const* request, ::bgs::protocol::NoData* /*response*/, std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)>& /*continuation*/) {
  LogUnimplementedServerMethod("BlockListService.BlockPlayerForSession", request);
  return ERROR_RPC_NOT_IMPLEMENTED;
}

void BlockListService::ParseAndHandleSubscribe(uint32 token, uint32 methodId, MessageBuffer& buffer) {
  ::bgs::protocol::block_list::v1::client::SubscribeRequest request;
  if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
    LogFailedParsingRequest("BlockListService.Subscribe");
    SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
    return;
  }
  LogCallServerMethod("BlockListService.Subscribe", "bgs.protocol.block_list.v1.client.SubscribeRequest", &request);
  std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = CreateServerContinuation(token, methodId, "BlockListService.Subscribe", ::bgs::protocol::block_list::v1::client::SubscribeResponse::descriptor());
  ::bgs::protocol::block_list::v1::client::SubscribeResponse response;
  uint32 status = HandleSubscribe(&request, &response, continuation);
  if (continuation)
    continuation(this, status, &response);
}

void BlockListService::ParseAndHandleUnsubscribe(uint32 token, uint32 methodId, MessageBuffer& buffer) {
  ::bgs::protocol::block_list::v1::client::UnsubscribeRequest request;
  if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
    LogFailedParsingRequest("BlockListService.Unsubscribe");
    SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
    return;
  }
  LogCallServerMethod("BlockListService.Unsubscribe", "bgs.protocol.block_list.v1.client.UnsubscribeRequest", &request);
  std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = CreateServerContinuation(token, methodId, "BlockListService.Unsubscribe", ::bgs::protocol::NoData::descriptor());
  ::bgs::protocol::NoData response;
  uint32 status = HandleUnsubscribe(&request, &response, continuation);
  if (continuation)
    continuation(this, status, &response);
}

void BlockListService::ParseAndHandleGetState(uint32 token, uint32 methodId, MessageBuffer& buffer) {
  ::bgs::protocol::block_list::v1::client::GetStateRequest request;
  if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
    LogFailedParsingRequest("BlockListService.GetState");
    SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
    return;
  }
  LogCallServerMethod("BlockListService.GetState", "bgs.protocol.block_list.v1.client.GetStateRequest", &request);
  std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = CreateServerContinuation(token, methodId, "BlockListService.GetState", ::bgs::protocol::block_list::v1::client::GetStateResponse::descriptor());
  ::bgs::protocol::block_list::v1::client::GetStateResponse response;
  uint32 status = HandleGetState(&request, &response, continuation);
  if (continuation)
    continuation(this, status, &response);
}

void BlockListService::ParseAndHandleBlockPlayer(uint32 token, uint32 methodId, MessageBuffer& buffer) {
  ::bgs::protocol::block_list::v1::client::BlockPlayerRequest request;
  if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
    LogFailedParsingRequest("BlockListService.BlockPlayer");
    SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
    return;
  }
  LogCallServerMethod("BlockListService.BlockPlayer", "bgs.protocol.block_list.v1.client.BlockPlayerRequest", &request);
  std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = CreateServerContinuation(token, methodId, "BlockListService.BlockPlayer", ::bgs::protocol::NoData::descriptor());
  ::bgs::protocol::NoData response;
  uint32 status = HandleBlockPlayer(&request, &response, continuation);
  if (continuation)
    continuation(this, status, &response);
}

void BlockListService::ParseAndHandleUnblockPlayer(uint32 token, uint32 methodId, MessageBuffer& buffer) {
  ::bgs::protocol::block_list::v1::client::UnblockPlayerRequest request;
  if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
    LogFailedParsingRequest("BlockListService.UnblockPlayer");
    SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
    return;
  }
  LogCallServerMethod("BlockListService.UnblockPlayer", "bgs.protocol.block_list.v1.client.UnblockPlayerRequest", &request);
  std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = CreateServerContinuation(token, methodId, "BlockListService.UnblockPlayer", ::bgs::protocol::NoData::descriptor());
  ::bgs::protocol::NoData response;
  uint32 status = HandleUnblockPlayer(&request, &response, continuation);
  if (continuation)
    continuation(this, status, &response);
}

void BlockListService::ParseAndHandleBlockPlayerForSession(uint32 token, uint32 methodId, MessageBuffer& buffer) {
  ::bgs::protocol::block_list::v1::client::BlockPlayerRequest request;
  if (!request.ParseFromArray(buffer.GetReadPointer(), buffer.GetActiveSize())) {
    LogFailedParsingRequest("BlockListService.BlockPlayerForSession");
    SendResponse(service_hash_, methodId, token, ERROR_RPC_MALFORMED_REQUEST);
    return;
  }
  LogCallServerMethod("BlockListService.BlockPlayerForSession", "bgs.protocol.block_list.v1.client.BlockPlayerRequest", &request);
  std::function<void(ServiceBase*, uint32, ::google::protobuf::Message const*)> continuation = CreateServerContinuation(token, methodId, "BlockListService.BlockPlayerForSession", ::bgs::protocol::NoData::descriptor());
  ::bgs::protocol::NoData response;
  uint32 status = HandleBlockPlayerForSession(&request, &response, continuation);
  if (continuation)
    continuation(this, status, &response);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace client
}  // namespace v1
}  // namespace block_list
}  // namespace protocol
}  // namespace bgs

// @@protoc_insertion_point(global_scope)
