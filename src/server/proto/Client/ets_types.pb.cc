// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ets_types.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ets_types.pb.h"

#include <algorithm>
#include <utility>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
#include "Log.h"
// @@protoc_insertion_point(includes)

namespace bgs {
namespace protocol {

namespace {

const ::google::protobuf::Descriptor* TimeSeriesId_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TimeSeriesId_reflection_ = NULL;

}  // namespace

void protobuf_AssignDesc_ets_5ftypes_2eproto() {
  protobuf_AddDesc_ets_5ftypes_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ets_types.proto");
  GOOGLE_CHECK(file != NULL);
  TimeSeriesId_descriptor_ = file->message_type(0);
  static const int TimeSeriesId_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeSeriesId, epoch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeSeriesId, position_),
  };
  TimeSeriesId_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TimeSeriesId_descriptor_,
      TimeSeriesId::default_instance_,
      TimeSeriesId_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeSeriesId, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeSeriesId, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TimeSeriesId));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ets_5ftypes_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TimeSeriesId_descriptor_, &TimeSeriesId::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ets_5ftypes_2eproto() {
  delete TimeSeriesId::default_instance_;
  delete TimeSeriesId_reflection_;
}

void protobuf_AddDesc_ets_5ftypes_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017ets_types.proto\022\014bgs.protocol\"/\n\014TimeS"
    "eriesId\022\r\n\005epoch\030\001 \001(\004\022\020\n\010position\030\002 \001(\004"
    "B\002H\001", 84);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ets_types.proto", &protobuf_RegisterTypes);
  TimeSeriesId::default_instance_ = new TimeSeriesId();
  TimeSeriesId::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ets_5ftypes_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ets_5ftypes_2eproto {
  StaticDescriptorInitializer_ets_5ftypes_2eproto() {
    protobuf_AddDesc_ets_5ftypes_2eproto();
  }
} static_descriptor_initializer_ets_5ftypes_2eproto_;
// ===================================================================

#ifndef _MSC_VER
const int TimeSeriesId::kEpochFieldNumber;
const int TimeSeriesId::kPositionFieldNumber;
#endif  // !_MSC_VER

TimeSeriesId::TimeSeriesId()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bgs.protocol.TimeSeriesId)
}

void TimeSeriesId::InitAsDefaultInstance() {
}

TimeSeriesId::TimeSeriesId(const TimeSeriesId& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bgs.protocol.TimeSeriesId)
}

void TimeSeriesId::SharedCtor() {
  _cached_size_ = 0;
  epoch_ = GOOGLE_ULONGLONG(0);
  position_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TimeSeriesId::~TimeSeriesId() {
  // @@protoc_insertion_point(destructor:bgs.protocol.TimeSeriesId)
  SharedDtor();
}

void TimeSeriesId::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TimeSeriesId::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TimeSeriesId::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TimeSeriesId_descriptor_;
}

const TimeSeriesId& TimeSeriesId::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ets_5ftypes_2eproto();
  return *default_instance_;
}

TimeSeriesId* TimeSeriesId::default_instance_ = NULL;

TimeSeriesId* TimeSeriesId::New() const {
  return new TimeSeriesId;
}

void TimeSeriesId::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TimeSeriesId*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(epoch_, position_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TimeSeriesId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bgs.protocol.TimeSeriesId)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 epoch = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &epoch_)));
          set_has_epoch();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_position;
        break;
      }

      // optional uint64 position = 2;
      case 2: {
        if (tag == 16) {
         parse_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &position_)));
          set_has_position();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bgs.protocol.TimeSeriesId)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bgs.protocol.TimeSeriesId)
  return false;
#undef DO_
}

void TimeSeriesId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bgs.protocol.TimeSeriesId)
  // optional uint64 epoch = 1;
  if (has_epoch()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->epoch(), output);
  }

  // optional uint64 position = 2;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->position(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bgs.protocol.TimeSeriesId)
}

::google::protobuf::uint8* TimeSeriesId::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bgs.protocol.TimeSeriesId)
  // optional uint64 epoch = 1;
  if (has_epoch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->epoch(), target);
  }

  // optional uint64 position = 2;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->position(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bgs.protocol.TimeSeriesId)
  return target;
}

int TimeSeriesId::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 epoch = 1;
    if (has_epoch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->epoch());
    }

    // optional uint64 position = 2;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->position());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimeSeriesId::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TimeSeriesId* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TimeSeriesId*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TimeSeriesId::MergeFrom(const TimeSeriesId& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_epoch()) {
      set_epoch(from.epoch());
    }
    if (from.has_position()) {
      set_position(from.position());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TimeSeriesId::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeSeriesId::CopyFrom(const TimeSeriesId& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeSeriesId::IsInitialized() const {
  return true;
}

void TimeSeriesId::Swap(TimeSeriesId* other) {
  if (other != this) {
    std::swap(epoch_, other->epoch_);
    std::swap(position_, other->position_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TimeSeriesId::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TimeSeriesId_descriptor_;
  metadata.reflection = TimeSeriesId_reflection_;
  return metadata;
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace bgs

// @@protoc_insertion_point(global_scope)
