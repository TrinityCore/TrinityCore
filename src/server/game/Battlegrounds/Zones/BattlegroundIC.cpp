/*
 * Copyright (C) 2008-2016 TrinityCore <http://www.trinitycore.org/>
 * Copyright (C) 2005-2009 MaNGOS <http://getmangos.com/>
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the
 * Free Software Foundation; either version 2 of the License, or (at your
 * option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program. If not, see <http://www.gnu.org/licenses/>.
 */

#include "Player.h"
#include "Battleground.h"
#include "BattlegroundIC.h"
#include "Language.h"
#include "WorldPacket.h"
#include "GameObject.h"
#include "ObjectMgr.h"
#include "Vehicle.h"
#include "Transport.h"
#include "ScriptedCreature.h"

uint32 const BG_IC_Factions[BG_TEAMS_COUNT] =
{
    1732, // Alliance
    1735  // Horde
};

uint32 const MAX_REINFORCEMENTS = 300;

BattlegroundSpawnPoint const BG_IC_NpcSpawnlocs[MAX_NORMAL_NPCS_SPAWNS] =
{
    { NPC_OVERLORD_AGMAR,                  { 1295.44f, -765.733f, 70.0541f, 0.000000f }, RESPAWN_ONE_DAY },
    { NPC_HIGH_COMMANDER_HALFORD_WYRMBANE, { 224.983f, -831.573f, 60.9034f, 0.000000f }, RESPAWN_ONE_DAY },
    { NPC_KOR_KRON_GUARD,                  { 1296.01f, -773.256f, 69.9580f, 0.292168f }, RESPAWN_ONE_DAY },
    { NPC_KOR_KRON_GUARD,                  { 1295.94f, -757.756f, 69.9587f, 6.021650f }, RESPAWN_ONE_DAY },
    { NPC_KOR_KRON_GUARD,                  { 1295.09f, -760.927f, 69.9587f, 5.943110f }, RESPAWN_ONE_DAY },
    { NPC_KOR_KRON_GUARD,                  { 1295.13f, -769.700f, 69.9500f, 0.340000f }, RESPAWN_ONE_DAY },

    { NPC_SEVEN_TH_LEGION_INFANTRY,        { 223.969f, -822.958f, 60.8151f, 0.463370f }, RESPAWN_ONE_DAY },
    { NPC_SEVEN_TH_LEGION_INFANTRY,        { 224.211f, -826.952f, 60.8188f, 6.259610f }, RESPAWN_ONE_DAY },
    { NPC_SEVEN_TH_LEGION_INFANTRY,        { 223.119f, -838.386f, 60.8145f, 5.648570f }, RESPAWN_ONE_DAY },
    { NPC_SEVEN_TH_LEGION_INFANTRY,        { 223.889f, -835.102f, 60.8201f, 6.216420f }, RESPAWN_ONE_DAY },

    { NPC_KEEP_CANNON,                     { 415.825f, -754.634f, 87.7990f, 1.780240f }, RESPAWN_ONE_DAY },
    { NPC_KEEP_CANNON,                     { 410.142f, -755.332f, 87.7991f, 1.780240f }, RESPAWN_ONE_DAY },
    { NPC_KEEP_CANNON,                     { 424.330f, -879.352f, 88.0446f, 0.436332f }, RESPAWN_ONE_DAY },
    { NPC_KEEP_CANNON,                     { 425.602f, -786.646f, 87.7991f, 5.742130f }, RESPAWN_ONE_DAY },
    { NPC_KEEP_CANNON,                     { 426.743f, -884.939f, 87.9613f, 0.436332f }, RESPAWN_ONE_DAY },
    { NPC_KEEP_CANNON,                     { 404.736f, -755.495f, 87.7989f, 1.780240f }, RESPAWN_ONE_DAY },
    { NPC_KEEP_CANNON,                     { 428.375f, -780.797f, 87.7991f, 5.794490f }, RESPAWN_ONE_DAY },
    { NPC_KEEP_CANNON,                     { 429.175f, -890.436f, 88.0446f, 0.436332f }, RESPAWN_ONE_DAY },
    { NPC_KEEP_CANNON,                     { 430.872f, -775.278f, 87.7991f, 5.881760f }, RESPAWN_ONE_DAY },
    { NPC_KEEP_CANNON,                     { 408.056f, -911.283f, 88.0445f, 4.642580f }, RESPAWN_ONE_DAY },
    { NPC_KEEP_CANNON,                     { 413.609f, -911.566f, 88.0447f, 4.660030f }, RESPAWN_ONE_DAY },
    { NPC_KEEP_CANNON,                     { 402.554f, -910.557f, 88.0446f, 4.572760f }, RESPAWN_ONE_DAY },

    { NPC_KEEP_CANNON,                     { 1158.91f, -660.144f, 87.9332f, 0.750492f }, RESPAWN_ONE_DAY },
    { NPC_KEEP_CANNON,                     { 1156.22f, -866.809f, 87.8754f, 5.270890f }, RESPAWN_ONE_DAY },
    { NPC_KEEP_CANNON,                     { 1163.74f, -663.670f, 88.3571f, 0.558505f }, RESPAWN_ONE_DAY },
    { NPC_KEEP_CANNON,                     { 1135.18f, -683.896f, 88.0409f, 3.961900f }, RESPAWN_ONE_DAY },
    { NPC_KEEP_CANNON,                     { 1138.91f, -836.359f, 88.3728f, 2.181660f }, RESPAWN_ONE_DAY },
    { NPC_KEEP_CANNON,                     { 1162.08f, -863.717f, 88.3580f, 5.480330f }, RESPAWN_ONE_DAY },
    { NPC_KEEP_CANNON,                     { 1167.13f, -669.212f, 87.9682f, 0.383972f }, RESPAWN_ONE_DAY },
    { NPC_KEEP_CANNON,                     { 1137.72f, -688.517f, 88.4023f, 3.961900f }, RESPAWN_ONE_DAY },
    { NPC_KEEP_CANNON,                     { 1135.29f, -840.878f, 88.0252f, 2.303830f }, RESPAWN_ONE_DAY },
    { NPC_KEEP_CANNON,                     { 1144.33f, -833.309f, 87.9268f, 2.146750f }, RESPAWN_ONE_DAY },
    { NPC_KEEP_CANNON,                     { 1142.59f, -691.946f, 87.9756f, 3.961900f }, RESPAWN_ONE_DAY },
    { NPC_KEEP_CANNON,                     { 1166.13f, -858.391f, 87.9653f, 5.637410f }, RESPAWN_ONE_DAY }
};

Position const BG_IC_WorkshopVehicles[5] =
{
    { 751.828100f, -852.732666f, 12.5250978f, 1.46607661f }, // Demolisher
    { 761.809000f, -854.227400f, 12.5263243f, 1.46607661f }, // Demolisher
    { 783.472200f, -853.960100f, 12.5477500f, 1.71042264f }, // Demolisher
    { 793.055542f, -852.718750f, 12.5671329f, 1.71042264f }, // Demolisher
    { 773.680542f, -884.092041f, 16.8090363f, 1.58824956f }  // Siege Engine
};

Position const BG_IC_DocksVehiclesGlaives[2] =
{
    { 779.312500f, -342.972229f, 12.2104874f, 4.712389f }, // Glaive Throwers
    { 790.029541f, -342.899323f, 12.2128582f, 4.712380f }  // Glaive Throwers
};

Position const BG_IC_DocksVehiclesCatapults[4] =
{
    { 757.283000f, -341.779500f, 12.2113762f, 4.729842f }, // Catapults
    { 766.947937f, -342.053833f, 12.2009945f, 4.694000f }, // Catapults
    { 800.378500f, -342.607635f, 12.1669979f, 4.677400f }, // Catapults
    { 810.725700f, -342.083344f, 12.1675768f, 4.660000f }  // Catapults
};

Position const BG_IC_HangarTrigger[MAX_TRIGGER_SPAWNS_PER_FACTION * BG_TEAMS_COUNT] =
{
    { 11.69965f,  0.034146f, 20.62076f, 3.211406f },
    { 7.305609f, -0.095246f, 34.51022f, 3.159046f }
};

Position const BG_IC_HangarCaptains[MAX_CAPTAIN_SPAWNS_PER_FACTION * BG_TEAMS_COUNT] =
{
    { 825.6667f, -994.005200f, 134.3569f, 3.403392f },
    { 53.65112f, -0.11392210f, 30.09546f, 3.106686f },
    { 826.2205f, -994.402800f, 134.2812f, 3.351032f },
    { 10.89952f,  4.88029700f, 20.49038f, 4.840575f }
};

BattlegroundGOSpawnPoint const BG_IC_ObjSpawnlocs[BG_IC_GO_MAX] =
{
    { GO_ALLIANCE_GATE_1,                        { 351.6146f, -762.7500f, 48.91625f,  4.71239000f }, {  0.000000000f,  0.000000000f, -0.70710660f, 0.707106900f }, RESPAWN_IMMEDIATELY },
    { GO_ALLIANCE_GATE_2,                        { 413.4792f, -833.9496f, 48.52376f,  3.14159300f }, {  0.000000000f,  0.000000000f, -1.00000000f, 0.000000000f }, RESPAWN_IMMEDIATELY },
    { GO_ALLIANCE_GATE_3,                        { 351.0243f, -903.3264f, 48.92472f,  1.57079600f }, {  0.000000000f,  0.000000000f,  0.70710660f, 0.707106900f }, RESPAWN_IMMEDIATELY },

    { GO_HORDE_GATE_1,                           { 1150.903f, -762.6059f, 47.50768f,  3.14159300f }, {  0.000000000f,  0.000000000f, -1.00000000f, 0.000000000f }, RESPAWN_IMMEDIATELY },
    { GO_HORDE_GATE_2,                           { 1218.743f, -851.1545f, 48.25328f,  4.71239000f }, {  0.000000000f,  0.000000000f, -0.70710660f, 0.707106900f }, RESPAWN_IMMEDIATELY },
    { GO_HORDE_GATE_3,                           { 1217.899f, -676.9479f, 47.63408f,  1.57079600f }, {  0.000000000f,  0.000000000f,  0.70710660f, 0.707106900f }, RESPAWN_IMMEDIATELY },

    { GO_REFINERY_BANNER,                        { 1269.502f, -400.8090f, 37.62525f,  4.52040600f }, {  0.000000000f,  0.000000000f, -0.77162360f, 0.636079400f }, RESPAWN_IMMEDIATELY },
    { GO_QUARRY_BANNER,                          { 251.0156f, -1159.316f, 17.23760f, -2.25147300f }, {  0.000000000f,  0.000000000f, -0.90258500f, 0.430511700f }, RESPAWN_IMMEDIATELY },
    { GO_DOCKS_BANNER,                           { 726.3850f, -360.2050f, 17.81530f,  4.66003000f }, {  0.000000000f,  0.000000000f, -0.72537420f, 0.688354700f }, RESPAWN_IMMEDIATELY },
    { GO_HANGAR_BANNER,                          { 807.7800f, -1000.070f, 132.3810f, -1.93731600f }, {  0.000000000f,  0.000000000f, -0.82412620f, 0.566406100f }, RESPAWN_IMMEDIATELY },
    { GO_WORKSHOP_BANNER,                        { 776.2290f, -804.2830f, 6.450520f,  1.60570200f }, {  0.000000000f,  0.000000000f,  0.71933940f, 0.694658800f }, RESPAWN_IMMEDIATELY },

    { GO_ALLIANCE_BANNER_REFINERY,               { 1269.502f, -400.8090f, 37.62525f,  4.52040600f }, {  0.000000000f,  0.000000000f, -0.77162360f, 0.636079400f }, RESPAWN_ONE_DAY     },
    { GO_ALLIANCE_BANNER_QUARRY,                 { 251.0156f, -1159.316f, 17.23760f, -2.25147300f }, {  0.000000000f,  0.000000000f, -0.90258500f, 0.430511700f }, RESPAWN_ONE_DAY     },
    { GO_ALLIANCE_BANNER_DOCKS,                  { 726.3850f, -360.2050f, 17.81530f, -1.60570200f }, {  0.000000000f,  0.000000000f, -0.71933940f, 0.694658800f }, RESPAWN_ONE_DAY     },
    { GO_ALLIANCE_BANNER_HANGAR,                 { 807.7800f, -1000.070f, 132.3810f, -1.91986200f }, {  0.000000000f,  0.000000000f, -0.81915190f, 0.573576700f }, RESPAWN_ONE_DAY     },
    { GO_ALLIANCE_BANNER_WORKSHOP,               { 776.2290f, -804.2830f, 6.450520f,  1.60570200f }, {  0.000000000f,  0.000000000f,  0.71933940f, 0.694658800f }, RESPAWN_ONE_DAY     },
    { GO_ALLIANCE_BANNER_GRAVEYARD_A,            { 299.1528f, -784.5886f, 48.91625f, -0.15707900f }, {  0.000000000f,  0.000000000f, -0.07845879f, 0.996917400f }, RESPAWN_IMMEDIATELY },
    { GO_ALLIANCE_BANNER_GRAVEYARD_H,            { 1284.755f, -705.6684f, 48.91626f,  3.19400200f }, {  0.000000000f,  0.000000000f, -0.99965670f, 0.026201650f }, RESPAWN_ONE_DAY     },

    { GO_ALLIANCE_BANNER_REFINERY_CONT,          { 1269.502f, -400.8090f, 37.62525f,  4.52040600f }, {  0.000000000f,  0.000000000f, -0.77162360f, 0.636079400f }, RESPAWN_ONE_DAY     },
    { GO_ALLIANCE_BANNER_QUARRY_CONT,            { 251.0156f, -1159.316f, 17.23760f,  4.03171200f }, {  0.000000000f,  0.000000000f, -0.90258500f, 0.430511700f }, RESPAWN_ONE_DAY     },
    { GO_ALLIANCE_BANNER_DOCKS_CONT,             { 726.3850f, -360.2050f, 17.81530f, -1.60570200f }, {  0.000000000f,  0.000000000f, -0.71933940f, 0.694658800f }, RESPAWN_ONE_DAY     },
    { GO_ALLIANCE_BANNER_HANGAR_CONT,            { 807.7800f, -1000.070f, 132.3810f,  4.36332400f }, {  0.000000000f,  0.000000000f, -0.81915190f, 0.573576700f }, RESPAWN_ONE_DAY     },
    { GO_ALLIANCE_BANNER_WORKSHOP_CONT,          { 776.2290f, -804.2830f, 6.450520f,  1.60570200f }, {  0.000000000f,  0.000000000f,  0.71933940f, 0.694658800f }, RESPAWN_ONE_DAY     },
    { GO_ALLIANCE_BANNER_GRAVEYARD_A_CONT,       { 299.1528f, -784.5886f, 48.91625f, -0.15707900f }, {  0.000000000f,  0.000000000f, -0.07845879f, 0.996917400f }, RESPAWN_ONE_DAY     },
    { GO_ALLIANCE_BANNER_GRAVEYARD_H_CONT,       { 1284.755f, -705.6684f, 48.91626f, -3.08918300f }, {  0.000000000f,  0.000000000f, -0.99965670f, 0.026201650f }, RESPAWN_ONE_DAY     },

    { GO_HORDE_BANNER_REFINERY_CONT,             { 1269.502f, -400.8090f, 37.62525f, -1.76278200f }, {  0.000000000f,  0.000000000f, -0.77162460f, 0.636078200f }, RESPAWN_ONE_DAY     },
    { GO_HORDE_BANNER_QUARRY_CONT,               { 251.0156f, -1159.316f, 17.23760f, -2.25147300f }, {  0.000000000f,  0.000000000f, -0.90258500f, 0.430511700f }, RESPAWN_ONE_DAY     },
    { GO_HORDE_BANNER_DOCKS_CONT,                { 726.3850f, -360.2050f, 17.81530f,  4.66003000f }, {  0.000000000f,  0.000000000f, -0.72537420f, 0.688354700f }, RESPAWN_ONE_DAY     },
    { GO_HORDE_BANNER_HANGAR_CONT,               { 807.7800f, -1000.070f, 132.3810f,  4.34587000f }, {  0.000000000f,  0.000000000f, -0.82412620f, 0.566406100f }, RESPAWN_ONE_DAY     },
    { GO_HORDE_BANNER_WORKSHOP_CONT,             { 776.2290f, -804.2830f, 6.450520f,  1.60570200f }, {  0.000000000f,  0.000000000f,  0.71933940f, 0.694658800f }, RESPAWN_ONE_DAY     },
    { GO_HORDE_BANNER_GRAVEYARD_A_CONT,          { 299.1528f, -784.5886f, 48.91625f, -0.15707900f }, {  0.000000000f,  0.000000000f, -0.07845879f, 0.996917400f }, RESPAWN_ONE_DAY     },
    { GO_HORDE_BANNER_GRAVEYARD_H_CONT,          { 1284.755f, -705.6684f, 48.91626f,  3.19400200f }, {  0.000000000f,  0.000000000f, -0.99965670f, 0.026201650f }, RESPAWN_ONE_DAY     },

    { GO_HORDE_BANNER_REFINERY,                  { 1269.502f, -400.8090f, 37.62525f,  4.52040600f }, {  0.000000000f,  0.000000000f, -0.77162360f, 0.636079400f }, RESPAWN_ONE_DAY     },
    { GO_HORDE_BANNER_QUARRY,                    { 251.0156f, -1159.316f, 17.23760f, -2.25147300f }, {  0.000000000f,  0.000000000f, -0.90258500f, 0.430511700f }, RESPAWN_ONE_DAY     },
    { GO_HORDE_BANNER_DOCKS,                     { 726.3850f, -360.2050f, 17.81530f, -1.60570200f }, {  0.000000000f,  0.000000000f, -0.71933940f, 0.694658800f }, RESPAWN_ONE_DAY     },
    { GO_HORDE_BANNER_HANGAR,                    { 807.7800f, -1000.070f, 132.3810f, -1.91986200f }, {  0.000000000f,  0.000000000f, -0.81915190f, 0.573576700f }, RESPAWN_ONE_DAY     },
    { GO_HORDE_BANNER_WORKSHOP,                  { 776.2290f, -804.2830f, 6.450520f,  1.60570200f }, {  0.000000000f,  0.000000000f,  0.71933940f, 0.694658800f }, RESPAWN_ONE_DAY     },
    { GO_HORDE_BANNER_GRAVEYARD_A,               { 299.1528f, -784.5886f, 48.91625f, -0.15707900f }, {  0.000000000f,  0.000000000f, -0.07845879f, 0.996917400f }, RESPAWN_ONE_DAY     },
    { GO_HORDE_BANNER_GRAVEYARD_H,               { 1284.755f, -705.6684f, 48.91626f,  3.19400200f }, {  0.000000000f,  0.000000000f, -0.99965670f, 0.026201650f }, RESPAWN_IMMEDIATELY },

    { GO_BENCH_1,                                { 834.2078f, -461.8256f, 22.30665f,  1.57079600f }, { -0.006171227f, -0.006170273f,  0.70707990f, 0.707079800f }, RESPAWN_IMMEDIATELY },
    { GO_BENCH_2,                                { 826.1529f, -461.9848f, 22.51492f,  1.57079600f }, { -0.006171227f, -0.006170273f,  0.70707990f, 0.707079800f }, RESPAWN_IMMEDIATELY },
    { GO_BENCH_3,                                { 817.4463f, -470.4697f, 25.37199f, -1.56206700f }, {  0.000000000f,  0.000000000f, -0.70401380f, 0.710186200f }, RESPAWN_IMMEDIATELY },
    { GO_BENCH_4,                                { 827.0010f, -474.4146f, 25.37199f,  1.57952200f }, {  0.000000000f,  0.000000000f,  0.71018510f, 0.704015000f }, RESPAWN_IMMEDIATELY },
    { GO_BENCH_5,                                { 819.2640f, -461.9612f, 22.76141f,  1.57952300f }, { -0.003044605f, -0.003125191f,  0.71017840f, 0.704008300f }, RESPAWN_IMMEDIATELY },

    { GO_BONFIRE_1,                              { 1162.913f, -734.5781f, 48.89479f,  3.29868700f }, {  0.000000000f,  0.000000000f, -0.99691680f, 0.078466430f }, RESPAWN_IMMEDIATELY },
    { GO_BONFIRE_2,                              { 1282.342f, -799.7623f, 87.13571f,  3.15032700f }, {  0.000000000f,  0.000000000f, -0.99999050f, 0.004367320f }, RESPAWN_IMMEDIATELY },
    { GO_BONFIRE_3,                              { 1358.061f, -732.1784f, 87.16064f, -3.13283600f }, { -0.005615234f, -0.006516457f, -0.99995330f, 0.004414829f }, RESPAWN_IMMEDIATELY },
    { GO_BONFIRE_4,                              { 1281.758f, -732.8443f, 87.15739f,  3.15072700f }, {  0.012359140f, -0.012251850f, -0.99983880f, 0.004414829f }, RESPAWN_IMMEDIATELY },
    { GO_BONFIRE_5,                              { 1358.815f, -797.8987f, 87.29533f,  3.13312300f }, {  0.006790161f, -0.017461780f,  0.99981500f, 0.004353651f }, RESPAWN_IMMEDIATELY },
    { GO_BONFIRE_6,                              { 1162.210f, -790.5434f, 48.91625f,  2.27765400f }, {  0.000000000f,  0.000000000f,  0.90814300f, 0.418660000f }, RESPAWN_IMMEDIATELY },

    { GO_BRAZIER_1,                              { 1262.208f, -751.3577f, 48.81328f,  2.26892500f }, {  0.000000000f,  0.000000000f,  0.90630720f, 0.422619500f }, RESPAWN_IMMEDIATELY },
    { GO_BRAZIER_2,                              { 1262.580f, -781.8611f, 48.81316f,  2.04203200f }, {  0.000000000f,  0.000000000f,  0.85263920f, 0.522500100f }, RESPAWN_IMMEDIATELY },
    { GO_BRAZIER_3,                              { 223.8184f, -839.3519f, 60.79163f,  1.09083000f }, {  0.000000000f,  0.000000000f,  0.51877310f, 0.854912000f }, RESPAWN_IMMEDIATELY },
    { GO_BRAZIER_4,                              { 224.2771f, -822.7701f, 60.79168f,  2.06821600f }, {  0.000000000f,  0.000000000f,  0.85940650f, 0.511292900f }, RESPAWN_IMMEDIATELY },

    { GO_CHAIR_1,                                { 632.8761f, -282.4611f, 5.453642f, -0.85109360f }, {  0.000000000f,  0.000000000f, -0.41281890f, 0.910813200f }, RESPAWN_IMMEDIATELY },
    { GO_CHAIR_2,                                { 635.7961f, -276.2948f, 5.486583f,  3.25045700f }, {  0.000000000f,  0.000000000f, -0.99851890f, 0.054405030f }, RESPAWN_IMMEDIATELY },
    { GO_CHAIR_3,                                { 762.2447f, -444.7946f, 22.85257f, -1.98094700f }, {  0.000000000f,  0.000000000f, -0.83628560f, 0.548294100f }, RESPAWN_IMMEDIATELY },
    { GO_CHAIR_4,                                { 632.1564f, -304.5027f, 5.487903f,  1.15603100f }, {  0.000000000f,  0.000000000f,  0.54636290f, 0.837548600f }, RESPAWN_IMMEDIATELY },
    { GO_CHAIR_5,                                { 643.8600f, -270.2039f, 5.488976f,  2.36903400f }, {  0.000000000f,  0.000000000f,  0.92631720f, 0.376744500f }, RESPAWN_IMMEDIATELY },
    { GO_CHAIR_6,                                { 902.2345f, -455.5080f, 18.39346f, -1.00356400f }, {  0.000000000f,  0.000000000f, -0.48098850f, 0.876726900f }, RESPAWN_IMMEDIATELY },
    { GO_CHAIR_7,                                { 810.2365f, -461.2003f, 25.46266f,  1.57079600f }, {  0.000000000f,  0.000000000f,  0.70710660f, 0.707106900f }, RESPAWN_IMMEDIATELY },
    { GO_CHAIR_3,                                { 1117.192f, -365.6744f, 18.84564f,  0.96865730f }, {  0.000000000f,  0.000000000f,  0.46561430f, 0.884987800f }, RESPAWN_IMMEDIATELY },
    { GO_CHAIR_6,                                { 1066.187f, -337.2144f, 18.82252f,  0.45378500f }, {  0.000000000f,  0.000000000f,  0.22495080f, 0.974370100f }, RESPAWN_IMMEDIATELY },
    { GO_CHAIR_8,                                { 798.3239f, -444.9509f, 22.56008f, -1.02101600f }, {  0.000000000f,  0.000000000f, -0.48862080f, 0.872496300f }, RESPAWN_IMMEDIATELY },
    { GO_CHAIR_8,                                { 1081.805f, -358.6367f, 18.55315f,  1.92858800f }, {  0.000000000f,  0.000000000f,  0.82164670f, 0.569997100f }, RESPAWN_IMMEDIATELY },
    { GO_CHAIR_9,                                { 814.9309f, -470.8155f, 33.63731f, -3.12412300f }, {  0.000000000f,  0.000000000f, -0.99996190f, 0.008734641f }, RESPAWN_IMMEDIATELY },

    { GO_DOODAD_HU_PORTCULLIS01,                 { 401.0240f, -780.7238f, 49.94827f,  3.75422300f }, {  0.000000000f,  0.000000000f, -0.95345120f, 0.301547500f }, RESPAWN_IMMEDIATELY },
    { GO_DOODAD_HU_PORTCULLIS01,                 { 399.8019f, -885.2075f, 50.19387f,  2.51599600f }, {  0.000000000f,  0.000000000f,  0.95147610f, 0.307722700f }, RESPAWN_IMMEDIATELY },

    { GO_DOODAD_ND_HUMAN_GATE_CLOSEDFX_DOOR01,   { 413.4791f, -833.9496f, 48.52376f,  3.14159300f }, {  0.000000000f,  0.000000000f, -1.00000000f, 0.000000000f }, RESPAWN_IMMEDIATELY },
    { GO_DOODAD_ND_HUMAN_GATE_CLOSEDFX_DOOR01,   { 351.6146f, -762.7500f, 48.91625f, -1.57079300f }, {  0.000000000f,  0.000000000f, -0.70710560f, 0.707107900f }, RESPAWN_IMMEDIATELY },
    { GO_DOODAD_ND_HUMAN_GATE_CLOSEDFX_DOOR01,   { 351.0243f, -903.3264f, 48.92472f,  1.57079600f }, {  0.000000000f,  0.000000000f,  0.70710660f, 0.707106900f }, RESPAWN_IMMEDIATELY },

    { GO_DOODAD_PORTCULLISACTIVE01,              { 288.1597f, -832.5953f, 51.41085f, -0.02617911f }, {  0.000000000f,  0.000000000f, -0.01308918f, 0.999914300f }, RESPAWN_IMMEDIATELY },
    { GO_DOODAD_PORTCULLISACTIVE02,              { 273.0327f, -832.1992f, 51.41085f, -0.02617911f }, {  0.000000000f,  0.000000000f, -0.01308918f, 0.999914300f }, RESPAWN_IMMEDIATELY },

    { GO_DOODAD_VR_PORTCULLIS01,                 { 1156.886f, -843.9983f, 48.63224f,  0.73293400f }, {  0.000000000f,  0.000000000f,  0.35831930f, 0.933599100f }, RESPAWN_IMMEDIATELY },
    { GO_DOODAD_VR_PORTCULLIS01,                 { 1157.047f, -682.3604f, 48.63225f, -0.82913240f }, {  0.000000000f,  0.000000000f, -0.40279290f, 0.915291100f }, RESPAWN_IMMEDIATELY },

    { GO_FLAGPOLE_1,                             { 1269.502f, -400.8090f, 37.62525f, -1.76278200f }, {  0.000000000f,  0.000000000f, -0.77162460f, 0.636078200f }, RESPAWN_IMMEDIATELY },
    { GO_FLAGPOLE_2,                             { 1284.755f, -705.6684f, 48.91626f, -3.08918300f }, {  0.000000000f,  0.000000000f, -0.99965670f, 0.026201650f }, RESPAWN_IMMEDIATELY },
    { GO_FLAGPOLE_2,                             { 299.1528f, -784.5886f, 48.91625f, -0.15707900f }, {  0.000000000f,  0.000000000f, -0.07845879f, 0.996917400f }, RESPAWN_IMMEDIATELY },
    { GO_FLAGPOLE_1,                             { 726.3850f, -360.2050f, 17.81530f, -1.60570200f }, {  0.000000000f,  0.000000000f, -0.71933940f, 0.694658800f }, RESPAWN_IMMEDIATELY },
    { GO_FLAGPOLE_1,                             { 807.7795f, -1000.068f, 132.3814f, -1.91986200f }, {  0.000000000f,  0.000000000f, -0.81915190f, 0.573576700f }, RESPAWN_IMMEDIATELY },
    { GO_FLAGPOLE_1,                             { 776.2290f, -804.2830f, 6.450520f,  1.60570200f }, {  0.000000000f,  0.000000000f,  0.71933940f, 0.694658800f }, RESPAWN_IMMEDIATELY },
    { GO_FLAGPOLE_1,                             { 251.0156f, -1159.316f, 17.23760f, -2.25147300f }, {  0.000000000f,  0.000000000f, -0.90258500f, 0.430511700f }, RESPAWN_IMMEDIATELY },

    { GO_HORDE_KEEP_PORTCULLIS,                  { 1283.046f, -765.8785f, 50.82972f,  3.15032700f }, {  0.000000000f,  0.000000000f, -0.99999050f, 0.004367320f }, RESPAWN_IMMEDIATELY },

    { GO_STOVE_1,                                { 903.2907f, -457.3448f, 18.13562f,  2.23401800f }, {  0.000000000f,  0.000000000f,  0.89879320f, 0.438372800f }, RESPAWN_IMMEDIATELY },
    { GO_STOVE_2,                                { 761.4622f, -446.6838f, 22.56018f,  0.24434360f }, {  0.000000000f,  0.000000000f,  0.12186810f, 0.992546300f }, RESPAWN_IMMEDIATELY },
    { GO_STOVE_1,                                { 1068.131f, -336.3729f, 18.56468f, -2.59181100f }, {  0.000000000f,  0.000000000f, -0.96245480f, 0.271442000f }, RESPAWN_IMMEDIATELY },
    { GO_STOVE_2,                                { 1118.321f, -363.9691f, 18.55324f, -3.08918300f }, {  0.000000000f,  0.000000000f, -0.99965670f, 0.026201650f }, RESPAWN_IMMEDIATELY },

    { GO_HUGE_SEAFORIUM_BOMB_A,                  { 297.3212f, -851.3212f, 48.91627f, -0.94247660f }, {  0.000000000f,  0.000000000f, -0.45399000f, 0.891006800f }, RESPAWN_ONE_DAY     },
    { GO_HUGE_SEAFORIUM_BOMB_A,                  { 298.1042f, -861.0261f, 48.91628f, -2.75761300f }, {  0.000000000f,  0.000000000f, -0.98162650f, 0.190812400f }, RESPAWN_ONE_DAY     },
    { GO_HUGE_SEAFORIUM_BOMB_A,                  { 300.3715f, -818.7327f, 48.91625f,  0.78539680f }, {  0.000000000f,  0.000000000f,  0.38268280f, 0.923879800f }, RESPAWN_ONE_DAY     },
    { GO_HUGE_SEAFORIUM_BOMB_A,                  { 302.1354f, -810.7083f, 48.91625f, -1.04719800f }, {  0.000000000f,  0.000000000f, -0.50000000f, 0.866025400f }, RESPAWN_ONE_DAY     },

    { GO_HUGE_SEAFORIUM_BOMB_H,                  { 1268.309f, -745.7830f, 48.91878f,  0.78539680f }, {  0.000000000f,  0.000000000f,  0.38268280f, 0.923879800f }, RESPAWN_ONE_DAY     },
    { GO_HUGE_SEAFORIUM_BOMB_H,                  { 1268.509f, -738.1215f, 48.91750f, -1.04719800f }, {  0.000000000f,  0.000000000f, -0.50000000f, 0.866025400f }, RESPAWN_ONE_DAY     },
    { GO_HUGE_SEAFORIUM_BOMB_H,                  { 1273.066f, -786.5729f, 48.94192f, -0.94247660f }, {  0.000000000f,  0.000000000f, -0.45399000f, 0.891006800f }, RESPAWN_ONE_DAY     },
    { GO_HUGE_SEAFORIUM_BOMB_H,                  { 1273.849f, -796.2778f, 48.93643f, -2.75761300f }, {  0.000000000f,  0.000000000f, -0.98162650f, 0.190812400f }, RESPAWN_ONE_DAY     },

    { GO_DOODAD_ND_WINTERORC_WALL_GATEFX_DOOR01, { 1150.903f, -762.6059f, 47.50768f,  3.14159300f }, {  0.000000000f,  0.000000000f, -1.00000000f, 0.000000000f }, RESPAWN_IMMEDIATELY },
    { GO_DOODAD_ND_WINTERORC_WALL_GATEFX_DOOR01, { 1217.899f, -676.9479f, 47.63408f,  1.57079300f }, {  0.000000000f,  0.000000000f,  0.70710560f, 0.707107900f }, RESPAWN_IMMEDIATELY },
    { GO_DOODAD_ND_WINTERORC_WALL_GATEFX_DOOR01, { 1218.743f, -851.1545f, 48.25328f, -1.57079300f }, {  0.000000000f,  0.000000000f, -0.70710560f, 0.707107900f }, RESPAWN_IMMEDIATELY },

    { GO_SEAFORIUM_BOMBS,                        { 750.6007f, -864.5972f, 13.47541f,  1.93731200f }, {  0.000000000f,  0.000000000f,  0.82412530f, 0.566407600f }, 10                  },
    { GO_SEAFORIUM_BOMBS,                        { 785.5087f, -864.7153f, 13.39931f,  2.47836700f }, {  0.000000000f,  0.000000000f,  0.94551850f, 0.325568400f }, 10                  },

    { GO_ALLIANCE_GUNSHIP_PORTAL,                { 827.9583f, -994.4670f, 134.0712f,  0.00000000f }, {  0.000000000f,  0.000000000f,  0.00000000f, 1.000000000f }, RESPAWN_ONE_DAY     },
    { GO_HORDE_GUNSHIP_PORTAL,                   { 827.9219f, -993.3246f, 134.1972f,  3.14159300f }, {  0.000000000f,  0.000000000f, -1.00000000f, 0.000000000f }, RESPAWN_ONE_DAY     },
    { GO_ALLIANCE_GUNSHIP_PORTAL,                { 738.6129f, -1106.583f, 134.7453f,  2.54817900f }, {  0.000000000f,  0.000000000f,  0.95630460f, 0.292372300f }, RESPAWN_ONE_DAY     },
    { GO_HORDE_GUNSHIP_PORTAL,                   { 739.0226f, -1106.661f, 134.7551f,  2.42600800f }, {  0.000000000f,  0.000000000f,  0.93667220f, 0.350207400f }, RESPAWN_ONE_DAY     },
    { GO_ALLIANCE_GUNSHIP_PORTAL,                { 672.2830f, -1156.995f, 133.7057f,  1.37880900f }, {  0.000000000f,  0.000000000f,  0.63607790f, 0.771624900f }, RESPAWN_ONE_DAY     },
    { GO_HORDE_GUNSHIP_PORTAL,                   { 672.0799f, -1156.776f, 133.7057f,  1.83259500f }, {  0.000000000f,  0.000000000f,  0.79335310f, 0.608761700f }, RESPAWN_ONE_DAY     },

    { GO_ALLIANCE_GUNSHIP_PORTAL_EFFECTS,        { 827.9618f, -994.4757f, 134.0703f,  3.14159300f }, {  0.000000000f,  0.000000000f, -1.00000000f, 0.000000000f }, RESPAWN_ONE_DAY     },
    { GO_HORDE_GUNSHIP_PORTAL_EFFECTS,           { 827.9236f, -993.2986f, 134.2002f,  3.14159300f }, {  0.000000000f,  0.000000000f, -1.00000000f, 0.000000000f }, RESPAWN_ONE_DAY     },
    { GO_ALLIANCE_GUNSHIP_PORTAL_EFFECTS,        { 738.7952f, -1106.747f, 134.7430f,  3.14159300f }, {  0.000000000f,  0.000000000f, -1.00000000f, 0.000000000f }, RESPAWN_ONE_DAY     },
    { GO_HORDE_GUNSHIP_PORTAL_EFFECTS,           { 739.0139f, -1106.661f, 134.7548f,  3.14159300f }, {  0.000000000f,  0.000000000f, -1.00000000f, 0.000000000f }, RESPAWN_ONE_DAY     },
    { GO_ALLIANCE_GUNSHIP_PORTAL_EFFECTS,        { 672.2639f, -1157.035f, 133.7057f,  3.14159300f }, {  0.000000000f,  0.000000000f, -1.00000000f, 0.000000000f }, RESPAWN_ONE_DAY     },
    { GO_HORDE_GUNSHIP_PORTAL_EFFECTS,           { 672.0868f, -1156.786f, 133.7057f,  3.14159300f }, {  0.000000000f,  0.000000000f, -1.00000000f, 0.000000000f }, RESPAWN_ONE_DAY     },

    { GO_TELEPORTER_1,                           { 1143.250f, -779.5989f, 48.62896f,  1.64060700f }, {  0.000000000f,  0.000000000f,  0.73135280f, 0.681999300f }, RESPAWN_IMMEDIATELY },
    { GO_TELEPORTER_1,                           { 1236.531f, -669.4149f, 48.27285f,  0.10471930f }, {  0.000000000f,  0.000000000f,  0.05233574f, 0.998629600f }, RESPAWN_IMMEDIATELY },
    { GO_TELEPORTER_2,                           { 1233.273f, -844.5261f, 48.88242f,  6.26573300f }, {  0.000000000f,  0.000000000f, -0.00872612f, 0.999961900f }, RESPAWN_IMMEDIATELY },
    { GO_TELEPORTER_3,                           { 311.9201f, -913.9722f, 48.81592f,  3.08918300f }, {  0.000000000f,  0.000000000f,  0.99965670f, 0.026201650f }, RESPAWN_IMMEDIATELY },
    { GO_TELEPORTER_2,                           { 1235.528f, -683.8715f, 49.30397f,  3.19400200f }, {  0.000000000f,  0.000000000f, -0.99965670f, 0.026201650f }, RESPAWN_IMMEDIATELY },
    { GO_TELEPORTER_4,                           { 397.0885f, -859.3820f, 48.89931f,  1.64060700f }, {  0.000000000f,  0.000000000f,  0.73135280f, 0.681999300f }, RESPAWN_IMMEDIATELY },
    { GO_TELEPORTER_3,                           { 324.6354f, -749.1285f, 49.36018f,  0.01745246f }, {  0.000000000f,  0.000000000f,  0.00872612f, 0.999961900f }, RESPAWN_IMMEDIATELY },
    { GO_TELEPORTER_3,                           { 425.6754f, -857.0903f, 48.51042f,  4.67748400f }, {  0.000000000f,  0.000000000f, -0.71933940f, 0.694658800f }, RESPAWN_IMMEDIATELY },
    { GO_TELEPORTER_4,                           { 323.5399f, -888.3611f, 48.91973f,  0.03490625f }, {  0.000000000f,  0.000000000f,  0.01745224f, 0.999847700f }, RESPAWN_IMMEDIATELY },
    { GO_TELEPORTER_4,                           { 326.2847f, -777.3663f, 49.02083f,  3.12412300f }, {  0.000000000f,  0.000000000f,  0.99996190f, 0.008734641f }, RESPAWN_IMMEDIATELY },
    { GO_TELEPORTER_1,                           { 1235.087f, -857.8976f, 48.91626f,  3.07176600f }, {  0.000000000f,  0.000000000f,  0.99939060f, 0.034906130f }, RESPAWN_IMMEDIATELY },
    { GO_TELEPORTER_2,                           { 1158.762f, -746.1823f, 48.62768f,  4.76475000f }, {  0.000000000f,  0.000000000f, -0.68835450f, 0.725374500f }, RESPAWN_IMMEDIATELY },

    { GO_TELEPORTER_EFFECTS_A,                   { 425.6858f, -857.0920f, 48.50996f,  4.66003000f }, {  0.000000000f,  0.000000000f, -0.72537420f, 0.688354700f }, RESPAWN_IMMEDIATELY }, // Teleporter Effects (Alliance)
    { GO_TELEPORTER_EFFECTS_A,                   { 324.6337f, -749.1476f, 49.35897f,  0.01745246f }, {  0.000000000f,  0.000000000f,  0.00872612f, 0.999961900f }, RESPAWN_IMMEDIATELY }, // Teleporter Effects (Alliance)
    { GO_TELEPORTER_EFFECTS_A,                   { 311.9115f, -913.9861f, 48.81566f,  3.08918300f }, {  0.000000000f,  0.000000000f,  0.99965670f, 0.026201650f }, RESPAWN_IMMEDIATELY }, // Teleporter Effects (Alliance)
    { GO_TELEPORTER_EFFECTS_A,                   { 326.2656f, -777.3472f, 49.02155f,  3.12412300f }, {  0.000000000f,  0.000000000f,  0.99996190f, 0.008734641f }, RESPAWN_IMMEDIATELY }, // Teleporter Effects (Alliance)
    { GO_TELEPORTER_EFFECTS_A,                   { 323.5504f, -888.3472f, 48.91979f,  0.01745246f }, {  0.000000000f,  0.000000000f,  0.00872612f, 0.999961900f }, RESPAWN_IMMEDIATELY }, // Teleporter Effects (Alliance)
    { GO_TELEPORTER_EFFECTS_A,                   { 397.1163f, -859.3785f, 48.89894f,  1.64060700f }, {  0.000000000f,  0.000000000f,  0.73135280f, 0.681999300f }, RESPAWN_IMMEDIATELY }, // Teleporter Effects (Alliance)

    { GO_TELEPORTER_EFFECTS_H,                   { 1143.247f, -779.6233f, 48.62914f,  1.62315600f }, {  0.000000000f,  0.000000000f,  0.72537420f, 0.688354700f }, RESPAWN_IMMEDIATELY }, // Teleporter Effects (Horde)
    { GO_TELEPORTER_EFFECTS_H,                   { 1158.641f, -746.1476f, 48.62769f,  4.78220300f }, {  0.000000000f,  0.000000000f, -0.68199830f, 0.731353800f }, RESPAWN_IMMEDIATELY }, // Teleporter Effects (Horde)
    { GO_TELEPORTER_EFFECTS_H,                   { 1233.247f, -844.5729f, 48.88357f,  0.01745246f }, {  0.000000000f,  0.000000000f,  0.00872612f, 0.999961900f }, RESPAWN_IMMEDIATELY }, // Teleporter Effects (Horde)
    { GO_TELEPORTER_EFFECTS_H,                   { 1235.071f, -857.9566f, 48.91626f,  3.05432700f }, {  0.000000000f,  0.000000000f,  0.99904820f, 0.043619260f }, RESPAWN_IMMEDIATELY }, // Teleporter Effects (Horde)
    { GO_TELEPORTER_EFFECTS_H,                   { 1236.458f, -669.3438f, 48.26841f,  0.08726600f }, {  0.000000000f,  0.000000000f,  0.04361916f, 0.999048200f }, RESPAWN_IMMEDIATELY }, // Teleporter Effects (Horde)
    { GO_TELEPORTER_EFFECTS_H,                   { 1235.595f, -683.8055f, 49.30275f,  3.21141900f }, {  0.000000000f,  0.000000000f, -0.99939060f, 0.034906130f }, RESPAWN_IMMEDIATELY }  // Teleporter Effects (Horde)
};

uint32 const BG_IC_GraveyardIds[MAX_NODE_TYPES + BG_TEAMS_COUNT] = { 0, 0, 1480, 1481, 1482, 1485, 1486, 1483, 1484 };

Position const BG_IC_SpiritGuidePos[MAX_NODE_TYPES + BG_TEAMS_COUNT] =
{
    { 0.00000f,  0.00000f, 0.0000f, 0.00f }, // no grave
    { 0.00000f,  0.00000f, 0.0000f, 0.00f }, // no grave
    { 629.570f, -279.830f, 11.330f, 0.00f }, // dock
    { 780.729f, -1103.08f, 135.51f, 2.27f }, // hangar
    { 775.740f, -652.770f, 9.3100f, 4.27f }, // workshop
    { 278.420f, -883.200f, 49.890f, 1.53f }, // alliance starting base
    { 1300.91f, -834.040f, 48.910f, 1.69f }, // horde starting base
    { 438.860f, -310.040f, 51.810f, 5.87f }, // last resort alliance
    { 1148.65f, -1250.98f, 16.600f, 1.74f }, // last resort horde
};

ICNodePoint const nodePointInitial[MAX_NODE_TYPES] =
{
    //gameobjectId                   gameobject_entry                faction        nodeType                 bannerId0 (STATE_UNCONTROLLED) bannerId1 (STATE_CONFLICT_A)        bannerId2 (STATE_CONFLICT_H)        bannerId3 (STATE_CONTROLLED_A) bannerId4 (STATE_CONTROLLED_H)    needChange timer last_entry   worldState0                       worldState1                     worldState2                     worldState3                       worldState4                         nodeState                string
    { BG_IC_GO_REFINERY_BANNER_N,    GO_REFINERY_BANNER,             TEAM_NEUTRAL,  NODE_TYPE_REFINERY,    { BG_IC_GO_REFINERY_BANNER_N,    BG_IC_GO_REFINERY_BANNER_CONT_A,    BG_IC_GO_REFINERY_BANNER_CONT_H,    BG_IC_GO_REFINERY_BANNER_A,    BG_IC_GO_REFINERY_BANNER_H     }, false,     0,    0,         { BG_IC_REFINERY_UNCONTROLLED,      BG_IC_REFINERY_CONFLICT_A,      BG_IC_REFINERY_CONFLICT_H,      BG_IC_REFINERY_CONTROLLED_A,      BG_IC_REFINERY_CONTROLLED_H      }, NODE_STATE_UNCONTROLLED, LANG_BG_IC_REFINERY      },
    { BG_IC_GO_QUARRY_BANNER_N,      GO_QUARRY_BANNER,               TEAM_NEUTRAL,  NODE_TYPE_QUARRY,      { BG_IC_GO_QUARRY_BANNER_N,      BG_IC_GO_QUARRY_BANNER_CONT_A,      BG_IC_GO_QUARRY_BANNER_CONT_H,      BG_IC_GO_QUARRY_BANNER_A,      BG_IC_GO_QUARRY_BANNER_H       }, false,     0,    0,         { BG_IC_QUARRY_UNCONTROLLED,        BG_IC_QUARRY_CONFLICT_A,        BG_IC_QUARRY_CONFLICT_H,        BG_IC_QUARRY_CONTROLLED_A,        BG_IC_QUARRY_CONTROLLED_H        }, NODE_STATE_UNCONTROLLED, LANG_BG_IC_QUARRY        },
    { BG_IC_GO_DOCKS_BANNER_N,       GO_DOCKS_BANNER,                TEAM_NEUTRAL,  NODE_TYPE_DOCKS,       { BG_IC_GO_DOCKS_BANNER_N,       BG_IC_GO_DOCKS_BANNER_CONT_A,       BG_IC_GO_DOCKS_BANNER_CONT_H,       BG_IC_GO_DOCKS_BANNER_A,       BG_IC_GO_DOCKS_BANNER_H        }, false,     0,    0,         { BG_IC_DOCKS_UNCONTROLLED,         BG_IC_DOCKS_CONFLICT_A,         BG_IC_DOCKS_CONFLICT_H,         BG_IC_DOCKS_CONTROLLED_A,         BG_IC_DOCKS_CONTROLLED_H         }, NODE_STATE_UNCONTROLLED, LANG_BG_IC_DOCKS         },
    { BG_IC_GO_HANGAR_BANNER_N,      GO_HANGAR_BANNER,               TEAM_NEUTRAL,  NODE_TYPE_HANGAR,      { BG_IC_GO_HANGAR_BANNER_N,      BG_IC_GO_HANGAR_BANNER_CONT_A,      BG_IC_GO_HANGAR_BANNER_CONT_H,      BG_IC_GO_HANGAR_BANNER_A,      BG_IC_GO_HANGAR_BANNER_H       }, false,     0,    0,         { BG_IC_HANGAR_UNCONTROLLED,        BG_IC_HANGAR_CONFLICT_A,        BG_IC_HANGAR_CONFLICT_H,        BG_IC_HANGAR_CONTROLLED_A,        BG_IC_HANGAR_CONTROLLED_H        }, NODE_STATE_UNCONTROLLED, LANG_BG_IC_HANGAR        },
    { BG_IC_GO_WORKSHOP_BANNER_N,    GO_WORKSHOP_BANNER,             TEAM_NEUTRAL,  NODE_TYPE_WORKSHOP,    { BG_IC_GO_WORKSHOP_BANNER_N,    BG_IC_GO_WORKSHOP_BANNER_CONT_A,    BG_IC_GO_WORKSHOP_BANNER_CONT_H,    BG_IC_GO_WORKSHOP_BANNER_A,    BG_IC_GO_WORKSHOP_BANNER_H     }, false,     0,    0,         { BG_IC_WORKSHOP_UNCONTROLLED,      BG_IC_WORKSHOP_CONFLICT_A,      BG_IC_WORKSHOP_CONFLICT_H,      BG_IC_WORKSHOP_CONTROLLED_A,      BG_IC_WORKSHOP_CONTROLLED_H      }, NODE_STATE_UNCONTROLLED, LANG_BG_IC_WORKSHOP      },
    { BG_IC_GO_ALLIANCE_GRAVEYARD_A, GO_ALLIANCE_BANNER_GRAVEYARD_A, TEAM_ALLIANCE, NODE_TYPE_GRAVEYARD_A, { 0,                             BG_IC_GO_ALLIANCE_GRAVEYARD_CONT_A, BG_IC_GO_ALLIANCE_GRAVEYARD_CONT_H, BG_IC_GO_ALLIANCE_GRAVEYARD_A, BG_IC_GO_ALLIANCE_GRAVEYARD_H  }, false,     0,    0,         { BG_IC_ALLIANCE_KEEP_UNCONTROLLED, BG_IC_ALLIANCE_KEEP_CONFLICT_A, BG_IC_ALLIANCE_KEEP_CONFLICT_H, BG_IC_ALLIANCE_KEEP_CONTROLLED_A, BG_IC_ALLIANCE_KEEP_CONTROLLED_H }, NODE_STATE_CONTROLLED_A, LANG_BG_IC_ALLIANCE_KEEP },
    { BG_IC_GO_HORDE_GRAVEYARD_H,    GO_HORDE_BANNER_GRAVEYARD_H,    TEAM_HORDE,    NODE_TYPE_GRAVEYARD_H, { 0,                             BG_IC_GO_HORDE_GRAVEYARD_CONT_A,    BG_IC_GO_HORDE_GRAVEYARD_CONT_H,    BG_IC_GO_HORDE_GRAVEYARD_A,    BG_IC_GO_HORDE_GRAVEYARD_H     }, false,     0,    0,         { BG_IC_HORDE_KEEP_UNCONTROLLED,    BG_IC_HORDE_KEEP_CONFLICT_A,    BG_IC_HORDE_KEEP_CONFLICT_H,    BG_IC_HORDE_KEEP_CONTROLLED_A,    BG_IC_HORDE_KEEP_CONTROLLED_H    }, NODE_STATE_CONTROLLED_H, LANG_BG_IC_HORDE_KEEP    }
};

enum Events
{
    EVENT_CLOSE_DOORS = 1,
    EVENT_DESPAWN_FAKE_DOORS,
    EVENT_RESPAWN_DOCK_VEHICLES,
    EVENT_RESPAWN_WORKSHOP_VEHICLES,
    EVENT_UPDATE_RESOURCES
};

BattlegroundIC::BattlegroundIC()
{
    SetGameObjectsNumber(BG_IC_GO_MAX);
    SetCreaturesNumber(BG_IC_NPC_MAX);

    StartMessageIds[BG_STARTING_EVENT_FIRST]  = LANG_BG_IC_START_TWO_MINUTES;
    StartMessageIds[BG_STARTING_EVENT_SECOND] = LANG_BG_IC_START_ONE_MINUTE;
    StartMessageIds[BG_STARTING_EVENT_THIRD]  = LANG_BG_IC_START_HALF_MINUTE;
    StartMessageIds[BG_STARTING_EVENT_FOURTH] = LANG_BG_IC_HAS_BEGUN;

    for (uint8 i = 0; i < BG_TEAMS_COUNT; ++i)
        factionReinforcements[i] = MAX_REINFORCEMENTS;

    for (uint8 i = 0; i < BG_IC_MAXDOOR; ++i)
        GateStatus[i] = BG_IC_GATE_OK;

    for (uint8 i = NODE_TYPE_REFINERY; i < MAX_NODE_TYPES; ++i)
        nodePoint[i] = nodePointInitial[i];
}

BattlegroundIC::~BattlegroundIC() { }

void BattlegroundIC::HandlePlayerResurrect(Player* player)
{
    if (nodePoint[NODE_TYPE_QUARRY].nodeState == (player->GetTeamId() == TEAM_ALLIANCE ? NODE_STATE_CONTROLLED_A : NODE_STATE_CONTROLLED_H))
        player->CastSpell(player, SPELL_QUARRY, true);

    if (nodePoint[NODE_TYPE_REFINERY].nodeState == (player->GetTeamId() == TEAM_ALLIANCE ? NODE_STATE_CONTROLLED_A : NODE_STATE_CONTROLLED_H))
        player->CastSpell(player, SPELL_OIL_REFINERY, true);
}

void BattlegroundIC::PostUpdateImpl(uint32 diff)
{
    if (GetStatus() != STATUS_IN_PROGRESS)
        return;

    _events.Update(diff);

    while (uint32 eventId = _events.ExecuteEvent())
    {
        switch (eventId)
        {
            case EVENT_CLOSE_DOORS:
                for (uint32 i = BG_IC_GO_DOODAD_ND_HUMAN_GATE_CLOSEDFX_DOOR01; i <= BG_IC_GO_DOODAD_ND_HUMAN_GATE_CLOSEDFX_DOOR03; ++i)
                    DoorClose(i);

                for (uint32 i = BG_IC_GO_DOODAD_ND_WINTERORC_WALL_GATEFX_DOOR01; i <= BG_IC_GO_DOODAD_ND_WINTERORC_WALL_GATEFX_DOOR03; ++i)
                    DoorClose(i);

                _events.ScheduleEvent(EVENT_DESPAWN_FAKE_DOORS, DESPAWN_FAKE_DOORS_TIME);
                break;
            case EVENT_DESPAWN_FAKE_DOORS:
                // [13] UpdateType: Values
                // [13] GUID: Full: 0xF11002FC7300140C Type: GameObject Entry: 195699 Low: 5132
                // [13] GAMEOBJECT_DISPLAYID: 8997/1.260748E-41
                // [13] GAMEOBJECT_FLAGS: 544/7.623064E-43
                // [13] GAMEOBJECT_BYTES_1: 4278198529/-1.703125E+38
                for (uint32 i = BG_IC_GO_ALLIANCE_GATE_1; i < BG_IC_GO_ALLIANCE_GATE_1 + BG_IC_MAXDOOR; ++i)
                {
                    DoorClose(i);
                    if (GameObject* gate = GetBGObject(i, false))
                        gate->SetDestructibleState(GO_DESTRUCTIBLE_DAMAGED);
                }

                // sends SMSG_GAMEOBJECT_DESPAWN_ANIM
                for (uint32 i = BG_IC_GO_DOODAD_ND_HUMAN_GATE_CLOSEDFX_DOOR01; i <= BG_IC_GO_DOODAD_ND_HUMAN_GATE_CLOSEDFX_DOOR03; ++i)
                    DelObject(i);

                for (uint32 i = BG_IC_GO_DOODAD_ND_WINTERORC_WALL_GATEFX_DOOR01; i <= BG_IC_GO_DOODAD_ND_WINTERORC_WALL_GATEFX_DOOR03; ++i)
                    DelObject(i);
                break;
            case EVENT_RESPAWN_DOCK_VEHICLES:
            {
                ICNodePoint const* docks = nodePoint + NODE_TYPE_DOCKS;
                if (docks->nodeState == NODE_STATE_CONTROLLED_A || docks->nodeState == NODE_STATE_CONTROLLED_H)
                {
                    // we need to confirm this, i am not sure if this every 3 minutes
                    for (uint8 u = (docks->faction == TEAM_ALLIANCE ? BG_IC_NPC_CATAPULT_1_A : BG_IC_NPC_CATAPULT_1_H); u <= (docks->faction == TEAM_ALLIANCE ? BG_IC_NPC_CATAPULT_4_A : BG_IC_NPC_CATAPULT_4_H); ++u)
                    {
                        if (Creature* catapult = GetBGCreature(u, false))
                        {
                            if (!catapult->IsAlive())
                                catapult->Respawn(true);
                        }
                    }

                    // we need to confirm this is blizzlike, not sure if it is every 3 minutes
                    for (uint8 u = (docks->faction == TEAM_ALLIANCE ? BG_IC_NPC_GLAIVE_THROWER_1_A : BG_IC_NPC_GLAIVE_THROWER_1_H); u <= (docks->faction == TEAM_ALLIANCE ? BG_IC_NPC_GLAIVE_THROWER_2_A : BG_IC_NPC_GLAIVE_THROWER_2_H); ++u)
                    {
                        if (Creature* glaiveThrower = GetBGCreature(u, false))
                        {
                            if (!glaiveThrower->IsAlive())
                                glaiveThrower->Respawn(true);
                        }
                    }
                }
                _events.Repeat(DOCKS_UPDATE_TIME);
                break;
            }
            case EVENT_RESPAWN_WORKSHOP_VEHICLES:
            {
                ICNodePoint const* workshop = nodePoint + NODE_TYPE_WORKSHOP;
                if (workshop->nodeState == NODE_STATE_CONTROLLED_A || workshop->nodeState == NODE_STATE_CONTROLLED_H)
                {
                    if (Creature* siege = GetBgMap()->GetCreature(SiegeEngineGUID[workshop->faction])) // this always should be true
                    {
                        if (siege->IsAlive())
                        {
                            if (siege->HasFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_NOT_SELECTABLE | UNIT_FLAG_CANNOT_SWIM | UNIT_FLAG_IMMUNE_TO_PC))
                                // following sniffs the vehicle always has UNIT_FLAG_CANNOT_SWIM
                                siege->RemoveFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_NOT_SELECTABLE | UNIT_FLAG_IMMUNE_TO_PC);
                            else
                                siege->SetHealth(siege->GetMaxHealth());
                        }
                        else
                            siege->Respawn(true);
                    }

                    // we need to confirm if it is every 3 minutes
                    for (uint8 u = (workshop->faction == TEAM_ALLIANCE ? BG_IC_NPC_DEMOLISHER_1_A : BG_IC_NPC_DEMOLISHER_1_H); u <= (workshop->faction == TEAM_ALLIANCE ? BG_IC_NPC_DEMOLISHER_4_A : BG_IC_NPC_DEMOLISHER_4_H); ++u)
                    {
                        if (Creature* demolisher = GetBGCreature(u))
                        {
                            if (!demolisher->IsAlive())
                                demolisher->Respawn(true);
                        }
                    }
                }
                _events.Repeat(WORKSHOP_UPDATE_TIME);
                break;
            }
            case EVENT_UPDATE_RESOURCES:
                for (uint8 i = NODE_TYPE_REFINERY; i <= NODE_TYPE_QUARRY; ++i)
                {
                    ICNodePoint const* currentNode = nodePoint + i;
                    if (currentNode->nodeState == NODE_STATE_CONTROLLED_A || currentNode->nodeState == NODE_STATE_CONTROLLED_H)
                    {
                        ++factionReinforcements[currentNode->faction];
                        RewardHonorToTeam(RESOURCE_HONOR_AMOUNT, currentNode->faction == TEAM_ALLIANCE ? ALLIANCE : HORDE);
                        UpdateWorldState((currentNode->faction == TEAM_ALLIANCE ? BG_IC_WS_ALLIANCE_REINFORCEMENTS : BG_IC_WS_HORDE_REINFORCEMENTS), factionReinforcements[currentNode->faction]);
                    }
                }
                _events.Repeat(IC_RESOURCE_TIME);
                break;
        }
    }

    // now check if nodes need to change banner state
    for (uint8 i = NODE_TYPE_REFINERY; i < MAX_NODE_TYPES; ++i)
    {
        ICNodePoint* currentNode = nodePoint + i;
        if (currentNode->needChange)
        {
            if (currentNode->timer <= diff)
            {
                uint32 nextBannerId = GetNextBanner(currentNode, currentNode->faction, true);
                currentNode->last_entry = currentNode->gameobject_entry;

                GameObject* nextBanner = GetBGObject(nextBannerId);
                ASSERT(nextBanner);
                currentNode->gameobject_entry = nextBanner->GetEntry();

                // now swap banners
                SpawnBGObject(currentNode->gameobjectId, RESPAWN_ONE_DAY);
                SpawnBGObject(nextBannerId, RESPAWN_IMMEDIATELY);
                currentNode->gameobjectId = nextBannerId;

                UpdateNodeWorldState(currentNode);
                HandleCapturedNodes(currentNode, false);

                SendMessage2ToAll(LANG_BG_IC_TEAM_HAS_TAKEN_NODE, CHAT_MSG_BG_SYSTEM_NEUTRAL, nullptr, (currentNode->faction == TEAM_ALLIANCE ? LANG_BG_IC_ALLIANCE : LANG_BG_IC_HORDE), currentNode->string);

                currentNode->timer = 0;
                currentNode->needChange = false;
            }
            else
                currentNode->timer -= diff;
        }
    }
}

void BattlegroundIC::StartingEventCloseDoors() { }

void BattlegroundIC::StartingEventOpenDoors()
{
    for (uint8 i = BG_IC_GO_DOODAD_ND_HUMAN_GATE_CLOSEDFX_DOOR01; i <= BG_IC_GO_DOODAD_ND_HUMAN_GATE_CLOSEDFX_DOOR03; ++i)
        DoorOpen(i);

    for (uint8 i = BG_IC_GO_DOODAD_ND_WINTERORC_WALL_GATEFX_DOOR01; i <= BG_IC_GO_DOODAD_ND_WINTERORC_WALL_GATEFX_DOOR03; ++i)
        DoorOpen(i);

    for (uint8 i = BG_IC_GO_DOODAD_HU_PORTCULLIS01_1; i <= BG_IC_GO_DOODAD_HU_PORTCULLIS01_2; ++i)
        DoorOpen(i);

    for (uint8 i = BG_IC_GO_DOODAD_VR_PORTCULLIS01_1; i <= BG_IC_GO_DOODAD_VR_PORTCULLIS01_2; ++i)
        DoorOpen(i);

    // schedule door close in 30 sec
    _events.ScheduleEvent(EVENT_CLOSE_DOORS, CLOSE_DOORS_TIME);

    for (uint8 i = BG_IC_GO_TELEPORTER_1_1; i < BG_IC_GO_TELEPORTER_1_1 + MAX_FORTRESS_TELEPORTERS_SPAWNS; ++i)
        if (GameObject* teleporter = GetBGObject(i, false))
            teleporter->RemoveFlag(GAMEOBJECT_FLAGS, GO_FLAG_NOT_SELECTABLE);

    for (uint8 i = BG_IC_GO_TELEPORTER_EFFECTS_A_1; i < BG_IC_GO_TELEPORTER_EFFECTS_A_1 + MAX_FORTRESS_TELEPORTER_EFFECTS_SPAWNS; ++i)
        if (GameObject* teleporterEffect = GetBGObject(i, false))
            teleporterEffect->SetGoState(GO_STATE_ACTIVE);
}

void BattlegroundIC::AddPlayer(Player* player)
{
    Battleground::AddPlayer(player);
    PlayerScores[player->GetGUID().GetCounter()] = new BattlegroundICScore(player->GetGUID());

    if (nodePoint[NODE_TYPE_QUARRY].nodeState == NODE_STATE_CONTROLLED + player->GetTeamId())
        player->CastSpell(player, SPELL_QUARRY, true);

    if (nodePoint[NODE_TYPE_REFINERY].nodeState == NODE_STATE_CONTROLLED + player->GetTeamId())
        player->CastSpell(player, SPELL_OIL_REFINERY, true);
}

void BattlegroundIC::RemovePlayer(Player* player, ObjectGuid /*guid*/, uint32 /*team*/)
{
    if (player)
    {
        player->RemoveAura(SPELL_QUARRY);
        player->RemoveAura(SPELL_OIL_REFINERY);
    }
}

void BattlegroundIC::HandleAreaTrigger(Player* player, uint32 trigger)
{
    // this is wrong way to implement these things. On official it done by gameobject spell cast.
    if (GetStatus() != STATUS_IN_PROGRESS)
        return;

    /// @hack: this spell should be cast by npc 22515 (World Trigger) and not by the player
    if (trigger == 5555 && player->GetTeamId() == TEAM_HORDE)
    {
        if (GateStatus[BG_IC_A_FRONT] != BG_IC_GATE_DESTROYED
            && GateStatus[BG_IC_A_WEST] != BG_IC_GATE_DESTROYED
            && GateStatus[BG_IC_A_EAST] != BG_IC_GATE_DESTROYED)
        player->CastSpell(player, SPELL_BACK_DOOR_JOB_ACHIEVEMENT, true);
    }
    else if (trigger == 5535 && player->GetTeamId() == TEAM_ALLIANCE)
    {
        if (GateStatus[BG_IC_H_FRONT] != BG_IC_GATE_DESTROYED
            && GateStatus[BG_IC_H_WEST] != BG_IC_GATE_DESTROYED
            && GateStatus[BG_IC_H_EAST] != BG_IC_GATE_DESTROYED)
        player->CastSpell(player, SPELL_BACK_DOOR_JOB_ACHIEVEMENT, true);
    }
}

void BattlegroundIC::FillInitialWorldStates(WorldPacket& data)
{
    data << uint32(BG_IC_WS_REINFORCEMENTS_SHOW_A) << uint32(1);
    data << uint32(BG_IC_WS_REINFORCEMENTS_SHOW_H) << uint32(1);
    data << uint32(BG_IC_WS_ALLIANCE_REINFORCEMENTS) << uint32(factionReinforcements[TEAM_ALLIANCE]);
    data << uint32(BG_IC_WS_HORDE_REINFORCEMENTS) << uint32(factionReinforcements[TEAM_HORDE]);

    for (uint8 i = 0; i < MAX_FORTRESS_GATES_SPAWNS; ++i)
    {
        BattlegroundGOSpawnPoint const& door = BG_IC_ObjSpawnlocs[i];
        uint32 uws = GetWorldStateFromGateEntry(door.Entry, GateStatus[GetGateIDFromEntry(door.Entry)] == BG_IC_GATE_DESTROYED);
        data << uint32(uws) << uint32(1);
    }

    for (uint8 i = 0; i < MAX_NODE_TYPES; ++i)
        data << uint32(nodePoint[i].worldStates[nodePoint[i].nodeState]) << uint32(1);
}

bool BattlegroundIC::SetupBattleground()
{
    for (uint8 i = 0; i <= BG_IC_GO_DOODAD_ND_WINTERORC_WALL_GATEFX_DOOR03; ++i)
    {
        BattlegroundGOSpawnPoint const& object = BG_IC_ObjSpawnlocs[i];
        if (!AddObject(i, object.Entry, object.Pos, object.Rot, object.SpawnTime))
        {
            TC_LOG_ERROR("bg.battleground", "Isle of Conquest: There was an error spawning gameobject %u. Battleground not Created!", object.Entry);
            return false;
        }
    }

    for (uint8 i = BG_IC_GO_TELEPORTER_1_1; i < BG_IC_GO_TELEPORTER_1_1 + MAX_FORTRESS_TELEPORTERS_SPAWNS; ++i)
    {
        BattlegroundGOSpawnPoint const& teleportSpawn = BG_IC_ObjSpawnlocs[i];
        GameObject* teleporter = AddObject(i, teleportSpawn.Entry, teleportSpawn.Pos, teleportSpawn.Rot, teleportSpawn.SpawnTime);
        if (!teleporter)
        {
            TC_LOG_ERROR("bg.battleground", "Isle of Conquest: There was an error spawning gameobject %u. Battleground not Created!", teleportSpawn.Entry);
            return false;
        }

        teleporter->SetFlag(GAMEOBJECT_FLAGS, GO_FLAG_NOT_SELECTABLE);
    }

    for (uint8 i = BG_IC_GO_TELEPORTER_EFFECTS_A_1; i < BG_IC_GO_TELEPORTER_EFFECTS_A_1 + MAX_FORTRESS_TELEPORTER_EFFECTS_SPAWNS; ++i)
    {
        BattlegroundGOSpawnPoint const& teleporterEffect = BG_IC_ObjSpawnlocs[i];
        if (!AddObject(i, teleporterEffect.Entry, teleporterEffect.Pos, teleporterEffect.Rot, teleporterEffect.SpawnTime))
        {
            TC_LOG_ERROR("bg.battleground", "Isle of Conquest: There was an error spawning gameobject %u. Battleground not Created!", teleporterEffect.Entry);
            return false;
        }
    }

    for (uint8 i = BG_IC_GO_HANGAR_TELEPORTER_1_A; i < BG_IC_GO_HANGAR_TELEPORTER_1_A + MAX_HANGAR_TELEPORTERS_SPAWNS; ++i)
    {
        BattlegroundGOSpawnPoint const& teleporter = BG_IC_ObjSpawnlocs[i];
        if (!AddObject(i, teleporter.Entry, teleporter.Pos, teleporter.Rot, teleporter.SpawnTime))
        {
            TC_LOG_ERROR("bg.battleground", "Isle of Conquest: There was an error spawning gameobject %u. Battleground not Created!", teleporter.Entry);
            return false;
        }
    }

    for (uint8 i = BG_IC_GO_HANGAR_TELEPORTER_EFFECT_1_A; i < BG_IC_GO_HANGAR_TELEPORTER_EFFECT_1_A + MAX_HANGAR_TELEPORTER_EFFECTS_SPAWNS; ++i)
    {
        BattlegroundGOSpawnPoint const& teleporterEffect = BG_IC_ObjSpawnlocs[i];
        if (!AddObject(i, teleporterEffect.Entry, teleporterEffect.Pos, teleporterEffect.Rot, teleporterEffect.SpawnTime, GO_STATE_ACTIVE))
        {
            TC_LOG_ERROR("bg.battleground", "Isle of Conquest: There was an error spawning gameobject %u. Battleground not Created!", teleporterEffect.Entry);
            return false;
        }
    }

    for (uint8 i = BG_IC_NPC_KOR_KRON_GUARD_1; i <= BG_IC_NPC_KEEP_CANNON_24; ++i)
    {
        BattlegroundSpawnPoint const& creature = BG_IC_NpcSpawnlocs[i];
        if (!AddCreature(creature.Entry, i, creature.Pos, creature.SpawnTime))
        {
            TC_LOG_ERROR("bg.battleground", "Isle of Conquest: There was an error spawning creature %u", creature.Entry);
            return false;
        }
    }

    if (!AddSpiritGuide(BG_IC_NPC_SPIRIT_GUIDE_1+3, BG_IC_SpiritGuidePos[5], TEAM_ALLIANCE)
        || !AddSpiritGuide(BG_IC_NPC_SPIRIT_GUIDE_1+4, BG_IC_SpiritGuidePos[6], TEAM_HORDE)
        || !AddSpiritGuide(BG_IC_NPC_SPIRIT_GUIDE_1+5, BG_IC_SpiritGuidePos[7], TEAM_ALLIANCE)
        || !AddSpiritGuide(BG_IC_NPC_SPIRIT_GUIDE_1+6, BG_IC_SpiritGuidePos[8], TEAM_HORDE))
    {
        TC_LOG_ERROR("bg.battleground", "Isle of Conquest: Failed to spawn initial spirit guide!");
        return false;
    }

    Transport* gunshipHorde = sTransportMgr->CreateTransport(GO_HORDE_GUNSHIP, 0, GetBgMap());
    Transport* gunshipAlliance = sTransportMgr->CreateTransport(GO_ALLIANCE_GUNSHIP, 0, GetBgMap());
    if (!gunshipAlliance || !gunshipHorde)
    {
        TC_LOG_ERROR("bg.battleground", "Isle of Conquest: There was an error creating gunships!");
        return false;
    }

    GunshipGUID[TEAM_ALLIANCE] = gunshipAlliance->GetGUID();
    GunshipGUID[TEAM_HORDE] = gunshipHorde->GetGUID();

    gunshipHorde->EnableMovement(false);
    gunshipAlliance->EnableMovement(false);

    // setting correct factions for Keep Cannons
    for (uint8 i = BG_IC_NPC_KEEP_CANNON_1; i <= BG_IC_NPC_KEEP_CANNON_12; ++i)
        if (Creature* allianceCannon = GetBGCreature(i, false))
            allianceCannon->setFaction(BG_IC_Factions[TEAM_ALLIANCE]);

    for (uint8 i = BG_IC_NPC_KEEP_CANNON_13; i <= BG_IC_NPC_KEEP_CANNON_24; ++i)
        if (Creature* hordeCannon = GetBGCreature(i, false))
            hordeCannon->setFaction(BG_IC_Factions[TEAM_HORDE]);

    // correcting spawn time for keeps bombs
    for (uint8 i = BG_IC_GO_HUGE_SEAFORIUM_BOMBS_A_1; i <= BG_IC_GO_HUGE_SEAFORIUM_BOMBS_H_4; ++i)
        if (GameObject* seaforiumBomb = GetBGObject(i, false))
            seaforiumBomb->SetRespawnTime(BG_IC_ObjSpawnlocs[i].SpawnTime);

    _events.ScheduleEvent(EVENT_UPDATE_RESOURCES, IC_RESOURCE_TIME);
    return true;
}

void BattlegroundIC::HandleKillUnit(Creature* unit, Player* killer)
{
    if (GetStatus() != STATUS_IN_PROGRESS)
       return;

    uint32 entry = unit->GetEntry();
    if (entry == NPC_HIGH_COMMANDER_HALFORD_WYRMBANE)
    {
        RewardHonorToTeam(WINNER_HONOR_AMOUNT, HORDE);
        EndBattleground(HORDE);
    }
    else if (entry == NPC_OVERLORD_AGMAR)
    {
        RewardHonorToTeam(WINNER_HONOR_AMOUNT, ALLIANCE);
        EndBattleground(ALLIANCE);
    }

    //Achievement Mowed Down
    // TO-DO: This should be done on the script of each vehicle of the BG.
    if (unit->IsVehicle())
        killer->CastSpell(killer, SPELL_DESTROYED_VEHICLE_ACHIEVEMENT, true);
}

void BattlegroundIC::HandleKillPlayer(Player* player, Player* killer)
{
    if (GetStatus() != STATUS_IN_PROGRESS)
        return;

    Battleground::HandleKillPlayer(player, killer);

    --factionReinforcements[player->GetTeamId()];

    UpdateWorldState((player->GetTeamId() == TEAM_ALLIANCE ? BG_IC_WS_ALLIANCE_REINFORCEMENTS : BG_IC_WS_HORDE_REINFORCEMENTS), factionReinforcements[player->GetTeamId()]);

    // we must end the battleground
    if (factionReinforcements[player->GetTeamId()] < 1)
        EndBattleground(killer->GetTeam());
}

void BattlegroundIC::EndBattleground(uint32 winner)
{
    SendMessage2ToAll(LANG_BG_IC_TEAM_WINS, CHAT_MSG_BG_SYSTEM_NEUTRAL, nullptr, (winner == ALLIANCE ? LANG_BG_IC_ALLIANCE : LANG_BG_IC_HORDE));

    Battleground::EndBattleground(winner);
}

void BattlegroundIC::EventPlayerClickedOnFlag(Player* player, GameObject* target_obj)
{
    if (GetStatus() != STATUS_IN_PROGRESS)
        return;

    ICNodePoint* currentNode = nullptr;
    // All the node points are iterated to find the clicked one
    for (uint8 i = 0; i < MAX_NODE_TYPES; ++i)
    {
        if (nodePoint[i].gameobject_entry == target_obj->GetEntry())
        {
            currentNode = nodePoint + i;
            break;
        }
    }

    if (!currentNode)
        return;

    // THIS SHOULD NEEVEER HAPPEN
    if (currentNode->faction == player->GetTeamId())
        return;

    uint32 nextBannerId = GetNextBanner(currentNode, player->GetTeamId(), false);

    // we set the new settings of the nodePoint
    currentNode->faction = player->GetTeamId();
    currentNode->last_entry = currentNode->gameobject_entry;

    // this is just needed if the next banner is grey
    if (nextBannerId == currentNode->bannerIds[NODE_STATE_CONFLICT_A] || nextBannerId == currentNode->bannerIds[NODE_STATE_CONFLICT_H])
    {
        currentNode->timer = BANNER_STATE_CHANGE_TIME; // 1 minute for last change (real faction banner)
        currentNode->needChange = true;

        // if we are here means that the point has been lost, or it is the first capture
        if (currentNode->nodeType > NODE_TYPE_QUARRY)
        {
            uint32 spiritGuideId = BG_IC_NPC_SPIRIT_GUIDE_1 + currentNode->nodeType - (NODE_TYPE_QUARRY + 1);
            if (Creature* spiritGuide = GetBGCreature(spiritGuideId, false))
                RelocateDeadPlayers(spiritGuide->GetGUID());

            DelCreature(spiritGuideId);
        }

        UpdatePlayerScore(player, SCORE_BASES_ASSAULTED, 1);

        SendMessage2ToAll(LANG_BG_IC_TEAM_ASSAULTED_NODE_1, CHAT_MSG_BG_SYSTEM_NEUTRAL, player, currentNode->string);
        SendMessage2ToAll(LANG_BG_IC_TEAM_ASSAULTED_NODE_2, CHAT_MSG_BG_SYSTEM_NEUTRAL, player, currentNode->string, (player->GetTeamId() == TEAM_ALLIANCE ? LANG_BG_IC_ALLIANCE : LANG_BG_IC_HORDE));
        HandleContestedNodes(currentNode);
    }
    else if (nextBannerId == currentNode->bannerIds[NODE_STATE_CONTROLLED_A] || nextBannerId == currentNode->bannerIds[NODE_STATE_CONTROLLED_H]) // if we are going to spawn the definitve faction banner, we dont need the timer anymore
    {
        currentNode->timer = 0;
        currentNode->needChange = false;
        SendMessage2ToAll(LANG_BG_IC_TEAM_DEFENDED_NODE, CHAT_MSG_BG_SYSTEM_NEUTRAL, player, currentNode->string);
        HandleCapturedNodes(currentNode, true);
        UpdatePlayerScore(player, SCORE_BASES_DEFENDED, 1);
    }

    GameObject* nextBanner = GetBGObject(nextBannerId);
    ASSERT(nextBanner);
    currentNode->gameobject_entry = nextBanner->GetEntry();

    SpawnBGObject(currentNode->gameobjectId, RESPAWN_ONE_DAY);
    SpawnBGObject(nextBannerId, RESPAWN_IMMEDIATELY);
    currentNode->gameobjectId = nextBannerId;

    UpdateNodeWorldState(currentNode);
}

void BattlegroundIC::UpdateNodeWorldState(ICNodePoint* node)
{
    //updating worldstate
    if (node->gameobjectId == node->bannerIds[NODE_STATE_CONTROLLED_A])
        node->nodeState = NODE_STATE_CONTROLLED_A;
    else if (node->gameobjectId == node->bannerIds[NODE_STATE_CONFLICT_A])
        node->nodeState = NODE_STATE_CONFLICT_A;
    else if (node->gameobjectId == node->bannerIds[NODE_STATE_CONTROLLED_H])
        node->nodeState = NODE_STATE_CONTROLLED_H;
    else if (node->gameobjectId == node->bannerIds[NODE_STATE_CONFLICT_H])
        node->nodeState = NODE_STATE_CONFLICT_H;

    uint32 worldstate = node->worldStates[node->nodeState];
    // with this we are sure we dont bug the client
    for (uint8 i = 0; i < NODE_STATE_MAX; ++i)
    {
        if (node->worldStates[i] == worldstate)
            continue;

        UpdateWorldState(node->worldStates[i], 0);
    }

    UpdateWorldState(worldstate, 1);
}

uint32 BattlegroundIC::GetNextBanner(ICNodePoint const* node, TeamId team, bool returnDefinitve)
{
    // this is only used in the update map function
    if (returnDefinitve)
        // here is a special case, here we must return the definitve faction banner after the grey banner was spawned 1 minute
        return node->bannerIds[(team == TEAM_ALLIANCE ? NODE_STATE_CONTROLLED_A : NODE_STATE_CONTROLLED_H)];

    // there were no changes, this point has never been captured by any faction or at least clicked
    if (node->last_entry == 0)
        return node->bannerIds[(team == TEAM_ALLIANCE ? NODE_STATE_CONFLICT_A : NODE_STATE_CONFLICT_H)];

    // If the actual banner is the definitive faction banner, we must return the grey banner of the player's faction
    if (node->gameobjectId == node->bannerIds[NODE_STATE_CONTROLLED_A] || node->gameobjectId == node->bannerIds[NODE_STATE_CONTROLLED_H])
        return node->bannerIds[(team == TEAM_ALLIANCE ? NODE_STATE_CONFLICT_A : NODE_STATE_CONFLICT_H)];

    // If the actual banner is the grey faction banner, we must return the previous banner
    if (node->gameobjectId == node->bannerIds[NODE_STATE_CONFLICT_A] || node->gameobjectId == node->bannerIds[NODE_STATE_CONFLICT_H])
        return node->last_entry;

    // we should never be here...
    TC_LOG_ERROR("bg.battleground", "Isle Of Conquest: Unexpected return in GetNextBanner function (node %u)", node->gameobjectId);
    return 0;
}

uint32 BattlegroundIC::GetGateIDFromEntry(uint32 id)
{
    switch (id)
    {
        case GO_HORDE_GATE_1:
            return BG_IC_H_FRONT;
        case GO_HORDE_GATE_2:
            return BG_IC_H_EAST;
        case GO_HORDE_GATE_3:
            return BG_IC_H_WEST;
        case GO_ALLIANCE_GATE_1:
            return BG_IC_A_WEST;
        case GO_ALLIANCE_GATE_2:
            return BG_IC_A_FRONT;
        case GO_ALLIANCE_GATE_3:
            return BG_IC_A_EAST;
        default:
            break;
    }

    return 0;
}

uint32 BattlegroundIC::GetWorldStateFromGateEntry(uint32 id, bool open)
{
    switch (id)
    {
        case GO_HORDE_GATE_1:
            return (open ? BG_IC_GATE_FRONT_H_WS_OPEN : BG_IC_GATE_FRONT_H_WS_CLOSED);
        case GO_HORDE_GATE_2:
            return (open ? BG_IC_GATE_EAST_H_WS_OPEN : BG_IC_GATE_EAST_H_WS_CLOSED);
        case GO_HORDE_GATE_3:
            return (open ? BG_IC_GATE_WEST_H_WS_OPEN : BG_IC_GATE_WEST_H_WS_CLOSED);
        case GO_ALLIANCE_GATE_1:
            return (open ? BG_IC_GATE_WEST_A_WS_OPEN : BG_IC_GATE_WEST_A_WS_CLOSED);
        case GO_ALLIANCE_GATE_2:
            return (open ? BG_IC_GATE_FRONT_A_WS_OPEN : BG_IC_GATE_FRONT_A_WS_CLOSED);
        case GO_ALLIANCE_GATE_3:
            return (open ? BG_IC_GATE_EAST_A_WS_OPEN : BG_IC_GATE_EAST_A_WS_CLOSED);
    }

    return 0;
}

void BattlegroundIC::HandleContestedNodes(ICNodePoint const* node)
{
    if (node->nodeType == NODE_TYPE_HANGAR)
    {
        Transport* gunshipAlliance = HashMapHolder<Transport>::Find(GunshipGUID[TEAM_ALLIANCE]);
        Transport* gunshipHorde = HashMapHolder<Transport>::Find(GunshipGUID[TEAM_HORDE]);

        if (gunshipAlliance && gunshipHorde)
            (node->faction == TEAM_ALLIANCE ? gunshipHorde : gunshipAlliance)->EnableMovement(false);

        for (uint8 u = BG_IC_GO_HANGAR_TELEPORTER_1_A; u < BG_IC_GO_HANGAR_TELEPORTER_1_A + MAX_HANGAR_TELEPORTERS_SPAWNS; ++u)
            SpawnBGObject(u, RESPAWN_ONE_DAY);

        for (uint8 u = BG_IC_GO_HANGAR_TELEPORTER_EFFECT_1_A; u < BG_IC_GO_HANGAR_TELEPORTER_EFFECT_1_A + MAX_HANGAR_TELEPORTER_EFFECTS_SPAWNS; ++u)
            SpawnBGObject(u, RESPAWN_ONE_DAY);

        DelCreature(BG_IC_NPC_WORLD_TRIGGER_NOT_FLOATING);

        for (uint8 u = 0; u < MAX_CAPTAIN_SPAWNS_PER_FACTION; ++u)
        {
            uint8 type = BG_IC_NPC_GUNSHIP_CAPTAIN_1 + u;
            DelCreature(type);
        }

        std::list<Creature*> cannons;
        if (node->faction == TEAM_HORDE)
            gunshipAlliance->GetCreatureListWithEntryInGrid(cannons, NPC_ALLIANCE_GUNSHIP_CANNON, 150.0f);
        else
            gunshipHorde->GetCreatureListWithEntryInGrid(cannons, NPC_HORDE_GUNSHIP_CANNON, 150.0f);

        for (Creature* cannon : cannons)
        {
            cannon->GetVehicleKit()->RemoveAllPassengers();
            cannon->SetFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_NOT_SELECTABLE);
        }
    }
    else if (node->nodeType == NODE_TYPE_WORKSHOP)
    {
        DelObject(BG_IC_GO_SEAFORIUM_BOMBS_1);
        DelObject(BG_IC_GO_SEAFORIUM_BOMBS_2);
    }
}

void BattlegroundIC::HandleCapturedNodes(ICNodePoint const* node, bool recapture)
{
    if (node->nodeType > NODE_TYPE_QUARRY)
    {
        if (!AddSpiritGuide(BG_IC_NPC_SPIRIT_GUIDE_1 + node->nodeType - (NODE_TYPE_QUARRY + 1), BG_IC_SpiritGuidePos[node->nodeType], node->faction))
            TC_LOG_ERROR("bg.battleground", "Isle of Conquest: Failed to spawn spirit guide! point: %u, team: %u, ", node->nodeType, node->faction);
    }

    // We may get called from update or from EventPlayerClickedOnFlag in recapture case, in that case gameobjectId is not yet updated and we need to match against contested GO type
    switch (node->gameobjectId)
    {
        case BG_IC_GO_HANGAR_BANNER_A:
        case BG_IC_GO_HANGAR_BANNER_H:
        case BG_IC_GO_HANGAR_BANNER_CONT_A:
        case BG_IC_GO_HANGAR_BANNER_CONT_H:
        {
            Transport* gunshipAlliance = HashMapHolder<Transport>::Find(GunshipGUID[TEAM_ALLIANCE]);
            Transport* gunshipHorde = HashMapHolder<Transport>::Find(GunshipGUID[TEAM_HORDE]);

            if (!gunshipAlliance || !gunshipHorde)
                break;

            std::list<Creature*> cannons;
            if (node->faction == TEAM_ALLIANCE)
                gunshipAlliance->GetCreatureListWithEntryInGrid(cannons, NPC_ALLIANCE_GUNSHIP_CANNON, 150.0f);
            else
                gunshipHorde->GetCreatureListWithEntryInGrid(cannons, NPC_HORDE_GUNSHIP_CANNON, 150.0f);

            for (Creature* cannon : cannons)
                cannon->RemoveFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_NOT_SELECTABLE);

            for (uint8 u = BG_IC_GO_HANGAR_TELEPORTER_1_A; u < BG_IC_GO_HANGAR_TELEPORTER_1_A + MAX_HANGAR_TELEPORTERS_SPAWNS; u += BG_TEAMS_COUNT)
            {
                SpawnBGObject(u + TEAM_ALLIANCE, node->faction == TEAM_ALLIANCE ? RESPAWN_IMMEDIATELY : RESPAWN_ONE_DAY);
                SpawnBGObject(u + TEAM_HORDE,    node->faction == TEAM_ALLIANCE ? RESPAWN_ONE_DAY : RESPAWN_IMMEDIATELY);
            }

            for (uint8 u = BG_IC_GO_HANGAR_TELEPORTER_EFFECT_1_A; u < BG_IC_GO_HANGAR_TELEPORTER_EFFECT_1_A + MAX_HANGAR_TELEPORTER_EFFECTS_SPAWNS; u += BG_TEAMS_COUNT)
            {
                SpawnBGObject(u + TEAM_ALLIANCE, node->faction == TEAM_ALLIANCE ? RESPAWN_IMMEDIATELY : RESPAWN_ONE_DAY);
                SpawnBGObject(u + TEAM_HORDE,    node->faction == TEAM_ALLIANCE ? RESPAWN_ONE_DAY : RESPAWN_IMMEDIATELY);
            }

            for (uint8 u = 0; u < MAX_TRIGGER_SPAWNS_PER_FACTION; ++u)
            {
                DelCreature(BG_IC_NPC_WORLD_TRIGGER_NOT_FLOATING);
                if (!AddCreature(NPC_WORLD_TRIGGER_NOT_FLOATING, BG_IC_NPC_WORLD_TRIGGER_NOT_FLOATING, BG_IC_HangarTrigger[node->faction], RESPAWN_ONE_DAY, node->faction == TEAM_ALLIANCE ? gunshipAlliance : gunshipHorde))
                    TC_LOG_ERROR("bg.battleground", "Isle of Conquest: There was an error spawning a world trigger. Type: %u", BG_IC_NPC_WORLD_TRIGGER_NOT_FLOATING);
            }

            for (uint8 u = 0; u < MAX_CAPTAIN_SPAWNS_PER_FACTION; ++u)
            {
                uint8 type = BG_IC_NPC_GUNSHIP_CAPTAIN_1 + u;
                DelCreature(type);

                if (type == BG_IC_NPC_GUNSHIP_CAPTAIN_1)
                    if (Creature* captain = AddCreature(node->faction == TEAM_ALLIANCE ? NPC_ALLIANCE_GUNSHIP_CAPTAIN : NPC_HORDE_GUNSHIP_CAPTAIN, type, BG_IC_HangarCaptains[node->faction == TEAM_ALLIANCE ? 2 : 0], RESPAWN_ONE_DAY))
                        captain->AI()->DoAction(ACTION_GUNSHIP_READY);

                if (type == BG_IC_NPC_GUNSHIP_CAPTAIN_2)
                    if (!AddCreature(node->faction == TEAM_ALLIANCE ? NPC_ALLIANCE_GUNSHIP_CAPTAIN : NPC_HORDE_GUNSHIP_CAPTAIN, type, BG_IC_HangarCaptains[node->faction == TEAM_ALLIANCE ? 3 : 1], RESPAWN_ONE_DAY, node->faction == TEAM_ALLIANCE ? gunshipAlliance : gunshipHorde))
                        TC_LOG_ERROR("bg.battleground", "Isle of Conquest: There was an error spawning a world trigger. Type: %u", BG_IC_NPC_GUNSHIP_CAPTAIN_2);
            }

            if (node->faction == TEAM_ALLIANCE)
                gunshipAlliance->EnableMovement(true);
            else
                gunshipHorde->EnableMovement(true);
            break;
        }
        case BG_IC_GO_QUARRY_BANNER_A:
        case BG_IC_GO_QUARRY_BANNER_H:
        case BG_IC_GO_QUARRY_BANNER_CONT_A:
        case BG_IC_GO_QUARRY_BANNER_CONT_H:
            RemoveAuraOnTeam(SPELL_QUARRY, (node->faction == TEAM_ALLIANCE ? HORDE : ALLIANCE));
            CastSpellOnTeam(SPELL_QUARRY, (node->faction == TEAM_ALLIANCE ? ALLIANCE : HORDE));
            break;
        case BG_IC_GO_REFINERY_BANNER_A:
        case BG_IC_GO_REFINERY_BANNER_H:
        case BG_IC_GO_REFINERY_BANNER_CONT_A:
        case BG_IC_GO_REFINERY_BANNER_CONT_H:
            RemoveAuraOnTeam(SPELL_OIL_REFINERY, (node->faction == TEAM_ALLIANCE ? HORDE : ALLIANCE));
            CastSpellOnTeam(SPELL_OIL_REFINERY, (node->faction == TEAM_ALLIANCE ? ALLIANCE : HORDE));
            break;
        case BG_IC_GO_DOCKS_BANNER_A:
        case BG_IC_GO_DOCKS_BANNER_H:
            // no contested entries here because when that happens it's a recapture, and existing vehicle spawns shouldn't be affected
            _events.RescheduleEvent(EVENT_RESPAWN_DOCK_VEHICLES, DOCKS_UPDATE_TIME);

            // we must del opposing faction vehicles when the node is captured (unused ones)
            for (uint8 i = (node->faction == TEAM_ALLIANCE ? BG_IC_NPC_GLAIVE_THROWER_1_H : BG_IC_NPC_GLAIVE_THROWER_1_A); i <= (node->faction == TEAM_ALLIANCE ? BG_IC_NPC_GLAIVE_THROWER_2_H : BG_IC_NPC_GLAIVE_THROWER_2_A); ++i)
            {
                if (Creature* glaiveThrower = GetBGCreature(i, false))
                {
                    if (Vehicle* vehicleGlaive = glaiveThrower->GetVehicleKit())
                    {
                        if (!vehicleGlaive->GetPassenger(0))
                            DelCreature(i);
                    }
                }
            }

            for (uint8 i = (node->faction == TEAM_ALLIANCE ? BG_IC_NPC_CATAPULT_1_H : BG_IC_NPC_CATAPULT_1_A); i <= (node->faction == TEAM_ALLIANCE ? BG_IC_NPC_CATAPULT_4_H : BG_IC_NPC_CATAPULT_4_A); ++i)
            {
                if (Creature* catapult = GetBGCreature(i, false))
                {
                    if (Vehicle* vehicleGlaive = catapult->GetVehicleKit())
                    {
                        if (!vehicleGlaive->GetPassenger(0))
                            DelCreature(i);
                    }
                }
            }

            // spawning glaive throwers
            for (uint8 i = 0; i < MAX_GLAIVE_THROWERS_SPAWNS_PER_FACTION; ++i)
            {
                uint8 type = (node->faction == TEAM_ALLIANCE ? BG_IC_NPC_GLAIVE_THROWER_1_A : BG_IC_NPC_GLAIVE_THROWER_1_H) + i;
                if (Creature* glaiveThrower = GetBGCreature(type, false))
                    if (glaiveThrower->IsAlive())
                        continue;

                if (Creature* glaiveThrower = AddCreature(node->faction == TEAM_ALLIANCE ? NPC_GLAIVE_THROWER_A : NPC_GLAIVE_THROWER_H, type, BG_IC_DocksVehiclesGlaives[i], RESPAWN_ONE_DAY))
                    glaiveThrower->setFaction(BG_IC_Factions[node->faction]);
            }

            // spawning catapults
            for (uint8 i = 0; i < MAX_CATAPULTS_SPAWNS_PER_FACTION; ++i)
            {
                uint8 type = (node->faction == TEAM_ALLIANCE ? BG_IC_NPC_CATAPULT_1_A : BG_IC_NPC_CATAPULT_1_H) + i;
                if (Creature* catapult = GetBGCreature(type, false))
                    if (catapult->IsAlive())
                        continue;

                if (Creature* catapult = AddCreature(NPC_CATAPULT, type, BG_IC_DocksVehiclesCatapults[i], RESPAWN_ONE_DAY))
                    catapult->setFaction(BG_IC_Factions[node->faction]);
            }
            break;
        case BG_IC_GO_WORKSHOP_BANNER_A:
        case BG_IC_GO_WORKSHOP_BANNER_H:
        case BG_IC_GO_WORKSHOP_BANNER_CONT_A:
        case BG_IC_GO_WORKSHOP_BANNER_CONT_H:
        {
            _events.RescheduleEvent(EVENT_RESPAWN_WORKSHOP_VEHICLES, WORKSHOP_UPDATE_TIME);

            if (!recapture)
            {
                // we must del opposing faction vehicles when the node is captured (unused ones)
                for (uint8 i = (node->faction == TEAM_ALLIANCE ? BG_IC_NPC_DEMOLISHER_1_H : BG_IC_NPC_DEMOLISHER_1_A); i <= (node->faction == TEAM_ALLIANCE ? BG_IC_NPC_DEMOLISHER_4_H : BG_IC_NPC_DEMOLISHER_4_A); ++i)
                {
                    if (Creature* demolisher = GetBGCreature(i, false))
                    {
                        if (Vehicle* vehicleDemolisher = demolisher->GetVehicleKit())
                        {
                            // is IsVehicleInUse working as expected?
                            if (!vehicleDemolisher->IsVehicleInUse())
                                DelCreature(i);
                        }
                    }
                }

                for (uint8 i = 0; i < MAX_DEMOLISHERS_SPAWNS_PER_FACTION; ++i)
                {
                    uint8 type = (node->faction == TEAM_ALLIANCE ? BG_IC_NPC_DEMOLISHER_1_A : BG_IC_NPC_DEMOLISHER_1_H) + i;
                    if (Creature* demolisher = GetBGCreature(type, false))
                        if (demolisher->IsAlive())
                            continue;

                    if (Creature* demolisher = AddCreature(NPC_DEMOLISHER, type, BG_IC_WorkshopVehicles[i], RESPAWN_ONE_DAY))
                        demolisher->setFaction(BG_IC_Factions[(node->faction == TEAM_ALLIANCE ? 0 : 1)]);
                }

                // we check if the opossing siege engine is in use
                if (Creature* siegeEngine = GetBgMap()->GetCreature(SiegeEngineGUID[node->faction == TEAM_ALLIANCE ? TEAM_HORDE: TEAM_ALLIANCE]))
                {
                    if (Vehicle* vehicleSiege = siegeEngine->GetVehicleKit())
                    {
                        // is VehicleInUse working as expected ?
                        if (!vehicleSiege->IsVehicleInUse())
                            siegeEngine->AddObjectToRemoveList();
                    }
                }

                Creature* siege = GetBgMap()->GetCreature(SiegeEngineGUID[node->faction]);
                if (!siege || !siege->IsAlive())
                {
                    if (Creature* siegeEngine = SpawnSiegeEngine(node->faction))
                        siegeEngine->AddAura(SPELL_DAMAGED_AURA, siegeEngine); // no cast seen on sniff
                }
            }

            for (uint8 i = BG_IC_GO_SEAFORIUM_BOMBS_1; i < BG_IC_GO_SEAFORIUM_BOMBS_1 + MAX_WORKSHOP_BOMBS_SPAWNS_PER_FACTION; ++i)
            {
                BattlegroundGOSpawnPoint const& bomb = BG_IC_ObjSpawnlocs[i];
                if (GameObject* seaforiumBomb = AddObject(i, bomb.Entry, bomb.Pos, bomb.Rot, bomb.SpawnTime))
                    seaforiumBomb->SetFaction(BG_IC_Factions[node->faction]);
            }
            break;
        }
        default:
            break;
    }
}

// This is a use case that I only found here.
// The siege Engine NEEDS to spawn as a vehicle, however without vehiclekit (it's added later by script)
Creature* BattlegroundIC::SpawnSiegeEngine(TeamId team)
{
    uint32 entry = team == TEAM_ALLIANCE ? NPC_SIEGE_ENGINE_A : NPC_SIEGE_ENGINE_H;

    Map* map = FindBgMap();
    if (!map)
        return nullptr;

    Creature* creature = new Creature();

    float x, y, z, o;
    BG_IC_WorkshopVehicles[4].GetPosition(x, y, z, o);
    if (!creature->Create(map->GenerateLowGuid<HighGuid::Vehicle>(), map, PHASEMASK_NORMAL, entry, x, y, z, o))
    {
        delete creature;
        return nullptr;
    }

    // now vehicle kit is created
    // fortunately nobody has seen it yet
    creature->RemoveVehicleKit(); // fix'd

    creature->SetHomePosition(*creature);
    if (!map->AddToMap(creature))
    {
        delete creature;
        return nullptr;
    }

    SiegeEngineGUID[team] = creature->GetGUID();

    creature->SetRespawnTime(RESPAWN_ONE_DAY);

    return creature;
}

void BattlegroundIC::DestroyGate(Player* player, GameObject* go)
{
    GateStatus[GetGateIDFromEntry(go->GetEntry())] = BG_IC_GATE_DESTROYED;
    uint32 uws_open = GetWorldStateFromGateEntry(go->GetEntry(), true);
    uint32 uws_close = GetWorldStateFromGateEntry(go->GetEntry(), false);
    if (uws_open)
    {
        UpdateWorldState(uws_close, 0);
        UpdateWorldState(uws_open, 1);
    }
    if (player->GetTeamId() == TEAM_ALLIANCE)
    {
        DoorOpen(BG_IC_GO_HORDE_KEEP_PORTCULLIS);
        if (GameObject* hordeBanner = GetBGObject(BG_IC_GO_HORDE_GRAVEYARD_H, false))
            hordeBanner->RemoveFlag(GAMEOBJECT_FLAGS, GO_FLAG_NOT_SELECTABLE);
    }
    else
    {
        DoorOpen(BG_IC_GO_DOODAD_PORTCULLISACTIVE02);
        if (GameObject* allianceBanner = GetBGObject(BG_IC_GO_ALLIANCE_GRAVEYARD_A, false))
            allianceBanner->RemoveFlag(GAMEOBJECT_FLAGS, GO_FLAG_NOT_SELECTABLE);
    }

    uint32 lang_entry = 0;
    switch (go->GetEntry())
    {
        case GO_HORDE_GATE_1:
            lang_entry = LANG_BG_IC_NORTH_GATE_DESTROYED;
            break;
        case GO_HORDE_GATE_2:
        case GO_ALLIANCE_GATE_3:
            lang_entry = LANG_BG_IC_EAST_GATE_DESTROYED;
            break;
        case GO_HORDE_GATE_3:
        case GO_ALLIANCE_GATE_1:
            lang_entry = LANG_BG_IC_WEST_GATE_DESTROYED;
            break;
        case GO_ALLIANCE_GATE_2:
            lang_entry = LANG_BG_IC_SOUTH_GATE_DESTROYED;
            break;
        default:
            break;
    }

    switch (go->GetEntry())
    {
        case GO_HORDE_GATE_1:
        case GO_HORDE_GATE_2:
        case GO_HORDE_GATE_3:
            if (!GetBGCreature(BG_IC_NPC_OVERLORD_AGMAR, false))
            {
                BattlegroundSpawnPoint const& agmar = BG_IC_NpcSpawnlocs[BG_IC_NPC_OVERLORD_AGMAR];
                if (!AddCreature(agmar.Entry, BG_IC_NPC_OVERLORD_AGMAR, agmar.Pos, agmar.SpawnTime))
                    TC_LOG_ERROR("bg.battleground", "Isle of Conquest: There was an error spawning creature %u", agmar.Entry);
            }
            break;
        case GO_ALLIANCE_GATE_1:
        case GO_ALLIANCE_GATE_2:
        case GO_ALLIANCE_GATE_3:
            if (!GetBGCreature(BG_IC_NPC_HIGH_COMMANDER_HALFORD_WYRMBANE, false))
            {
                BattlegroundSpawnPoint const& halford = BG_IC_NpcSpawnlocs[BG_IC_NPC_HIGH_COMMANDER_HALFORD_WYRMBANE];
                if (!AddCreature(halford.Entry, BG_IC_NPC_HIGH_COMMANDER_HALFORD_WYRMBANE, halford.Pos, halford.SpawnTime))
                    TC_LOG_ERROR("bg.battleground", "Isle of Conquest: There was an error spawning creature %u", halford.Entry);
            }
            break;
        default:
            break;
    }

    SendMessage2ToAll(lang_entry, CHAT_MSG_BG_SYSTEM_NEUTRAL, nullptr, (player->GetTeamId() == TEAM_ALLIANCE ? LANG_BG_IC_HORDE_KEEP : LANG_BG_IC_ALLIANCE_KEEP));
}

WorldSafeLocsEntry const* BattlegroundIC::GetClosestGraveYard(Player* player)
{
    TeamId teamIndex = GetTeamIndexByTeamId(player->GetTeam());

    // Is there any occupied node for this team?
    std::vector<uint8> nodes;
    for (uint8 i = 0; i < MAX_NODE_TYPES; ++i)
        if (nodePoint[i].faction == player->GetTeamId())
            nodes.push_back(i);

    WorldSafeLocsEntry const* good_entry = nullptr;
    // If so, select the closest node to place ghost on
    if (!nodes.empty())
    {
        float player_x = player->GetPositionX();
        float player_y = player->GetPositionY();

        float mindist = 999999.0f;
        for (uint8 i = 0; i < nodes.size(); ++i)
        {
            WorldSafeLocsEntry const*entry = sWorldSafeLocsStore.LookupEntry(BG_IC_GraveyardIds[nodes[i]]);
            if (!entry)
                continue;
            float dist = (entry->x - player_x)*(entry->x - player_x)+(entry->y - player_y)*(entry->y - player_y);
            if (mindist > dist)
            {
                mindist = dist;
                good_entry = entry;
            }
        }
        nodes.clear();
    }
    // If not, place ghost on starting location
    if (!good_entry)
        good_entry = sWorldSafeLocsStore.LookupEntry(BG_IC_GraveyardIds[teamIndex+MAX_NODE_TYPES]);

    return good_entry;
}

bool BattlegroundIC::IsAllNodesControlledByTeam(uint32 team) const
{
    uint32 count = 0;
    ICNodeState controlledState = team == ALLIANCE ? NODE_STATE_CONTROLLED_A : NODE_STATE_CONTROLLED_H;
    for (uint8 i = 0; i < NODE_TYPE_WORKSHOP; ++i)
    {
        if (nodePoint[i].nodeState == controlledState)
            ++count;
    }

    return count == NODE_TYPE_WORKSHOP;
}

bool BattlegroundIC::IsSpellAllowed(uint32 spellId, Player const* player) const
{
    switch (spellId)
    {
        case SPELL_OIL_REFINERY:
        case SPELL_QUARRY:
        {
            uint32 team = player->GetTeamId();
            uint8 nodeType = spellId == SPELL_OIL_REFINERY ? NODE_TYPE_REFINERY : NODE_TYPE_QUARRY;
            uint8 nodeState = team == TEAM_ALLIANCE ? NODE_STATE_CONTROLLED_A : NODE_STATE_CONTROLLED_H;
            return GetNodeState(nodeType) == nodeState;
        }
        default:
           break;
    }

    return true;
}
