/*
 * Copyright (C) 2008-2016 TrinityCore <http://www.trinitycore.org/>
 * Copyright (C) 2005-2009 MaNGOS <http://getmangos.com/>
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the
 * Free Software Foundation; either version 2 of the License, or (at your
 * option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program. If not, see <http://www.gnu.org/licenses/>.
 */

#include "BattlegroundSA.h"
#include "GameObject.h"
#include "Language.h"
#include "ObjectMgr.h"
#include "Player.h"
#include "ScriptedCreature.h"
#include "WorldPacket.h"

BattlegroundSpawnPoint const BG_SA_Creatures[BG_SA_MAXNPC] =
{
    // Cannons
    { NPC_ANTI_PERSONNAL_CANNON,                     { 1436.583000f,  109.784700f, 41.490560f, 5.42797400f }, 10 * MINUTE         },
    { NPC_ANTI_PERSONNAL_CANNON,                     { 1405.057000f,  84.7270000f, 41.183140f, 0.06825211f }, 10 * MINUTE         },
    { NPC_ANTI_PERSONNAL_CANNON,                     { 1067.822000f, -86.9250300f, 93.889440f, 6.24827900f }, 10 * MINUTE         },
    { NPC_ANTI_PERSONNAL_CANNON,                     { 1068.805000f, -127.429300f, 96.449520f, 0.01467853f }, 10 * MINUTE         },
    { NPC_ANTI_PERSONNAL_CANNON,                     { 1422.189000f, -196.463500f, 42.265410f, 0.97738440f }, 10 * MINUTE         },
    { NPC_ANTI_PERSONNAL_CANNON,                     { 1454.793000f, -220.333300f, 42.039560f, 1.02974400f }, 10 * MINUTE         },
    { NPC_ANTI_PERSONNAL_CANNON,                     { 1232.283000f, -187.527000f, 67.027970f, 0.50614550f }, 10 * MINUTE         },
    { NPC_ANTI_PERSONNAL_CANNON,                     { 1249.647000f, -223.979300f, 66.803440f, 0.55850540f }, 10 * MINUTE         },
    { NPC_ANTI_PERSONNAL_CANNON,                     { 1236.290000f,  92.2478000f, 65.047800f, 5.72468000f }, 10 * MINUTE         },
    { NPC_ANTI_PERSONNAL_CANNON,                     { 1215.151000f,  57.7534700f, 64.821950f, 5.77704000f }, 10 * MINUTE         },
    // 4 beach demolishers
    { NPC_DEMOLISHER_SA,                             { 1611.597656f, -117.270073f, 8.7193550f, 2.51327400f }, 10 * MINUTE         },
    { NPC_DEMOLISHER_SA,                             { 1575.562500f, -158.421875f, 5.0244500f, 2.12930200f }, 10 * MINUTE         },
    { NPC_DEMOLISHER_SA,                             { 1618.047729f,  61.4246410f, 7.2482100f, 3.97935100f }, 10 * MINUTE         },
    { NPC_DEMOLISHER_SA,                             { 1575.103149f,  98.8733440f, 2.8303600f, 3.75245800f }, 10 * MINUTE         },
    // 4 factory demolishers
    { NPC_DEMOLISHER_SA,                             { 1371.055786f, -317.071136f, 35.007359f, 1.94746000f }, 10 * MINUTE         },
    { NPC_DEMOLISHER_SA,                             { 1424.034912f, -260.195190f, 31.084425f, 2.82001300f }, 10 * MINUTE         },
    { NPC_DEMOLISHER_SA,                             { 1353.139893f,  223.745438f, 35.265411f, 4.34368400f }, 10 * MINUTE         },
    { NPC_DEMOLISHER_SA,                             { 1404.809570f,  197.027237f, 32.046032f, 3.60540100f }, 10 * MINUTE         },
    // Used Demolisher Salesman
    { NPC_RIGGER_SPARKLIGHT,                         { 1348.644165f, -298.786469f, 31.080130f, 1.71042300f }, RESPAWN_IMMEDIATELY },
    { NPC_GORGRIL_RIGSPARK,                          { 1358.191040f,  195.527786f, 31.018187f, 4.17133700f }, RESPAWN_IMMEDIATELY },
    // Kanrethad
    { NPC_KANRETHAD,                                 { 841.9210000f, -134.194000f, 196.83800f, 6.23082000f }, RESPAWN_IMMEDIATELY },
    // teleport triggers (used as teleport spell target, despawned when associated gate is destroyed, except for yellow)
    { NPC_WORLD_TRIGGER_LARGE_AOI_NOT_IMMUNE_PC_NPC, { 1389.060000f,  102.940900f, 34.574170f, 2.16420800f }, RESPAWN_IMMEDIATELY }, // green
    { NPC_WORLD_TRIGGER_LARGE_AOI_NOT_IMMUNE_PC_NPC, { 1043.523000f, -87.8506900f, 87.196950f, 2.96706000f }, RESPAWN_IMMEDIATELY }, // yellow
    { NPC_WORLD_TRIGGER_LARGE_AOI_NOT_IMMUNE_PC_NPC, { 1441.079000f, -240.593900f, 35.347150f, 4.03171100f }, RESPAWN_IMMEDIATELY }, // blue
    { NPC_WORLD_TRIGGER_LARGE_AOI_NOT_IMMUNE_PC_NPC, { 1227.886000f, -235.457500f, 60.111160f, 3.40339200f }, RESPAWN_IMMEDIATELY }, // red
    { NPC_WORLD_TRIGGER_LARGE_AOI_NOT_IMMUNE_PC_NPC, { 1193.757000f,  69.9405400f, 58.129500f, 2.49582100f }, RESPAWN_IMMEDIATELY }  // purple
};

// common to all ships
// [0] GAMEOBJECT_PARENTROTATION + 2: 1065353216/1
// [0] GAMEOBJECT_PARENTROTATION + 3: 3007036718/-4.371139E-08
G3D::Quat const shipParentRotation = { 0.f, 0.f, 1.f, -4.371139e-08f };

BattlegroundGOSpawnPoint const BG_SA_Ships[BG_SA_MAX_SHIPS_PER_TEAM * BG_TEAMS_COUNT] =
{
    { BG_SA_BOAT_ONE_A,               { 2679.697f, -826.8912f,  3.7128600f, -0.56376610f }, { 0.f, 0.f, -0.278164900f, 0.960533300f }, RESPAWN_ONE_DAY },
    { BG_SA_BOAT_TWO_H,               { 2578.895f,  986.3294f, -0.6852722f,  0.80769580f }, { 0.f, 0.f,  0.392959600f, 0.919555700f }, RESPAWN_ONE_DAY },

    { BG_SA_BOAT_ONE_H,               { 2686.109f, -831.1955f,  0.4520569f, -0.56376610f }, { 0.f, 0.f, -0.278164900f, 0.960533300f }, RESPAWN_ONE_DAY },
    { BG_SA_BOAT_TWO_A,               { 2574.004f,  981.2615f,  2.6034240f,  0.80769580f }, { 0.f, 0.f,  0.392959600f, 0.919555700f }, RESPAWN_ONE_DAY },
};

BattlegroundGOSpawnPoint const BG_SA_Objects[BG_SA_MAXOBJ] =
{
    // gates
    { GO_GATE_OF_THE_GREEN_EMERALD,   { 1412.743f,  106.9931f,  29.877970f, -0.84648480f }, { 0.f, 0.f, -0.410718900f, 0.911762000f }, RESPAWN_ONE_DAY },
    { GO_GATE_OF_THE_YELLOW_MOON,     { 1055.899f, -107.6285f,  83.427470f,  0.06108661f }, { 0.f, 0.f,  0.030538560f, 0.999533600f }, RESPAWN_ONE_DAY },
    { GO_GATE_OF_THE_BLUE_SAPPHIRE,   { 1431.134f, -218.6840f,  32.104790f,  0.98610960f }, { 0.f, 0.f,  0.473319100f, 0.880891100f }, RESPAWN_ONE_DAY },
    { GO_GATE_OF_THE_RED_SUN,         { 1229.667f, -211.3004f,  56.435990f,  0.48869120f }, { 0.f, 0.f,  0.241921400f, 0.970295800f }, RESPAWN_ONE_DAY },
    { GO_GATE_OF_THE_PURPLE_AMETHYST, { 1214.778f,  81.56077f,  54.582140f, -0.50614460f }, { 0.f, 0.f, -0.250379600f, 0.968147800f }, RESPAWN_ONE_DAY },
    { GO_CHAMBER_OF_ANCIENT_RELICS,   { 878.0330f, -108.1910f,  117.83220f,  0.01059919f }, { 0.f, 0.f,  0.005299568f, 0.999985900f }, RESPAWN_ONE_DAY },
    // relics
    { GO_TITAN_RELIC_A,               { 837.0653f, -107.5367f,  127.02480f, -1.81514200f }, { 0.f, 0.f, -0.788010600f, 0.615661700f }, RESPAWN_ONE_DAY },
    { GO_TITAN_RELIC_H,               { 837.0653f, -107.5367f,  127.02480f, -1.81514200f }, { 0.f, 0.f, -0.788010600f, 0.615661700f }, RESPAWN_ONE_DAY },
    // defender portals
    { GO_DEFENDER_PORTAL_A,           { 1467.955f, -225.8299f,  30.969550f, -2.40855400f }, { 0.f, 0.f, -0.933580400f, 0.358368000f }, RESPAWN_ONE_DAY }, //blue
    { GO_DEFENDER_PORTAL_H,           { 1467.955f, -225.8299f,  30.969550f, -2.40855400f }, { 0.f, 0.f, -0.933580400f, 0.358368000f }, RESPAWN_ONE_DAY },
    { GO_DEFENDER_PORTAL_A,           { 1394.237f,  72.10178f,  31.105790f, -0.55850390f }, { 0.f, 0.f, -0.275636700f, 0.961261900f }, RESPAWN_ONE_DAY }, //green
    { GO_DEFENDER_PORTAL_H,           { 1394.237f,  72.10178f,  31.105790f, -0.55850390f }, { 0.f, 0.f, -0.275636700f, 0.961261900f }, RESPAWN_ONE_DAY },
    { GO_DEFENDER_PORTAL_A,           { 1065.241f, -89.75342f,  81.002980f,  2.25147300f }, { 0.f, 0.f,  0.902585000f, 0.430511700f }, RESPAWN_ONE_DAY }, //yellow
    { GO_DEFENDER_PORTAL_H,           { 1065.241f, -89.75342f,  81.002980f,  2.25147300f }, { 0.f, 0.f,  0.902585000f, 0.430511700f }, RESPAWN_ONE_DAY },
    { GO_DEFENDER_PORTAL_A,           { 1216.063f,  47.54688f,  54.343650f, -1.83259500f }, { 0.f, 0.f, -0.793353100f, 0.608761700f }, RESPAWN_ONE_DAY }, //purple
    { GO_DEFENDER_PORTAL_H,           { 1216.063f,  47.54688f,  54.343650f, -1.83259500f }, { 0.f, 0.f, -0.793353100f, 0.608761700f }, RESPAWN_ONE_DAY },
    { GO_DEFENDER_PORTAL_A,           { 1255.875f, -233.7240f,  56.496810f, -0.47123850f }, { 0.f, 0.f, -0.233445200f, 0.972370000f }, RESPAWN_ONE_DAY }, //red
    { GO_DEFENDER_PORTAL_H,           { 1255.875f, -233.7240f,  56.496810f, -0.47123850f }, { 0.f, 0.f, -0.233445200f, 0.972370000f }, RESPAWN_ONE_DAY },
    // Sigils
    { GO_GREEN_MOON_SIGIL,            { 1415.539f,  103.8301f,  42.198830f, -0.73303820f }, { 0.f, 0.f, -0.358367900f, 0.933580500f }, RESPAWN_ONE_DAY },
    { GO_YELLOW_MOON_SIGIL,           { 1060.423f, -107.4036f,  95.745000f,  0.24434560f }, { 0.f, 0.f,  0.121869100f, 0.992546200f }, RESPAWN_ONE_DAY },
    { GO_BLUE_MOON_SIGIL,             { 1433.349f, -215.6073f,  44.422310f,  1.60570200f }, { 0.f, 0.f,  0.719339400f, 0.694658800f }, RESPAWN_ONE_DAY },
    { GO_RED_MOON_SIGIL,              { 1233.884f, -209.2753f,  69.084210f,  0.55850390f }, { 0.f, 0.f,  0.275636700f, 0.961261900f }, RESPAWN_ONE_DAY },
    { GO_PURPLE_MOON_SIGIL,           { 1218.457f,  80.10538f,  66.954330f, -0.19198520f }, { 0.f, 0.f, -0.095845220f, 0.995396300f }, RESPAWN_ONE_DAY },
    // Flagpoles
    { GO_FLAGPOLE,                    { 1215.114f, -65.71186f,  70.084270f, -3.12412300f }, { 0.f, 0.f, -0.999961900f, 0.008734641f }, RESPAWN_ONE_DAY },
    { GO_FLAGPOLE,                    { 1338.864f, -153.3365f,  30.895120f, -2.53072300f }, { 0.f, 0.f, -0.953716300f, 0.300707900f }, RESPAWN_ONE_DAY },
    { GO_FLAGPOLE,                    { 1309.124f,  9.410645f,  30.893400f, -1.62315600f }, { 0.f, 0.f, -0.725374200f, 0.688354700f }, RESPAWN_ONE_DAY },
    // Flags
    { GO_ALLIANCE_BANNER_CENTER,      { 1215.108f, -65.71577f,  70.084270f, -3.12412300f }, { 0.f, 0.f, -0.999961900f, 0.008734641f }, RESPAWN_ONE_DAY },
    { GO_HORDE_BANNER_CENTER,         { 1215.108f, -65.71577f,  70.084270f, -3.12412300f }, { 0.f, 0.f, -0.999961900f, 0.008734641f }, RESPAWN_ONE_DAY },
    { GO_ALLIANCE_BANNER_RIGHT,       { 1338.859f, -153.3273f,  30.895080f, -2.53072300f }, { 0.f, 0.f, -0.953716300f, 0.300707900f }, RESPAWN_ONE_DAY },
    { GO_HORDE_BANNER_RIGHT,          { 1338.859f, -153.3273f,  30.895080f, -2.53072300f }, { 0.f, 0.f, -0.953716300f, 0.300707900f }, RESPAWN_ONE_DAY },
    { GO_ALLIANCE_BANNER_LEFT,        { 1309.192f,  9.416233f,  30.893400f,  1.51843600f }, { 0.f, 0.f,  0.688354500f, 0.725374500f }, RESPAWN_ONE_DAY },
    { GO_HORDE_BANNER_LEFT,           { 1309.192f,  9.416233f,  30.893400f,  1.51843600f }, { 0.f, 0.f,  0.688354500f, 0.725374500f }, RESPAWN_ONE_DAY },
    // Bombs
    { GO_SEAFORIUM_BOMB_A,            { 1598.511f,  36.18088f,  7.3779360f, -1.48352800f }, { 0.f, 0.f, -0.675589600f, 0.737277900f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_H,            { 1598.511f,  36.18088f,  7.3779360f, -1.48352800f }, { 0.f, 0.f, -0.675589600f, 0.737277900f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_A,            { 1598.365f,  37.42188f,  7.3969860f, -0.31415840f }, { 0.f, 0.f, -0.156434100f, 0.987688400f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_H,            { 1598.365f,  37.42188f,  7.3969860f, -0.31415840f }, { 0.f, 0.f, -0.156434100f, 0.987688400f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_A,            { 1597.705f,  37.00347f,  7.8008180f, -1.71042200f }, { 0.f, 0.f, -0.754709200f, 0.656059400f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_H,            { 1597.705f,  37.00347f,  7.8008180f, -1.71042200f }, { 0.f, 0.f, -0.754709200f, 0.656059400f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_A,            { 1597.096f,  37.20964f,  7.3712910f, -2.12930100f }, { 0.f, 0.f, -0.874619500f, 0.484810100f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_H,            { 1597.096f,  37.20964f,  7.3712910f, -2.12930100f }, { 0.f, 0.f, -0.874619500f, 0.484810100f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_A,            { 1593.964f, -96.16873f,  8.7822530f, -1.13446300f }, { 0.f, 0.f, -0.537299200f, 0.843391700f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_H,            { 1593.964f, -96.16873f,  8.7822530f, -1.13446300f }, { 0.f, 0.f, -0.537299200f, 0.843391700f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_A,            { 1596.176f,  36.33398f,  7.3453340f, -2.51327400f }, { 0.f, 0.f, -0.951056500f, 0.309017100f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_H,            { 1596.176f,  36.33398f,  7.3453340f, -2.51327400f }, { 0.f, 0.f, -0.951056500f, 0.309017100f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_A,            { 1594.800f,  47.51574f,  7.5697730f, -1.76278200f }, { 0.f, 0.f, -0.771624600f, 0.636078200f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_H,            { 1594.800f,  47.51574f,  7.5697730f, -1.76278200f }, { 0.f, 0.f, -0.771624600f, 0.636078200f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_A,            { 1594.083f,  46.61654f,  7.4413290f, -1.71042200f }, { 0.f, 0.f, -0.754709200f, 0.656059400f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_H,            { 1594.083f,  46.61654f,  7.4413290f, -1.71042200f }, { 0.f, 0.f, -0.754709200f, 0.656059400f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_A,            { 1593.087f,  47.30523f,  7.4102940f,  2.75761300f }, { 0.f, 0.f,  0.981626500f, 0.190812400f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_H,            { 1593.087f,  47.30523f,  7.4102940f,  2.75761300f }, { 0.f, 0.f,  0.981626500f, 0.190812400f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_A,            { 1592.643f,  46.12370f,  7.4035310f, -2.32128700f }, { 0.f, 0.f, -0.917059900f, 0.398749500f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_H,            { 1592.643f,  46.12370f,  7.4035310f, -2.32128700f }, { 0.f, 0.f, -0.917059900f, 0.398749500f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_A,            { 1591.730f,  47.05100f,  7.3816770f,  2.86233500f }, { 0.f, 0.f,  0.990267800f, 0.139175400f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_H,            { 1591.730f,  47.05100f,  7.3816770f,  2.86233500f }, { 0.f, 0.f,  0.990267800f, 0.139175400f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_A,            { 1589.411f,  35.65158f,  7.3536520f,  0.40142490f }, { 0.f, 0.f,  0.199367500f, 0.979924800f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_H,            { 1589.411f,  35.65158f,  7.3536520f,  0.40142490f }, { 0.f, 0.f,  0.199367500f, 0.979924800f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_A,            { 1588.646f,  34.91233f,  7.4360210f,  0.66322320f }, { 0.f, 0.f,  0.325567200f, 0.945518900f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_H,            { 1588.646f,  34.91233f,  7.4360210f,  0.66322320f }, { 0.f, 0.f,  0.325567200f, 0.945518900f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_A,            { 1588.366f,  36.28743f,  7.3761040f, -1.23918300f }, { 0.f, 0.f, -0.580702800f, 0.814115600f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_H,            { 1588.366f,  36.28743f,  7.3761040f, -1.23918300f }, { 0.f, 0.f, -0.580702800f, 0.814115600f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_A,            { 1585.014f, -104.3277f,  8.6132050f,  0.40142490f }, { 0.f, 0.f,  0.199367500f, 0.979924800f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_H,            { 1585.014f, -104.3277f,  8.6132050f,  0.40142490f }, { 0.f, 0.f,  0.199367500f, 0.979924800f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_A,            { 1584.439f, -103.3369f,  8.5020380f, -3.12412300f }, { 0.f, 0.f, -0.999961900f, 0.008734641f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_H,            { 1584.439f, -103.3369f,  8.5020380f, -3.12412300f }, { 0.f, 0.f, -0.999961900f, 0.008734641f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_A,            { 1584.295f, -103.9167f,  9.0690790f,  2.96704100f }, { 0.f, 0.f,  0.996193900f, 0.087165040f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_H,            { 1584.295f, -103.9167f,  9.0690790f,  2.96704100f }, { 0.f, 0.f,  0.996193900f, 0.087165040f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_A,            { 1583.457f, -104.0751f,  8.4517500f, -1.65806200f }, { 0.f, 0.f, -0.737277000f, 0.675590500f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_H,            { 1583.457f, -104.0751f,  8.4517500f, -1.65806200f }, { 0.f, 0.f, -0.737277000f, 0.675590500f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_A,            { 1584.159f, -92.27148f,  8.3479280f,  2.86233500f }, { 0.f, 0.f,  0.990267800f, 0.139175400f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_H,            { 1584.159f, -92.27148f,  8.3479280f,  2.86233500f }, { 0.f, 0.f,  0.990267800f, 0.139175400f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_A,            { 1583.674f, -91.87500f,  8.8906830f,  2.98449800f }, { 0.f, 0.f,  0.996916800f, 0.078466430f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_H,            { 1583.674f, -91.87500f,  8.8906830f,  2.98449800f }, { 0.f, 0.f,  0.996916800f, 0.078466430f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_A,            { 1583.355f, -91.18110f,  8.3565370f,  1.67551400f }, { 0.f, 0.f,  0.743144000f, 0.669131500f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_H,            { 1583.355f, -91.18110f,  8.3565370f,  1.67551400f }, { 0.f, 0.f,  0.743144000f, 0.669131500f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_A,            { 1582.967f, -92.59061f,  8.3533370f, -1.27409100f }, { 0.f, 0.f, -0.594822900f, 0.803856800f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_H,            { 1582.967f, -92.59061f,  8.3533370f, -1.27409100f }, { 0.f, 0.f, -0.594822900f, 0.803856800f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_A,            { 1581.966f, -100.9250f,  8.3273970f, -0.94247660f }, { 0.f, 0.f, -0.453990000f, 0.891006800f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_H,            { 1581.966f, -100.9250f,  8.3273970f, -0.94247660f }, { 0.f, 0.f, -0.453990000f, 0.891006800f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_A,            { 1581.203f, -99.49620f,  8.3370030f, -0.71558490f }, { 0.f, 0.f, -0.350207300f, 0.936672200f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_H,            { 1581.203f, -99.49620f,  8.3370030f, -0.71558490f }, { 0.f, 0.f, -0.350207300f, 0.936672200f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_A,            { 1388.996f, -305.6311f,  32.007040f,  1.08210300f }, { 0.f, 0.f,  0.515037500f, 0.857167600f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_H,            { 1388.996f, -305.6311f,  32.007040f,  1.08210300f }, { 0.f, 0.f,  0.515037500f, 0.857167600f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_A,            { 1388.626f, -306.8471f,  31.929260f, -0.40142490f }, { 0.f, 0.f, -0.199367500f, 0.979924800f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_H,            { 1388.626f, -306.8471f,  31.929260f, -0.40142490f }, { 0.f, 0.f, -0.199367500f, 0.979924800f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_A,            { 1387.903f, -302.4415f,  32.010150f, -2.91469000f }, { 0.f, 0.f, -0.993571300f, 0.113208400f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_H,            { 1387.903f, -302.4415f,  32.010150f, -2.91469000f }, { 0.f, 0.f, -0.993571300f, 0.113208400f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_A,            { 1372.475f, -291.1497f,  31.170080f,  2.37364400f }, { 0.f, 0.f,  0.927183200f, 0.374608300f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_H,            { 1372.475f, -291.1497f,  31.170080f,  2.37364400f }, { 0.f, 0.f,  0.927183200f, 0.374608300f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_A,            { 1372.196f, -289.9348f,  31.152320f, -2.42600300f }, { 0.f, 0.f, -0.936671300f, 0.350209800f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_H,            { 1372.196f, -289.9348f,  31.152320f, -2.42600300f }, { 0.f, 0.f, -0.936671300f, 0.350209800f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_A,            { 1371.920f, -290.8368f,  31.530460f,  2.75761300f }, { 0.f, 0.f,  0.981626500f, 0.190812400f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_H,            { 1371.920f, -290.8368f,  31.530460f,  2.75761300f }, { 0.f, 0.f,  0.981626500f, 0.190812400f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_A,            { 1371.326f, -291.3288f,  31.135190f,  2.93213900f }, { 0.f, 0.f,  0.994521100f, 0.104535500f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_H,            { 1371.326f, -291.3288f,  31.135190f,  2.93213900f }, { 0.f, 0.f,  0.994521100f, 0.104535500f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_A,            { 1371.176f, -290.0876f,  31.121620f, -1.39626200f }, { 0.f, 0.f, -0.642787000f, 0.766045000f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_H,            { 1371.176f, -290.0876f,  31.121620f, -1.39626200f }, { 0.f, 0.f, -0.642787000f, 0.766045000f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_A,            { 1382.045f,  200.5125f,  32.033390f,  1.79768900f }, { 0.f, 0.f,  0.782608000f, 0.622514800f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_H,            { 1382.045f,  200.5125f,  32.033390f,  1.79768900f }, { 0.f, 0.f,  0.782608000f, 0.622514800f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_A,            { 1381.306f,  199.4538f,  32.034190f,  0.69813150f }, { 0.f, 0.f,  0.342020000f, 0.939692700f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_H,            { 1381.306f,  199.4538f,  32.034190f,  0.69813150f }, { 0.f, 0.f,  0.342020000f, 0.939692700f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_A,            { 1353.159f, -302.8067f,  30.930050f, -2.51327400f }, { 0.f, 0.f, -0.951056500f, 0.309017100f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_H,            { 1353.159f, -302.8067f,  30.930050f, -2.51327400f }, { 0.f, 0.f, -0.951056500f, 0.309017100f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_A,            { 1352.843f, -301.2199f,  30.915410f,  1.57079600f }, { 0.f, 0.f,  0.707106600f, 0.707106900f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_H,            { 1352.843f, -301.2199f,  30.915410f,  1.57079600f }, { 0.f, 0.f,  0.707106600f, 0.707106900f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_A,            { 1371.751f,  193.4837f,  31.720350f, -1.34390100f }, { 0.f, 0.f, -0.622513800f, 0.782608800f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_H,            { 1371.751f,  193.4837f,  31.720350f, -1.34390100f }, { 0.f, 0.f, -0.622513800f, 0.782608800f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_A,            { 1352.459f, -299.6279f,  30.915560f, -1.34390100f }, { 0.f, 0.f, -0.622513800f, 0.782608800f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_H,            { 1352.459f, -299.6279f,  30.915560f, -1.34390100f }, { 0.f, 0.f, -0.622513800f, 0.782608800f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_A,            { 1351.841f, -302.0706f,  30.931220f,  1.76278200f }, { 0.f, 0.f,  0.771624600f, 0.636078200f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_H,            { 1351.841f, -302.0706f,  30.931220f,  1.76278200f }, { 0.f, 0.f,  0.771624600f, 0.636078200f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_A,            { 1351.704f, -300.4751f,  30.932540f,  2.91469000f }, { 0.f, 0.f,  0.993571300f, 0.113208400f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_H,            { 1351.704f, -300.4751f,  30.932540f,  2.91469000f }, { 0.f, 0.f,  0.993571300f, 0.113208400f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_A,            { 1370.981f,  192.5591f,  31.799300f,  0.29670520f }, { 0.f, 0.f,  0.147809000f, 0.989015900f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_H,            { 1370.981f,  192.5591f,  31.799300f,  0.29670520f }, { 0.f, 0.f,  0.147809000f, 0.989015900f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_A,            { 1370.006f,  195.1427f,  31.143620f, -2.75761300f }, { 0.f, 0.f, -0.981626500f, 0.190812400f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_H,            { 1370.006f,  195.1427f,  31.143620f, -2.75761300f }, { 0.f, 0.f, -0.981626500f, 0.190812400f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_A,            { 1369.612f,  196.4409f,  30.935980f,  1.30899500f }, { 0.f, 0.f,  0.608760800f, 0.793353800f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_H,            { 1369.612f,  196.4409f,  30.935980f,  1.30899500f }, { 0.f, 0.f,  0.608760800f, 0.793353800f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_A,            { 1369.476f,  195.7031f,  31.492370f, -1.09955600f }, { 0.f, 0.f, -0.522498100f, 0.852640500f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_H,            { 1369.476f,  195.7031f,  31.492370f, -1.09955600f }, { 0.f, 0.f, -0.522498100f, 0.852640500f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_A,            { 1369.083f,  195.1528f,  31.142340f, -1.57079600f }, { 0.f, 0.f, -0.707106600f, 0.707106900f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_H,            { 1369.083f,  195.1528f,  31.142340f, -1.57079600f }, { 0.f, 0.f, -0.707106600f, 0.707106900f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_A,            { 1368.804f,  196.1701f,  30.938080f,  0.71558490f }, { 0.f, 0.f,  0.350207300f, 0.936672200f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_H,            { 1368.804f,  196.1701f,  30.938080f,  0.71558490f }, { 0.f, 0.f,  0.350207300f, 0.936672200f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_A,            { 1340.334f, -304.7630f,  30.942910f,  1.83259500f }, { 0.f, 0.f,  0.793353100f, 0.608761700f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_H,            { 1340.334f, -304.7630f,  30.942910f,  1.83259500f }, { 0.f, 0.f,  0.793353100f, 0.608761700f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_A,            { 1339.189f, -303.4526f,  30.907960f,  1.11700900f }, { 0.f, 0.f,  0.529918700f, 0.848048400f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_H,            { 1339.189f, -303.4526f,  30.907960f,  1.11700900f }, { 0.f, 0.f,  0.529918700f, 0.848048400f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_A,            { 1338.510f, -301.9457f,  30.927130f,  0.90757020f }, { 0.f, 0.f,  0.438370700f, 0.898794200f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_H,            { 1338.510f, -301.9457f,  30.927130f,  0.90757020f }, { 0.f, 0.f,  0.438370700f, 0.898794200f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_A,            { 1334.250f,  208.2742f,  31.053120f, -3.07176600f }, { 0.f, 0.f, -0.999390600f, 0.034906130f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_H,            { 1334.250f,  208.2742f,  31.053120f, -3.07176600f }, { 0.f, 0.f, -0.999390600f, 0.034906130f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_A,            { 1334.229f,  207.2549f,  31.053120f,  0.22689250f }, { 0.f, 0.f,  0.113203000f, 0.993571900f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_H,            { 1334.229f,  207.2549f,  31.053120f,  0.22689250f }, { 0.f, 0.f,  0.113203000f, 0.993571900f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_A,            { 1333.595f,  207.9688f,  31.458410f, -0.64577170f }, { 0.f, 0.f, -0.317304600f, 0.948323700f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_H,            { 1333.595f,  207.9688f,  31.458410f, -0.64577170f }, { 0.f, 0.f, -0.317304600f, 0.948323700f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_A,            { 1333.193f,  208.6858f,  31.053120f,  1.13446300f }, { 0.f, 0.f,  0.537299200f, 0.843391700f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_H,            { 1333.193f,  208.6858f,  31.053120f,  1.13446300f }, { 0.f, 0.f,  0.537299200f, 0.843391700f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_A,            { 1332.903f,  207.6994f,  31.053120f,  0.89011660f }, { 0.f, 0.f,  0.430510500f, 0.902585600f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_H,            { 1332.903f,  207.6994f,  31.053120f,  0.89011660f }, { 0.f, 0.f,  0.430510500f, 0.902585600f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_A,            { 1100.564f, -7.964518f,  70.838610f, -1.34390100f }, { 0.f, 0.f, -0.622513800f, 0.782608800f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_H,            { 1100.564f, -7.964518f,  70.838610f, -1.34390100f }, { 0.f, 0.f, -0.622513800f, 0.782608800f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_A,            { 1099.795f, -8.889866f,  70.961130f,  0.29670520f }, { 0.f, 0.f,  0.147809000f, 0.989015900f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_H,            { 1099.795f, -8.889866f,  70.961130f,  0.29670520f }, { 0.f, 0.f,  0.147809000f, 0.989015900f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_A,            { 1099.309f, -8.017903f,  70.861790f, -1.34390100f }, { 0.f, 0.f, -0.622513800f, 0.782608800f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_H,            { 1099.309f, -8.017903f,  70.861790f, -1.34390100f }, { 0.f, 0.f, -0.622513800f, 0.782608800f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_A,            { 1098.540f, -8.943251f,  70.929660f,  0.29670520f }, { 0.f, 0.f,  0.147809000f, 0.989015900f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_H,            { 1098.540f, -8.943251f,  70.929660f,  0.29670520f }, { 0.f, 0.f,  0.147809000f, 0.989015900f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_A,            { 1097.939f, -0.858181f,  70.290220f, -2.75761300f }, { 0.f, 0.f, -0.981626500f, 0.190812400f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_H,            { 1097.939f, -0.858181f,  70.290220f, -2.75761300f }, { 0.f, 0.f, -0.981626500f, 0.190812400f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_A,            { 1097.564f, -6.359918f,  70.726010f, -2.75761300f }, { 0.f, 0.f, -0.981626500f, 0.190812400f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_H,            { 1097.564f, -6.359918f,  70.726010f, -2.75761300f }, { 0.f, 0.f, -0.981626500f, 0.190812400f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_A,            { 1097.547f,  0.440430f,  70.551630f,  1.30899500f }, { 0.f, 0.f,  0.608760800f, 0.793353800f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_H,            { 1097.547f,  0.440430f,  70.551630f,  1.30899500f }, { 0.f, 0.f,  0.608760800f, 0.793353800f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_A,            { 1097.410f, -0.296875f,  70.756130f, -1.09955600f }, { 0.f, 0.f, -0.522498100f, 0.852640500f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_H,            { 1097.410f, -0.296875f,  70.756130f, -1.09955600f }, { 0.f, 0.f, -0.522498100f, 0.852640500f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_A,            { 1097.172f, -5.061306f,  70.657330f,  1.30899500f }, { 0.f, 0.f,  0.608760800f, 0.793353800f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_H,            { 1097.172f, -5.061306f,  70.657330f,  1.30899500f }, { 0.f, 0.f,  0.608760800f, 0.793353800f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_A,            { 1097.035f, -5.798611f,  71.164210f, -1.09955600f }, { 0.f, 0.f, -0.522498100f, 0.852640500f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_H,            { 1097.035f, -5.798611f,  71.164210f, -1.09955600f }, { 0.f, 0.f, -0.522498100f, 0.852640500f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_A,            { 1096.616f, -0.741862f,  70.329960f, -1.57079600f }, { 0.f, 0.f, -0.707106600f, 0.707106900f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_H,            { 1096.616f, -0.741862f,  70.329960f, -1.57079600f }, { 0.f, 0.f, -0.707106600f, 0.707106900f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_A,            { 1096.241f, -6.243598f,  70.740530f, -1.57079600f }, { 0.f, 0.f, -0.707106600f, 0.707106900f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_H,            { 1096.241f, -6.243598f,  70.740530f, -1.57079600f }, { 0.f, 0.f, -0.707106600f, 0.707106900f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_A,            { 1096.040f,  0.777235f,  70.260410f,  0.71558490f }, { 0.f, 0.f,  0.350207300f, 0.936672200f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_H,            { 1096.040f,  0.777235f,  70.260410f,  0.71558490f }, { 0.f, 0.f,  0.350207300f, 0.936672200f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_A,            { 1095.665f, -4.724501f,  70.682970f,  0.71558490f }, { 0.f, 0.f,  0.350207300f, 0.936672200f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_H,            { 1095.665f, -4.724501f,  70.682970f,  0.71558490f }, { 0.f, 0.f,  0.350207300f, 0.936672200f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_A,            { 984.1200f,  7.510851f,  86.884260f, -1.32644800f }, { 0.f, 0.f, -0.615660700f, 0.788011400f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_H,            { 984.1200f,  7.510851f,  86.884260f, -1.32644800f }, { 0.f, 0.f, -0.615660700f, 0.788011400f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_A,            { 983.7570f,  6.909722f,  86.871500f, -1.57079600f }, { 0.f, 0.f, -0.707106600f, 0.707106900f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_H,            { 983.7570f,  6.909722f,  86.871500f, -1.57079600f }, { 0.f, 0.f, -0.707106600f, 0.707106900f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_A,            { 983.1875f,  7.192708f,  87.170010f,  1.98967200f }, { 0.f, 0.f,  0.838669800f, 0.544640200f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_H,            { 983.1875f,  7.192708f,  87.170010f,  1.98967200f }, { 0.f, 0.f,  0.838669800f, 0.544640200f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_A,            { 983.1600f,  8.073622f,  86.890840f, -0.92502390f }, { 0.f, 0.f, -0.446197500f, 0.894934500f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_H,            { 983.1600f,  8.073622f,  86.890840f, -0.92502390f }, { 0.f, 0.f, -0.446197500f, 0.894934500f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_A,            { 983.1038f,  6.336968f,  86.857640f, -1.50098300f }, { 0.f, 0.f, -0.681998300f, 0.731353800f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_H,            { 983.1038f,  6.336968f,  86.857640f, -1.50098300f }, { 0.f, 0.f, -0.681998300f, 0.731353800f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_A,            { 982.3564f,  7.541721f,  86.876340f, -2.63544400f }, { 0.f, 0.f, -0.968147300f, 0.250381400f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_H,            { 982.3564f,  7.541721f,  86.876340f, -2.63544400f }, { 0.f, 0.f, -0.968147300f, 0.250381400f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_A,            { 980.4064f,  3.431749f,  86.792310f, -0.54105060f }, { 0.f, 0.f, -0.267237700f, 0.963630700f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_H,            { 980.4064f,  3.431749f,  86.792310f, -0.54105060f }, { 0.f, 0.f, -0.267237700f, 0.963630700f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_A,            { 979.5364f,  4.822917f,  86.814440f, -0.27925160f }, { 0.f, 0.f, -0.139172600f, 0.990268200f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_H,            { 979.5364f,  4.822917f,  86.814440f, -0.27925160f }, { 0.f, 0.f, -0.139172600f, 0.990268200f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_A,            { 979.0226f,  3.528320f,  86.790890f, -0.54105060f }, { 0.f, 0.f, -0.267237700f, 0.963630700f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_H,            { 979.0226f,  3.528320f,  86.790890f, -0.54105060f }, { 0.f, 0.f, -0.267237700f, 0.963630700f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_A,            { 978.9601f,  4.175347f,  87.132060f,  0.24434560f }, { 0.f, 0.f,  0.121869100f, 0.992546200f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_H,            { 978.9601f,  4.175347f,  87.132060f,  0.24434560f }, { 0.f, 0.f,  0.121869100f, 0.992546200f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_A,            { 978.5243f,  4.972222f,  86.818240f, -0.27925160f }, { 0.f, 0.f, -0.139172600f, 0.990268200f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_H,            { 978.5243f,  4.972222f,  86.818240f, -0.27925160f }, { 0.f, 0.f, -0.139172600f, 0.990268200f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_A,            { 978.3871f,  3.937500f,  86.801080f,  0.24434560f }, { 0.f, 0.f,  0.121869100f, 0.992546200f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_H,            { 978.3871f,  3.937500f,  86.801080f,  0.24434560f }, { 0.f, 0.f,  0.121869100f, 0.992546200f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_A,            { 973.1193f,  5.394423f,  86.890010f, -3.10665200f }, { 0.f, 0.f, -0.999847400f, 0.017469280f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_H,            { 973.1193f,  5.394423f,  86.890010f, -3.10665200f }, { 0.f, 0.f, -0.999847400f, 0.017469280f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_A,            { 972.6932f,  3.933757f,  86.871550f, -0.54105060f }, { 0.f, 0.f, -0.267237700f, 0.963630700f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_H,            { 972.6932f,  3.933757f,  86.871550f, -0.54105060f }, { 0.f, 0.f, -0.267237700f, 0.963630700f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_A,            { 971.8299f,  5.217014f,  86.916530f, -0.27925160f }, { 0.f, 0.f, -0.139172600f, 0.990268200f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_H,            { 971.8299f,  5.217014f,  86.916530f, -0.27925160f }, { 0.f, 0.f, -0.139172600f, 0.990268200f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_A,            { 971.6641f,  2.423177f,  86.873140f, -0.27925160f }, { 0.f, 0.f, -0.139172600f, 0.990268200f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_H,            { 971.6641f,  2.423177f,  86.873140f, -0.27925160f }, { 0.f, 0.f, -0.139172600f, 0.990268200f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_A,            { 971.2458f,  4.677463f,  86.919960f,  0.24434560f }, { 0.f, 0.f,  0.121869100f, 0.992546200f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_H,            { 971.2458f,  4.677463f,  86.919960f,  0.24434560f }, { 0.f, 0.f,  0.121869100f, 0.992546200f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_A,            { 969.7603f,  1.590603f,  86.928840f, -0.54105060f }, { 0.f, 0.f, -0.267237700f, 0.963630700f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_H,            { 969.7603f,  1.590603f,  86.928840f, -0.54105060f }, { 0.f, 0.f, -0.267237700f, 0.963630700f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_A,            { 969.6072f,  4.697157f,  87.010640f, -3.10665200f }, { 0.f, 0.f, -0.999847400f, 0.017469280f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_H,            { 969.6072f,  4.697157f,  87.010640f, -3.10665200f }, { 0.f, 0.f, -0.999847400f, 0.017469280f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_A,            { 969.0047f,  3.825195f,  87.013220f,  0.24434560f }, { 0.f, 0.f,  0.121869100f, 0.992546200f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_H,            { 969.0047f,  3.825195f,  87.013220f,  0.24434560f }, { 0.f, 0.f,  0.121869100f, 0.992546200f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_A,            { 968.8577f,  4.553820f,  87.482830f, -0.54105060f }, { 0.f, 0.f, -0.267237700f, 0.963630700f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_H,            { 968.8577f,  4.553820f,  87.482830f, -0.54105060f }, { 0.f, 0.f, -0.267237700f, 0.963630700f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_A,            { 968.3743f,  5.152669f,  87.101040f, -0.27925160f }, { 0.f, 0.f, -0.139172600f, 0.990268200f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_H,            { 968.3743f,  5.152669f,  87.101040f, -0.27925160f }, { 0.f, 0.f, -0.139172600f, 0.990268200f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_A,            { 967.7339f,  3.980143f,  87.090860f,  0.24434560f }, { 0.f, 0.f,  0.121869100f, 0.992546200f }, RESPAWN_ONE_DAY },
    { GO_SEAFORIUM_BOMB_H,            { 967.7339f,  3.980143f,  87.090860f,  0.24434560f }, { 0.f, 0.f,  0.121869100f, 0.992546200f }, RESPAWN_ONE_DAY }
};

uint32 const BG_SA_Factions[BG_TEAMS_COUNT] =
{
    1732,
    1735,
};

uint32 const BG_SA_GYEntries[BG_SA_MAX_GY] =
{
    1350,
    1349,
    1347,
    1346,
    1348,
};

float const BG_SA_GYOrientation[BG_SA_MAX_GY] =
{
    6.202f,
    1.926f, // right capturable GY
    3.917f, // left capturable GY
    3.104f, // center, capturable
    6.148f, // defender last GY
};

GateInfo const BG_SA_GateInfo[BG_SA_MAX_GATES] =
{
    { BG_SA_GREEN_GATE,   BG_SA_BLUE_GATE,   GO_GATE_OF_THE_GREEN_EMERALD,   BG_SA_GREEN_GATEWS,   TEXT_GREEN_GATE_UNDER_ATTACK,   TEXT_GREEN_GATE_DESTROYED   },
    { BG_SA_YELLOW_GATE,  0,                 GO_GATE_OF_THE_YELLOW_MOON,     BG_SA_YELLOW_GATEWS,  TEXT_YELLOW_GATE_UNDER_ATTACK,  TEXT_YELLOW_GATE_DESTROYED  },
    { BG_SA_BLUE_GATE,    BG_SA_GREEN_GATE,  GO_GATE_OF_THE_BLUE_SAPPHIRE,   BG_SA_BLUE_GATEWS,    TEXT_BLUE_GATE_UNDER_ATTACK,    TEXT_BLUE_GATE_DESTROYED    },
    { BG_SA_RED_GATE,     BG_SA_PURPLE_GATE, GO_GATE_OF_THE_RED_SUN,         BG_SA_RED_GATEWS,     TEXT_RED_GATE_UNDER_ATTACK,     TEXT_RED_GATE_DESTROYED     },
    { BG_SA_PURPLE_GATE,  BG_SA_RED_GATE,    GO_GATE_OF_THE_PURPLE_AMETHYST, BG_SA_PURPLE_GATEWS,  TEXT_PURPLE_GATE_UNDER_ATTACK,  TEXT_PURPLE_GATE_DESTROYED  },
    { BG_SA_ANCIENT_GATE, 0,                 GO_CHAMBER_OF_ANCIENT_RELICS,   BG_SA_ANCIENT_GATEWS, TEXT_ANCIENT_GATE_UNDER_ATTACK, TEXT_ANCIENT_GATE_DESTROYED }
};

BattlegroundSA::BattlegroundSA()
{
    StartMessageIds[BG_STARTING_EVENT_FIRST]  = LANG_BG_SA_START_TWO_MINUTES;
    StartMessageIds[BG_STARTING_EVENT_SECOND] = LANG_BG_SA_START_ONE_MINUTE;
    StartMessageIds[BG_STARTING_EVENT_THIRD]  = LANG_BG_SA_START_HALF_MINUTE;
    StartMessageIds[BG_STARTING_EVENT_FOURTH] = 0;

    SetGameObjectsNumber(BG_SA_MAXOBJ + BG_SA_MAX_SHIPS_PER_TEAM);
    SetCreaturesNumber(BG_SA_MAXNPC + BG_SA_MAX_GY);

    TimerEnabled = false;
    UpdateWaitTimer = 0;
    SignaledRoundTwo = false;
    SignaledRoundTwoHalfMin = false;
    InitSecondRound = false;
    _gateDestroyed = false;
    Attackers = TEAM_ALLIANCE;
    TotalTime = 0;
    EndRoundTimer = 0;
    ShipsStarted = false;
    Status = BG_SA_NOT_STARTED;

    for (uint8 i = 0; i < BG_SA_MAX_GATES; ++i)
        GateStatus[i] = BG_SA_GATE_OK;

    for (uint8 i = 0; i < 2; ++i)
    {
        RoundScores[i].winner = TEAM_ALLIANCE;
        RoundScores[i].time = 0;
        _allVehiclesAlive[i] = true;
    }

    for (uint32 i = 0; i < BG_SA_DEMOLISHER_AMOUNT; ++i)
        DemolisherRespawnTimes[i] = 0;

    for (uint32 i = 0; i < BG_SA_MAX_GY; ++i)
        GraveyardStatus[i] = TEAM_ALLIANCE;
}

BattlegroundSA::~BattlegroundSA() { }

void BattlegroundSA::Reset()
{
    TotalTime = 0;
    Attackers = ((urand(0, 1)) ? TEAM_ALLIANCE : TEAM_HORDE);
    for (uint8 i = 0; i <= 5; i++)
        GateStatus[i] = BG_SA_GATE_OK;
    ShipsStarted = false;
    _gateDestroyed = false;
    _allVehiclesAlive[TEAM_ALLIANCE] = true;
    _allVehiclesAlive[TEAM_HORDE] = true;
    Status = BG_SA_WARMUP;
}

bool BattlegroundSA::SetupBattleground()
{
    return ResetObjs();
}

bool BattlegroundSA::ResetObjs()
{
    for (BattlegroundPlayerMap::const_iterator itr = GetPlayers().begin(); itr != GetPlayers().end(); ++itr)
        if (Player* player = ObjectAccessor::FindPlayer(itr->first))
            SendTransportsRemove(player);

    TeamId Defenders = Attackers == TEAM_HORDE ? TEAM_ALLIANCE : TEAM_HORDE;

    for (uint32 i = 0; i < BG_SA_MAXOBJ; ++i)
        SpawnBGObject(i, RESPAWN_ONE_DAY);

    for (uint32 i = BG_SA_BOAT_ONE; i <= BG_SA_BOAT_TWO; ++i)
        DelObject(i);

    for (uint32 i = 0; i < BG_SA_MAXNPC + BG_SA_MAX_GY; ++i)
    {
        // Demos at the workshops do not despawn when the second offensive team attacks,
        // allowing the second team to grab extra demos before attempting to cap either the East or West graveyards.
        if (i >= BG_SA_DEMOLISHER_5 && i <= BG_SA_DEMOLISHER_8)
        {
            if (Creature* demo = GetBGCreature(i, false))
            {
                demo->setFaction(BG_SA_Factions[Attackers]);
                demo->Relocate(BG_SA_Creatures[i].Pos);
                demo->Respawn(true);
            }
            continue;
        }

        DelCreature(i);
    }

    for (uint32 i = 0; i < BG_SA_MAX_GATES; ++i)
    {
        GateStatus[i] = BG_SA_GATE_OK;
        if (GameObject* gate = GetBGObject(i, false))
            gate->SetDestructibleState(GO_DESTRUCTIBLE_INTACT, nullptr, true);
    }

    BattlegroundSpawnPoint const& kanrethad = BG_SA_Creatures[BG_SA_NPC_KANRETHAD];
    if (!AddCreature(kanrethad.Entry, BG_SA_NPC_KANRETHAD, kanrethad.Pos, kanrethad.SpawnTime))
    {
        TC_LOG_ERROR("bg.battleground", "SOTA: couldn't spawn Kanrethad, aborted. Entry: %u", kanrethad.Entry);
        return false;
    }

    for (uint32 i = 0; i < BG_SA_MAXOBJ; ++i)
    {
        BattlegroundGOSpawnPoint const& object = BG_SA_Objects[i];
        if (GetBGObject(i, false))
            SpawnBGObject(i, object.SpawnTime);
        else if (!AddObject(i, object.Entry, object.Pos, object.Rot, object.SpawnTime))
        {
            TC_LOG_ERROR("bg.battleground", "SOTA: couldn't spawn GameObject! (Entry: %u). Aborted.", object.Entry);
            return false;
        }
    }

    for (uint32 i = BG_SA_BOAT_ONE; i <= BG_SA_BOAT_TWO; ++i)
    {
        uint32 boatId = 0;
        switch (i)
        {
            case BG_SA_BOAT_ONE:
                boatId = Attackers == TEAM_HORDE ? BG_SA_BOAT_ONE_H : BG_SA_BOAT_ONE_A;
                break;
            case BG_SA_BOAT_TWO:
                boatId = Attackers == TEAM_HORDE ? BG_SA_BOAT_TWO_H : BG_SA_BOAT_TWO_A;
                break;
            default:
                break;
        }

        BattlegroundGOSpawnPoint const& boat = BG_SA_Ships[boatId - BG_SA_BOAT_ONE_A];
        GameObject* ship = AddObject(i, boat.Entry, boat.Pos, boat.Rot, boat.SpawnTime);
        if (!ship)
        {
            TC_LOG_ERROR("bg.battleground", "SOTA: couldn't spawn ship! (Entry: %u). Aborted.", boatId);
            return false;
        }

        ship->SetParentRotation(shipParentRotation);
        SpawnBGObject(i, RESPAWN_IMMEDIATELY);
    }

    // Cannons and demolishers - NPCs are spawned
    // By capturing GYs.
    for (uint32 i = 0; i <= BG_SA_DEMOLISHER_4; ++i)
    {
        BattlegroundSpawnPoint const& creature = BG_SA_Creatures[i];
        if (!AddCreature(creature.Entry, i, creature.Pos, creature.SpawnTime))
        {
            TC_LOG_ERROR("bg.battleground", "SOTA: couldn't spawn Cannon or demolisher! (Entry: %u, Attackers: %s). Aborted.", creature.Entry, Attackers == TEAM_ALLIANCE ? "Horde(1)" : "Alliance(0)");
            return false;
        }
    }

    OverrideGunFaction();
    DemolisherStartState(true);

    // spawn gates and sigils
    for (uint32 i = BG_SA_GREEN_GATE; i <= BG_SA_ANCIENT_GATE; ++i)
        SpawnBGObject(i, RESPAWN_IMMEDIATELY);

    for (uint32 i = BG_SA_GREEN_SIGIL; i <= BG_SA_PURPLE_SIGIL; ++i)
        SpawnBGObject(i, RESPAWN_IMMEDIATELY);

    for (uint32 i = BG_SA_TELEPORT_TRIGGER_GREEN; i <= BG_SA_TELEPORT_TRIGGER_PURPLE; ++i)
    {
        BattlegroundSpawnPoint const& trigger = BG_SA_Creatures[i];
        if (!AddCreature(trigger.Entry, i, trigger.Pos, trigger.SpawnTime))
        {
            TC_LOG_ERROR("bg.battleground", "SOTA: couldn't spawn trigger! (Entry: %u). Aborted.", trigger.Entry);
            return false;
        }
    }

    SpawnBGObject(BG_SA_TITAN_RELIC_A + Attackers, RESPAWN_IMMEDIATELY); // 0 alliance, 1 horde

    // spawn graveyard flags
    for (uint32 i = BG_SA_CENTRAL_FLAGPOLE; i <= BG_SA_LEFT_FLAGPOLE; ++i)
        SpawnBGObject(i, RESPAWN_IMMEDIATELY);

    for (uint32 i = BG_SA_CENTRAL_FLAG_A; i <= BG_SA_LEFT_FLAG_A; i += BG_TEAMS_COUNT)
        SpawnBGObject(i + Defenders, RESPAWN_IMMEDIATELY);

    // spawn defender team portals
    for (uint32 i = BG_SA_PORTAL_DEFENDER_BLUE_A; i <= BG_SA_PORTAL_DEFENDER_RED_A; i += BG_TEAMS_COUNT)
        SpawnBGObject(i + Defenders, RESPAWN_IMMEDIATELY);

    UpdateObjectInteractionFlags();

    // spawn bombs
    for (uint32 i = BG_SA_BOMB_A_1; i <= BG_SA_BOMB_A_91; i += BG_TEAMS_COUNT)
        SpawnBGObject(i + Attackers, RESPAWN_IMMEDIATELY);

    UpdateBombInteractionFlags();

    TotalTime = 0;
    ShipsStarted = false;

    //Graveyards
    for (uint32 i = 0; i < BG_SA_MAX_GY; ++i)
    {
        WorldSafeLocsEntry const* sg = nullptr;
        sg = sWorldSafeLocsStore.LookupEntry(BG_SA_GYEntries[i]);

        if (!sg)
        {
            TC_LOG_ERROR("bg.battleground", "SOTA: Can't find GY entry %u", BG_SA_GYEntries[i]);
            return false;
        }

        TeamId graveyardTeam = Attackers == TEAM_HORDE ? TEAM_ALLIANCE : TEAM_HORDE;
        if (i == BG_SA_BEACH_GY)
            graveyardTeam = Attackers;

        GraveyardStatus[i] = graveyardTeam;
        if (!AddSpiritGuide(i + BG_SA_MAXNPC, Position(sg->x, sg->y, sg->z, BG_SA_GYOrientation[i]), graveyardTeam))
        {
            TC_LOG_ERROR("bg.battleground", "SOTA: couldn't spawn GY: %u", i);
            return false;
        }
    }

    //Player may enter BEFORE we set up BG - lets update his worldstates anyway...
    UpdateWorldState(BG_SA_RIGHT_GY_HORDE, GraveyardStatus[BG_SA_RIGHT_CAPTURABLE_GY] == TEAM_HORDE ? 1 : 0);
    UpdateWorldState(BG_SA_LEFT_GY_HORDE, GraveyardStatus[BG_SA_LEFT_CAPTURABLE_GY] == TEAM_HORDE ? 1 : 0);
    UpdateWorldState(BG_SA_CENTER_GY_HORDE, GraveyardStatus[BG_SA_CENTRAL_CAPTURABLE_GY] == TEAM_HORDE ? 1 : 0);

    UpdateWorldState(BG_SA_RIGHT_GY_ALLIANCE, GraveyardStatus[BG_SA_RIGHT_CAPTURABLE_GY] == TEAM_ALLIANCE ? 1 : 0);
    UpdateWorldState(BG_SA_LEFT_GY_ALLIANCE, GraveyardStatus[BG_SA_LEFT_CAPTURABLE_GY] == TEAM_ALLIANCE ? 1 : 0);
    UpdateWorldState(BG_SA_CENTER_GY_ALLIANCE, GraveyardStatus[BG_SA_CENTRAL_CAPTURABLE_GY] == TEAM_ALLIANCE ? 1 : 0);

    if (Attackers == TEAM_ALLIANCE)
    {
        UpdateWorldState(BG_SA_ALLY_ATTACKS, 1);
        UpdateWorldState(BG_SA_HORDE_ATTACKS, 0);

        UpdateWorldState(BG_SA_RIGHT_ATT_TOKEN_ALL, 1);
        UpdateWorldState(BG_SA_LEFT_ATT_TOKEN_ALL, 1);
        UpdateWorldState(BG_SA_RIGHT_ATT_TOKEN_HRD, 0);
        UpdateWorldState(BG_SA_LEFT_ATT_TOKEN_HRD, 0);

        UpdateWorldState(BG_SA_HORDE_DEFENCE_TOKEN, 1);
        UpdateWorldState(BG_SA_ALLIANCE_DEFENCE_TOKEN, 0);
    }
    else
    {
        UpdateWorldState(BG_SA_HORDE_ATTACKS, 1);
        UpdateWorldState(BG_SA_ALLY_ATTACKS, 0);

        UpdateWorldState(BG_SA_RIGHT_ATT_TOKEN_ALL, 0);
        UpdateWorldState(BG_SA_LEFT_ATT_TOKEN_ALL, 0);
        UpdateWorldState(BG_SA_RIGHT_ATT_TOKEN_HRD, 1);
        UpdateWorldState(BG_SA_LEFT_ATT_TOKEN_HRD, 1);

        UpdateWorldState(BG_SA_HORDE_DEFENCE_TOKEN, 0);
        UpdateWorldState(BG_SA_ALLIANCE_DEFENCE_TOKEN, 1);
    }

    UpdateWorldState(BG_SA_PURPLE_GATEWS, 1);
    UpdateWorldState(BG_SA_RED_GATEWS, 1);
    UpdateWorldState(BG_SA_BLUE_GATEWS, 1);
    UpdateWorldState(BG_SA_GREEN_GATEWS, 1);
    UpdateWorldState(BG_SA_YELLOW_GATEWS, 1);
    UpdateWorldState(BG_SA_ANCIENT_GATEWS, 1);

    for (uint32 i = BG_SA_BOAT_ONE; i <= BG_SA_BOAT_TWO; ++i)
        for (BattlegroundPlayerMap::const_iterator itr = GetPlayers().begin(); itr != GetPlayers().end(); ++itr)
            if (Player* player = ObjectAccessor::FindPlayer(itr->first))
                SendTransportInit(player);

    // set status manually so preparation is cast correctly in 2nd round too
    SetStatus(STATUS_WAIT_JOIN);

    TeleportPlayers();
    return true;
}

void BattlegroundSA::StartShips()
{
    if (ShipsStarted)
        return;

    ShipsStarted = true;

    DoorOpen(BG_SA_BOAT_ONE);
    DoorOpen(BG_SA_BOAT_TWO);

    for (uint32 i = BG_SA_BOAT_ONE; i <= BG_SA_BOAT_TWO; ++i)
    {
        if (GameObject* boat = GetBGObject(i, false))
        {
            for (BattlegroundPlayerMap::const_iterator itr = GetPlayers().begin(); itr != GetPlayers().end(); ++itr)
            {
                Player* player = ObjectAccessor::FindPlayer(itr->first);
                if (!player)
                    continue;

                UpdateData data;
                boat->BuildValuesUpdateBlockForPlayer(&data, player);

                // do not send if empty
                if (!data.HasData())
                    continue;

                WorldPacket pkt;
                data.BuildPacket(&pkt);
                player->SendDirectMessage(&pkt);
            }
        }
    }
}

void BattlegroundSA::PostUpdateImpl(uint32 diff)
{
    if (InitSecondRound)
    {
        if (UpdateWaitTimer < diff)
        {
            if (!SignaledRoundTwo)
            {
                SignaledRoundTwo = true;
                InitSecondRound = false;
                SendMessageToAll(LANG_BG_SA_ROUND_TWO_ONE_MINUTE, CHAT_MSG_BG_SYSTEM_NEUTRAL);
            }
        }
        else
        {
            UpdateWaitTimer -= diff;
            return;
        }
    }
    TotalTime += diff;

    if (Status == BG_SA_WARMUP)
    {
        EndRoundTimer = BG_SA_ROUNDLENGTH;
        if (TotalTime >= BG_SA_WARMUPLENGTH)
        {
            if (Creature* c = GetBGCreature(BG_SA_NPC_KANRETHAD))
                SendChatMessage(c, TEXT_ROUND_STARTED);

            TotalTime = 0;
            ToggleTimer();
            DemolisherStartState(false);
            Status = BG_SA_ROUND_ONE;
            UpdateBombInteractionFlags();
            StartTimedAchievement(ACHIEVEMENT_TIMED_TYPE_EVENT, (Attackers == TEAM_ALLIANCE) ? 23748 : 21702);
        }
        if (TotalTime >= BG_SA_BOAT_START)
            StartShips();
        return;
    }
    else if (Status == BG_SA_SECOND_WARMUP)
    {
        if (RoundScores[0].time < BG_SA_ROUNDLENGTH)
            EndRoundTimer = RoundScores[0].time;
        else
            EndRoundTimer = BG_SA_ROUNDLENGTH;

        if (TotalTime >= 60000)
        {
            if (Creature* c = GetBGCreature(BG_SA_NPC_KANRETHAD))
                SendChatMessage(c, TEXT_ROUND_STARTED);

            TotalTime = 0;
            ToggleTimer();
            DemolisherStartState(false);
            Status = BG_SA_ROUND_TWO;
            UpdateBombInteractionFlags();
            StartTimedAchievement(ACHIEVEMENT_TIMED_TYPE_EVENT, (Attackers == TEAM_ALLIANCE) ? 23748 : 21702);
            // status was set to STATUS_WAIT_JOIN manually for Preparation, set it back now
            SetStatus(STATUS_IN_PROGRESS);
            for (BattlegroundPlayerMap::const_iterator itr = GetPlayers().begin(); itr != GetPlayers().end(); ++itr)
                if (Player* p = ObjectAccessor::FindPlayer(itr->first))
                    p->RemoveAurasDueToSpell(SPELL_PREPARATION);
        }
        if (TotalTime >= 30000)
        {
            if (!SignaledRoundTwoHalfMin)
            {
                SignaledRoundTwoHalfMin = true;
                SendMessageToAll(LANG_BG_SA_ROUND_TWO_START_HALF_MINUTE, CHAT_MSG_BG_SYSTEM_NEUTRAL);
            }
        }
        StartShips();
        return;
    }
    else if (GetStatus() == STATUS_IN_PROGRESS)
    {
        if (Status == BG_SA_ROUND_ONE)
        {
            if (TotalTime >= BG_SA_ROUNDLENGTH)
            {
                CastSpellOnTeam(SPELL_END_OF_ROUND, ALLIANCE);
                CastSpellOnTeam(SPELL_END_OF_ROUND, HORDE);
                RoundScores[0].winner = Attackers;
                RoundScores[0].time = BG_SA_ROUNDLENGTH;
                TotalTime = 0;
                Status = BG_SA_SECOND_WARMUP;
                UpdateBombInteractionFlags();
                Attackers = (Attackers == TEAM_ALLIANCE) ? TEAM_HORDE : TEAM_ALLIANCE;
                UpdateWaitTimer = 5000;
                SignaledRoundTwo = false;
                SignaledRoundTwoHalfMin = false;
                InitSecondRound = true;
                ToggleTimer();
                ResetObjs();
                GetBgMap()->UpdateAreaDependentAuras();
                return;
            }
        }
        else if (Status == BG_SA_ROUND_TWO)
        {
            if (TotalTime >= EndRoundTimer)
            {
                CastSpellOnTeam(SPELL_END_OF_ROUND, ALLIANCE);
                CastSpellOnTeam(SPELL_END_OF_ROUND, HORDE);
                RoundScores[1].time = BG_SA_ROUNDLENGTH;
                RoundScores[1].winner = (Attackers == TEAM_ALLIANCE) ? TEAM_HORDE : TEAM_ALLIANCE;
                if (RoundScores[0].time == RoundScores[1].time)
                    EndBattleground(0);
                else if (RoundScores[0].time < RoundScores[1].time)
                    EndBattleground(RoundScores[0].winner == TEAM_ALLIANCE ? ALLIANCE : HORDE);
                else
                    EndBattleground(RoundScores[1].winner == TEAM_ALLIANCE ? ALLIANCE : HORDE);
                return;
            }
        }
        if (Status == BG_SA_ROUND_ONE || Status == BG_SA_ROUND_TWO)
        {
            SendTime();
            UpdateDemolisherSpawns();
        }
    }
}

void BattlegroundSA::StartingEventCloseDoors() { }

void BattlegroundSA::StartingEventOpenDoors() { }

void BattlegroundSA::FillInitialWorldStates(WorldPacket& data)
{
    bool allyAttacks = Attackers == TEAM_ALLIANCE;
    bool hordeAttacks = Attackers == TEAM_HORDE;

    data << uint32(BG_SA_ANCIENT_GATEWS) << uint32(GateStatus[BG_SA_ANCIENT_GATE]);
    data << uint32(BG_SA_YELLOW_GATEWS) << uint32(GateStatus[BG_SA_YELLOW_GATE]);
    data << uint32(BG_SA_GREEN_GATEWS) << uint32(GateStatus[BG_SA_GREEN_GATE]);
    data << uint32(BG_SA_BLUE_GATEWS) << uint32(GateStatus[BG_SA_BLUE_GATE]);
    data << uint32(BG_SA_RED_GATEWS) << uint32(GateStatus[BG_SA_RED_GATE]);
    data << uint32(BG_SA_PURPLE_GATEWS) << uint32(GateStatus[BG_SA_PURPLE_GATE]);

    data << uint32(BG_SA_BONUS_TIMER) << uint32(0);

    data << uint32(BG_SA_HORDE_ATTACKS) << uint32(hordeAttacks);
    data << uint32(BG_SA_ALLY_ATTACKS) << uint32(allyAttacks);

    uint32 end_of_round = (EndRoundTimer - TotalTime);
    data << uint32(BG_SA_ENABLE_TIMER) << uint32(TimerEnabled);
    data << uint32(BG_SA_TIMER_MINS) << uint32(end_of_round / 60000);
    data << uint32(BG_SA_TIMER_SEC_TENS) << uint32((end_of_round % 60000) / 10000);
    data << uint32(BG_SA_TIMER_SEC_DECS) << uint32(((end_of_round % 60000) % 10000) / 1000);

    data << uint32(BG_SA_RIGHT_GY_HORDE) << uint32(GraveyardStatus[BG_SA_RIGHT_CAPTURABLE_GY] == TEAM_HORDE);
    data << uint32(BG_SA_LEFT_GY_HORDE) << uint32(GraveyardStatus[BG_SA_LEFT_CAPTURABLE_GY] == TEAM_HORDE);
    data << uint32(BG_SA_CENTER_GY_HORDE) << uint32(GraveyardStatus[BG_SA_CENTRAL_CAPTURABLE_GY] == TEAM_HORDE);

    data << uint32(BG_SA_RIGHT_GY_ALLIANCE) << uint32(GraveyardStatus[BG_SA_RIGHT_CAPTURABLE_GY] == TEAM_ALLIANCE);
    data << uint32(BG_SA_LEFT_GY_ALLIANCE) << uint32(GraveyardStatus[BG_SA_LEFT_CAPTURABLE_GY] == TEAM_ALLIANCE);
    data << uint32(BG_SA_CENTER_GY_ALLIANCE) << uint32(GraveyardStatus[BG_SA_CENTRAL_CAPTURABLE_GY] == TEAM_ALLIANCE);

    data << uint32(BG_SA_HORDE_DEFENCE_TOKEN) << uint32(allyAttacks);
    data << uint32(BG_SA_ALLIANCE_DEFENCE_TOKEN) << uint32(hordeAttacks);

    data << uint32(BG_SA_LEFT_ATT_TOKEN_HRD) << uint32(hordeAttacks);
    data << uint32(BG_SA_RIGHT_ATT_TOKEN_HRD) << uint32(hordeAttacks);
    data << uint32(BG_SA_RIGHT_ATT_TOKEN_ALL) <<  uint32(allyAttacks);
    data << uint32(BG_SA_LEFT_ATT_TOKEN_ALL) <<  uint32(allyAttacks);
}

void BattlegroundSA::AddPlayer(Player* player)
{
    Battleground::AddPlayer(player);
    PlayerScores[player->GetGUID().GetCounter()] = new BattlegroundSAScore(player->GetGUID());

    SendTransportInit(player);

    TeleportToEntrancePosition(player);
}

void BattlegroundSA::RemovePlayer(Player* /*player*/, ObjectGuid /*guid*/, uint32 /*team*/) { }

void BattlegroundSA::HandleAreaTrigger(Player* /*Source*/, uint32 /*Trigger*/)
{
    // this is wrong way to implement these things. On official it done by gameobject spell cast.
    if (GetStatus() != STATUS_IN_PROGRESS)
        return;
}

void BattlegroundSA::TeleportPlayers()
{
    for (BattlegroundPlayerMap::const_iterator itr = GetPlayers().begin(); itr != GetPlayers().end(); ++itr)
    {
        if (Player* player = ObjectAccessor::FindPlayer(itr->first))
        {
            // should remove spirit of redemption
            if (player->HasAuraType(SPELL_AURA_SPIRIT_OF_REDEMPTION))
                player->RemoveAurasByType(SPELL_AURA_MOD_SHAPESHIFT);

            if (!player->IsAlive())
            {
                player->ResurrectPlayer(1.0f);
                player->SpawnCorpseBones();
            }

            player->ResetAllPowers();
            player->CombatStopWithPets(true);

            player->CastSpell(player, SPELL_PREPARATION, true);

            TeleportToEntrancePosition(player);
        }
    }
}

void BattlegroundSA::TeleportToEntrancePosition(Player* player)
{
    if (player->GetTeamId() == Attackers)
    {
        if (!ShipsStarted)
        {
            player->AddUnitMovementFlag(MOVEMENTFLAG_ONTRANSPORT);

            if (urand(0, 1))
                player->TeleportTo(607, 2682.936f, -830.368f, 15.0f, 2.895f, 0);
            else
                player->TeleportTo(607, 2577.003f, 980.261f, 15.0f, 0.807f, 0);
        }
        else
            player->TeleportTo(607, 1600.381f, -106.263f, 8.8745f, 3.78f, 0);
    }
    else
        player->TeleportTo(607, 1209.7f, -65.16f, 70.1f, 0.0f, 0);
}

void BattlegroundSA::ProcessEvent(WorldObject* obj, uint32 eventId, WorldObject* invoker /*= nullptr*/)
{
    if (GameObject* go = obj->ToGameObject())
    {
        switch (go->GetGoType())
        {
            case GAMEOBJECT_TYPE_GOOBER:
                if (invoker)
                    if (eventId == BG_SA_EVENT_TITAN_RELIC_ACTIVATED)
                        TitanRelicActivated(invoker->ToPlayer());
                break;
            case GAMEOBJECT_TYPE_DESTRUCTIBLE_BUILDING:
            {
                if (GateInfo const* gate = GetGate(obj->GetEntry()))
                {
                    uint8 gateId = gate->GateId;

                    // damaged
                    if (eventId == go->GetGOInfo()->building.damagedEvent)
                    {
                        GateStatus[gateId] = BG_SA_GATE_DAMAGED;

                        if (Creature* c = obj->FindNearestCreature(NPC_WORLD_TRIGGER, 500.0f))
                            SendChatMessage(c, gate->DamagedText, invoker);

                        PlaySoundToAll(Attackers == TEAM_ALLIANCE ? SOUND_WALL_ATTACKED_ALLIANCE : SOUND_WALL_ATTACKED_HORDE);
                    }
                    // destroyed
                    else if (eventId == go->GetGOInfo()->building.destroyedEvent)
                    {
                        GateStatus[gate->GateId] = BG_SA_GATE_DESTROYED;
                        _gateDestroyed = true;

                        // hide sigil
                        if (gateId < BG_SA_ANCIENT_GATE)
                            SpawnBGObject(gateId - BG_SA_GREEN_GATE + BG_SA_GREEN_SIGIL, RESPAWN_ONE_DAY);

                        // if this is not yellow (last) door destroy associated teleport triggers in this door "tier"
                        if (gateId != BG_SA_YELLOW_GATE)
                        {
                            DelCreature(gateId - BG_SA_GREEN_GATE + BG_SA_TELEPORT_TRIGGER_GREEN);
                            DelCreature(gate->LinkedGateId - BG_SA_GREEN_GATE + BG_SA_TELEPORT_TRIGGER_GREEN);
                        }

                        if (Creature* c = obj->FindNearestCreature(NPC_WORLD_TRIGGER, 500.0f))
                            SendChatMessage(c, gate->DestroyedText, invoker);

                        PlaySoundToAll(Attackers == TEAM_ALLIANCE ? SOUND_WALL_DESTROYED_ALLIANCE : SOUND_WALL_DESTROYED_HORDE);

                        bool rewardHonor = true;
                        switch (gateId)
                        {
                            case BG_SA_GREEN_GATE:
                                if (GateStatus[BG_SA_BLUE_GATE] == BG_SA_GATE_DESTROYED)
                                    rewardHonor = false;
                                break;
                            case BG_SA_BLUE_GATE:
                                if (GateStatus[BG_SA_GREEN_GATE] == BG_SA_GATE_DESTROYED)
                                    rewardHonor = false;
                                break;
                            case BG_SA_RED_GATE:
                                if (GateStatus[BG_SA_PURPLE_GATE] == BG_SA_GATE_DESTROYED)
                                    rewardHonor = false;
                                break;
                            case BG_SA_PURPLE_GATE:
                                if (GateStatus[BG_SA_RED_GATE] == BG_SA_GATE_DESTROYED)
                                    rewardHonor = false;
                                break;
                            default:
                                break;
                        }

                        if (invoker)
                        {
                            if (Unit* unit = invoker->ToUnit())
                            {
                                if (Player* player = unit->GetCharmerOrOwnerPlayerOrPlayerItself())
                                {
                                    UpdatePlayerScore(player, SCORE_DESTROYED_WALL, 1);
                                    if (rewardHonor)
                                        UpdatePlayerScore(player, SCORE_BONUS_HONOR, GetBonusHonorFromKill(1));
                                }
                            }
                        }

                        UpdateObjectInteractionFlags();
                    }
                    else
                        break;

                    UpdateWorldState(gate->WorldState, GateStatus[gateId]);
                }
                break;
            }
            default:
                break;
        }
    }
}

void BattlegroundSA::HandleKillUnit(Creature* creature, Player* killer)
{
    if (creature->GetEntry() == NPC_DEMOLISHER_SA)
    {
        UpdatePlayerScore(killer, SCORE_DESTROYED_DEMOLISHER, 1);
        _allVehiclesAlive[Attackers] = false;
    }
}

/*
  You may ask what the fuck does it do?
  Prevents owner overwriting guns faction with own.
 */
void BattlegroundSA::OverrideGunFaction()
{
    if (!GetBGCreature(BG_SA_GUN_1, false))
        return;

    for (uint32 i = BG_SA_GUN_1; i <= BG_SA_GUN_10; ++i)
    {
        if (Creature* gun = GetBGCreature(i))
            gun->setFaction(BG_SA_Factions[Attackers == TEAM_HORDE ? TEAM_ALLIANCE : TEAM_HORDE]);
    }

    for (uint32 i = BG_SA_DEMOLISHER_1; i <= BG_SA_DEMOLISHER_4; ++i)
    {
        if (Creature* dem = GetBGCreature(i))
            dem->setFaction(BG_SA_Factions[Attackers]);
    }
}

void BattlegroundSA::DemolisherStartState(bool start)
{
    if (!GetBGCreature(BG_SA_GUN_1, false))
        return;

    // set flags only for the demolishers on the beach, factory ones dont need it
    for (uint32 i = BG_SA_DEMOLISHER_1; i <= BG_SA_DEMOLISHER_4; ++i)
    {
        if (Creature* dem = GetBGCreature(i))
        {
            if (start)
                dem->SetFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_NON_ATTACKABLE | UNIT_FLAG_NOT_SELECTABLE);
            else
                dem->RemoveFlag(UNIT_FIELD_FLAGS, UNIT_FLAG_NON_ATTACKABLE | UNIT_FLAG_NOT_SELECTABLE);
        }
    }
}

void BattlegroundSA::DestroyGate(Player* /*player*/, GameObject* /*go*/) { }

WorldSafeLocsEntry const* BattlegroundSA::GetClosestGraveYard(Player* player)
{
    uint32 safeloc = 0;
    WorldSafeLocsEntry const* ret;
    WorldSafeLocsEntry const* closest;
    float dist, nearest;
    float x, y, z;

    player->GetPosition(x, y, z);

    if (player->GetTeamId() == Attackers)
        safeloc = BG_SA_GYEntries[BG_SA_BEACH_GY];
    else
        safeloc = BG_SA_GYEntries[BG_SA_DEFENDER_LAST_GY];

    closest = sWorldSafeLocsStore.LookupEntry(safeloc);
    ASSERT(closest);
    nearest = player->GetExactDistSq(closest->x, closest->y, closest->z);

    for (uint32 i = BG_SA_RIGHT_CAPTURABLE_GY; i < BG_SA_MAX_GY; ++i)
    {
        if (GraveyardStatus[i] != player->GetTeamId())
            continue;

        ret = sWorldSafeLocsStore.LookupEntry(BG_SA_GYEntries[i]);
        ASSERT(ret);
        dist = player->GetExactDistSq(ret->x, ret->y, ret->z);
        if (dist < nearest)
        {
            closest = ret;
            nearest = dist;
        }
    }

    return closest;
}

void BattlegroundSA::SendTime()
{
    uint32 end_of_round = (EndRoundTimer - TotalTime);
    UpdateWorldState(BG_SA_TIMER_MINS, end_of_round / 60000);
    UpdateWorldState(BG_SA_TIMER_SEC_TENS, (end_of_round % 60000) / 10000);
    UpdateWorldState(BG_SA_TIMER_SEC_DECS, ((end_of_round % 60000) % 10000) / 1000);
}

bool BattlegroundSA::CanInteractWithObject(uint32 objectId)
{
    switch (objectId)
    {
        case BG_SA_TITAN_RELIC_A:
        case BG_SA_TITAN_RELIC_H:
            if (GateStatus[BG_SA_ANCIENT_GATE] != BG_SA_GATE_DESTROYED || GateStatus[BG_SA_YELLOW_GATE] != BG_SA_GATE_DESTROYED)
                return false;
            // no break
        case BG_SA_CENTRAL_FLAG_A:
        case BG_SA_CENTRAL_FLAG_H:
            if (GateStatus[BG_SA_RED_GATE] != BG_SA_GATE_DESTROYED && GateStatus[BG_SA_PURPLE_GATE] != BG_SA_GATE_DESTROYED)
                return false;
            // no break
        case BG_SA_LEFT_FLAG_A:
        case BG_SA_LEFT_FLAG_H:
        case BG_SA_RIGHT_FLAG_A:
        case BG_SA_RIGHT_FLAG_H:
            if (GateStatus[BG_SA_GREEN_GATE] != BG_SA_GATE_DESTROYED && GateStatus[BG_SA_BLUE_GATE] != BG_SA_GATE_DESTROYED)
                return false;
            break;
        default:
            ABORT();
            break;
    }

    return true;
}

void BattlegroundSA::UpdateObjectInteractionFlags(uint32 objectId)
{
    if (GameObject* go = GetBGObject(objectId))
    {
        if (objectId >= BG_SA_BOMB_A_1 && objectId <= BG_SA_BOMB_H_91)
        {
            switch (Status)
            {
                case BG_SA_NOT_STARTED:
                case BG_SA_WARMUP:
                case BG_SA_SECOND_WARMUP:
                    go->SetFlag(GAMEOBJECT_FLAGS, GO_FLAG_NOT_SELECTABLE);
                    break;
                default:
                    go->RemoveFlag(GAMEOBJECT_FLAGS, GO_FLAG_NOT_SELECTABLE);
                    break;
            }

            return;
        }

        if (CanInteractWithObject(objectId))
            go->RemoveFlag(GAMEOBJECT_FLAGS, GO_FLAG_NOT_SELECTABLE);
        else
            go->SetFlag(GAMEOBJECT_FLAGS, GO_FLAG_NOT_SELECTABLE);
    }
}

void BattlegroundSA::UpdateObjectInteractionFlags()
{
    TeamId Defenders = Attackers == TEAM_HORDE ? TEAM_ALLIANCE : TEAM_HORDE;
    for (uint32 i = BG_SA_CENTRAL_FLAG_A; i <= BG_SA_LEFT_FLAG_A; i += BG_TEAMS_COUNT)
        UpdateObjectInteractionFlags(i + Defenders);

    UpdateObjectInteractionFlags(BG_SA_TITAN_RELIC_A + Attackers);
}

void BattlegroundSA::UpdateBombInteractionFlags()
{
    for (uint32 i = BG_SA_BOMB_A_1; i <= BG_SA_BOMB_H_91; ++i)
        UpdateObjectInteractionFlags(i);
}

void BattlegroundSA::EventPlayerClickedOnFlag(Player* source, GameObject* go)
{
    TeamId Defenders = Attackers == TEAM_HORDE ? TEAM_ALLIANCE : TEAM_HORDE;
    switch (go->GetEntry())
    {
        case GO_ALLIANCE_BANNER_LEFT:
        case GO_HORDE_BANNER_LEFT:
            if (CanInteractWithObject(BG_SA_LEFT_FLAG_A + Defenders))
                CaptureGraveyard(BG_SA_LEFT_CAPTURABLE_GY, source);
            break;
        case GO_ALLIANCE_BANNER_RIGHT:
        case GO_HORDE_BANNER_RIGHT:
            if (CanInteractWithObject(BG_SA_RIGHT_FLAG_A + Defenders))
                CaptureGraveyard(BG_SA_RIGHT_CAPTURABLE_GY, source);
            break;
        case GO_ALLIANCE_BANNER_CENTER:
        case GO_HORDE_BANNER_CENTER:
            if (CanInteractWithObject(BG_SA_CENTRAL_FLAG_A + Defenders))
                CaptureGraveyard(BG_SA_CENTRAL_CAPTURABLE_GY, source);
            break;
        default:
            return;
    };
}

void BattlegroundSA::CaptureGraveyard(BG_SA_Graveyards i, Player* Source)
{
    if (GraveyardStatus[i] == Attackers)
        return;

    DelCreature(BG_SA_MAXNPC + i);
    GraveyardStatus[i] = Source->GetTeamId();
    WorldSafeLocsEntry const* sg = sWorldSafeLocsStore.LookupEntry(BG_SA_GYEntries[i]);
    if (!sg)
    {
        TC_LOG_ERROR("bg.battleground", "BattlegroundSA::CaptureGraveyard: non-existant GY entry: %u", BG_SA_GYEntries[i]);
        return;
    }

    AddSpiritGuide(i + BG_SA_MAXNPC, Position(sg->x, sg->y, sg->z, BG_SA_GYOrientation[i]), GraveyardStatus[i]);
    uint32 npc = 0;
    uint32 flag = 0;

    switch (i)
    {
        case BG_SA_LEFT_CAPTURABLE_GY:
            flag = BG_SA_LEFT_FLAG_A;
            npc = BG_SA_NPC_RIGSPARK;

            for (uint32 j = BG_SA_DEMOLISHER_7; j <= BG_SA_DEMOLISHER_8; ++j)
            {
                BattlegroundSpawnPoint const& demolisher = BG_SA_Creatures[j];
                if (Creature* demo = AddCreature(demolisher.Entry, j, demolisher.Pos, demolisher.SpawnTime))
                    demo->setFaction(BG_SA_Factions[Attackers]);
            }

            UpdateWorldState(BG_SA_LEFT_GY_ALLIANCE, GraveyardStatus[i] == TEAM_ALLIANCE);
            UpdateWorldState(BG_SA_LEFT_GY_HORDE, GraveyardStatus[i] == TEAM_HORDE);

            if (Creature* c = Source->FindNearestCreature(NPC_WORLD_TRIGGER, 500.0f))
                SendChatMessage(c, Source->GetTeamId() == TEAM_ALLIANCE ? TEXT_WEST_GRAVEYARD_CAPTURED_A : TEXT_WEST_GRAVEYARD_CAPTURED_H, Source);

            break;
        case BG_SA_RIGHT_CAPTURABLE_GY:
            flag = BG_SA_RIGHT_FLAG_A;
            npc = BG_SA_NPC_SPARKLIGHT;

            for (uint32 j = BG_SA_DEMOLISHER_5; j <= BG_SA_DEMOLISHER_6; ++j)
            {
                BattlegroundSpawnPoint const& demolisher = BG_SA_Creatures[j];
                if (Creature* demo = AddCreature(demolisher.Entry, j, demolisher.Pos, demolisher.SpawnTime))
                    demo->setFaction(BG_SA_Factions[Attackers]);
            }

            UpdateWorldState(BG_SA_RIGHT_GY_ALLIANCE, GraveyardStatus[i] == TEAM_ALLIANCE);
            UpdateWorldState(BG_SA_RIGHT_GY_HORDE, GraveyardStatus[i] == TEAM_HORDE);

            if (Creature* c = Source->FindNearestCreature(NPC_WORLD_TRIGGER, 500.0f))
                SendChatMessage(c, Source->GetTeamId() == TEAM_ALLIANCE ? TEXT_EAST_GRAVEYARD_CAPTURED_A : TEXT_EAST_GRAVEYARD_CAPTURED_H, Source);

            break;
        case BG_SA_CENTRAL_CAPTURABLE_GY:
            flag = BG_SA_CENTRAL_FLAG_A;

            UpdateWorldState(BG_SA_CENTER_GY_ALLIANCE, GraveyardStatus[i] == TEAM_ALLIANCE);
            UpdateWorldState(BG_SA_CENTER_GY_HORDE, GraveyardStatus[i] == TEAM_HORDE);

            if (Creature* c = Source->FindNearestCreature(NPC_WORLD_TRIGGER, 500.0f))
                SendChatMessage(c, Source->GetTeamId() == TEAM_ALLIANCE ? TEXT_SOUTH_GRAVEYARD_CAPTURED_A : TEXT_SOUTH_GRAVEYARD_CAPTURED_H, Source);

            break;
        default:
            ABORT();
            break;
    }

    // now swap banners
    SpawnBGObject(flag, Source->GetTeamId() == TEAM_ALLIANCE ? RESPAWN_IMMEDIATELY : RESPAWN_ONE_DAY);
    SpawnBGObject(flag + 1, Source->GetTeamId() == TEAM_ALLIANCE ? RESPAWN_ONE_DAY : RESPAWN_IMMEDIATELY);

    // spawn creature if any
    if (npc)
    {
        BattlegroundSpawnPoint const& spawnPoint = BG_SA_Creatures[npc];
        if (Creature* creature = AddCreature(spawnPoint.Entry, npc, spawnPoint.Pos, spawnPoint.SpawnTime))
            creature->AI()->Talk(TEXT_SPARKLIGHT_RIGSPARK_SPAWN);
    }
}

void BattlegroundSA::TitanRelicActivated(Player* clicker)
{
    if (!clicker)
        return;

    if (CanInteractWithObject(BG_SA_TITAN_RELIC_A + Attackers))
    {
        if (clicker->GetTeamId() == Attackers)
        {
            if (clicker->GetTeamId() == TEAM_ALLIANCE)
                SendMessageToAll(LANG_BG_SA_ALLIANCE_CAPTURED_RELIC, CHAT_MSG_BG_SYSTEM_NEUTRAL);
            else
                SendMessageToAll(LANG_BG_SA_HORDE_CAPTURED_RELIC, CHAT_MSG_BG_SYSTEM_NEUTRAL);

            if (Status == BG_SA_ROUND_ONE)
            {
                RoundScores[0].winner = Attackers;
                RoundScores[0].time = TotalTime;
                // Achievement Storm the Beach (1310)
                for (BattlegroundPlayerMap::const_iterator itr = GetPlayers().begin(); itr != GetPlayers().end(); ++itr)
                {
                    if (Player* player = ObjectAccessor::FindPlayer(itr->first))
                        if (player->GetTeamId() == Attackers)
                            player->UpdateAchievementCriteria(ACHIEVEMENT_CRITERIA_TYPE_BE_SPELL_TARGET, SPELL_STORM_THE_BEACH_CREDIT);
                }

                Attackers = (Attackers == TEAM_ALLIANCE) ? TEAM_HORDE : TEAM_ALLIANCE;
                Status = BG_SA_SECOND_WARMUP;
                TotalTime = 0;
                ToggleTimer();

                if (Creature* c = GetBGCreature(BG_SA_NPC_KANRETHAD))
                    SendChatMessage(c, TEXT_ROUND_1_FINISHED);

                UpdateWaitTimer = 5000;
                SignaledRoundTwo = false;
                SignaledRoundTwoHalfMin = false;
                InitSecondRound = true;
                ResetObjs();
                GetBgMap()->UpdateAreaDependentAuras();
                CastSpellOnTeam(SPELL_END_OF_ROUND, ALLIANCE);
                CastSpellOnTeam(SPELL_END_OF_ROUND, HORDE);
            }
            else if (Status == BG_SA_ROUND_TWO)
            {
                RoundScores[1].winner = Attackers;
                RoundScores[1].time = TotalTime;
                ToggleTimer();
                // Achievement Storm the Beach (1310)
                for (BattlegroundPlayerMap::const_iterator itr = GetPlayers().begin(); itr != GetPlayers().end(); ++itr)
                {
                    if (Player* player = ObjectAccessor::FindPlayer(itr->first))
                        if (player->GetTeamId() == Attackers && RoundScores[1].winner == Attackers)
                            player->UpdateAchievementCriteria(ACHIEVEMENT_CRITERIA_TYPE_BE_SPELL_TARGET, SPELL_STORM_THE_BEACH_CREDIT);
                }

                if (RoundScores[0].time == RoundScores[1].time)
                    EndBattleground(0);
                else if (RoundScores[0].time < RoundScores[1].time)
                    EndBattleground(RoundScores[0].winner == TEAM_ALLIANCE ? ALLIANCE : HORDE);
                else
                    EndBattleground(RoundScores[1].winner == TEAM_ALLIANCE ? ALLIANCE : HORDE);
            }
        }
    }
}

void BattlegroundSA::ToggleTimer()
{
    TimerEnabled = !TimerEnabled;
    UpdateWorldState(BG_SA_ENABLE_TIMER, TimerEnabled);
}

void BattlegroundSA::EndBattleground(uint32 winner)
{
    // honor reward for winning
    if (winner == ALLIANCE)
        RewardHonorToTeam(GetBonusHonorFromKill(1), ALLIANCE);
    else if (winner == HORDE)
        RewardHonorToTeam(GetBonusHonorFromKill(1), HORDE);

    // complete map_end rewards (even if no team wins)
    RewardHonorToTeam(GetBonusHonorFromKill(2), ALLIANCE);
    RewardHonorToTeam(GetBonusHonorFromKill(2), HORDE);

    Battleground::EndBattleground(winner);
}

void BattlegroundSA::UpdateDemolisherSpawns()
{
    for (uint32 i = BG_SA_DEMOLISHER_1; i <= BG_SA_DEMOLISHER_8; ++i)
    {
        if (Creature* Demolisher = GetBGCreature(i, false))
        {
            if (Demolisher->isDead())
            {
                // Demolisher is not in list
                if (!DemolisherRespawnTimes[i])
                    DemolisherRespawnTimes[i] = getMSTime() + 30 * IN_MILLISECONDS;
                else
                {
                    if (DemolisherRespawnTimes[i] < getMSTime())
                    {
                        Demolisher->Relocate(BG_SA_Creatures[i].Pos);
                        Demolisher->Respawn();
                        DemolisherRespawnTimes[i] = 0;
                    }
                }
            }
        }
    }
}

void BattlegroundSA::SendTransportInit(Player* player)
{
    UpdateData transData;
    for (uint32 i = BG_SA_BOAT_ONE; i <= BG_SA_BOAT_TWO; ++i)
        if (GameObject* boat = GetBGObject(i, false))
            boat->BuildCreateUpdateBlockForPlayer(&transData, player);

    // do not send if empty
    if (!transData.HasData())
        return;

    WorldPacket packet;
    transData.BuildPacket(&packet);
    player->SendDirectMessage(&packet);
}

void BattlegroundSA::SendTransportsRemove(Player* player)
{
    UpdateData transData;
    for (uint32 i = BG_SA_BOAT_ONE; i <= BG_SA_BOAT_TWO; ++i)
        if (GameObject* boat = GetBGObject(i, false))
            boat->BuildOutOfRangeUpdateBlock(&transData);

    // do not send if empty
    if (!transData.HasData())
        return;

    WorldPacket packet;
    transData.BuildPacket(&packet);
    player->SendDirectMessage(&packet);
}

bool BattlegroundSA::CheckAchievementCriteriaMeet(uint32 criteriaId, Player const* source, Unit const* target, uint32 miscValue)
{
    switch (criteriaId)
    {
        case BG_CRITERIA_CHECK_NOT_EVEN_A_SCRATCH:
            return _allVehiclesAlive[GetTeamIndexByTeamId(source->GetTeam())];
        case BG_CRITERIA_CHECK_DEFENSE_OF_THE_ANCIENTS:
            return source->GetTeamId() != Attackers && !_gateDestroyed;
    }

    return Battleground::CheckAchievementCriteriaMeet(criteriaId, source, target, miscValue);
}

bool BattlegroundSA::IsSpellAllowed(uint32 spellId, Player const* /*player*/) const
{
    switch (spellId)
    {
        case SPELL_ALLIANCE_CONTROL_PHASE_SHIFT:
            return Attackers == TEAM_HORDE;
        case SPELL_HORDE_CONTROL_PHASE_SHIFT:
            return Attackers == TEAM_ALLIANCE;
        case SPELL_PREPARATION:
            return Status == BG_SA_WARMUP || Status == BG_SA_SECOND_WARMUP;
        default:
           break;
    }

    return true;
}

GateInfo const* BattlegroundSA::GetGate(uint32 entry)
{
    GateInfo const* const begin = &BG_SA_GateInfo[0];
    GateInfo const* const end   = &BG_SA_GateInfo[BG_SA_MAX_GATES];

    GateInfo const* itr = std::find_if(begin, end, [entry](GateInfo const& gateInfo) -> bool
    {
        if (gateInfo.GameObjectId == entry)
            return true;

        return false;
    });

    if (itr == end)
        return nullptr;

    return itr;
}
