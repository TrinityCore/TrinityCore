/*
 * This file is part of the TrinityCore Project. See AUTHORS file for Copyright information
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the
 * Free Software Foundation; either version 2 of the License, or (at your
 * option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program. If not, see <http://www.gnu.org/licenses/>.
 */

#ifndef UpdateFields_h__
#define UpdateFields_h__

#include "EnumFlag.h"
#include "ItemPacketsCommon.h"
#include "MythicPlusPacketsCommon.h"
#include "ObjectGuid.h"
#include "PerksProgramPacketsCommon.h"
#include "Position.h"
#include "QuaternionData.h"
#include "UpdateField.h"
#include "UpdateMask.h"

// This file is automatically generated, DO NOT EDIT

class AreaTrigger;
class AzeriteEmpoweredItem;
class AzeriteItem;
class Bag;
class ByteBuffer;
class Conversation;
class Corpse;
class DynamicObject;
class GameObject;
class Item;
class Object;
class Player;
class Unit;

// Auto generated for version 7, 3, 5, 25928
enum ObjectFields
{
    OBJECT_FIELD_GUID = 0x000, // Size: 4, Flags: PUBLIC
    OBJECT_FIELD_DATA = 0x004, // Size: 4, Flags: PUBLIC
    OBJECT_FIELD_TYPE = 0x008, // Size: 1, Flags: PUBLIC
    OBJECT_FIELD_ENTRY = 0x009, // Size: 1, Flags: DYNAMIC
    OBJECT_DYNAMIC_FLAGS = 0x00A, // Size: 1, Flags: DYNAMIC, URGENT
    OBJECT_FIELD_SCALE_X = 0x00B, // Size: 1, Flags: PUBLIC
    OBJECT_END = 0x00C,
};

enum UnitFields
{
    UNIT_FIELD_CHARM = OBJECT_END + 0x000, // Size: 4, Flags: PUBLIC
    UNIT_FIELD_SUMMON = OBJECT_END + 0x004, // Size: 4, Flags: PUBLIC
    UNIT_FIELD_CRITTER = OBJECT_END + 0x008, // Size: 4, Flags: PRIVATE
    UNIT_FIELD_CHARMEDBY = OBJECT_END + 0x00C, // Size: 4, Flags: PUBLIC
    UNIT_FIELD_SUMMONEDBY = OBJECT_END + 0x010, // Size: 4, Flags: PUBLIC
    UNIT_FIELD_CREATEDBY = OBJECT_END + 0x014, // Size: 4, Flags: PUBLIC
    UNIT_FIELD_DEMON_CREATOR = OBJECT_END + 0x018, // Size: 4, Flags: PUBLIC
    UNIT_FIELD_TARGET = OBJECT_END + 0x01C, // Size: 4, Flags: PUBLIC
    UNIT_FIELD_BATTLE_PET_COMPANION_GUID = OBJECT_END + 0x020, // Size: 4, Flags: PUBLIC
    UNIT_FIELD_BATTLE_PET_DB_ID = OBJECT_END + 0x024, // Size: 2, Flags: PUBLIC
    UNIT_FIELD_CHANNEL_DATA = OBJECT_END + 0x026, // Size: 2, Flags: PUBLIC, URGENT
    UNIT_FIELD_SUMMONED_BY_HOME_REALM = OBJECT_END + 0x028, // Size: 1, Flags: PUBLIC
    UNIT_FIELD_BYTES_0 = OBJECT_END + 0x029, // Size: 1, Flags: PUBLIC
    UNIT_FIELD_DISPLAY_POWER = OBJECT_END + 0x02A, // Size: 1, Flags: PUBLIC
    UNIT_FIELD_OVERRIDE_DISPLAY_POWER_ID = OBJECT_END + 0x02B, // Size: 1, Flags: PUBLIC
    UNIT_FIELD_HEALTH = OBJECT_END + 0x02C, // Size: 2, Flags: PUBLIC
    UNIT_FIELD_POWER = OBJECT_END + 0x02E, // Size: 6, Flags: PUBLIC, URGENT_SELF_ONLY
    UNIT_FIELD_MAXHEALTH = OBJECT_END + 0x034, // Size: 2, Flags: PUBLIC
    UNIT_FIELD_MAXPOWER = OBJECT_END + 0x036, // Size: 6, Flags: PUBLIC
    UNIT_FIELD_POWER_REGEN_FLAT_MODIFIER = OBJECT_END + 0x03C, // Size: 6, Flags: PRIVATE, OWNER, UNIT_ALL
    UNIT_FIELD_POWER_REGEN_INTERRUPTED_FLAT_MODIFIER = OBJECT_END + 0x042, // Size: 6, Flags: PRIVATE, OWNER, UNIT_ALL
    UNIT_FIELD_LEVEL = OBJECT_END + 0x048, // Size: 1, Flags: PUBLIC
    UNIT_FIELD_EFFECTIVE_LEVEL = OBJECT_END + 0x049, // Size: 1, Flags: PUBLIC
    UNIT_FIELD_SANDBOX_SCALING_ID = OBJECT_END + 0x04A, // Size: 1, Flags: PUBLIC
    UNIT_FIELD_SCALING_LEVEL_MIN = OBJECT_END + 0x04B, // Size: 1, Flags: PUBLIC
    UNIT_FIELD_SCALING_LEVEL_MAX = OBJECT_END + 0x04C, // Size: 1, Flags: PUBLIC
    UNIT_FIELD_SCALING_LEVEL_DELTA = OBJECT_END + 0x04D, // Size: 1, Flags: PUBLIC
    UNIT_FIELD_FACTIONTEMPLATE = OBJECT_END + 0x04E, // Size: 1, Flags: PUBLIC
    UNIT_VIRTUAL_ITEM_SLOT_ID = OBJECT_END + 0x04F, // Size: 6, Flags: PUBLIC
    UNIT_FIELD_FLAGS = OBJECT_END + 0x055, // Size: 1, Flags: PUBLIC, URGENT
    UNIT_FIELD_FLAGS_2 = OBJECT_END + 0x056, // Size: 1, Flags: PUBLIC, URGENT
    UNIT_FIELD_FLAGS_3 = OBJECT_END + 0x057, // Size: 1, Flags: PUBLIC, URGENT
    UNIT_FIELD_AURASTATE = OBJECT_END + 0x058, // Size: 1, Flags: PUBLIC
    UNIT_FIELD_BASEATTACKTIME = OBJECT_END + 0x059, // Size: 2, Flags: PUBLIC
    UNIT_FIELD_RANGEDATTACKTIME = OBJECT_END + 0x05B, // Size: 1, Flags: PRIVATE
    UNIT_FIELD_BOUNDINGRADIUS = OBJECT_END + 0x05C, // Size: 1, Flags: PUBLIC
    UNIT_FIELD_COMBATREACH = OBJECT_END + 0x05D, // Size: 1, Flags: PUBLIC
    UNIT_FIELD_DISPLAYID = OBJECT_END + 0x05E, // Size: 1, Flags: DYNAMIC, URGENT
    UNIT_FIELD_NATIVEDISPLAYID = OBJECT_END + 0x05F, // Size: 1, Flags: PUBLIC, URGENT
    UNIT_FIELD_MOUNTDISPLAYID = OBJECT_END + 0x060, // Size: 1, Flags: PUBLIC, URGENT
    UNIT_FIELD_MINDAMAGE = OBJECT_END + 0x061, // Size: 1, Flags: PRIVATE, OWNER, SPECIAL_INFO
    UNIT_FIELD_MAXDAMAGE = OBJECT_END + 0x062, // Size: 1, Flags: PRIVATE, OWNER, SPECIAL_INFO
    UNIT_FIELD_MINOFFHANDDAMAGE = OBJECT_END + 0x063, // Size: 1, Flags: PRIVATE, OWNER, SPECIAL_INFO
    UNIT_FIELD_MAXOFFHANDDAMAGE = OBJECT_END + 0x064, // Size: 1, Flags: PRIVATE, OWNER, SPECIAL_INFO
    UNIT_FIELD_BYTES_1 = OBJECT_END + 0x065, // Size: 1, Flags: PUBLIC
    UNIT_FIELD_PETNUMBER = OBJECT_END + 0x066, // Size: 1, Flags: PUBLIC
    UNIT_FIELD_PET_NAME_TIMESTAMP = OBJECT_END + 0x067, // Size: 1, Flags: PUBLIC
    UNIT_FIELD_PETEXPERIENCE = OBJECT_END + 0x068, // Size: 1, Flags: OWNER
    UNIT_FIELD_PETNEXTLEVELEXP = OBJECT_END + 0x069, // Size: 1, Flags: OWNER
    UNIT_MOD_CAST_SPEED = OBJECT_END + 0x06A, // Size: 1, Flags: PUBLIC
    UNIT_MOD_CAST_HASTE = OBJECT_END + 0x06B, // Size: 1, Flags: PUBLIC
    UNIT_FIELD_MOD_HASTE = OBJECT_END + 0x06C, // Size: 1, Flags: PUBLIC
    UNIT_FIELD_MOD_RANGED_HASTE = OBJECT_END + 0x06D, // Size: 1, Flags: PUBLIC
    UNIT_FIELD_MOD_HASTE_REGEN = OBJECT_END + 0x06E, // Size: 1, Flags: PUBLIC
    UNIT_FIELD_MOD_TIME_RATE = OBJECT_END + 0x06F, // Size: 1, Flags: PUBLIC
    UNIT_CREATED_BY_SPELL = OBJECT_END + 0x070, // Size: 1, Flags: PUBLIC
    UNIT_NPC_FLAGS = OBJECT_END + 0x071, // Size: 2, Flags: PUBLIC, DYNAMIC
    UNIT_NPC_EMOTESTATE = OBJECT_END + 0x073, // Size: 1, Flags: PUBLIC
    UNIT_FIELD_STAT = OBJECT_END + 0x074, // Size: 4, Flags: PRIVATE, OWNER
    UNIT_FIELD_POSSTAT = OBJECT_END + 0x078, // Size: 4, Flags: PRIVATE, OWNER
    UNIT_FIELD_NEGSTAT = OBJECT_END + 0x07C, // Size: 4, Flags: PRIVATE, OWNER
    UNIT_FIELD_RESISTANCES = OBJECT_END + 0x080, // Size: 7, Flags: PRIVATE, OWNER, SPECIAL_INFO
    UNIT_FIELD_RESISTANCEBUFFMODSPOSITIVE = OBJECT_END + 0x087, // Size: 7, Flags: PRIVATE, OWNER
    UNIT_FIELD_RESISTANCEBUFFMODSNEGATIVE = OBJECT_END + 0x08E, // Size: 7, Flags: PRIVATE, OWNER
    UNIT_FIELD_MOD_BONUS_ARMOR = OBJECT_END + 0x095, // Size: 1, Flags: PRIVATE, OWNER
    UNIT_FIELD_BASE_MANA = OBJECT_END + 0x096, // Size: 1, Flags: PUBLIC
    UNIT_FIELD_BASE_HEALTH = OBJECT_END + 0x097, // Size: 1, Flags: PRIVATE, OWNER
    UNIT_FIELD_BYTES_2 = OBJECT_END + 0x098, // Size: 1, Flags: PUBLIC
    UNIT_FIELD_ATTACK_POWER = OBJECT_END + 0x099, // Size: 1, Flags: PRIVATE, OWNER
    UNIT_FIELD_ATTACK_POWER_MOD_POS = OBJECT_END + 0x09A, // Size: 1, Flags: PRIVATE, OWNER
    UNIT_FIELD_ATTACK_POWER_MOD_NEG = OBJECT_END + 0x09B, // Size: 1, Flags: PRIVATE, OWNER
    UNIT_FIELD_ATTACK_POWER_MULTIPLIER = OBJECT_END + 0x09C, // Size: 1, Flags: PRIVATE, OWNER
    UNIT_FIELD_RANGED_ATTACK_POWER = OBJECT_END + 0x09D, // Size: 1, Flags: PRIVATE, OWNER
    UNIT_FIELD_RANGED_ATTACK_POWER_MOD_POS = OBJECT_END + 0x09E, // Size: 1, Flags: PRIVATE, OWNER
    UNIT_FIELD_RANGED_ATTACK_POWER_MOD_NEG = OBJECT_END + 0x09F, // Size: 1, Flags: PRIVATE, OWNER
    UNIT_FIELD_RANGED_ATTACK_POWER_MULTIPLIER = OBJECT_END + 0x0A0, // Size: 1, Flags: PRIVATE, OWNER
    UNIT_FIELD_ATTACK_SPEED_AURA = OBJECT_END + 0x0A1, // Size: 1, Flags: PRIVATE, OWNER
    UNIT_FIELD_MINRANGEDDAMAGE = OBJECT_END + 0x0A2, // Size: 1, Flags: PRIVATE, OWNER
    UNIT_FIELD_MAXRANGEDDAMAGE = OBJECT_END + 0x0A3, // Size: 1, Flags: PRIVATE, OWNER
    UNIT_FIELD_POWER_COST_MODIFIER = OBJECT_END + 0x0A4, // Size: 7, Flags: PRIVATE, OWNER
    UNIT_FIELD_POWER_COST_MULTIPLIER = OBJECT_END + 0x0AB, // Size: 7, Flags: PRIVATE, OWNER
    UNIT_FIELD_MAXHEALTHMODIFIER = OBJECT_END + 0x0B2, // Size: 1, Flags: PRIVATE, OWNER
    UNIT_FIELD_HOVERHEIGHT = OBJECT_END + 0x0B3, // Size: 1, Flags: PUBLIC
    UNIT_FIELD_MIN_ITEM_LEVEL_CUTOFF = OBJECT_END + 0x0B4, // Size: 1, Flags: PUBLIC
    UNIT_FIELD_MIN_ITEM_LEVEL = OBJECT_END + 0x0B5, // Size: 1, Flags: PUBLIC
    UNIT_FIELD_MAXITEMLEVEL = OBJECT_END + 0x0B6, // Size: 1, Flags: PUBLIC
    UNIT_FIELD_WILD_BATTLEPET_LEVEL = OBJECT_END + 0x0B7, // Size: 1, Flags: PUBLIC
    UNIT_FIELD_BATTLEPET_COMPANION_NAME_TIMESTAMP = OBJECT_END + 0x0B8, // Size: 1, Flags: PUBLIC
    UNIT_FIELD_INTERACT_SPELLID = OBJECT_END + 0x0B9, // Size: 1, Flags: PUBLIC
    UNIT_FIELD_STATE_SPELL_VISUAL_ID = OBJECT_END + 0x0BA, // Size: 1, Flags: DYNAMIC, URGENT
    UNIT_FIELD_STATE_ANIM_ID = OBJECT_END + 0x0BB, // Size: 1, Flags: DYNAMIC, URGENT
    UNIT_FIELD_STATE_ANIM_KIT_ID = OBJECT_END + 0x0BC, // Size: 1, Flags: DYNAMIC, URGENT
    UNIT_FIELD_STATE_WORLD_EFFECT_ID = OBJECT_END + 0x0BD, // Size: 4, Flags: DYNAMIC, URGENT
    UNIT_FIELD_SCALE_DURATION = OBJECT_END + 0x0C1, // Size: 1, Flags: PUBLIC
    UNIT_FIELD_LOOKS_LIKE_MOUNT_ID = OBJECT_END + 0x0C2, // Size: 1, Flags: PUBLIC
    UNIT_FIELD_LOOKS_LIKE_CREATURE_ID = OBJECT_END + 0x0C3, // Size: 1, Flags: PUBLIC
    UNIT_FIELD_LOOK_AT_CONTROLLER_ID = OBJECT_END + 0x0C4, // Size: 1, Flags: PUBLIC
    UNIT_FIELD_LOOK_AT_CONTROLLER_TARGET = OBJECT_END + 0x0C5, // Size: 4, Flags: PUBLIC
    UNIT_END = OBJECT_END + 0x0C9,
};

enum PlayerFields
{
    PLAYER_DUEL_ARBITER = UNIT_END + 0x000, // Size: 4, Flags: PUBLIC
    PLAYER_WOW_ACCOUNT = UNIT_END + 0x004, // Size: 4, Flags: PUBLIC
    PLAYER_LOOT_TARGET_GUID = UNIT_END + 0x008, // Size: 4, Flags: PUBLIC
    PLAYER_FLAGS = UNIT_END + 0x00C, // Size: 1, Flags: PUBLIC
    PLAYER_FLAGS_EX = UNIT_END + 0x00D, // Size: 1, Flags: PUBLIC
    PLAYER_GUILDRANK = UNIT_END + 0x00E, // Size: 1, Flags: PUBLIC
    PLAYER_GUILDDELETE_DATE = UNIT_END + 0x00F, // Size: 1, Flags: PUBLIC
    PLAYER_GUILDLEVEL = UNIT_END + 0x010, // Size: 1, Flags: PUBLIC
    PLAYER_BYTES = UNIT_END + 0x011, // Size: 1, Flags: PUBLIC
    PLAYER_BYTES_2 = UNIT_END + 0x012, // Size: 1, Flags: PUBLIC
    PLAYER_BYTES_3 = UNIT_END + 0x013, // Size: 1, Flags: PUBLIC
    PLAYER_BYTES_4 = UNIT_END + 0x014, // Size: 1, Flags: PUBLIC
    PLAYER_DUEL_TEAM = UNIT_END + 0x015, // Size: 1, Flags: PUBLIC
    PLAYER_GUILD_TIMESTAMP = UNIT_END + 0x016, // Size: 1, Flags: PUBLIC
    PLAYER_QUEST_LOG = UNIT_END + 0x017, // Size: 800, Flags: PARTY_MEMBER
    PLAYER_VISIBLE_ITEM = UNIT_END + 0x337, // Size: 38, Flags: PUBLIC
    PLAYER_CHOSEN_TITLE = UNIT_END + 0x35D, // Size: 1, Flags: PUBLIC
    PLAYER_FAKE_INEBRIATION = UNIT_END + 0x35E, // Size: 1, Flags: PUBLIC
    PLAYER_FIELD_VIRTUAL_PLAYER_REALM = UNIT_END + 0x35F, // Size: 1, Flags: PUBLIC
    PLAYER_FIELD_CURRENT_SPEC_ID = UNIT_END + 0x360, // Size: 1, Flags: PUBLIC
    PLAYER_FIELD_TAXI_MOUNT_ANIM_KIT_ID = UNIT_END + 0x361, // Size: 1, Flags: PUBLIC
    PLAYER_FIELD_AVG_ITEM_LEVEL = UNIT_END + 0x362, // Size: 4, Flags: PUBLIC
    PLAYER_FIELD_CURRENT_BATTLE_PET_BREED_QUALITY = UNIT_END + 0x366, // Size: 1, Flags: PUBLIC
    PLAYER_FIELD_PRESTIGE = UNIT_END + 0x367, // Size: 1, Flags: PUBLIC
    PLAYER_FIELD_HONOR_LEVEL = UNIT_END + 0x368, // Size: 1, Flags: PUBLIC
    PLAYER_FIELD_INV_SLOT_HEAD = UNIT_END + 0x369, // Size: 780, Flags: PRIVATE
    PLAYER_FIELD_END_NOT_SELF = UNIT_END + 0x369,
    PLAYER_FARSIGHT = UNIT_END + 0x675, // Size: 4, Flags: PRIVATE
    PLAYER_FIELD_SUMMONED_BATTLE_PET_ID = UNIT_END + 0x679, // Size: 4, Flags: PRIVATE
    PLAYER__FIELD_KNOWN_TITLES = UNIT_END + 0x67D, // Size: 12, Flags: PRIVATE
    PLAYER_FIELD_COINAGE = UNIT_END + 0x689, // Size: 2, Flags: PRIVATE
    PLAYER_XP = UNIT_END + 0x68B, // Size: 1, Flags: PRIVATE
    PLAYER_NEXT_LEVEL_XP = UNIT_END + 0x68C, // Size: 1, Flags: PRIVATE
    PLAYER_TRIAL_XP = UNIT_END + 0x68D, // Size: 1, Flags: PRIVATE
    PLAYER_SKILL_LINEID = UNIT_END + 0x68E, // Size: 448, Flags: PRIVATE
    PLAYER_CHARACTER_POINTS = UNIT_END + 0x84E, // Size: 1, Flags: PRIVATE
    PLAYER_FIELD_MAX_TALENT_TIERS = UNIT_END + 0x84F, // Size: 1, Flags: PRIVATE
    PLAYER_TRACK_CREATURES = UNIT_END + 0x850, // Size: 1, Flags: PRIVATE
    PLAYER_TRACK_RESOURCES = UNIT_END + 0x851, // Size: 1, Flags: PRIVATE
    PLAYER_EXPERTISE = UNIT_END + 0x852, // Size: 1, Flags: PRIVATE
    PLAYER_OFFHAND_EXPERTISE = UNIT_END + 0x853, // Size: 1, Flags: PRIVATE
    PLAYER_FIELD_RANGED_EXPERTISE = UNIT_END + 0x854, // Size: 1, Flags: PRIVATE
    PLAYER_FIELD_COMBAT_RATING_EXPERTISE = UNIT_END + 0x855, // Size: 1, Flags: PRIVATE
    PLAYER_BLOCK_PERCENTAGE = UNIT_END + 0x856, // Size: 1, Flags: PRIVATE
    PLAYER_DODGE_PERCENTAGE = UNIT_END + 0x857, // Size: 1, Flags: PRIVATE
    PLAYER_DODGE_PERCENTAGE_FROM_ATTRIBUTE = UNIT_END + 0x858, // Size: 1, Flags: PRIVATE
    PLAYER_PARRY_PERCENTAGE = UNIT_END + 0x859, // Size: 1, Flags: PRIVATE
    PLAYER_PARRY_PERCENTAGE_FROM_ATTRIBUTE = UNIT_END + 0x85A, // Size: 1, Flags: PRIVATE
    PLAYER_CRIT_PERCENTAGE = UNIT_END + 0x85B, // Size: 1, Flags: PRIVATE
    PLAYER_RANGED_CRIT_PERCENTAGE = UNIT_END + 0x85C, // Size: 1, Flags: PRIVATE
    PLAYER_OFFHAND_CRIT_PERCENTAGE = UNIT_END + 0x85D, // Size: 1, Flags: PRIVATE
    PLAYER_SPELL_CRIT_PERCENTAGE1 = UNIT_END + 0x85E, // Size: 1, Flags: PRIVATE
    PLAYER_SHIELD_BLOCK = UNIT_END + 0x85F, // Size: 1, Flags: PRIVATE
    PLAYER_SHIELD_BLOCK_CRIT_PERCENTAGE = UNIT_END + 0x860, // Size: 1, Flags: PRIVATE
    PLAYER_MASTERY = UNIT_END + 0x861, // Size: 1, Flags: PRIVATE
    PLAYER_SPEED = UNIT_END + 0x862, // Size: 1, Flags: PRIVATE
    PLAYER_LIFESTEAL = UNIT_END + 0x863, // Size: 1, Flags: PRIVATE
    PLAYER_AVOIDANCE = UNIT_END + 0x864, // Size: 1, Flags: PRIVATE
    PLAYER_STURDINESS = UNIT_END + 0x865, // Size: 1, Flags: PRIVATE
    PLAYER_VERSATILITY = UNIT_END + 0x866, // Size: 1, Flags: PRIVATE
    PLAYER_VERSATILITY_BONUS = UNIT_END + 0x867, // Size: 1, Flags: PRIVATE
    PLAYER_FIELD_PVP_POWER_DAMAGE = UNIT_END + 0x868, // Size: 1, Flags: PRIVATE
    PLAYER_FIELD_PVP_POWER_HEALING = UNIT_END + 0x869, // Size: 1, Flags: PRIVATE
    PLAYER_EXPLORED_ZONES_1 = UNIT_END + 0x86A, // Size: 320, Flags: PRIVATE
    PLAYER_FIELD_REST_INFO = UNIT_END + 0x9AA, // Size: 4, Flags: PRIVATE
    PLAYER_FIELD_MOD_DAMAGE_DONE_POS = UNIT_END + 0x9AE, // Size: 7, Flags: PRIVATE
    PLAYER_FIELD_MOD_DAMAGE_DONE_NEG = UNIT_END + 0x9B5, // Size: 7, Flags: PRIVATE
    PLAYER_FIELD_MOD_DAMAGE_DONE_PCT = UNIT_END + 0x9BC, // Size: 7, Flags: PRIVATE
    PLAYER_FIELD_MOD_HEALING_DONE_POS = UNIT_END + 0x9C3, // Size: 1, Flags: PRIVATE
    PLAYER_FIELD_MOD_HEALING_PCT = UNIT_END + 0x9C4, // Size: 1, Flags: PRIVATE
    PLAYER_FIELD_MOD_HEALING_DONE_PCT = UNIT_END + 0x9C5, // Size: 1, Flags: PRIVATE
    PLAYER_FIELD_MOD_PERIODIC_HEALING_DONE_PERCENT = UNIT_END + 0x9C6, // Size: 1, Flags: PRIVATE
    PLAYER_FIELD_WEAPON_DMG_MULTIPLIERS = UNIT_END + 0x9C7, // Size: 3, Flags: PRIVATE
    PLAYER_FIELD_WEAPON_ATK_SPEED_MULTIPLIERS = UNIT_END + 0x9CA, // Size: 3, Flags: PRIVATE
    PLAYER_FIELD_MOD_SPELL_POWER_PCT = UNIT_END + 0x9CD, // Size: 1, Flags: PRIVATE
    PLAYER_FIELD_MOD_RESILIENCE_PERCENT = UNIT_END + 0x9CE, // Size: 1, Flags: PRIVATE
    PLAYER_FIELD_OVERRIDE_SPELL_POWER_BY_AP_PCT = UNIT_END + 0x9CF, // Size: 1, Flags: PRIVATE
    PLAYER_FIELD_OVERRIDE_AP_BY_SPELL_POWER_PERCENT = UNIT_END + 0x9D0, // Size: 1, Flags: PRIVATE
    PLAYER_FIELD_MOD_TARGET_RESISTANCE = UNIT_END + 0x9D1, // Size: 1, Flags: PRIVATE
    PLAYER_FIELD_MOD_TARGET_PHYSICAL_RESISTANCE = UNIT_END + 0x9D2, // Size: 1, Flags: PRIVATE
    PLAYER_FIELD_LOCAL_FLAGS = UNIT_END + 0x9D3, // Size: 1, Flags: PRIVATE
    PLAYER_FIELD_BYTES = UNIT_END + 0x9D4, // Size: 1, Flags: PRIVATE
    PLAYER_FIELD_PVP_MEDALS = UNIT_END + 0x9D5, // Size: 1, Flags: PRIVATE
    PLAYER_FIELD_BUYBACK_PRICE_1 = UNIT_END + 0x9D6, // Size: 12, Flags: PRIVATE
    PLAYER_FIELD_BUYBACK_TIMESTAMP_1 = UNIT_END + 0x9E2, // Size: 12, Flags: PRIVATE
    PLAYER_FIELD_KILLS = UNIT_END + 0x9EE, // Size: 1, Flags: PRIVATE
    PLAYER_FIELD_LIFETIME_HONORABLE_KILLS = UNIT_END + 0x9EF, // Size: 1, Flags: PRIVATE
    PLAYER_FIELD_WATCHED_FACTION_INDEX = UNIT_END + 0x9F0, // Size: 1, Flags: PRIVATE
    PLAYER_FIELD_COMBAT_RATING_1 = UNIT_END + 0x9F1, // Size: 32, Flags: PRIVATE
    PLAYER_FIELD_ARENA_TEAM_INFO_1_1 = UNIT_END + 0xA11, // Size: 42, Flags: PRIVATE
    PLAYER_FIELD_MAX_LEVEL = UNIT_END + 0xA3B, // Size: 1, Flags: PRIVATE
    PLAYER_FIELD_SCALING_PLAYER_LEVEL_DELTA = UNIT_END + 0xA3C, // Size: 1, Flags: PRIVATE
    PLAYER_FIELD_MAX_CREATURE_SCALING_LEVEL = UNIT_END + 0xA3D, // Size: 1, Flags: PRIVATE
    PLAYER_NO_REAGENT_COST_1 = UNIT_END + 0xA3E, // Size: 4, Flags: PRIVATE
    PLAYER_PET_SPELL_POWER = UNIT_END + 0xA42, // Size: 1, Flags: PRIVATE
    PLAYER_FIELD_RESEARCHING_1 = UNIT_END + 0xA43, // Size: 10, Flags: PRIVATE
    PLAYER_PROFESSION_SKILL_LINE_1 = UNIT_END + 0xA4D, // Size: 2, Flags: PRIVATE
    PLAYER_FIELD_UI_HIT_MODIFIER = UNIT_END + 0xA4F, // Size: 1, Flags: PRIVATE
    PLAYER_FIELD_UI_SPELL_HIT_MODIFIER = UNIT_END + 0xA50, // Size: 1, Flags: PRIVATE
    PLAYER_FIELD_HOME_REALM_TIME_OFFSET = UNIT_END + 0xA51, // Size: 1, Flags: PRIVATE
    PLAYER_FIELD_MOD_PET_HASTE = UNIT_END + 0xA52, // Size: 1, Flags: PRIVATE
    PLAYER_FIELD_BYTES2 = UNIT_END + 0xA53, // Size: 1, Flags: PRIVATE
    PLAYER_FIELD_BYTES3 = UNIT_END + 0xA54, // Size: 1, Flags: PRIVATE, URGENT_SELF_ONLY
    PLAYER_FIELD_LFG_BONUS_FACTION_ID = UNIT_END + 0xA55, // Size: 1, Flags: PRIVATE
    PLAYER_FIELD_LOOT_SPEC_ID = UNIT_END + 0xA56, // Size: 1, Flags: PRIVATE
    PLAYER_FIELD_OVERRIDE_ZONE_PVP_TYPE = UNIT_END + 0xA57, // Size: 1, Flags: PRIVATE, URGENT_SELF_ONLY
    PLAYER_FIELD_BAG_SLOT_FLAGS = UNIT_END + 0xA58, // Size: 4, Flags: PRIVATE
    PLAYER_FIELD_BANK_BAG_SLOT_FLAGS = UNIT_END + 0xA5C, // Size: 7, Flags: PRIVATE
    PLAYER_FIELD_INSERT_ITEMS_LEFT_TO_RIGHT = UNIT_END + 0xA63, // Size: 1, Flags: PRIVATE
    PLAYER_FIELD_QUEST_COMPLETED = UNIT_END + 0xA64, // Size: 1750, Flags: PRIVATE
    PLAYER_FIELD_HONOR = UNIT_END + 0x113A, // Size: 1, Flags: PRIVATE
    PLAYER_FIELD_HONOR_NEXT_LEVEL = UNIT_END + 0x113B, // Size: 1, Flags: PRIVATE
    PLAYER_END = UNIT_END + 0x113C,
};

namespace UF
{
struct ObjectData : public IsUpdateFieldStructureTag, public HasChangesMask<4>
{
    UpdateField<int32, 0, 1> EntryID;
    struct EntryIDTag : ViewerDependentValueTag<int32> {};
    UpdateField<uint32, 0, 2> DynamicFlags;
    struct DynamicFlagsTag : ViewerDependentValueTag<uint32> {};
    UpdateField<float, 0, 3> Scale;

    void WriteCreate(ByteBuffer& data, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags, Object const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags, Object const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, Mask const& changesMask, bool ignoreNestedChangesMask, Object const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

struct ItemEnchantment : public IsUpdateFieldStructureTag, public HasChangesMask<5>
{
    UpdateField<int32, 0, 1> ID;
    UpdateField<uint32, 0, 2> Duration;
    UpdateField<int16, 0, 3> Charges;
    UpdateField<uint16, 0, 4> Inactive;

    void WriteCreate(ByteBuffer& data, Item const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Item const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

struct ItemMod : public IsUpdateFieldStructureTag
{
    int32 Value;
    uint8 Type;

    void WriteCreate(ByteBuffer& data, Item const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Item const* owner, Player const* receiver) const;
    bool operator==(ItemMod const& right) const;
    bool operator!=(ItemMod const& right) const { return !(*this == right); }
};

struct ItemModList : public IsUpdateFieldStructureTag, public HasChangesMask<1>
{
    DynamicUpdateField<UF::ItemMod, 0, 0> Values;

    void WriteCreate(ByteBuffer& data, Item const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Item const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

struct ArtifactPower : public IsUpdateFieldStructureTag
{
    int16 ArtifactPowerID;
    uint8 PurchasedRank;
    uint8 CurrentRankWithBonus;

    void WriteCreate(ByteBuffer& data, Item const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Item const* owner, Player const* receiver) const;
    bool operator==(ArtifactPower const& right) const;
    bool operator!=(ArtifactPower const& right) const { return !(*this == right); }
};

struct SocketedGem : public IsUpdateFieldStructureTag, public HasChangesMask<20>
{
    UpdateField<int32, 0, 1> ItemID;
    UpdateField<uint8, 0, 2> Context;
    UpdateFieldArray<uint16, 16, 3, 4> BonusListIDs;

    void WriteCreate(ByteBuffer& data, Item const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Item const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

struct ItemData : public IsUpdateFieldStructureTag, public HasChangesMask<41>
{
    DynamicUpdateField<UF::ArtifactPower, 0, 1> ArtifactPowers;
    DynamicUpdateField<UF::SocketedGem, 0, 2> Gems;
    UpdateField<ObjectGuid, 0, 3> Owner;
    UpdateField<ObjectGuid, 0, 4> ContainedIn;
    UpdateField<ObjectGuid, 0, 5> Creator;
    UpdateField<ObjectGuid, 0, 6> GiftCreator;
    UpdateField<uint32, 0, 7> StackCount;
    UpdateField<uint32, 0, 8> Expiration;
    UpdateField<uint32, 0, 9> DynamicFlags;
    UpdateField<uint32, 0, 10> Durability;
    UpdateField<uint32, 0, 11> MaxDurability;
    UpdateField<uint32, 0, 12> CreatePlayedTime;
    UpdateField<int32, 0, 13> Context;
    UpdateField<int64, 0, 14> CreateTime;
    UpdateField<uint64, 0, 15> ArtifactXP;
    UpdateField<uint8, 0, 16> ItemAppearanceModID;
    UpdateField<UF::ItemModList, 0, 17> Modifiers;
    UpdateField<uint32, 0, 18> DynamicFlags2;
    UpdateField<WorldPackets::Item::ItemBonusKey, 0, 19> ItemBonusKey;
    UpdateField<uint16, 0, 20> DEBUGItemLevel;
    UpdateFieldArray<int32, 5, 21, 22> SpellCharges;
    UpdateFieldArray<UF::ItemEnchantment, 13, 27, 28> Enchantment;

    void WriteCreate(ByteBuffer& data, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags, Item const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags, Item const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, Mask const& changesMask, bool ignoreNestedChangesMask, Item const* owner, Player const* receiver) const;
    static void AppendAllowedFieldsMaskForFlag(Mask& allowedMaskForTarget, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags);
    static void FilterDisallowedFieldsMaskForFlag(Mask& changesMask, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags);
    void ClearChangesMask();
};

struct ContainerData : public IsUpdateFieldStructureTag, public HasChangesMask<39>
{
    UpdateField<uint32, 0, 1> NumSlots;
    UpdateFieldArray<ObjectGuid, 36, 2, 3> Slots;

    void WriteCreate(ByteBuffer& data, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags, Bag const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags, Bag const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, Mask const& changesMask, bool ignoreNestedChangesMask, Bag const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

struct AzeriteEmpoweredItemData : public IsUpdateFieldStructureTag, public HasChangesMask<6>
{
    UpdateFieldArray<int32, 5, 0, 1> Selections;

    void WriteCreate(ByteBuffer& data, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags, AzeriteEmpoweredItem const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags, AzeriteEmpoweredItem const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, Mask const& changesMask, bool ignoreNestedChangesMask, AzeriteEmpoweredItem const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

struct UnlockedAzeriteEssence : public IsUpdateFieldStructureTag
{
    uint32 AzeriteEssenceID;
    uint32 Rank;

    void WriteCreate(ByteBuffer& data, AzeriteItem const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, AzeriteItem const* owner, Player const* receiver) const;
    bool operator==(UnlockedAzeriteEssence const& right) const;
    bool operator!=(UnlockedAzeriteEssence const& right) const { return !(*this == right); }
};

struct SelectedAzeriteEssences : public IsUpdateFieldStructureTag, public HasChangesMask<8>
{
    UpdateField<bool, 0, 1> Enabled;
    UpdateField<uint32, 0, 2> SpecializationID;
    UpdateFieldArray<uint32, 4, 3, 4> AzeriteEssenceID;

    void WriteCreate(ByteBuffer& data, AzeriteItem const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, AzeriteItem const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

struct AzeriteItemData : public IsUpdateFieldStructureTag, public HasChangesMask<10>
{
    UpdateField<bool, 0, 1> Enabled;
    DynamicUpdateField<UF::UnlockedAzeriteEssence, 0, 2> UnlockedEssences;
    DynamicUpdateField<uint32, 0, 4> UnlockedEssenceMilestones;
    DynamicUpdateField<UF::SelectedAzeriteEssences, 0, 3> SelectedEssences;
    UpdateField<uint64, 0, 5> Xp;
    UpdateField<uint32, 0, 6> Level;
    UpdateField<uint32, 0, 7> AuraLevel;
    UpdateField<uint32, 0, 8> KnowledgeLevel;
    UpdateField<int32, 0, 9> DEBUGknowledgeWeek;

    void WriteCreate(ByteBuffer& data, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags, AzeriteItem const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags, AzeriteItem const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, Mask const& changesMask, bool ignoreNestedChangesMask, AzeriteItem const* owner, Player const* receiver) const;
    static void AppendAllowedFieldsMaskForFlag(Mask& allowedMaskForTarget, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags);
    static void FilterDisallowedFieldsMaskForFlag(Mask& changesMask, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags);
    void ClearChangesMask();
};

struct SpellCastVisual : public IsUpdateFieldStructureTag
{
    int32 SpellXSpellVisualID;
    int32 ScriptVisualID;

    void WriteCreate(ByteBuffer& data, Object const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Object const* owner, Player const* receiver) const;
    bool operator==(SpellCastVisual const& right) const;
    bool operator!=(SpellCastVisual const& right) const { return !(*this == right); }
};

struct UnitChannel : public IsUpdateFieldStructureTag
{
    int32 SpellID;
    UF::SpellCastVisual SpellVisual;

    void WriteCreate(ByteBuffer& data, Unit const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Unit const* owner, Player const* receiver) const;
    bool operator==(UnitChannel const& right) const;
    bool operator!=(UnitChannel const& right) const { return !(*this == right); }
};

struct VisibleItem : public IsUpdateFieldStructureTag, public HasChangesMask<5>
{
    UpdateField<int32, 0, 1> ItemID;
    UpdateField<int32, 0, 2> SecondaryItemModifiedAppearanceID;
    UpdateField<uint16, 0, 3> ItemAppearanceModID;
    UpdateField<uint16, 0, 4> ItemVisual;

    void WriteCreate(ByteBuffer& data, Unit const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Unit const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

struct PassiveSpellHistory : public IsUpdateFieldStructureTag
{
    int32 SpellID;
    int32 AuraSpellID;

    void WriteCreate(ByteBuffer& data, Unit const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Unit const* owner, Player const* receiver) const;
    bool operator==(PassiveSpellHistory const& right) const;
    bool operator!=(PassiveSpellHistory const& right) const { return !(*this == right); }
};

struct UnitData : public IsUpdateFieldStructureTag, public HasChangesMask<197>
{
    UpdateField<std::vector<uint32>, 0, 1> StateWorldEffectIDs;
    DynamicUpdateField<UF::PassiveSpellHistory, 0, 2> PassiveSpells;
    DynamicUpdateField<int32, 0, 3> WorldEffects;
    DynamicUpdateField<ObjectGuid, 0, 4> ChannelObjects;
    UpdateField<int32, 0, 5> DisplayID;
    struct DisplayIDTag : ViewerDependentValueTag<int32> {};
    UpdateField<uint32, 0, 6> StateSpellVisualID;
    UpdateField<uint32, 0, 7> StateAnimID;
    UpdateField<uint32, 0, 8> StateAnimKitID;
    UpdateField<uint32, 0, 9> StateWorldEffectsQuestObjectiveID;
    UpdateField<int32, 0, 10> SpellOverrideNameID;
    UpdateField<ObjectGuid, 0, 11> Charm;
    UpdateField<ObjectGuid, 0, 12> Summon;
    UpdateField<ObjectGuid, 0, 13> Critter;
    UpdateField<ObjectGuid, 0, 14> CharmedBy;
    UpdateField<ObjectGuid, 0, 15> SummonedBy;
    UpdateField<ObjectGuid, 0, 16> CreatedBy;
    UpdateField<ObjectGuid, 0, 17> DemonCreator;
    UpdateField<ObjectGuid, 0, 18> LookAtControllerTarget;
    UpdateField<ObjectGuid, 0, 19> Target;
    UpdateField<ObjectGuid, 0, 20> BattlePetCompanionGUID;
    UpdateField<uint64, 0, 21> BattlePetDBID;
    UpdateField<UF::UnitChannel, 0, 22> ChannelData;
    UpdateField<int8, 0, 23> SpellEmpowerStage;
    UpdateField<uint32, 0, 24> SummonedByHomeRealm;
    UpdateField<uint8, 0, 25> Race;
    UpdateField<uint8, 0, 26> ClassId;
    UpdateField<uint8, 0, 27> PlayerClassId;
    UpdateField<uint8, 0, 28> Sex;
    UpdateField<uint8, 0, 29> DisplayPower;
    UpdateField<uint32, 0, 30> OverrideDisplayPowerID;
    UpdateField<int64, 0, 31> Health;
    UpdateField<int64, 32, 33> MaxHealth;
    UpdateField<int32, 32, 34> Level;
    UpdateField<int32, 32, 35> EffectiveLevel;
    UpdateField<int32, 32, 36> ContentTuningID;
    UpdateField<int32, 32, 37> ScalingLevelMin;
    UpdateField<int32, 32, 38> ScalingLevelMax;
    UpdateField<int32, 32, 39> ScalingLevelDelta;
    UpdateField<int32, 32, 40> ScalingFactionGroup;
    UpdateField<int32, 32, 41> ScalingHealthItemLevelCurveID;
    UpdateField<int32, 32, 42> ScalingDamageItemLevelCurveID;
    UpdateField<int32, 32, 43> FactionTemplate;
    struct FactionTemplateTag : ViewerDependentValueTag<int32> {};
    UpdateField<uint32, 32, 44> Flags;
    struct FlagsTag : ViewerDependentValueTag<uint32> {};
    UpdateField<uint32, 32, 45> Flags2;
    UpdateField<uint32, 32, 46> Flags3;
    struct Flags3Tag : ViewerDependentValueTag<uint32> {};
    UpdateField<uint32, 32, 47> AuraState;
    struct AuraStateTag : ViewerDependentValueTag<uint32> {};
    UpdateField<uint32, 32, 48> RangedAttackRoundBaseTime;
    UpdateField<float, 32, 49> BoundingRadius;
    UpdateField<float, 32, 50> CombatReach;
    UpdateField<float, 32, 51> DisplayScale;
    UpdateField<int32, 32, 52> CreatureFamily;
    UpdateField<int32, 32, 53> CreatureType;
    UpdateField<int32, 32, 54> NativeDisplayID;
    UpdateField<float, 32, 55> NativeXDisplayScale;
    UpdateField<int32, 32, 56> MountDisplayID;
    UpdateField<int32, 32, 57> CosmeticMountDisplayID;
    UpdateField<float, 32, 58> MinDamage;
    UpdateField<float, 32, 59> MaxDamage;
    UpdateField<float, 32, 60> MinOffHandDamage;
    UpdateField<float, 32, 61> MaxOffHandDamage;
    UpdateField<uint8, 32, 62> StandState;
    UpdateField<uint8, 32, 63> PetTalentPoints;
    UpdateField<uint8, 64, 65> VisFlags;
    UpdateField<uint8, 64, 66> AnimTier;
    UpdateField<uint32, 64, 67> PetNumber;
    UpdateField<uint32, 64, 68> PetNameTimestamp;
    UpdateField<uint32, 64, 69> PetExperience;
    UpdateField<uint32, 64, 70> PetNextLevelExperience;
    UpdateField<float, 64, 71> ModCastingSpeed;
    UpdateField<float, 64, 72> ModCastingSpeedNeg;
    UpdateField<float, 64, 73> ModSpellHaste;
    UpdateField<float, 64, 74> ModHaste;
    UpdateField<float, 64, 75> ModRangedHaste;
    UpdateField<float, 64, 76> ModHasteRegen;
    UpdateField<float, 64, 77> ModTimeRate;
    UpdateField<int32, 64, 78> CreatedBySpell;
    UpdateField<int32, 64, 79> EmoteState;
    UpdateField<int32, 64, 80> BaseMana;
    UpdateField<int32, 64, 81> BaseHealth;
    UpdateField<uint8, 64, 82> SheatheState;
    UpdateField<uint8, 64, 83> PvpFlags;
    struct PvpFlagsTag : ViewerDependentValueTag<uint8> {};
    UpdateField<uint8, 64, 84> PetFlags;
    UpdateField<uint8, 64, 85> ShapeshiftForm;
    UpdateField<int32, 64, 86> AttackPower;
    UpdateField<int32, 64, 87> AttackPowerModPos;
    UpdateField<int32, 64, 88> AttackPowerModNeg;
    UpdateField<float, 64, 89> AttackPowerMultiplier;
    UpdateField<int32, 64, 90> RangedAttackPower;
    UpdateField<int32, 64, 91> RangedAttackPowerModPos;
    UpdateField<int32, 64, 92> RangedAttackPowerModNeg;
    UpdateField<float, 64, 93> RangedAttackPowerMultiplier;
    UpdateField<int32, 64, 94> MainHandWeaponAttackPower;
    UpdateField<int32, 64, 95> OffHandWeaponAttackPower;
    UpdateField<int32, 96, 97> RangedWeaponAttackPower;
    UpdateField<int32, 96, 98> SetAttackSpeedAura;
    UpdateField<float, 96, 99> Lifesteal;
    UpdateField<float, 96, 100> MinRangedDamage;
    UpdateField<float, 96, 101> MaxRangedDamage;
    UpdateField<float, 96, 102> ManaCostMultiplier;
    UpdateField<float, 96, 103> MaxHealthModifier;
    UpdateField<float, 96, 104> HoverHeight;
    UpdateField<int32, 96, 105> MinItemLevelCutoff;
    UpdateField<int32, 96, 106> MinItemLevel;
    UpdateField<int32, 96, 107> MaxItemLevel;
    UpdateField<int32, 96, 108> AzeriteItemLevel;
    UpdateField<int32, 96, 109> WildBattlePetLevel;
    UpdateField<int32, 96, 110> BattlePetCompanionExperience;
    UpdateField<uint32, 96, 111> BattlePetCompanionNameTimestamp;
    UpdateField<int32, 96, 112> InteractSpellID;
    UpdateField<int32, 96, 113> ScaleDuration;
    UpdateField<int32, 96, 114> LooksLikeMountID;
    UpdateField<int32, 96, 115> LooksLikeCreatureID;
    UpdateField<int32, 96, 116> LookAtControllerID;
    UpdateField<int32, 96, 117> PerksVendorItemID;
    UpdateField<int32, 96, 118> TaxiNodesID;
    UpdateField<ObjectGuid, 96, 119> GuildGUID;
    UpdateField<int32, 96, 120> FlightCapabilityID;
    UpdateField<uint32, 96, 121> SilencedSchoolMask;
    UpdateField<ObjectGuid, 96, 122> NameplateAttachToGUID;                     // When set, nameplate of this unit will instead appear on that object
    UpdateFieldArray<uint32, 2, 123, 124> NpcFlags;
    struct NpcFlagsTag : ViewerDependentValueTag<uint32> {};
    UpdateFieldArray<int32, 7, 126, 127> Power;
    UpdateFieldArray<int32, 7, 126, 134> MaxPower;
    UpdateFieldArray<float, 7, 126, 141> PowerRegenFlatModifier;
    UpdateFieldArray<float, 7, 126, 148> PowerRegenInterruptedFlatModifier;
    UpdateFieldArray<UF::VisibleItem, 3, 155, 156> VirtualItems;
    UpdateFieldArray<uint32, 2, 159, 160> AttackRoundBaseTime;
    UpdateFieldArray<int32, 4, 162, 163> Stats;
    UpdateFieldArray<int32, 4, 162, 167> StatPosBuff;
    UpdateFieldArray<int32, 4, 162, 171> StatNegBuff;
    UpdateFieldArray<int32, 7, 175, 176> Resistances;
    UpdateFieldArray<int32, 7, 175, 183> BonusResistanceMods;
    UpdateFieldArray<int32, 7, 175, 190> ManaCostModifier;

    void WriteCreate(ByteBuffer& data, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags, Unit const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags, Unit const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, Mask const& changesMask, bool ignoreNestedChangesMask, Unit const* owner, Player const* receiver) const;
    static void AppendAllowedFieldsMaskForFlag(Mask& allowedMaskForTarget, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags);
    static void FilterDisallowedFieldsMaskForFlag(Mask& changesMask, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags);
    void ClearChangesMask();
};

struct ChrCustomizationChoice : public IsUpdateFieldStructureTag
{
    uint32 ChrCustomizationOptionID;
    uint32 ChrCustomizationChoiceID;

    void WriteCreate(ByteBuffer& data, Object const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Object const* owner, Player const* receiver) const;
    bool operator==(ChrCustomizationChoice const& right) const;
    bool operator!=(ChrCustomizationChoice const& right) const { return !(*this == right); }
};

struct QuestLog : public IsUpdateFieldStructureTag, public HasChangesMask<31>
{
    UpdateField<int32, 0, 1> QuestID;
    UpdateField<uint32, 0, 2> StateFlags;
    UpdateField<uint32, 0, 3> EndTime;
    UpdateField<uint32, 0, 4> AcceptTime;
    UpdateField<uint32, 0, 5> ObjectiveFlags;
    UpdateFieldArray<int16, 24, 6, 7> ObjectiveProgress;

    void WriteCreate(ByteBuffer& data, Player const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Player const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

struct ArenaCooldown : public IsUpdateFieldStructureTag, public HasChangesMask<8>
{
    UpdateField<int32, 0, 1> SpellID;
    UpdateField<int32, 0, 2> Charges;
    UpdateField<uint32, 0, 3> Flags;
    UpdateField<uint32, 0, 4> StartTime;
    UpdateField<uint32, 0, 5> EndTime;
    UpdateField<uint32, 0, 6> NextChargeTime;
    UpdateField<uint8, 0, 7> MaxCharges;

    void WriteCreate(ByteBuffer& data, Player const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Player const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

struct CTROptions : public IsUpdateFieldStructureTag
{
    int32 ContentTuningConditionMask;
    uint32 Field_4;
    uint32 ExpansionLevelMask;

    void WriteCreate(ByteBuffer& data, Player const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Player const* owner, Player const* receiver) const;
    bool operator==(CTROptions const& right) const;
    bool operator!=(CTROptions const& right) const { return !(*this == right); }
};

struct PlayerData : public IsUpdateFieldStructureTag, public HasChangesMask<240>
{
    UpdateField<bool, 0, 1> HasQuestSession;
    UpdateField<bool, 0, 2> HasLevelLink;
    DynamicUpdateField<UF::ChrCustomizationChoice, 0, 3> Customizations;
    DynamicUpdateField<UF::QuestLog, 0, 4> QuestSessionQuestLog;
    DynamicUpdateField<UF::ArenaCooldown, 0, 5> ArenaCooldowns;
    DynamicUpdateField<int32, 0, 6> VisualItemReplacements;
    UpdateField<ObjectGuid, 0, 7> DuelArbiter;
    UpdateField<ObjectGuid, 0, 8> WowAccount;
    UpdateField<ObjectGuid, 0, 9> LootTargetGUID;
    UpdateField<uint32, 0, 10> PlayerFlags;
    UpdateField<uint32, 0, 11> PlayerFlagsEx;
    UpdateField<uint32, 0, 12> GuildRankID;
    UpdateField<uint32, 0, 13> GuildDeleteDate;
    UpdateField<int32, 0, 14> GuildLevel;
    UpdateField<uint8, 0, 15> PartyType;
    UpdateField<uint8, 0, 16> NativeSex;
    UpdateField<uint8, 0, 17> Inebriation;
    UpdateField<uint8, 0, 18> PvpTitle;
    UpdateField<uint8, 0, 19> ArenaFaction;
    UpdateField<uint32, 0, 20> DuelTeam;
    UpdateField<int32, 0, 21> GuildTimeStamp;
    UpdateField<int32, 0, 22> PlayerTitle;
    UpdateField<int32, 0, 23> FakeInebriation;
    UpdateField<uint32, 0, 24> VirtualPlayerRealm;
    UpdateField<uint32, 0, 25> CurrentSpecID;
    UpdateField<int32, 0, 26> TaxiMountAnimKitID;
    UpdateField<uint8, 0, 27> CurrentBattlePetBreedQuality;
    UpdateField<int32, 0, 28> HonorLevel;
    UpdateField<int64, 0, 29> LogoutTime;
    UpdateField<int32, 0, 30> Field_B0;
    UpdateField<int32, 0, 31> Field_B4;
    UpdateField<UF::CTROptions, 32, 33> CtrOptions;
    UpdateField<int32, 32, 34> CovenantID;
    UpdateField<int32, 32, 35> SoulbindID;
    UpdateField<WorldPackets::MythicPlus::DungeonScoreSummary, 32, 36> DungeonScore;
    UpdateFieldArray<UF::QuestLog, 175, 37, 38> QuestLog;
    UpdateFieldArray<UF::VisibleItem, 19, 213, 214> VisibleItems;
    UpdateFieldArray<float, 6, 233, 234> AvgItemLevel;

    void WriteCreate(ByteBuffer& data, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags, Player const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags, Player const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, Mask const& changesMask, bool ignoreNestedChangesMask, Player const* owner, Player const* receiver) const;
    static void AppendAllowedFieldsMaskForFlag(Mask& allowedMaskForTarget, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags);
    static void FilterDisallowedFieldsMaskForFlag(Mask& changesMask, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags);
    void ClearChangesMask();
    bool IsQuestLogChangesMaskSkipped() const { return false; } // bandwidth savings aren't worth the cpu time
};

struct SkillInfo : public IsUpdateFieldStructureTag, public HasChangesMask<1793>
{
    UpdateFieldArray<uint16, 256, 0, 1> SkillLineID;
    UpdateFieldArray<uint16, 256, 0, 257> SkillStep;
    UpdateFieldArray<uint16, 256, 0, 513> SkillRank;
    UpdateFieldArray<uint16, 256, 0, 769> SkillStartingRank;
    UpdateFieldArray<uint16, 256, 0, 1025> SkillMaxRank;
    UpdateFieldArray<int16, 256, 0, 1281> SkillTempBonus;
    UpdateFieldArray<uint16, 256, 0, 1537> SkillPermBonus;

    void WriteCreate(ByteBuffer& data, Player const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Player const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

struct RestInfo : public IsUpdateFieldStructureTag, public HasChangesMask<3>
{
    UpdateField<uint32, 0, 1> Threshold;
    UpdateField<uint8, 0, 2> StateID;

    void WriteCreate(ByteBuffer& data, Player const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Player const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

struct PVPInfo : public IsUpdateFieldStructureTag, public HasChangesMask<19>
{
    UpdateField<bool, 0, 1> Disqualified;
    UpdateField<int8, 0, 2> Bracket;
    UpdateField<int32, 0, 3> PvpRatingID;
    UpdateField<uint32, 0, 4> WeeklyPlayed;
    UpdateField<uint32, 0, 5> WeeklyWon;
    UpdateField<uint32, 0, 6> SeasonPlayed;
    UpdateField<uint32, 0, 7> SeasonWon;
    UpdateField<uint32, 0, 8> Rating;
    UpdateField<uint32, 0, 9> WeeklyBestRating;
    UpdateField<uint32, 0, 10> SeasonBestRating;
    UpdateField<uint32, 0, 11> PvpTierID;
    UpdateField<uint32, 0, 12> WeeklyBestWinPvpTierID;
    UpdateField<uint32, 0, 13> Field_28;
    UpdateField<uint32, 0, 14> Field_2C;
    UpdateField<uint32, 0, 15> WeeklyRoundsPlayed;
    UpdateField<uint32, 0, 16> WeeklyRoundsWon;
    UpdateField<uint32, 0, 17> SeasonRoundsPlayed;
    UpdateField<uint32, 0, 18> SeasonRoundsWon;

    void WriteCreate(ByteBuffer& data, Player const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Player const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

struct CharacterRestriction : public IsUpdateFieldStructureTag
{
    int32 Field_0;
    int32 Field_4;
    int32 Field_8;
    uint32 Type;

    void WriteCreate(ByteBuffer& data, Player const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Player const* owner, Player const* receiver) const;
    bool operator==(CharacterRestriction const& right) const;
    bool operator!=(CharacterRestriction const& right) const { return !(*this == right); }
};

struct SpellPctModByLabel : public IsUpdateFieldStructureTag
{
    int32 ModIndex;
    float ModifierValue;
    int32 LabelID;

    void WriteCreate(ByteBuffer& data, Player const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Player const* owner, Player const* receiver) const;
    bool operator==(SpellPctModByLabel const& right) const;
    bool operator!=(SpellPctModByLabel const& right) const { return !(*this == right); }
};

struct SpellFlatModByLabel : public IsUpdateFieldStructureTag
{
    int32 ModIndex;
    int32 ModifierValue;
    int32 LabelID;

    void WriteCreate(ByteBuffer& data, Player const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Player const* owner, Player const* receiver) const;
    bool operator==(SpellFlatModByLabel const& right) const;
    bool operator!=(SpellFlatModByLabel const& right) const { return !(*this == right); }
};

struct Research : public IsUpdateFieldStructureTag
{
    int16 ResearchProjectID;

    void WriteCreate(ByteBuffer& data, Player const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Player const* owner, Player const* receiver) const;
    bool operator==(Research const& right) const;
    bool operator!=(Research const& right) const { return !(*this == right); }
};

struct MawPower : public IsUpdateFieldStructureTag
{
    int32 Field_0;
    int32 Field_4;
    int32 Field_8;

    void WriteCreate(ByteBuffer& data, Player const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Player const* owner, Player const* receiver) const;
    bool operator==(MawPower const& right) const;
    bool operator!=(MawPower const& right) const { return !(*this == right); }
};

struct MultiFloorExplore : public IsUpdateFieldStructureTag
{
    std::vector<int32> WorldMapOverlayIDs;

    void WriteCreate(ByteBuffer& data, Player const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Player const* owner, Player const* receiver) const;
    bool operator==(MultiFloorExplore const& right) const;
    bool operator!=(MultiFloorExplore const& right) const { return !(*this == right); }
};

struct RecipeProgressionInfo : public IsUpdateFieldStructureTag
{
    uint16 RecipeProgressionGroupID;
    uint16 Experience;

    void WriteCreate(ByteBuffer& data, Player const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Player const* owner, Player const* receiver) const;
    bool operator==(RecipeProgressionInfo const& right) const;
    bool operator!=(RecipeProgressionInfo const& right) const { return !(*this == right); }
};

struct ActivePlayerUnk901 : public IsUpdateFieldStructureTag, public HasChangesMask<3>
{
    UpdateField<ObjectGuid, 0, 1> Field_0;
    UpdateField<int32, 0, 2> Field_10;

    void WriteCreate(ByteBuffer& data, Player const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Player const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

struct QuestSession : public IsUpdateFieldStructureTag, public HasChangesMask<878>
{
    UpdateField<ObjectGuid, 0, 1> Owner;
    UpdateFieldArray<uint64, 875, 2, 3> QuestCompleted;

    void WriteCreate(ByteBuffer& data, Player const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Player const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

struct ReplayedQuest : public IsUpdateFieldStructureTag, public HasChangesMask<3>
{
    UpdateField<int32, 0, 1> QuestID;
    UpdateField<uint32, 0, 2> ReplayTime;

    void WriteCreate(ByteBuffer& data, Player const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Player const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

struct TraitEntry : public IsUpdateFieldStructureTag
{
    int32 TraitNodeID;
    int32 TraitNodeEntryID;
    int32 Rank;
    int32 GrantedRanks;

    void WriteCreate(ByteBuffer& data, Player const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Player const* owner, Player const* receiver) const;
    bool operator==(TraitEntry const& right) const;
    bool operator!=(TraitEntry const& right) const { return !(*this == right); }
};

struct TraitConfig : public IsUpdateFieldStructureTag, public HasChangesMask<12>
{
    DynamicUpdateField<UF::TraitEntry, 0, 1> Entries;
    UpdateField<int32, 0, 2> ID;
    UpdateField<std::string, 0, 3> Name;
    UpdateField<int32, 4, 5> Type;
    UpdateField<int32, 4, 6> SkillLineID;
    UpdateField<int32, 4, 7> ChrSpecializationID;
    UpdateField<int32, 8, 9> CombatConfigFlags;
    UpdateField<int32, 8, 10> LocalIdentifier;
    UpdateField<int32, 8, 11> TraitSystemID;

    void WriteCreate(ByteBuffer& data, Player const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Player const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

struct CraftingOrderItem : public IsUpdateFieldStructureTag, public HasChangesMask<7>
{
    UpdateField<uint64, -1, 0> Field_0;
    UpdateField<ObjectGuid, -1, 1> ItemGUID;
    UpdateField<ObjectGuid, -1, 2> OwnerGUID;
    UpdateField<int32, -1, 3> ItemID;
    UpdateField<uint32, -1, 4> Quantity;
    UpdateField<int32, -1, 5> ReagentQuality;
    OptionalUpdateField<uint8, -1, 6> DataSlotIndex;

    void WriteCreate(ByteBuffer& data, Player const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Player const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

struct CraftingOrderData : public IsUpdateFieldStructureTag, public HasChangesMask<24>
{
    DynamicUpdateField<UF::CraftingOrderItem, 0, 1> Reagents;
    UpdateField<int32, 0, 2> Field_0;
    UpdateField<uint64, 0, 3> OrderID;
    UpdateField<int32, 0, 4> SkillLineAbilityID;
    UpdateField<uint8, 5, 6> OrderState;
    UpdateField<uint8, 5, 7> OrderType;
    UpdateField<uint8, 5, 8> MinQuality;
    UpdateField<int64, 5, 9> ExpirationTime;
    UpdateField<int64, 10, 11> ClaimEndTime;
    UpdateField<int64, 10, 12> TipAmount;
    UpdateField<int64, 10, 13> ConsortiumCut;
    UpdateField<uint32, 10, 14> Flags;
    UpdateField<ObjectGuid, 15, 16> CustomerGUID;
    UpdateField<ObjectGuid, 15, 17> CustomerAccountGUID;
    UpdateField<ObjectGuid, 15, 18> CrafterGUID;
    UpdateField<ObjectGuid, 15, 19> PersonalCrafterGUID;
    UpdateField<std::string, 20, 21> CustomerNotes;
    OptionalUpdateField<UF::CraftingOrderItem, 20, 22> OutputItem;
    OptionalUpdateField<WorldPackets::Item::ItemInstance, 20, 23> OutputItemData;

    void WriteCreate(ByteBuffer& data, Player const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Player const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

struct CraftingOrder : public IsUpdateFieldStructureTag, public HasChangesMask<4>
{
    DynamicUpdateField<WorldPackets::Item::ItemEnchantData, -1, 0> Enchantments;
    DynamicUpdateField<WorldPackets::Item::ItemGemData, -1, 1> Gems;
    UpdateField<UF::CraftingOrderData, -1, 2> Data;
    OptionalUpdateField<WorldPackets::Item::ItemInstance, -1, 3> RecraftItemInfo;

    void WriteCreate(ByteBuffer& data, Player const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Player const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

struct PersonalCraftingOrderCount : public IsUpdateFieldStructureTag
{
    int32 ProfessionID;
    uint32 Count;

    void WriteCreate(ByteBuffer& data, Player const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Player const* owner, Player const* receiver) const;
    bool operator==(PersonalCraftingOrderCount const& right) const;
    bool operator!=(PersonalCraftingOrderCount const& right) const { return !(*this == right); }
};

struct ActivePlayerData : public IsUpdateFieldStructureTag, public HasChangesMask<1575>
{
    UpdateField<bool, 0, 1> BackpackAutoSortDisabled;
    UpdateField<bool, 0, 2> BankAutoSortDisabled;
    UpdateField<bool, 0, 3> SortBagsRightToLeft;
    UpdateField<bool, 0, 4> InsertItemsLeftToRight;
    UpdateField<bool, 0, 5> HasPerksProgramPendingReward;
    UpdateFieldArray<DynamicUpdateFieldBase<UF::Research>, 1, 32, 33> Research;
    DynamicUpdateField<uint64, 0, 6> KnownTitles;
    DynamicUpdateField<uint16, 0, 8> ResearchSites;
    DynamicUpdateField<uint32, 0, 9> ResearchSiteProgress;
    DynamicUpdateField<int32, 0, 10> DailyQuestsCompleted;
    DynamicUpdateField<int32, 0, 11> AvailableQuestLineXQuestIDs;
    DynamicUpdateField<int32, 0, 12> Heirlooms;
    DynamicUpdateField<uint32, 0, 13> HeirloomFlags;
    DynamicUpdateField<int32, 0, 14> Toys;
    DynamicUpdateField<uint32, 0, 15> ToyFlags;
    DynamicUpdateField<uint32, 0, 16> Transmog;
    DynamicUpdateField<int32, 0, 17> ConditionalTransmog;
    DynamicUpdateField<int32, 0, 18> SelfResSpells;
    DynamicUpdateField<uint32, 0, 19> RuneforgePowers;
    DynamicUpdateField<uint32, 0, 20> TransmogIllusions;
    DynamicUpdateField<UF::SpellPctModByLabel, 0, 22> SpellPctModByLabel;
    DynamicUpdateField<UF::SpellFlatModByLabel, 0, 23> SpellFlatModByLabel;
    DynamicUpdateField<UF::MawPower, 0, 24> MawPowers;
    DynamicUpdateField<UF::MultiFloorExplore, 0, 25> MultiFloorExploration;
    DynamicUpdateField<UF::RecipeProgressionInfo, 0, 26> RecipeProgression;
    DynamicUpdateField<UF::ReplayedQuest, 0, 27> ReplayedQuests;
    DynamicUpdateField<int32, 0, 28> DisabledSpells;
    DynamicUpdateField<UF::PersonalCraftingOrderCount, 0, 31> PersonalCraftingOrderCounts;
    DynamicUpdateField<UF::PVPInfo, 0, 7> PvpInfo;
    DynamicUpdateField<UF::CharacterRestriction, 0, 21> CharacterRestrictions;
    DynamicUpdateField<UF::TraitConfig, 0, 29> TraitConfigs;
    DynamicUpdateField<UF::CraftingOrder, 0, 30> CraftingOrders;
    UpdateField<ObjectGuid, 34, 35> FarsightObject;
    UpdateField<ObjectGuid, 34, 36> SummonedBattlePetGUID;
    UpdateField<uint64, 34, 37> Coinage;
    UpdateField<int32, 34, 38> XP;
    UpdateField<int32, 34, 39> NextLevelXP;
    UpdateField<int32, 34, 40> TrialXP;
    UpdateField<UF::SkillInfo, 34, 41> Skill;
    UpdateField<int32, 34, 42> CharacterPoints;
    UpdateField<int32, 34, 43> MaxTalentTiers;
    UpdateField<uint32, 34, 44> TrackCreatureMask;
    UpdateField<float, 34, 45> MainhandExpertise;
    UpdateField<float, 34, 46> OffhandExpertise;
    UpdateField<float, 34, 47> RangedExpertise;
    UpdateField<float, 34, 48> CombatRatingExpertise;
    UpdateField<float, 34, 49> BlockPercentage;
    UpdateField<float, 34, 50> DodgePercentage;
    UpdateField<float, 34, 51> DodgePercentageFromAttribute;
    UpdateField<float, 34, 52> ParryPercentage;
    UpdateField<float, 34, 53> ParryPercentageFromAttribute;
    UpdateField<float, 34, 54> CritPercentage;
    UpdateField<float, 34, 55> RangedCritPercentage;
    UpdateField<float, 34, 56> OffhandCritPercentage;
    UpdateField<float, 34, 57> SpellCritPercentage;
    UpdateField<int32, 34, 58> ShieldBlock;
    UpdateField<float, 34, 59> ShieldBlockCritPercentage;
    UpdateField<float, 34, 60> Mastery;
    UpdateField<float, 34, 61> Speed;
    UpdateField<float, 34, 62> Avoidance;
    UpdateField<float, 34, 63> Sturdiness;
    UpdateField<int32, 34, 64> Versatility;
    UpdateField<float, 34, 65> VersatilityBonus;
    UpdateField<float, 66, 67> PvpPowerDamage;
    UpdateField<float, 66, 68> PvpPowerHealing;
    UpdateField<int32, 66, 69> ModHealingDonePos;
    UpdateField<float, 66, 70> ModHealingPercent;
    UpdateField<float, 66, 71> ModPeriodicHealingDonePercent;
    UpdateField<float, 66, 72> ModSpellPowerPercent;
    UpdateField<float, 66, 73> ModResiliencePercent;
    UpdateField<float, 66, 74> OverrideSpellPowerByAPPercent;
    UpdateField<float, 66, 75> OverrideAPBySpellPowerPercent;
    UpdateField<int32, 66, 76> ModTargetResistance;
    UpdateField<int32, 66, 77> ModTargetPhysicalResistance;
    UpdateField<uint32, 66, 78> LocalFlags;
    UpdateField<uint8, 66, 79> GrantableLevels;
    UpdateField<uint8, 66, 80> MultiActionBars;
    UpdateField<uint8, 66, 81> LifetimeMaxRank;
    UpdateField<uint8, 66, 82> NumRespecs;
    UpdateField<uint32, 66, 83> PvpMedals;
    UpdateField<uint16, 66, 84> TodayHonorableKills;
    UpdateField<uint16, 66, 85> YesterdayHonorableKills;
    UpdateField<uint32, 66, 86> LifetimeHonorableKills;
    UpdateField<int32, 66, 87> WatchedFactionIndex;
    UpdateField<int32, 66, 88> MaxLevel;
    UpdateField<int32, 66, 89> ScalingPlayerLevelDelta;
    UpdateField<int32, 66, 90> MaxCreatureScalingLevel;
    UpdateField<int32, 66, 91> PetSpellPower;
    UpdateField<float, 66, 92> UiHitModifier;
    UpdateField<float, 66, 93> UiSpellHitModifier;
    UpdateField<int32, 66, 94> HomeRealmTimeOffset;
    UpdateField<float, 66, 95> ModPetHaste;
    UpdateField<int8, 66, 96> JailersTowerLevelMax;
    UpdateField<int8, 66, 97> JailersTowerLevel;
    UpdateField<uint8, 98, 99> LocalRegenFlags;
    UpdateField<uint8, 98, 100> AuraVision;
    UpdateField<uint8, 98, 101> NumBackpackSlots;
    UpdateField<int32, 98, 102> OverrideSpellsID;
    UpdateField<uint16, 98, 103> LootSpecID;
    UpdateField<uint32, 98, 104> OverrideZonePVPType;
    UpdateField<ObjectGuid, 98, 105> BnetAccount;
    UpdateField<uint64, 98, 106> GuildClubMemberID;
    UpdateField<int32, 98, 107> Honor;
    UpdateField<int32, 98, 108> HonorNextLevel;
    UpdateField<int32, 98, 109> PerksProgramCurrency;
    UpdateField<uint8, 98, 110> NumBankSlots;
    UpdateField<WorldPackets::PerksProgram::PerksVendorItem, 98, 111> FrozenPerksVendorItem;
    UpdateField<UF::ActivePlayerUnk901, 98, 113> Field_1410;
    OptionalUpdateField<UF::QuestSession, 98, 112> QuestSession;
    UpdateField<int32, 98, 114> UiChromieTimeExpansionID;
    UpdateField<int32, 98, 115> TransportServerTime;
    UpdateField<uint32, 98, 116> WeeklyRewardsPeriodSinceOrigin;                // week count since Cfg_RegionsEntry::ChallengeOrigin
    UpdateField<int16, 98, 117> DEBUGSoulbindConduitRank;
    UpdateField<WorldPackets::MythicPlus::DungeonScoreData, 98, 118> DungeonScore;
    UpdateField<uint32, 98, 119> ActiveCombatTraitConfigID;
    UpdateFieldArray<ObjectGuid, 218, 120, 121> InvSlots;
    UpdateFieldArray<uint64, 240, 339, 340> ExploredZones;
    UpdateFieldArray<UF::RestInfo, 2, 580, 581> RestInfo;
    UpdateFieldArray<int32, 7, 583, 584> ModDamageDonePos;
    UpdateFieldArray<int32, 7, 583, 591> ModDamageDoneNeg;
    UpdateFieldArray<float, 7, 583, 598> ModDamageDonePercent;
    UpdateFieldArray<float, 7, 583, 605> ModHealingDonePercent;
    UpdateFieldArray<float, 3, 612, 613> WeaponDmgMultipliers;
    UpdateFieldArray<float, 3, 612, 616> WeaponAtkSpeedMultipliers;
    UpdateFieldArray<uint32, 12, 619, 620> BuybackPrice;
    UpdateFieldArray<int64, 12, 619, 632> BuybackTimestamp;
    UpdateFieldArray<int32, 32, 644, 645> CombatRatings;
    UpdateFieldArray<uint32, 4, 677, 678> NoReagentCostMask;
    UpdateFieldArray<int32, 2, 682, 683> ProfessionSkillLine;
    UpdateFieldArray<uint32, 5, 685, 686> BagSlotFlags;
    UpdateFieldArray<uint32, 7, 691, 692> BankBagSlotFlags;
    UpdateFieldArray<uint64, 875, 699, 700> QuestCompleted;

    void WriteCreate(ByteBuffer& data, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags, Player const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags, Player const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, Mask const& changesMask, bool ignoreNestedChangesMask, Player const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

struct GameObjectData : public IsUpdateFieldStructureTag, public HasChangesMask<25>
{
    UpdateField<std::vector<uint32>, 0, 1> StateWorldEffectIDs;
    DynamicUpdateField<int32, 0, 2> EnableDoodadSets;
    DynamicUpdateField<int32, 0, 3> WorldEffects;
    UpdateField<int32, 0, 4> DisplayID;
    UpdateField<uint32, 0, 5> SpellVisualID;
    UpdateField<uint32, 0, 6> StateSpellVisualID;
    UpdateField<uint32, 0, 7> SpawnTrackingStateAnimID;
    UpdateField<uint32, 0, 8> SpawnTrackingStateAnimKitID;
    UpdateField<uint32, 0, 9> StateWorldEffectsQuestObjectiveID;
    UpdateField<ObjectGuid, 0, 10> CreatedBy;
    UpdateField<ObjectGuid, 0, 11> GuildGUID;
    UpdateField<uint32, 0, 12> Flags;
    struct FlagsTag : ViewerDependentValueTag<uint32> {};
    UpdateField<QuaternionData, 0, 13> ParentRotation;
    UpdateField<int32, 0, 14> FactionTemplate;
    UpdateField<int8, 0, 15> State;
    struct StateTag : ViewerDependentValueTag<int8> {};
    UpdateField<int8, 0, 16> TypeID;
    UpdateField<uint8, 0, 17> PercentHealth;
    UpdateField<uint32, 0, 18> ArtKit;
    UpdateField<uint32, 0, 19> CustomParam;
    UpdateField<int32, 0, 20> Level;
    UpdateField<uint32, 0, 21> AnimGroupInstance;
    UpdateField<uint32, 0, 22> UiWidgetItemID;
    UpdateField<uint32, 0, 23> UiWidgetItemQuality;
    UpdateField<uint32, 0, 24> UiWidgetItemUnknown1000;

    void WriteCreate(ByteBuffer& data, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags, GameObject const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags, GameObject const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, Mask const& changesMask, bool ignoreNestedChangesMask, GameObject const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

struct DynamicObjectData : public IsUpdateFieldStructureTag, public HasChangesMask<7>
{
    UpdateField<ObjectGuid, 0, 1> Caster;
    UpdateField<uint8, 0, 2> Type;
    UpdateField<UF::SpellCastVisual, 0, 3> SpellVisual;
    UpdateField<int32, 0, 4> SpellID;
    UpdateField<float, 0, 5> Radius;
    UpdateField<uint32, 0, 6> CastTime;

    void WriteCreate(ByteBuffer& data, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags, DynamicObject const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags, DynamicObject const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, Mask const& changesMask, bool ignoreNestedChangesMask, DynamicObject const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

struct CorpseData : public IsUpdateFieldStructureTag, public HasChangesMask<33>
{
    DynamicUpdateField<UF::ChrCustomizationChoice, 0, 1> Customizations;
    UpdateField<uint32, 0, 2> DynamicFlags;
    UpdateField<ObjectGuid, 0, 3> Owner;
    UpdateField<ObjectGuid, 0, 4> PartyGUID;
    UpdateField<ObjectGuid, 0, 5> GuildGUID;
    UpdateField<uint32, 0, 6> DisplayID;
    UpdateField<uint8, 0, 7> RaceID;
    UpdateField<uint8, 0, 8> Sex;
    UpdateField<uint8, 0, 9> Class;
    UpdateField<uint32, 0, 10> Flags;
    UpdateField<int32, 0, 11> FactionTemplate;
    UpdateField<uint32, 0, 12> StateSpellVisualKitID;
    UpdateFieldArray<uint32, 19, 13, 14> Items;

    void WriteCreate(ByteBuffer& data, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags, Corpse const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags, Corpse const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, Mask const& changesMask, bool ignoreNestedChangesMask, Corpse const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

struct ScaleCurve : public IsUpdateFieldStructureTag, public HasChangesMask<7>
{
    UpdateField<bool, 0, 1> OverrideActive;
    UpdateField<uint32, 0, 2> StartTimeOffset;
    UpdateField<uint32, 0, 3> ParameterCurve;
    UpdateFieldArray<TaggedPosition<Position::XY>, 2, 4, 5> Points;

    void WriteCreate(ByteBuffer& data, AreaTrigger const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, AreaTrigger const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

struct VisualAnim : public IsUpdateFieldStructureTag, public HasChangesMask<5>
{
    UpdateField<bool, 0, 1> Field_C;
    UpdateField<uint32, 0, 2> AnimationDataID;
    UpdateField<uint32, 0, 3> AnimKitID;
    UpdateField<uint32, 0, 4> AnimProgress;

    void WriteCreate(ByteBuffer& data, AreaTrigger const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, AreaTrigger const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

struct AreaTriggerData : public IsUpdateFieldStructureTag, public HasChangesMask<23>
{
    UpdateField<UF::ScaleCurve, 0, 1> OverrideScaleCurve;
    UpdateField<UF::ScaleCurve, 0, 2> ExtraScaleCurve;
    UpdateField<UF::ScaleCurve, 0, 3> Field_C38;
    UpdateField<UF::ScaleCurve, 0, 4> Field_C54;
    UpdateField<UF::ScaleCurve, 0, 5> Field_C70;
    UpdateField<ObjectGuid, 0, 6> Caster;
    UpdateField<uint32, 0, 7> Duration;
    UpdateField<uint32, 0, 8> TimeToTarget;
    UpdateField<uint32, 0, 9> TimeToTargetScale;
    UpdateField<uint32, 0, 10> TimeToTargetExtraScale;
    UpdateField<uint32, 0, 11> Field_B0;
    UpdateField<int32, 0, 12> SpellID;
    UpdateField<int32, 0, 13> SpellForVisuals;
    UpdateField<UF::SpellCastVisual, 0, 14> SpellVisual;
    UpdateField<float, 0, 15> BoundsRadius2D;
    UpdateField<uint32, 0, 16> DecalPropertiesID;
    UpdateField<ObjectGuid, 0, 17> CreatingEffectGUID;
    UpdateField<uint32, 0, 18> Field_80;
    UpdateField<uint32, 0, 19> Field_84;
    UpdateField<ObjectGuid, 0, 20> Field_88;
    UpdateField<TaggedPosition<Position::XYZ>, 0, 21> Field_F8;
    UpdateField<UF::VisualAnim, 0, 22> VisualAnim;

    void WriteCreate(ByteBuffer& data, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags, AreaTrigger const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags, AreaTrigger const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, Mask const& changesMask, bool ignoreNestedChangesMask, AreaTrigger const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

struct SceneObjectData : public IsUpdateFieldStructureTag, public HasChangesMask<5>
{
    UpdateField<int32, 0, 1> ScriptPackageID;
    UpdateField<uint32, 0, 2> RndSeedVal;
    UpdateField<ObjectGuid, 0, 3> CreatedBy;
    UpdateField<uint32, 0, 4> SceneType;

    void WriteCreate(ByteBuffer& data, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags, Object const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags, Object const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, Mask const& changesMask, bool ignoreNestedChangesMask, Object const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

struct ConversationLine : public IsUpdateFieldStructureTag
{
    int32 ConversationLineID;
    uint32 StartTime;
    struct StartTimeTag : ViewerDependentValueTag<uint32> {};
    int32 UiCameraID;
    uint8 ActorIndex;
    uint8 Flags;
    uint8 ChatType;

    void WriteCreate(ByteBuffer& data, Conversation const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Conversation const* owner, Player const* receiver) const;
    bool operator==(ConversationLine const& right) const;
    bool operator!=(ConversationLine const& right) const { return !(*this == right); }
};

struct ConversationActor : public IsUpdateFieldStructureTag
{
    uint32 CreatureID;
    uint32 CreatureDisplayInfoID;
    ObjectGuid ActorGUID;
    int32 Id;
    uint32 Type;
    uint32 NoActorObject;

    void WriteCreate(ByteBuffer& data, Conversation const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Conversation const* owner, Player const* receiver) const;
    bool operator==(ConversationActor const& right) const;
    bool operator!=(ConversationActor const& right) const { return !(*this == right); }
};

struct ConversationData : public IsUpdateFieldStructureTag, public HasChangesMask<7>
{
    UpdateField<bool, 0, 1> DontPlayBroadcastTextSounds;
    UpdateField<std::vector<UF::ConversationLine>, 0, 2> Lines;
    DynamicUpdateField<UF::ConversationActor, 0, 3> Actors;
    UpdateField<int32, 0, 4> LastLineEndTime;
    struct LastLineEndTimeTag : ViewerDependentValueTag<int32> {};
    UpdateField<uint32, 0, 5> Progress;
    UpdateField<uint32, 0, 6> Flags;

    void WriteCreate(ByteBuffer& data, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags, Conversation const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags, Conversation const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, Mask const& changesMask, bool ignoreNestedChangesMask, Conversation const* owner, Player const* receiver) const;
    void ClearChangesMask();
};


}

#endif // UpdateFields_h__
