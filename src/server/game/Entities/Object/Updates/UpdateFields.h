/*
 * This file is part of the TrinityCore Project. See AUTHORS file for Copyright information
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the
 * Free Software Foundation; either version 2 of the License, or (at your
 * option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program. If not, see <http://www.gnu.org/licenses/>.
 */

#ifndef UpdateFields_h__
#define UpdateFields_h__

#include "EnumFlag.h"
#include "ItemPacketsCommon.h"
#include "MythicPlusPacketsCommon.h"
#include "ObjectGuid.h"
#include "PerksProgramPacketsCommon.h"
#include "Position.h"
#include "QuaternionData.h"
#include "UpdateField.h"
#include "UpdateMask.h"

// This file is automatically generated, DO NOT EDIT

class AreaTrigger;
class Bag;
class ByteBuffer;
class Conversation;
class Corpse;
class DynamicObject;
class GameObject;
class Item;
class Object;
class Player;
class Unit;

namespace UF
{
struct ObjectData : public IsUpdateFieldStructureTag, public HasChangesMask<4>
{
    UpdateField<int32, 0, 1> EntryID;
    struct EntryIDTag : ViewerDependentValueTag<int32> {};
    UpdateField<uint32, 0, 2> DynamicFlags;
    struct DynamicFlagsTag : ViewerDependentValueTag<uint32> {};
    UpdateField<float, 0, 3> Scale;

    void WriteCreate(ByteBuffer& data, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags, Object const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags, Object const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, Mask const& changesMask, bool ignoreNestedChangesMask, Object const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

struct ItemEnchantment : public IsUpdateFieldStructureTag, public HasChangesMask<6>
{
    UpdateField<int32, 0, 1> ID;
    UpdateField<uint32, 0, 2> Duration;
    UpdateField<int16, 0, 3> Charges;
    UpdateField<uint8, 0, 4> Field_A;
    UpdateField<uint8, 0, 5> Field_B;

    void WriteCreate(ByteBuffer& data, Item const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Item const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

struct ItemMod : public IsUpdateFieldStructureTag
{
    int32 Value;
    uint8 Type;

    void WriteCreate(ByteBuffer& data, Item const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Item const* owner, Player const* receiver) const;
    bool operator==(ItemMod const& right) const;
    bool operator!=(ItemMod const& right) const { return !(*this == right); }
};

struct ItemModList : public IsUpdateFieldStructureTag, public HasChangesMask<1>
{
    DynamicUpdateField<UF::ItemMod, -1, 0> Values;

    void WriteCreate(ByteBuffer& data, Item const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Item const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

struct ArtifactPower : public IsUpdateFieldStructureTag
{
    int16 ArtifactPowerID;
    uint8 PurchasedRank;
    uint8 CurrentRankWithBonus;

    void WriteCreate(ByteBuffer& data, Item const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Item const* owner, Player const* receiver) const;
    bool operator==(ArtifactPower const& right) const;
    bool operator!=(ArtifactPower const& right) const { return !(*this == right); }
};

struct SocketedGem : public IsUpdateFieldStructureTag, public HasChangesMask<20>
{
    UpdateField<int32, 0, 1> ItemID;
    UpdateField<uint8, 0, 2> Context;
    UpdateFieldArray<uint16, 16, 3, 4> BonusListIDs;

    void WriteCreate(ByteBuffer& data, Item const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Item const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

struct ItemData : public IsUpdateFieldStructureTag, public HasChangesMask<43>
{
    DynamicUpdateField<UF::ArtifactPower, 0, 1> ArtifactPowers;
    DynamicUpdateField<UF::SocketedGem, 0, 2> Gems;
    UpdateField<ObjectGuid, 0, 3> Owner;
    UpdateField<ObjectGuid, 0, 4> ContainedIn;
    UpdateField<ObjectGuid, 0, 5> Creator;
    UpdateField<ObjectGuid, 0, 6> GiftCreator;
    UpdateField<uint32, 0, 7> StackCount;
    UpdateField<uint32, 0, 8> Expiration;
    UpdateField<uint32, 0, 9> DynamicFlags;
    UpdateField<int32, 0, 10> PropertySeed;
    UpdateField<int32, 0, 11> RandomPropertiesID;
    UpdateField<uint32, 0, 12> Durability;
    UpdateField<uint32, 0, 13> MaxDurability;
    UpdateField<uint32, 0, 14> CreatePlayedTime;
    UpdateField<int32, 0, 15> Context;
    UpdateField<int64, 0, 16> CreateTime;
    UpdateField<uint64, 0, 17> ArtifactXP;
    UpdateField<uint8, 0, 18> ItemAppearanceModID;
    UpdateField<UF::ItemModList, 0, 19> Modifiers;
    UpdateField<uint32, 0, 20> DynamicFlags2;
    UpdateField<WorldPackets::Item::ItemBonusKey, 0, 21> ItemBonusKey;
    UpdateField<uint16, 0, 22> DEBUGItemLevel;
    UpdateFieldArray<int32, 5, 23, 24> SpellCharges;
    UpdateFieldArray<UF::ItemEnchantment, 13, 29, 30> Enchantment;

    void WriteCreate(ByteBuffer& data, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags, Item const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags, Item const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, Mask const& changesMask, bool ignoreNestedChangesMask, Item const* owner, Player const* receiver) const;
    static void AppendAllowedFieldsMaskForFlag(Mask& allowedMaskForTarget, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags);
    static void FilterDisallowedFieldsMaskForFlag(Mask& changesMask, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags);
    void ClearChangesMask();
};

struct ContainerData : public IsUpdateFieldStructureTag, public HasChangesMask<39>
{
    UpdateField<uint32, 0, 1> NumSlots;
    UpdateFieldArray<ObjectGuid, 36, 2, 3> Slots;

    void WriteCreate(ByteBuffer& data, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags, Bag const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags, Bag const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, Mask const& changesMask, bool ignoreNestedChangesMask, Bag const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

struct UnitChannel : public IsUpdateFieldStructureTag
{
    int32 SpellID;
    int32 SpellXSpellVisualID;

    void WriteCreate(ByteBuffer& data, Unit const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Unit const* owner, Player const* receiver) const;
    bool operator==(UnitChannel const& right) const;
    bool operator!=(UnitChannel const& right) const { return !(*this == right); }
};

struct VisibleItem : public IsUpdateFieldStructureTag, public HasChangesMask<4>
{
    UpdateField<int32, 0, 1> ItemID;
    UpdateField<uint16, 0, 2> ItemAppearanceModID;
    UpdateField<uint16, 0, 3> ItemVisual;

    void WriteCreate(ByteBuffer& data, Unit const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Unit const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

struct PassiveSpellHistory : public IsUpdateFieldStructureTag
{
    int32 SpellID;
    int32 AuraSpellID;

    void WriteCreate(ByteBuffer& data, Unit const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Unit const* owner, Player const* receiver) const;
    bool operator==(PassiveSpellHistory const& right) const;
    bool operator!=(PassiveSpellHistory const& right) const { return !(*this == right); }
};

struct UnitData : public IsUpdateFieldStructureTag, public HasChangesMask<227>
{
    UpdateField<std::vector<uint32>, 0, 1> StateWorldEffectIDs;
    DynamicUpdateField<UF::PassiveSpellHistory, 0, 2> PassiveSpells;
    DynamicUpdateField<int32, 0, 3> WorldEffects;
    DynamicUpdateField<ObjectGuid, 0, 4> ChannelObjects;
    UpdateField<int64, 0, 5> Health;
    UpdateField<int64, 0, 6> MaxHealth;
    UpdateField<int32, 0, 7> DisplayID;
    struct DisplayIDTag : ViewerDependentValueTag<int32> {};
    UpdateField<uint32, 0, 8> StateSpellVisualID;
    UpdateField<uint32, 0, 9> StateAnimID;
    UpdateField<uint32, 0, 10> StateAnimKitID;
    UpdateField<ObjectGuid, 0, 11> Charm;
    UpdateField<ObjectGuid, 0, 12> Summon;
    UpdateField<ObjectGuid, 0, 13> Critter;
    UpdateField<ObjectGuid, 0, 14> CharmedBy;
    UpdateField<ObjectGuid, 0, 15> SummonedBy;
    UpdateField<ObjectGuid, 0, 16> CreatedBy;
    UpdateField<ObjectGuid, 0, 17> DemonCreator;
    UpdateField<ObjectGuid, 0, 18> LookAtControllerTarget;
    UpdateField<ObjectGuid, 0, 19> Target;
    UpdateField<ObjectGuid, 0, 20> BattlePetCompanionGUID;
    UpdateField<uint64, 0, 21> BattlePetDBID;
    UpdateField<UF::UnitChannel, 0, 22> ChannelData;
    UpdateField<uint32, 0, 23> SummonedByHomeRealm;
    UpdateField<uint8, 0, 24> Race;
    UpdateField<uint8, 0, 25> ClassId;
    UpdateField<uint8, 0, 26> PlayerClassId;
    UpdateField<uint8, 0, 27> Sex;
    UpdateField<uint8, 0, 28> DisplayPower;
    UpdateField<uint32, 0, 29> OverrideDisplayPowerID;
    UpdateField<int32, 0, 30> Level;
    UpdateField<int32, 0, 31> EffectiveLevel;
    UpdateField<int32, 32, 33> ContentTuningID;
    UpdateField<int32, 32, 34> ScalingLevelMin;
    UpdateField<int32, 32, 35> ScalingLevelMax;
    UpdateField<int32, 32, 36> ScalingLevelDelta;
    UpdateField<int32, 32, 37> ScalingFactionGroup;
    UpdateField<int32, 32, 38> ScalingHealthItemLevelCurveID;
    UpdateField<int32, 32, 39> ScalingDamageItemLevelCurveID;
    UpdateField<int32, 32, 40> FactionTemplate;
    struct FactionTemplateTag : ViewerDependentValueTag<int32> {};
    UpdateField<uint32, 32, 41> Flags;
    struct FlagsTag : ViewerDependentValueTag<uint32> {};
    UpdateField<uint32, 32, 42> Flags2;
    UpdateField<uint32, 32, 43> Flags3;
    struct Flags3Tag : ViewerDependentValueTag<uint32> {};
    UpdateField<uint32, 32, 44> AuraState;
    struct AuraStateTag : ViewerDependentValueTag<uint32> {};
    UpdateField<uint32, 32, 45> RangedAttackRoundBaseTime;
    UpdateField<float, 32, 46> BoundingRadius;
    UpdateField<float, 32, 47> CombatReach;
    UpdateField<float, 32, 48> DisplayScale;
    UpdateField<int32, 32, 49> NativeDisplayID;
    UpdateField<float, 32, 50> NativeXDisplayScale;
    UpdateField<int32, 32, 51> MountDisplayID;
    UpdateField<float, 32, 52> MinDamage;
    UpdateField<float, 32, 53> MaxDamage;
    UpdateField<float, 32, 54> MinOffHandDamage;
    UpdateField<float, 32, 55> MaxOffHandDamage;
    UpdateField<uint8, 32, 56> StandState;
    UpdateField<uint8, 32, 57> PetTalentPoints;
    UpdateField<uint8, 32, 58> VisFlags;
    UpdateField<uint8, 32, 59> AnimTier;
    UpdateField<uint32, 32, 60> PetNumber;
    UpdateField<uint32, 32, 61> PetNameTimestamp;
    UpdateField<uint32, 32, 62> PetExperience;
    UpdateField<uint32, 32, 63> PetNextLevelExperience;
    UpdateField<float, 64, 65> ModCastingSpeed;
    UpdateField<float, 64, 66> ModSpellHaste;
    UpdateField<float, 64, 67> ModHaste;
    UpdateField<float, 64, 68> ModRangedHaste;
    UpdateField<float, 64, 69> ModHasteRegen;
    UpdateField<float, 64, 70> ModTimeRate;
    UpdateField<int32, 64, 71> CreatedBySpell;
    UpdateField<int32, 64, 72> EmoteState;
    UpdateField<int16, 64, 73> TrainingPointsUsed;
    UpdateField<int16, 64, 74> TrainingPointsTotal;
    UpdateField<int32, 64, 75> BaseMana;
    UpdateField<int32, 64, 76> BaseHealth;
    UpdateField<uint8, 64, 77> SheatheState;
    UpdateField<uint8, 64, 78> PvpFlags;
    struct PvpFlagsTag : ViewerDependentValueTag<uint8> {};
    UpdateField<uint8, 64, 79> PetFlags;
    UpdateField<uint8, 64, 80> ShapeshiftForm;
    UpdateField<int32, 64, 81> AttackPower;
    UpdateField<int32, 64, 82> AttackPowerModPos;
    UpdateField<int32, 64, 83> AttackPowerModNeg;
    UpdateField<float, 64, 84> AttackPowerMultiplier;
    UpdateField<int32, 64, 85> RangedAttackPower;
    UpdateField<int32, 64, 86> RangedAttackPowerModPos;
    UpdateField<int32, 64, 87> RangedAttackPowerModNeg;
    UpdateField<float, 64, 88> RangedAttackPowerMultiplier;
    UpdateField<int32, 64, 89> SetAttackSpeedAura;
    UpdateField<float, 64, 90> Lifesteal;
    UpdateField<float, 64, 91> MinRangedDamage;
    UpdateField<float, 64, 92> MaxRangedDamage;
    UpdateField<float, 64, 93> MaxHealthModifier;
    UpdateField<float, 64, 94> HoverHeight;
    UpdateField<int32, 64, 95> MinItemLevelCutoff;
    UpdateField<int32, 96, 97> MinItemLevel;
    UpdateField<int32, 96, 98> MaxItemLevel;
    UpdateField<int32, 96, 99> WildBattlePetLevel;
    UpdateField<uint32, 96, 100> BattlePetCompanionNameTimestamp;
    UpdateField<int32, 96, 101> InteractSpellID;
    struct InteractSpellIDTag : ViewerDependentValueTag<int32> {};
    UpdateField<int32, 96, 102> ScaleDuration;
    UpdateField<int32, 96, 103> LooksLikeMountID;
    UpdateField<int32, 96, 104> LooksLikeCreatureID;
    UpdateField<int32, 96, 105> LookAtControllerID;
    UpdateField<int32, 96, 106> PerksVendorItemID;
    UpdateField<ObjectGuid, 96, 107> GuildGUID;
    UpdateField<ObjectGuid, 96, 108> SkinningOwnerGUID;
    UpdateField<int32, 96, 109> FlightCapabilityID;
    UpdateField<float, 96, 110> GlideEventSpeedDivisor;                         // Movement speed gets divided by this value when evaluating what GlideEvents to use
    UpdateField<uint32, 96, 111> CurrentAreaID;
    UpdateField<ObjectGuid, 96, 112> ComboTarget;
    UpdateFieldArray<uint32, 2, 113, 114> NpcFlags;
    struct NpcFlagsTag : ViewerDependentValueTag<uint32> {};
    UpdateFieldArray<float, 10, 116, 117> PowerRegenFlatModifier;
    UpdateFieldArray<float, 10, 116, 127> PowerRegenInterruptedFlatModifier;
    UpdateFieldArray<int32, 10, 116, 137> Power;
    UpdateFieldArray<int32, 10, 116, 147> MaxPower;
    UpdateFieldArray<float, 10, 116, 157> ModPowerRegen;                        // Applies to power regen only if expansion < 2, hidden from lua
    UpdateFieldArray<UF::VisibleItem, 3, 167, 168> VirtualItems;
    UpdateFieldArray<uint32, 2, 171, 172> AttackRoundBaseTime;
    UpdateFieldArray<int32, 5, 174, 175> Stats;
    UpdateFieldArray<int32, 5, 174, 180> StatPosBuff;
    UpdateFieldArray<int32, 5, 174, 185> StatNegBuff;
    UpdateFieldArray<int32, 7, 190, 191> Resistances;
    UpdateFieldArray<int32, 7, 190, 198> PowerCostModifier;
    UpdateFieldArray<float, 7, 190, 205> PowerCostMultiplier;
    UpdateFieldArray<int32, 7, 212, 213> ResistanceBuffModsPositive;
    UpdateFieldArray<int32, 7, 212, 220> ResistanceBuffModsNegative;

    void WriteCreate(ByteBuffer& data, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags, Unit const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags, Unit const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, Mask const& changesMask, bool ignoreNestedChangesMask, Unit const* owner, Player const* receiver) const;
    static void AppendAllowedFieldsMaskForFlag(Mask& allowedMaskForTarget, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags);
    static void FilterDisallowedFieldsMaskForFlag(Mask& changesMask, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags);
    void ClearChangesMask();
};

struct ChrCustomizationChoice : public IsUpdateFieldStructureTag
{
    uint32 ChrCustomizationOptionID;
    uint32 ChrCustomizationChoiceID;

    void WriteCreate(ByteBuffer& data, Object const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Object const* owner, Player const* receiver) const;
    bool operator==(ChrCustomizationChoice const& right) const;
    bool operator!=(ChrCustomizationChoice const& right) const { return !(*this == right); }
};

struct QuestLog : public IsUpdateFieldStructureTag, public HasChangesMask<29>
{
    UpdateField<int64, 0, 1> EndTime;
    UpdateField<int32, 0, 2> QuestID;
    UpdateField<uint32, 0, 3> StateFlags;
    UpdateFieldArray<uint16, 24, 4, 5> ObjectiveProgress;

    void WriteCreate(ByteBuffer& data, Player const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Player const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

struct ArenaCooldown : public IsUpdateFieldStructureTag, public HasChangesMask<9>
{
    UpdateField<int32, 0, 1> SpellID;
    UpdateField<int32, 0, 2> ItemID;
    UpdateField<int32, 0, 3> Charges;
    UpdateField<uint32, 0, 4> Flags;
    UpdateField<uint32, 0, 5> StartTime;
    UpdateField<uint32, 0, 6> EndTime;
    UpdateField<uint32, 0, 7> NextChargeTime;
    UpdateField<uint8, 0, 8> MaxCharges;

    void WriteCreate(ByteBuffer& data, Player const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Player const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

struct DeclinedNames : public IsUpdateFieldStructureTag, public HasChangesMask<6>
{
    UpdateFieldArray<std::string, 5, 0, 1> Name;

    void WriteCreate(ByteBuffer& data, Player const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Player const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

struct CustomTabardInfo : public IsUpdateFieldStructureTag, public HasChangesMask<6>
{
    UpdateField<int32, 0, 1> EmblemStyle;
    UpdateField<int32, 0, 2> EmblemColor;
    UpdateField<int32, 0, 3> BorderStyle;
    UpdateField<int32, 0, 4> BorderColor;
    UpdateField<int32, 0, 5> BackgroundColor;

    void WriteCreate(ByteBuffer& data, Player const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Player const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

struct PlayerData : public IsUpdateFieldStructureTag, public HasChangesMask<113>
{
    DynamicUpdateField<UF::ChrCustomizationChoice, 0, 1> Customizations;
    DynamicUpdateField<UF::ArenaCooldown, 0, 2> ArenaCooldowns;
    DynamicUpdateField<int32, 0, 3> VisualItemReplacements;
    UpdateField<ObjectGuid, 0, 4> DuelArbiter;
    UpdateField<ObjectGuid, 0, 5> WowAccount;
    UpdateField<ObjectGuid, 0, 6> BnetAccount;
    UpdateField<uint64, 0, 7> GuildClubMemberID;
    UpdateField<ObjectGuid, 0, 8> LootTargetGUID;
    UpdateField<uint32, 0, 9> PlayerFlags;
    UpdateField<uint32, 0, 10> PlayerFlagsEx;
    UpdateField<uint32, 0, 11> GuildRankID;
    UpdateField<uint32, 0, 12> GuildDeleteDate;
    UpdateField<int32, 0, 13> GuildLevel;
    UpdateField<uint8, 0, 14> NumBankSlots;
    UpdateField<uint8, 0, 15> NativeSex;
    UpdateField<uint8, 0, 16> Inebriation;
    UpdateField<uint8, 0, 17> PvpTitle;
    UpdateField<uint8, 0, 18> ArenaFaction;
    UpdateField<uint8, 0, 19> PvpRank;
    UpdateField<int32, 0, 20> Field_88;
    UpdateField<uint32, 0, 21> DuelTeam;
    UpdateField<int32, 0, 22> GuildTimeStamp;
    UpdateField<int32, 0, 23> PlayerTitle;
    UpdateField<int32, 0, 24> FakeInebriation;
    UpdateField<uint32, 0, 25> VirtualPlayerRealm;
    UpdateField<uint32, 0, 26> CurrentSpecID;
    UpdateField<int32, 0, 27> TaxiMountAnimKitID;
    UpdateField<uint8, 0, 28> CurrentBattlePetBreedQuality;
    UpdateField<int32, 0, 29> HonorLevel;
    UpdateField<int64, 0, 30> LogoutTime;
    UpdateField<std::string, 0, 31> Name;
    UpdateField<int32, 32, 33> CurrentBattlePetSpeciesID;
    UpdateField<WorldPackets::MythicPlus::DungeonScoreSummary, 32, 34> DungeonScore;
    OptionalUpdateField<UF::DeclinedNames, 32, 35> DeclinedNames;
    UpdateField<UF::CustomTabardInfo, 32, 36> PersonalTabard;
    UpdateFieldArray<uint8, 2, 37, 38> PartyType;
    UpdateFieldArray<UF::QuestLog, 25, 40, 41> QuestLog;
    UpdateFieldArray<UF::VisibleItem, 19, 66, 67> VisibleItems;
    UpdateFieldArray<float, 6, 86, 87> AvgItemLevel;
    UpdateFieldArray<uint32, 19, 93, 94> Field_3120;

    void WriteCreate(ByteBuffer& data, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags, Player const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags, Player const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, Mask const& changesMask, bool ignoreNestedChangesMask, Player const* owner, Player const* receiver) const;
    static void AppendAllowedFieldsMaskForFlag(Mask& allowedMaskForTarget, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags);
    static void FilterDisallowedFieldsMaskForFlag(Mask& changesMask, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags);
    void ClearChangesMask();
    bool IsQuestLogChangesMaskSkipped() const { return false; } // bandwidth savings aren't worth the cpu time
};

struct SkillInfo : public IsUpdateFieldStructureTag, public HasChangesMask<1793>
{
    UpdateFieldArray<uint16, 256, 0, 1> SkillLineID;
    UpdateFieldArray<uint16, 256, 0, 257> SkillStep;
    UpdateFieldArray<uint16, 256, 0, 513> SkillRank;
    UpdateFieldArray<uint16, 256, 0, 769> SkillStartingRank;
    UpdateFieldArray<uint16, 256, 0, 1025> SkillMaxRank;
    UpdateFieldArray<int16, 256, 0, 1281> SkillTempBonus;
    UpdateFieldArray<uint16, 256, 0, 1537> SkillPermBonus;

    void WriteCreate(ByteBuffer& data, Player const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Player const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

struct RestInfo : public IsUpdateFieldStructureTag, public HasChangesMask<3>
{
    UpdateField<uint32, 0, 1> Threshold;
    UpdateField<uint8, 0, 2> StateID;

    void WriteCreate(ByteBuffer& data, Player const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Player const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

struct PVPInfo : public IsUpdateFieldStructureTag, public HasChangesMask<19>
{
    UpdateField<bool, 0, 1> Disqualified;
    UpdateField<int8, 0, 2> Bracket;
    UpdateField<int32, 0, 3> PvpRatingID;
    UpdateField<uint32, 0, 4> WeeklyPlayed;
    UpdateField<uint32, 0, 5> WeeklyWon;
    UpdateField<uint32, 0, 6> SeasonPlayed;
    UpdateField<uint32, 0, 7> SeasonWon;
    UpdateField<uint32, 0, 8> Rating;
    UpdateField<uint32, 0, 9> WeeklyBestRating;
    UpdateField<uint32, 0, 10> SeasonBestRating;
    UpdateField<uint32, 0, 11> PvpTierID;
    UpdateField<uint32, 0, 12> WeeklyBestWinPvpTierID;
    UpdateField<uint32, 0, 13> Field_28;
    UpdateField<uint32, 0, 14> Field_2C;
    UpdateField<uint32, 0, 15> WeeklyRoundsPlayed;
    UpdateField<uint32, 0, 16> WeeklyRoundsWon;
    UpdateField<uint32, 0, 17> SeasonRoundsPlayed;
    UpdateField<uint32, 0, 18> SeasonRoundsWon;

    void WriteCreate(ByteBuffer& data, Player const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Player const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

struct CharacterRestriction : public IsUpdateFieldStructureTag
{
    int32 Field_0;
    int32 Field_4;
    int32 Field_8;
    uint32 Type;

    void WriteCreate(ByteBuffer& data, Player const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Player const* owner, Player const* receiver) const;
    bool operator==(CharacterRestriction const& right) const;
    bool operator!=(CharacterRestriction const& right) const { return !(*this == right); }
};

struct SpellPctModByLabel : public IsUpdateFieldStructureTag
{
    int32 ModIndex;
    float ModifierValue;
    int32 LabelID;

    void WriteCreate(ByteBuffer& data, Player const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Player const* owner, Player const* receiver) const;
    bool operator==(SpellPctModByLabel const& right) const;
    bool operator!=(SpellPctModByLabel const& right) const { return !(*this == right); }
};

struct SpellFlatModByLabel : public IsUpdateFieldStructureTag
{
    int32 ModIndex;
    int32 ModifierValue;
    int32 LabelID;

    void WriteCreate(ByteBuffer& data, Player const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Player const* owner, Player const* receiver) const;
    bool operator==(SpellFlatModByLabel const& right) const;
    bool operator!=(SpellFlatModByLabel const& right) const { return !(*this == right); }
};

struct CompletedProject : public IsUpdateFieldStructureTag, public HasChangesMask<4>
{
    UpdateField<uint32, 0, 1> ProjectID;
    UpdateField<int64, 0, 2> FirstCompleted;
    UpdateField<uint32, 0, 3> CompletionCount;

    void WriteCreate(ByteBuffer& data, Player const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Player const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

struct ResearchHistory : public IsUpdateFieldStructureTag, public HasChangesMask<2>
{
    DynamicUpdateField<UF::CompletedProject, 0, 1> CompletedProjects;

    void WriteCreate(ByteBuffer& data, Player const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Player const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

struct TraitEntry : public IsUpdateFieldStructureTag
{
    int32 TraitNodeID;
    int32 TraitNodeEntryID;
    int32 Rank;
    int32 GrantedRanks;

    void WriteCreate(ByteBuffer& data, Player const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Player const* owner, Player const* receiver) const;
    bool operator==(TraitEntry const& right) const;
    bool operator!=(TraitEntry const& right) const { return !(*this == right); }
};

struct TraitConfig : public IsUpdateFieldStructureTag, public HasChangesMask<12>
{
    DynamicUpdateField<UF::TraitEntry, 0, 1> Entries;
    UpdateField<int32, 0, 2> ID;
    UpdateField<std::string, 0, 3> Name;
    UpdateField<int32, 4, 5> Type;
    UpdateField<int32, 4, 6> SkillLineID;
    UpdateField<int32, 4, 7> ChrSpecializationID;
    UpdateField<int32, 8, 9> CombatConfigFlags;
    UpdateField<int32, 8, 10> LocalIdentifier;
    UpdateField<int32, 8, 11> TraitSystemID;

    void WriteCreate(ByteBuffer& data, Player const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Player const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

struct CategoryCooldownMod : public IsUpdateFieldStructureTag
{
    int32 SpellCategoryID;
    int32 ModCooldown;

    void WriteCreate(ByteBuffer& data, Player const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Player const* owner, Player const* receiver) const;
    bool operator==(CategoryCooldownMod const& right) const;
    bool operator!=(CategoryCooldownMod const& right) const { return !(*this == right); }
};

struct WeeklySpellUse : public IsUpdateFieldStructureTag
{
    int32 SpellCategoryID;
    uint8 Uses;

    void WriteCreate(ByteBuffer& data, Player const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Player const* owner, Player const* receiver) const;
    bool operator==(WeeklySpellUse const& right) const;
    bool operator!=(WeeklySpellUse const& right) const { return !(*this == right); }
};

struct StablePetInfo : public IsUpdateFieldStructureTag, public HasChangesMask<8>
{
    UpdateField<uint32, 0, 1> PetSlot;
    UpdateField<uint32, 0, 2> PetNumber;
    UpdateField<uint32, 0, 3> CreatureID;
    UpdateField<uint32, 0, 4> DisplayID;
    UpdateField<uint32, 0, 5> ExperienceLevel;
    UpdateField<std::string, 0, 6> Name;
    UpdateField<uint8, 0, 7> PetFlags;

    void WriteCreate(ByteBuffer& data, Player const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Player const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

struct StableInfo : public IsUpdateFieldStructureTag, public HasChangesMask<3>
{
    DynamicUpdateField<UF::StablePetInfo, 0, 1> Pets;
    UpdateField<ObjectGuid, 0, 2> StableMaster;

    void WriteCreate(ByteBuffer& data, Player const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Player const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

struct Research : public IsUpdateFieldStructureTag
{
    int16 ResearchProjectID;

    void WriteCreate(ByteBuffer& data, Player const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Player const* owner, Player const* receiver) const;
    bool operator==(Research const& right) const;
    bool operator!=(Research const& right) const { return !(*this == right); }
};

struct ActivePlayerData : public IsUpdateFieldStructureTag, public HasChangesMask<1369>
{
    UpdateField<bool, 0, 1> SortBagsRightToLeft;
    UpdateField<bool, 0, 2> InsertItemsLeftToRight;
    UpdateFieldArray<DynamicUpdateFieldBase<uint64>, 8, 20, 21> DataFlags;
    UpdateFieldArray<DynamicUpdateFieldBase<uint16>, 1, 22, 23> ResearchSites;
    UpdateFieldArray<DynamicUpdateFieldBase<uint32>, 1, 24, 25> ResearchSiteProgress;
    UpdateFieldArray<DynamicUpdateFieldBase<UF::Research>, 1, 26, 27> Research;
    DynamicUpdateField<uint64, 0, 3> KnownTitles;
    DynamicUpdateField<int32, 0, 4> DailyQuestsCompleted;
    DynamicUpdateField<int32, 0, 5> AvailableQuestLineXQuestIDs;
    DynamicUpdateField<int32, 0, 6> Field_1000;
    DynamicUpdateField<int32, 0, 7> Heirlooms;
    DynamicUpdateField<uint32, 0, 8> HeirloomFlags;
    DynamicUpdateField<int32, 0, 9> Toys;
    DynamicUpdateField<uint32, 0, 10> Transmog;
    DynamicUpdateField<int32, 0, 11> ConditionalTransmog;
    DynamicUpdateField<int32, 0, 12> SelfResSpells;
    DynamicUpdateField<UF::SpellPctModByLabel, 0, 14> SpellPctModByLabel;
    DynamicUpdateField<UF::SpellFlatModByLabel, 0, 15> SpellFlatModByLabel;
    DynamicUpdateField<UF::QuestLog, 0, 16> TaskQuests;
    DynamicUpdateField<UF::CategoryCooldownMod, 0, 18> CategoryCooldownMods;
    DynamicUpdateField<UF::WeeklySpellUse, 0, 19> WeeklySpellUses;
    DynamicUpdateField<UF::CharacterRestriction, 0, 13> CharacterRestrictions;
    DynamicUpdateField<UF::TraitConfig, 0, 17> TraitConfigs;
    UpdateField<ObjectGuid, 0, 28> FarsightObject;
    UpdateField<ObjectGuid, 0, 29> SummonedBattlePetGUID;
    UpdateField<uint64, 0, 30> Coinage;
    UpdateField<int32, 0, 31> XP;
    UpdateField<int32, 0, 32> NextLevelXP;
    UpdateField<int32, 0, 33> TrialXP;
    UpdateField<UF::SkillInfo, 0, 34> Skill;
    UpdateField<int32, 0, 35> CharacterPoints;
    UpdateField<int32, 0, 36> MaxTalentTiers;
    UpdateField<uint32, 0, 37> TrackCreatureMask;
    UpdateField<float, 0, 38> MainhandExpertise;
    UpdateField<float, 0, 39> OffhandExpertise;
    UpdateField<float, 40, 41> RangedExpertise;
    UpdateField<float, 40, 42> CombatRatingExpertise;
    UpdateField<float, 40, 43> BlockPercentage;
    UpdateField<float, 40, 44> DodgePercentage;
    UpdateField<float, 40, 45> DodgePercentageFromAttribute;
    UpdateField<float, 40, 46> ParryPercentage;
    UpdateField<float, 40, 47> ParryPercentageFromAttribute;
    UpdateField<float, 40, 48> CritPercentage;
    UpdateField<float, 40, 49> RangedCritPercentage;
    UpdateField<float, 40, 50> OffhandCritPercentage;
    UpdateField<int32, 40, 51> ShieldBlock;
    UpdateField<float, 40, 52> ShieldBlockCritPercentage;
    UpdateField<float, 40, 53> Mastery;
    UpdateField<float, 40, 54> Speed;
    UpdateField<float, 40, 55> Avoidance;
    UpdateField<float, 40, 56> Sturdiness;
    UpdateField<int32, 40, 57> Versatility;
    UpdateField<float, 40, 58> VersatilityBonus;
    UpdateField<float, 40, 59> PvpPowerDamage;
    UpdateField<float, 40, 60> PvpPowerHealing;
    UpdateField<int32, 40, 61> ModHealingDonePos;
    UpdateField<float, 40, 62> ModHealingPercent;
    UpdateField<float, 40, 63> ModHealingDonePercent;
    UpdateField<float, 40, 64> ModPeriodicHealingDonePercent;
    UpdateField<float, 40, 65> ModSpellPowerPercent;
    UpdateField<float, 40, 66> ModResiliencePercent;
    UpdateField<float, 40, 67> OverrideSpellPowerByAPPercent;
    UpdateField<float, 40, 68> OverrideAPBySpellPowerPercent;
    UpdateField<int32, 40, 69> ModTargetResistance;
    UpdateField<int32, 40, 70> ModTargetPhysicalResistance;
    UpdateField<uint32, 40, 71> LocalFlags;
    UpdateField<uint8, 72, 73> GrantableLevels;
    UpdateField<uint8, 72, 74> MultiActionBars;
    UpdateField<uint8, 72, 75> LifetimeMaxRank;
    UpdateField<uint8, 72, 76> NumRespecs;
    UpdateField<int32, 72, 77> AmmoID;
    UpdateField<uint32, 72, 78> PvpMedals;
    UpdateField<uint16, 72, 79> TodayHonorableKills;
    UpdateField<uint16, 72, 80> TodayDishonorableKills;
    UpdateField<uint16, 72, 81> YesterdayHonorableKills;
    UpdateField<uint16, 72, 82> YesterdayDishonorableKills;
    UpdateField<uint16, 72, 83> LastWeekHonorableKills;
    UpdateField<uint16, 72, 84> LastWeekDishonorableKills;
    UpdateField<uint16, 72, 85> ThisWeekHonorableKills;
    UpdateField<uint16, 72, 86> ThisWeekDishonorableKills;
    UpdateField<uint32, 72, 87> ThisWeekContribution;
    UpdateField<uint32, 72, 88> LifetimeHonorableKills;
    UpdateField<uint32, 72, 89> LifetimeDishonorableKills;
    UpdateField<uint32, 72, 90> Field_F24;
    UpdateField<uint32, 72, 91> YesterdayContribution;
    UpdateField<uint32, 72, 92> LastWeekContribution;
    UpdateField<uint32, 72, 93> LastWeekRank;
    UpdateField<int32, 72, 94> WatchedFactionIndex;
    UpdateField<int32, 72, 95> MaxLevel;
    UpdateField<int32, 72, 96> ScalingPlayerLevelDelta;
    UpdateField<int32, 72, 97> MaxCreatureScalingLevel;
    UpdateField<int32, 72, 98> PetSpellPower;
    UpdateField<float, 72, 99> UiHitModifier;
    UpdateField<float, 72, 100> UiSpellHitModifier;
    UpdateField<int32, 72, 101> HomeRealmTimeOffset;
    UpdateField<float, 72, 102> ModPetHaste;
    UpdateField<uint8, 72, 103> LocalRegenFlags;
    UpdateField<uint8, 104, 105> AuraVision;
    UpdateField<uint8, 104, 106> NumBackpackSlots;
    UpdateField<int32, 104, 107> OverrideSpellsID;
    UpdateField<int32, 104, 108> LfgBonusFactionID;
    UpdateField<uint16, 104, 109> LootSpecID;
    UpdateField<uint32, 104, 110> OverrideZonePVPType;
    UpdateField<int32, 104, 111> Honor;
    UpdateField<int32, 104, 112> HonorNextLevel;
    UpdateField<int32, 104, 113> Field_F74;
    UpdateField<int32, 104, 114> PvpTierMaxFromWins;
    UpdateField<int32, 104, 115> PvpLastWeeksTierMaxFromWins;
    UpdateField<uint8, 104, 116> PvpRankProgress;
    UpdateField<int32, 104, 117> PerksProgramCurrency;
    UpdateField<UF::ResearchHistory, 104, 118> ResearchHistory;
    UpdateField<WorldPackets::PerksProgram::PerksVendorItem, 104, 119> FrozenPerksVendorItem;
    UpdateField<int32, 104, 120> TransportServerTime;
    UpdateField<uint32, 104, 121> ActiveCombatTraitConfigID;
    UpdateField<uint8, 104, 122> GlyphsEnabled;
    UpdateField<uint8, 104, 123> LfgRoles;
    OptionalUpdateField<UF::StableInfo, 104, 124> PetStable;
    UpdateField<uint8, 104, 125> NumStableSlots;
    UpdateFieldArray<ObjectGuid, 141, 126, 127> InvSlots;
    UpdateFieldArray<uint32, 2, 268, 269> TrackResourceMask;
    UpdateFieldArray<float, 7, 271, 272> SpellCritPercentage;
    UpdateFieldArray<int32, 7, 271, 279> ModDamageDonePos;
    UpdateFieldArray<int32, 7, 271, 286> ModDamageDoneNeg;
    UpdateFieldArray<float, 7, 271, 293> ModDamageDonePercent;
    UpdateFieldArray<UF::RestInfo, 2, 300, 301> RestInfo;
    UpdateFieldArray<float, 3, 303, 304> WeaponDmgMultipliers;
    UpdateFieldArray<float, 3, 303, 307> WeaponAtkSpeedMultipliers;
    UpdateFieldArray<uint32, 12, 310, 311> BuybackPrice;
    UpdateFieldArray<int64, 12, 310, 323> BuybackTimestamp;
    UpdateFieldArray<int32, 32, 335, 336> CombatRatings;
    UpdateFieldArray<UF::PVPInfo, 9, 368, 369> PvpInfo;
    UpdateFieldArray<uint32, 4, 378, 379> NoReagentCostMask;
    UpdateFieldArray<int32, 2, 383, 384> ProfessionSkillLine;
    UpdateFieldArray<uint32, 4, 386, 387> BagSlotFlags;
    UpdateFieldArray<uint32, 7, 391, 392> BankBagSlotFlags;
    UpdateFieldArray<uint64, 950, 399, 400> QuestCompleted;
    UpdateFieldArray<uint32, 9, 1350, 1351> GlyphSlots;
    UpdateFieldArray<uint32, 9, 1350, 1360> Glyphs;

    void WriteCreate(ByteBuffer& data, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags, Player const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags, Player const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, Mask const& changesMask, bool ignoreNestedChangesMask, Player const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

struct GameObjectData : public IsUpdateFieldStructureTag, public HasChangesMask<20>
{
    UpdateField<std::vector<uint32>, 0, 1> StateWorldEffectIDs;
    DynamicUpdateField<int32, 0, 2> EnableDoodadSets;
    DynamicUpdateField<int32, 0, 3> WorldEffects;
    UpdateField<int32, 0, 4> DisplayID;
    UpdateField<uint32, 0, 5> SpellVisualID;
    UpdateField<uint32, 0, 6> StateSpellVisualID;
    UpdateField<uint32, 0, 7> SpawnTrackingStateAnimID;
    UpdateField<uint32, 0, 8> SpawnTrackingStateAnimKitID;
    UpdateField<ObjectGuid, 0, 9> CreatedBy;
    UpdateField<ObjectGuid, 0, 10> GuildGUID;
    UpdateField<uint32, 0, 11> Flags;
    struct FlagsTag : ViewerDependentValueTag<uint32> {};
    UpdateField<QuaternionData, 0, 12> ParentRotation;
    UpdateField<int32, 0, 13> FactionTemplate;
    UpdateField<int32, 0, 14> Level;
    UpdateField<int8, 0, 15> State;
    struct StateTag : ViewerDependentValueTag<int8> {};
    UpdateField<int8, 0, 16> TypeID;
    UpdateField<uint8, 0, 17> PercentHealth;
    UpdateField<uint32, 0, 18> ArtKit;
    UpdateField<uint32, 0, 19> CustomParam;

    void WriteCreate(ByteBuffer& data, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags, GameObject const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags, GameObject const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, Mask const& changesMask, bool ignoreNestedChangesMask, GameObject const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

struct DynamicObjectData : public IsUpdateFieldStructureTag, public HasChangesMask<7>
{
    UpdateField<ObjectGuid, 0, 1> Caster;
    UpdateField<uint8, 0, 2> Type;
    UpdateField<int32, 0, 3> SpellXSpellVisualID;
    UpdateField<int32, 0, 4> SpellID;
    UpdateField<float, 0, 5> Radius;
    UpdateField<uint32, 0, 6> CastTime;

    void WriteCreate(ByteBuffer& data, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags, DynamicObject const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags, DynamicObject const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, Mask const& changesMask, bool ignoreNestedChangesMask, DynamicObject const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

struct CorpseData : public IsUpdateFieldStructureTag, public HasChangesMask<32>
{
    DynamicUpdateField<UF::ChrCustomizationChoice, 0, 1> Customizations;
    UpdateField<uint32, 0, 2> DynamicFlags;
    UpdateField<ObjectGuid, 0, 3> Owner;
    UpdateField<ObjectGuid, 0, 4> PartyGUID;
    UpdateField<ObjectGuid, 0, 5> GuildGUID;
    UpdateField<uint32, 0, 6> DisplayID;
    UpdateField<uint8, 0, 7> RaceID;
    UpdateField<uint8, 0, 8> Sex;
    UpdateField<uint8, 0, 9> Class;
    UpdateField<uint32, 0, 10> Flags;
    UpdateField<int32, 0, 11> FactionTemplate;
    UpdateFieldArray<uint32, 19, 12, 13> Items;

    void WriteCreate(ByteBuffer& data, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags, Corpse const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags, Corpse const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, Mask const& changesMask, bool ignoreNestedChangesMask, Corpse const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

struct ScaleCurve : public IsUpdateFieldStructureTag, public HasChangesMask<7>
{
    UpdateField<bool, 0, 1> OverrideActive;
    UpdateField<uint32, 0, 2> StartTimeOffset;
    UpdateField<uint32, 0, 3> ParameterCurve;
    UpdateFieldArray<TaggedPosition<Position::XY>, 2, 4, 5> Points;

    void WriteCreate(ByteBuffer& data, AreaTrigger const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, AreaTrigger const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

struct VisualAnim : public IsUpdateFieldStructureTag, public HasChangesMask<5>
{
    UpdateField<bool, 0, 1> Field_C;
    UpdateField<uint32, 0, 2> AnimationDataID;
    UpdateField<uint32, 0, 3> AnimKitID;
    UpdateField<uint32, 0, 4> AnimProgress;

    void WriteCreate(ByteBuffer& data, AreaTrigger const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, AreaTrigger const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

struct AreaTriggerData : public IsUpdateFieldStructureTag, public HasChangesMask<20>
{
    UpdateField<UF::ScaleCurve, 0, 1> OverrideScaleCurve;
    UpdateField<UF::ScaleCurve, 0, 2> ExtraScaleCurve;
    UpdateField<UF::ScaleCurve, 0, 3> OverrideMoveCurveX;
    UpdateField<UF::ScaleCurve, 0, 4> OverrideMoveCurveY;
    UpdateField<UF::ScaleCurve, 0, 5> OverrideMoveCurveZ;
    UpdateField<ObjectGuid, 0, 6> Caster;
    UpdateField<uint32, 0, 7> Duration;
    UpdateField<uint32, 0, 8> TimeToTarget;
    UpdateField<uint32, 0, 9> TimeToTargetScale;
    UpdateField<uint32, 0, 10> TimeToTargetExtraScale;
    UpdateField<uint32, 0, 11> TimeToTargetPos;                                 // Linked to m_overrideMoveCurve
    UpdateField<int32, 0, 12> SpellID;
    UpdateField<int32, 0, 13> SpellForVisuals;
    UpdateField<int32, 0, 14> SpellXSpellVisualID;
    UpdateField<float, 0, 15> BoundsRadius2D;
    UpdateField<uint32, 0, 16> DecalPropertiesID;
    UpdateField<ObjectGuid, 0, 17> CreatingEffectGUID;
    UpdateField<ObjectGuid, 0, 18> OrbitPathTarget;
    UpdateField<UF::VisualAnim, 0, 19> VisualAnim;

    void WriteCreate(ByteBuffer& data, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags, AreaTrigger const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags, AreaTrigger const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, Mask const& changesMask, bool ignoreNestedChangesMask, AreaTrigger const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

struct SceneObjectData : public IsUpdateFieldStructureTag, public HasChangesMask<5>
{
    UpdateField<int32, 0, 1> ScriptPackageID;
    UpdateField<uint32, 0, 2> RndSeedVal;
    UpdateField<ObjectGuid, 0, 3> CreatedBy;
    UpdateField<uint32, 0, 4> SceneType;

    void WriteCreate(ByteBuffer& data, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags, Object const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags, Object const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, Mask const& changesMask, bool ignoreNestedChangesMask, Object const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

struct ConversationLine : public IsUpdateFieldStructureTag
{
    int32 ConversationLineID;
    int32 BroadcastTextID;
    uint32 StartTime;
    struct StartTimeTag : ViewerDependentValueTag<uint32> {};
    int32 UiCameraID;
    uint8 ActorIndex;
    uint8 Flags;

    void WriteCreate(ByteBuffer& data, Conversation const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Conversation const* owner, Player const* receiver) const;
    bool operator==(ConversationLine const& right) const;
    bool operator!=(ConversationLine const& right) const { return !(*this == right); }
};

struct ConversationActor : public IsUpdateFieldStructureTag
{
    uint32 Type;
    int32 Id;
    uint32 CreatureID;
    uint32 CreatureDisplayInfoID;
    ObjectGuid ActorGUID;

    void WriteCreate(ByteBuffer& data, Conversation const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Conversation const* owner, Player const* receiver) const;
    bool operator==(ConversationActor const& right) const;
    bool operator!=(ConversationActor const& right) const { return !(*this == right); }
};

struct ConversationData : public IsUpdateFieldStructureTag, public HasChangesMask<4>
{
    UpdateField<std::vector<UF::ConversationLine>, 0, 1> Lines;
    DynamicUpdateField<UF::ConversationActor, 0, 2> Actors;
    UpdateField<int32, 0, 3> LastLineEndTime;
    struct LastLineEndTimeTag : ViewerDependentValueTag<int32> {};

    void WriteCreate(ByteBuffer& data, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags, Conversation const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags, Conversation const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, Mask const& changesMask, bool ignoreNestedChangesMask, Conversation const* owner, Player const* receiver) const;
    void ClearChangesMask();
};
}

#endif // UpdateFields_h__
