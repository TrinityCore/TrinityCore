
MACRO(FIND_CPPDB)
IF (CPPDB_INCLUDE_DIR)
  # Already in cache, be silent
  SET(CPPDB_FIND_QUIETLY TRUE)
ENDIF (CPPDB_INCLUDE_DIR)

SET(CPPDB_INCLUDE_DIR /usr/local/include/cppdb)
#FIND_PATH(CPPDB_INCLUDE_DIR cppdb/frontend.h
#  /usr/local/include/cppdb
#)

#SET(PGSQL_NAMES pq libpq)
#SET(PGSQL_SEARCH_LIB_PATHS
#  ${PGSQL_SEARCH_LIB_PATHS}
#  /usr/local/pgsql/lib
#  /usr/local/lib
#  /usr/lib
#)
#FIND_LIBRARY(PGSQL_LIBRARY
#  NAMES ${PGSQL_NAMES}
#  PATHS ${PGSQL_SEARCH_LIB_PATHS}
#)
SET(CPPDB_LIBRARY /usr/local/lib/libcppdb.a)

IF (CPPDB_INCLUDE_DIR AND CPPDB_LIBRARY)
  SET(CPPDB_FOUND TRUE)
  SET( CPPDB_LIBRARIES ${CPPDB_LIBRARY} )
ELSE (CPPDB_INCLUDE_DIR AND CPPDB_LIBRARY)
  SET(CPPDB_FOUND FALSE)
  SET( CPPDB_LIBRARIES )
ENDIF (CPPDB_INCLUDE_DIR AND CPPDB_LIBRARY)

IF (CPPDB_FOUND)
  IF (NOT CPPDB_FIND_QUIETLY)
    MESSAGE(STATUS "Found CppDB: ${CPPDB_LIBRARY} and H: ${CPPDB_INCLUDE_DIR}")
  ENDIF (NOT CPPDB_FIND_QUIETLY)
ELSE (PGSQL_FOUND)
  IF (CPPDB_FIND_REQUIRED)
    MESSAGE(STATUS "Looked for CppDB libraries.")
    MESSAGE(FATAL_ERROR "Could NOT find CppDB library")
  ENDIF (CPPDB_FIND_REQUIRED)
ENDIF (CPPDB_FOUND)

MARK_AS_ADVANCED(
  CPPDB_LIBRARY
  CPPDB_INCLUDE_DIR
)
ENDMACRO(FIND_CPPDB)

MESSAGE("-- Check CppDB")
FIND_CPPDB()
ADD_DEFINITIONS(-DDO_CPPDB)


